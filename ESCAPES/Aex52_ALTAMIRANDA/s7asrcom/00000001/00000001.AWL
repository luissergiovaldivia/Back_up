TYPE "LIEN_PUP"
TITLE =Information created by BF_Zone_mode_IHM
//Information générée par BF_Zone_mode_IHM
{ S7_language := '12(1) Français (France)  08.03.2010  11:11:00' }
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'ZMOD_IHM'
VERSION : 1.1
  STRUCT
    Z_mpapp : BOOL;	//Step by step in Automatic Mode / en Auto mode Pas A Pas
    Z_mrocp : BOOL;	//Back to home position in automatic Mode / en Auto mode Retour Origine de Cycle
    Z_mnorm : BOOL;	//Normal Mode / Mode Normal
    Z_mvid : BOOL;	//Emptying Mode / Mode Vidage
    Z_mapv : BOOL;	//Stop with Empty gripper mode / Mode Arret Prehension Vide
    Icl : BOOL;	//Clock memory information / Information CLignoteur
    Itlp : BOOL;	//Lamp test button / Bouton Test Lampes
    Z_idapp : BOOL;	//Learning Mode / Demande Apprentissage
    Z_ir : BOOL;	//Zone Reset information / Info Rearmement Zone
    Z_iadf : BOOL;	//Zone Fault Reset information / Info Annulation DeFaut Zone
    Mafj : BOOL;	//End of production Memory / Memoire Arret Fin Journee
    Dmaitre : BOOL;	//Master Fault / Defaut MAITRE
    Z_mauto : BOOL;	//Automatic Mode / mode de marche Automatique
    Z_manup : BOOL;	//Manual Mode / mode de marche Manuel
    Z_macy : BOOL;	//Cycle stop request Memory / Memoire demande d'Arret Cycle
    Z_ida : BOOL;	//Stop request information / Info Demande D'arret
  END_STRUCT ;
END_TYPE

TYPE "LIEN_ILOT"
TITLE =Management facility information
//Generated by BF_ILOT
//used by BF_ZONE_MODE_IHM
{ S7_language := '12(1) Français (France)  04.03.2008  15:32:00' }
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'ILOT'
VERSION : 1.1
  STRUCT
    X8 : BOOL;	//not used / non utilise
    X9 : BOOL;	//not used / non utilise
    X10 : BOOL;	//not used / non utilise
    X11 : BOOL;	//not used / non utilise
    X12 : BOOL;	//not used / non utilise
    ICL : BOOL;	//Clock memory information / Information de CLignotement
    ITLG : BOOL;	//Global Test lamp information / Information de Test Lampes General
    DMAITRE : BOOL;	//Master fault / Defaut MAITRE
    IR : BOOL;	//Facility reset information / information de Rearmement Ilot
    IADF : BOOL;	//Facility fault reset information / Information d'Annulation de DeFaut ilot
    MAFJ : BOOL;	//End of production Memory / Memoire Arret Fin de Journee
    X3 : BOOL;	//not used / non utilise
    X4 : BOOL;	//not used / non utilise
    X5 : BOOL;	//not used / non utilise
    X6 : BOOL;	//not used / non utilise
    X7 : BOOL;	//not used / non utilise
  END_STRUCT ;
END_TYPE

TYPE "MOT_FONC_MP"
TITLE =UDT used as input for movement multiposition BF
//UDT utilisée en entrée des BF mouvements Multi_positions
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'MOUVMP1'
VERSION : 2.1
  STRUCT
    X8 : BOOL;	//Reserved / reserve pour utilisation future
    X9 : BOOL;	//Reserved / reserve pour utilisation future
    X10 : BOOL;	//Reserved / reserve pour utilisation future
    X11 : BOOL;	//Reserved / reserve pour utilisation future
    X12 : BOOL;	//Reserved / reserve pour utilisation future
    X13 : BOOL;	//Reserved / reserve pour utilisation future
    X14 : BOOL;	//Reserved / reserve pour utilisation future
    X15 : BOOL;	//Can Be used for function Fault / utilisable comme indicateur de defaut fonction
    X0 : BOOL;	//Reserved / reserve pour utilisation future
    SP : BOOL;	//To X Position movement Security / Securite mouvement vers Position X
    AP : BOOL;	//TO X Position movement Authorization / Autorisation mouvment vers Position X
    OP : BOOL;	//Position Order / Ordre Position
    IP : BOOL;	//Position information (detector) / Information Position pour mouvement
    X5 : BOOL;	//Reserved / reserve pour utilisation future
    SL : BOOL;	//Movement function SeLection / SeLection fonction pour mouvement
    BIM : BOOL;	//Operation with 2-hand control / Fonctionnement avec commande BIM
  END_STRUCT ;
END_TYPE

TYPE "MOT_FONC"
TITLE =UDT used as input for 2 positions movement BF and Robot Gripper
//UDT pour BF mouvement à 2 positions et préhenseur Robot
{ S7_language := '12(1) Français (France)  30.10.2008  15:30:17' }
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'Mxxx2P1'
VERSION : 2.1
  STRUCT
    X8 : BOOL;	//Reserved / reserve pour utilisation future
    SR : BOOL;	//Return Movement Security / Securite Recul
    AR : BOOL;	//Return Movement Authorization / Autorisation Recul
    OR : BOOL;	//Return Order / Ordre de Recul
    IR : BOOL;	//Return information (detector) / Information Recul
    VR : BOOL;	//Special Return Movement lamp / Voyant particulier de Recul
    X14 : BOOL;	//Reserved / reserve pour utilisation future
    X15 : BOOL;	//Can Be used for function Fault / utilisable comme indicateur de defaut fonction
    X0 : BOOL;	//Reserved / reserve pour utilisation future
    SA : BOOL;	//Advance Movement Security / Securite Avance
    AA : BOOL;	//Advance Movement Authorization / Autorisation Avance
    OA : BOOL;	//Advance Order / Ordre d'Avance
    IA : BOOL;	//Advance information (detector) / Information Avance
    VA : BOOL;	//Special Advance Movement lamp / Voyant particulier d'Avance
    SL : BOOL;	//Function selection / Selection fonction
    BIM : BOOL;	//Operation with 2-hand control / Fonctionnement avec commande BIM
  END_STRUCT ;
END_TYPE

TYPE "MOT_FONC_NC"
TITLE =INFO CONTROL FOR NC_LOCATOR / MOT FONCTION BF_LOCATOR
AUTHOR : RENAULT
NAME : 'Locator'
VERSION : 2.0
  STRUCT
    SECUAXE1 : BOOL;	//AXIS 1 MOVEMENT SAFETY / SECURITE MOUVEMENT AXE 1
    SECUAXE2 : BOOL;	//AXIS 2 MOVEMENT SAFETY / SECURITE MOUVEMENT AXE 2
    SECUAXE3 : BOOL;	//AXIS 3 MOVEMENT SAFETY / SECURITE MOUVEMENT AXE 3
    SECUAXE4 : BOOL;	//AXIS 4 MOVEMENT SAFETY / SECURITE MOUVEMENT AXE 4
    SECUAXE5 : BOOL;	//AXIS 5 MOVEMENT SAFETY / SECURITE MOUVEMENT AXE 5
    SECUAXE6 : BOOL;	//AXIS 6 MOVEMENT SAFETY / SECURITE MOUVEMENT AXE 6
    AR : BOOL;	//RETURN AUTORIZATION / AUTORISATION DE RECUL
    AA : BOOL;	//ADVANCE AUTORIZATION / AUTORISATION D AVANCE
    X0 : BOOL;	//RESERVED FOR FUTURE UPDATE / RESERVE POUR UTILISATION FUTURE
    X1 : BOOL;	//RESERVED FOR FUTURE UPDATE / RESERVE POUR UTILISATION FUTURE
    X2 : BOOL;	//RESERVED FOR FUTURE UPDATE / RESERVE POUR UTILISATION FUTURE
    X3 : BOOL;	//RESERVED FOR FUTURE UPDATE / RESERVE POUR UTILISATION FUTURE
    X4 : BOOL;	//RESERVED FOR FUTURE UPDATE / RESERVE POUR UTILISATION FUTURE
    MVT_SL : BOOL;	//MOVEMENT FUNCTION SELECTION / FONCTION MOUVEMENT LOCATOR
    GP_SL : BOOL;	//GROUP MOVEMENT FUNCTION SELECTION / SELECTION FONCTION MOUVEMENT GROUPE
    BIM : BOOL;	//OPERATION WITH 2-HAND CONTROL / FONCTIONNEMENT AVEC COMMANDE BIM
  END_STRUCT ;
END_TYPE

DATA_BLOCK "IIT"
TITLE =FACILITY: PART WORD TABLE
NAME : 'IIT'
VERSION : 1.0
STRUCT
  A0 : STRUCT	//PART WORD A0
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  A0_TT : STRUCT	//WORK TABLE A0
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  A01 : STRUCT	//PART WORD A01
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  A01_TT : STRUCT	//WORK TABLE A01
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  A02 : STRUCT	//PART WORD A02
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  A02_TT : STRUCT	//WORK TABLE A02
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  B01 : STRUCT	//PART WORD B01
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  B01_TT : STRUCT	//WORK TABLE B01
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  B02 : STRUCT	//PART WORD B02
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  B02_TT : STRUCT	//WORK TABLE B02
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  C01 : STRUCT	//PART WORD C01
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  C01_TT : STRUCT	//WORK TABLE C01
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  C02 : STRUCT	//PART WORD C02
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  C02_TT : STRUCT	//WORK TABLE C02
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  D01 : STRUCT	//PART WORD D01
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  D01_TT : STRUCT	//WORK TABLE D01
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  E0 : STRUCT	//PART WORD E0
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  E0_TT : STRUCT	//WORK TABLE E0
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  F01 : STRUCT	//PART WORD F01
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  F01_TT : STRUCT	//WORK TABLE F01
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  F9 : STRUCT	//PART WORD F9
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  F9_TT : STRUCT	//WORK TABLE F9
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  G0 : STRUCT	//PART WORD G0
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  G0_TT : STRUCT	//WORK TABLE G0
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  H01 : STRUCT	//PART WORD H01
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  H01_TT : STRUCT	//WORK TABLE H01
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  T0C : STRUCT	//PART WORD T0C
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  T0C_TT : STRUCT	//WORK TABLE T0C
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  T0D : STRUCT	//PART WORD T0D
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  T0D_TT : STRUCT	//WORK TABLE T0D
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  U01 : STRUCT	//PART WORD U01
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  U01_TT : STRUCT	//WORK TABLE U01
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  U02 : STRUCT	//PART WORD U02
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  U02_TT : STRUCT	//WORK TABLE U02
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  U9 : STRUCT	//PART WORD U9
    MS : STRUCT	//SUPPORT WORD / MOT SUPPORT
      MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
      MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
      MSEBD : BOOL;	//WRITING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE BASE DE DONNEE
      MSMBD : BOOL;	//MODIFICATION DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT MODIF BASE DE DONNEE
      MSLBD : BOOL;	//READING DATABASE SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE BASE DE DONNEE
      MSAP : BOOL;	//PASSAGE AUTHORIZATION SUPPORT MEMORY / MEMOIRE SUPPORT AUTORISATION DE PASSAGE
      MRCPF : BOOL;	//PART TO DO PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS A FAIRE
      MRCPS : BOOL;	//NEXT PART PROCESS CODE SEARCH MEMORY / MEMOIRE RECH CODES PROCESS SUIVANT
      MSLRFID : BOOL;	//READING RFID SUPPORT MEMORY / MEMOIRE SUPPORT LECTURE RFID
      MSERFID : BOOL;	//WRITING RFID SUPPORT MEMORY / MEMOIRE SUPPORT ECRITURE RFID
      RES1 : BOOL;	//SPARE / RESERVE
      RES2 : BOOL;	//SPARE / RESERVE
      RES3 : BOOL;	//SPARE / RESERVE
      RES4 : BOOL;	//SPARE / RESERVE
      RES5 : BOOL;	//SPARE / RESERVE
      RES6 : BOOL;	//SPARE / RESERVE
    END_STRUCT ;
    MP : STRUCT	//PART MEMORY / MOT PIECE
      MPP : BOOL;	//PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE
      MPAT : BOOL;	//PART WITH WORK MEMORY / MEMOIRE PIECE A TRAVAILLER
      MPST : BOOL;	//PART WITHOUT WORK MEMORY / MEMOIRE PIECE SANS TRAVAIL
      MPAM : BOOL;	//PART MEMORY TO MATCH / MEMOIRE PIECE A MARIER
      MPAE : BOOL;	//PART MEMORY TO EVACUATE / MEMOIRE PIECE A EVACUER
      MPP1 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP2 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP3 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP4 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP5 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP6 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP7 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPP8 : BOOL;	//INTERMEDIATE PRESENT PART MEMORY / MEMOIRE PIECE PRESENTE INTERMEDIAIRE
      MPT : BOOL;	//PART COMPLETE MEMORY / MEMOIRE PIECE TRAVAILLE
      MPLNOK : BOOL;	//LAUCHING PART MEMORY NOK / MEMOIRE LANCEMENT PIECE NON OK
      MPLNOR : BOOL;	//LAUCHING PART MEMORY OK / MEMOIRE LANCEMENT PIECE OK
    END_STRUCT ;
    NSUP : INT;	//SUPPORT NUMBER / NUMERO DE SUPPORT
    NFILM : INT;	//FILM NUMBER / NUMERO DE FILM
    NORDRE : INT;	//ORDER NUMBER / NUMERO D ORDRE
    CRAPI : STRUCT	//PLC DISPATCHING REASON / CAUSE ROUTAGE API
      B8 : BOOL;
      B9 : BOOL;
      B10 : BOOL;
      B11 : BOOL;
      B12 : BOOL;
      B13 : BOOL;
      B14 : BOOL;
      B15 : BOOL;
      B0 : BOOL;
      B1 : BOOL;
      B2 : BOOL;
      RARET : BOOL;	//PIECE ANALYSE - RETOUCHE
      B4 : BOOL;
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    MGEST : STRUCT	//MOT DE GESTION RECALAGE
      MPFNOR : BOOL;	//MEMOIRE PIECE FLUX NORMAL
      MPSTC : BOOL;	//MEMOIRE PIECE A SORTIR TOUS CAS
      MPSOR : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE SIPTOL BONNE)
      MPSSU : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE BONNE)
      MPSDI : BOOL;	//MEMOIRE PIECE A SORTIR (DISCORDANCE)
      MPSSUL : BOOL;	//MEMOIRE PIECE A SORTIR (SUBTITUTION PIECE LOUPEE)
      MPSL : BOOL;	//MEMOIRE PIECE A SORTIR (SORTIE LOUPEE)
      MPSF99 : BOOL;	//MEMOIRE PIECE A SORTIR (MAP FILM 99)
      MPETC : BOOL;	//MEMOIRE PIECE A ENTRER TOUTS CAS
      MPEOR : BOOL;	//MEMOIRE PIECE EN ENTREE (DEMANDE SIPTOL)
      MPESUB : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE BONNE)
      MPEDI : BOOL;	//MEMOIRE PIECE EN ENTREE (DISCORDANCE)
      MPESUL : BOOL;	//MEMOIRE PIECE EN ENTREE (SUBTITUTION PIECE LOUPEE)
      MPOCV : BOOL;	//MEMOIRE PIECE A SORTIR VEHICULE ANNULE + CROCHET VIDE
      MESUTC : BOOL;	//MEMOIRE EN ENTREE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
      MSSUTC : BOOL;	//MEMOIRE SORTIE SUBSTITUTION TOUS CAS (PIECE BONNE OU MAUVAISE)
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
  U9_TT : STRUCT	//WORK TABLE U9
    MFT : STRUCT	//END OF WORK MEMORY
      MFT1 : BOOL;	//END OF WORK MEMORY 1 - SPARE
      MFT2 : BOOL;	//END OF WORK MEMORY 2 - SPARE
      MFT3 : BOOL;	//END OF WORK MEMORY 3 - SPARE
      MFT4 : BOOL;	//END OF WORK MEMORY 4 - SPARE
      MFT5 : BOOL;	//END OF WORK MEMORY 5 - SPARE
      MFT6 : BOOL;	//END OF WORK MEMORY 6 - SPARE
      MFT7 : BOOL;	//END OF WORK MEMORY 7 - SPARE
      MFT8 : BOOL;	//END OF WORK MEMORY 8 - SPARE
      MFT9 : BOOL;	//END OF WORK MEMORY 9 - SPARE
      MFT10 : BOOL;	//END OF WORK MEMORY 10 - SPARE
      MFT11 : BOOL;	//END OF WORK MEMORY 11 - SPARE
      MFT12 : BOOL;	//END OF WORK MEMORY 12 - SPARE
      MFT13 : BOOL;	//END OF WORK MEMORY 13 - SPARE
      MFT14 : BOOL;	//END OF WORK MEMORY 14 - SPARE
      MFT15 : BOOL;	//END OF WORK MEMORY 15 - SPARE
      MFT16 : BOOL;	//END OF WORK MEMORY 16 - SPARE
    END_STRUCT ;
    SPARE : ARRAY  [1 .. 13 ] OF INT;	//SPARE
  END_STRUCT ;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "IG"
TITLE =FACILITY: GLOBAL DB
NAME : 'IG'
VERSION : 0.1
STRUCT
  VALEUR0 : BYTE;	//BYTE ALWAYS OFF (SFC20) / OCTET TOUJOURS A 0
  LIEN_ILOT : LIEN_ILOT;	//FACILITY LINK / LIEN ILOT
  DEF_MAJ : BOOL;	//FACILITY: MAJOR FAULT / ILOT DEFAUT MAJEUR
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "SIP1"
TITLE =RECEPTION DB FOR SIPTOL DATA
NAME : 'SIP1'
VERSION : 0.1
STRUCT
  A0L_ECH : STRUCT	//A0 : TABLE D'ECHANGE POINT DE LANCEMENT SIPTOL
    VALAPI : INT;	//PLC VALIDATION / VALIDATION API "DEBUT DE TRAME SIPTOL"
    ETFLUX : INT;	//FLOW STATE / ETAT FLUX
    DINJ : INT;	//INJECTION REQUEST / DEMANDE D'INJECTION
    DSORT : INT;	//EJECTION REQUEST / DEMANDE DE SORTIE
    ORGFLUX : INT;	//FLOW ORIGIN / ORIGINE FLUX
    ORTFLUX : INT;	//FLOW DISPATCHING / ORIENTATION FLUX (RESERVE)
    CVAL2 : INT;	//VAL=2 REASON /  CAUSE VALIDATION A 2
    R1 : INT;	//SPARE / RESERVE
    R2 : INT;	//SPARE / RESERVE
    R3 : INT;	//SPARE / RESERVE
    DVEH : STRUCT	//DEFINITION VEHICULE
      NSUP : INT;	//SUPPORT NUMBER / N° DE SUPPORT
      FSUP : INT;	//SUPPORT FAMILY / FAMILLE SUPPORT
      R_FSUP : INT;	//SPARE / RESERVE POUR FAMILLE SUPPORT
      DESFI : INT;	//FINAL DISPATCH / DESTINATION FINALE
      CSFI : INT;	//FINAL EJECTION REASON / CAUSE SORTIE FINALE
      RCAL : INT;	//CALCULATOR DISPATCHING / ROUTAGE CALCULATEUR
      R_RCAL : INT;	//SPARE / RESERVE ROUTAGE CALCULATEUR
      FILM : INT;	//SEQUENCE / FILM
      NORDRE : INT;	//MANUFACTURING NUMBER / N° ORDRE DE FABRICATION
      PROG : INT;	//PROGRAM / PROGRAMME (SEMAINE DE MISE EN FABRICATION CAISSE)
      JOUR : INT;	//DAY / JOUR (NUMERO DU JOUR DE LA SEMAINE (1A7)DE MISE EN FAB CAISSE)
      IDENT : INT;	//ID / IDENTIFICATION (NUMERO DE LA CAISSE MISE EN FABRICATION ( 0 A 9999)
      CLIENT : INT;	//SPARE / RESERVE N° CLIENT
      NP : INT;	//PART NUMBER / NUMERO PIECE
      R4 : INT;	//SPARE / RESERVE
      FAMPH : INT;	//FAMILY - PHASE / FAMILLE - PHASE
      MODELE : INT;	//BODY KIND / MODELE DE CAISSE
      DIV1 : INT;	//DIVERSITY 1 / DIVERSITE 1
      DIV2 : INT;	//DIVERSITY 2 / DIVERSITE 2
      DIV3 : INT;	//DIVERSITY 3 / DIVERSITE 3
      DIV4 : INT;	//DIVERSITY 4 / DIVERSITE 4
      DIV5 : INT;	//DIVERSITY 5 / DIVERSITE 5
      DIV6 : INT;	//DIVERSITY 6 / DIVERSITE 6
      DIV7 : INT;	//DIVERSITY 7 / DIVERSITE 7
      DIV8 : INT;	//DIVERSITY 8 / DIVERSITE 8
      DIV9 : INT;	//DIVERSITY 9 / DIVERSITE 9
      DIV10 : INT;	//DIVERSITY 10 / DIVERSITE 10
      DIV11 : INT;	//DIVERSITY 11 / DIVERSITE 11
      DIV12 : INT;	//DIVERSITY 12 / DIVERSITE 12
      DIV13 : INT;	//DIVERSITY 13 / DIVERSITE 13
      DIV14 : INT;	//DIVERSITY 14 / DIVERSITE 14
      DIV15 : INT;	//DIVERSITY 15 / DIVERSITE 15
      DIV16 : INT;	//DIVERSITY 16 / DIVERSITE 16
      DIV17 : INT;	//DIVERSITY 17 / DIVERSITE 17
      DIV18 : INT;	//DIVERSITY 18 / DIVERSITE 18
      DIV19 : INT;	//DIVERSITY 19 / DIVERSITE 19
      DIV20 : INT;	//DIVERSITY 20 / DIVERSITE 20
      DIV21 : INT;	//DIVERSITY 21 / DIVERSITE 21
      DIV22 : INT;	//DIVERSITY 22 / DIVERSITE 22
      DIV23 : INT;	//DIVERSITY 23 / DIVERSITE 23
      DIV24 : INT;	//DIVERSITY 24 / DIVERSITE 24
      DIV25 : INT;	//DIVERSITY 25 / DIVERSITE 25
      DIV26 : INT;	//DIVERSITY 26 / DIVERSITE 26
      DPRO : ARRAY  [1 .. 10 ] OF //WORK INSTRUCTION / DEFINITION PROCESS
INT;
      ATOP : ARRAY  [1 .. 10 ] OF //OPERATOR WAITS / ATTENTES OPERATEUR
INT;
      ETFAB : ARRAY  [1 .. 10 ] OF //PRODUCTION STATUS / ETAT FABRICATION
INT;
      RAPI : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/SIPTOL
      CRAPI_1 : INT;	//PLC DISPATCHING REASON / CAUSE DE ROUTAGE API
      CRAPI_2 : INT;	//SPARE / RESERVE CAUSE DE ROUTAGE API
      ERCAL_1 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      ERCAL_2 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      FILM_MONT : INT;	//ASSEMBY SEQUENCE / FILM USINE MONTAGE
      DFILFER1 : INT;	//DONNEES FILM FERME 1
      DFILFER2 : INT;	//DONNEES FILM FERME 2
      DFILFER3 : INT;	//DONNEES FILM FERME 3
      DFILFER4 : INT;	//DONNEES FILM FERME 4
      DFILFER5 : INT;	//DONNEES FILM FERME 5
      DFILFER6 : INT;	//DONNEES FILM FERME 6
      DAT : INT;	//DEFINITION / ATTENTE TRAVAIL
      RAPI2 : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/ HORS SIPTOL
      R5 : INT;	//SPARE / RESERVE
      R6 : INT;	//SPARE / RESERVE
      GVIN1 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN2 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN3 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN4 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN5 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN6 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN7 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN8 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN9 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
    END_STRUCT ;
    FILM_PS : INT;	//NEXT PART INFORMATION / INFORMATION PIECE SUIVANTE
    NORDRE_PS : INT;	//NEXT MANUFACTURING ORDER / ORDRE PIECE SUIVANTE
    FAMPH_PS : INT;	//NEXT FAMILY PHASE DATAS / PHASE /FAMILLE PIECE SUIVANTE
    MODELE_PS : INT;	//NEXT MODEL DATA / MODELE PIECE SUIVANTE
    DIV1_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV2_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV3_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV4_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV5_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    NRCAL : INT;	//CALCULATOR REQUEST NUMBER / NUMERO DE REQUETTE DU CALCULATEUR
    VALCAL : INT;	//CALCULATOR VALIDATION / VALIDATION CALCULATEUR
    FLAG_MDM : INT;	//FLAG/ MODE DE MARCHE "FIN DE TRAME SIPTOL"
    IPAF : STRUCT	//INFORMATIONS PIECE A FAIRE
      TVEH : INT;	//TYPE VEHICULE PIECE A FAIRE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE A FAIRE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
    IPS : STRUCT	//INFORMATIONS PIECE SUIVANTE
      TVEH : INT;	//TYPE VEHICULE PIECE SUIVANTE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE SUIVANTE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
  END_STRUCT ;
  A0L_ECH_SPARE : ARRAY  [1 .. 260 ] OF //RESERVES
INT;
  A0L_ACQ : STRUCT	//A0 : TABLE D'ACQUISITION POINT DE LANCEMENT SIPTOL
    VALAPI : INT;	//PLC VALIDATION / VALIDATION API "DEBUT DE TRAME SIPTOL"
    ETFLUX : INT;	//FLOW STATE / ETAT FLUX
    DINJ : INT;	//INJECTION REQUEST / DEMANDE D'INJECTION
    DSORT : INT;	//EJECTION REQUEST / DEMANDE DE SORTIE
    ORGFLUX : INT;	//FLOW ORIGIN / ORIGINE FLUX
    ORTFLUX : INT;	//FLOW DISPATCHING / ORIENTATION FLUX (RESERVE)
    CVAL2 : INT;	//VAL=2 REASON /  CAUSE VALIDATION A 2
    R1 : INT;	//SPARE / RESERVE
    R2 : INT;	//SPARE / RESERVE
    R3 : INT;	//SPARE / RESERVE
    DVEH : STRUCT	//DEFINITION VEHICULE
      NSUP : INT;	//SUPPORT NUMBER / N° DE SUPPORT
      FSUP : INT;	//SUPPORT FAMILY / FAMILLE SUPPORT
      R_FSUP : INT;	//SPARE / RESERVE POUR FAMILLE SUPPORT
      DESFI : INT;	//FINAL DISPATCH / DESTINATION FINALE
      CSFI : INT;	//FINAL EJECTION REASON / CAUSE SORTIE FINALE
      RCAL : INT;	//CALCULATOR DISPATCHING / ROUTAGE CALCULATEUR
      R_RCAL : INT;	//SPARE / RESERVE ROUTAGE CALCULATEUR
      FILM : INT;	//SEQUENCE / FILM
      NORDRE : INT;	//MANUFACTURING NUMBER / N° ORDRE DE FABRICATION
      PROG : INT;	//PROGRAM / PROGRAMME (SEMAINE DE MISE EN FABRICATION CAISSE)
      JOUR : INT;	//DAY / JOUR (NUMERO DU JOUR DE LA SEMAINE (1A7)DE MISE EN FAB CAISSE)
      IDENT : INT;	//ID / IDENTIFICATION (NUMERO DE LA CAISSE MISE EN FABRICATION ( 0 A 9999)
      CLIENT : INT;	//SPARE / RESERVE N° CLIENT
      NP : INT;	//PART NUMBER / NUMERO PIECE
      R4 : INT;	//SPARE / RESERVE
      FAMPH : INT;	//FAMILY - PHASE / FAMILLE - PHASE
      MODELE : INT;	//BODY KIND / MODELE DE CAISSE
      DIV1 : INT;	//DIVERSITY 1 / DIVERSITE 1
      DIV2 : INT;	//DIVERSITY 2 / DIVERSITE 2
      DIV3 : INT;	//DIVERSITY 3 / DIVERSITE 3
      DIV4 : INT;	//DIVERSITY 4 / DIVERSITE 4
      DIV5 : INT;	//DIVERSITY 5 / DIVERSITE 5
      DIV6 : INT;	//DIVERSITY 6 / DIVERSITE 6
      DIV7 : INT;	//DIVERSITY 7 / DIVERSITE 7
      DIV8 : INT;	//DIVERSITY 8 / DIVERSITE 8
      DIV9 : INT;	//DIVERSITY 9 / DIVERSITE 9
      DIV10 : INT;	//DIVERSITY 10 / DIVERSITE 10
      DIV11 : INT;	//DIVERSITY 11 / DIVERSITE 11
      DIV12 : INT;	//DIVERSITY 12 / DIVERSITE 12
      DIV13 : INT;	//DIVERSITY 13 / DIVERSITE 13
      DIV14 : INT;	//DIVERSITY 14 / DIVERSITE 14
      DIV15 : INT;	//DIVERSITY 15 / DIVERSITE 15
      DIV16 : INT;	//DIVERSITY 16 / DIVERSITE 16
      DIV17 : INT;	//DIVERSITY 17 / DIVERSITE 17
      DIV18 : INT;	//DIVERSITY 18 / DIVERSITE 18
      DIV19 : INT;	//DIVERSITY 19 / DIVERSITE 19
      DIV20 : INT;	//DIVERSITY 20 / DIVERSITE 20
      DIV21 : INT;	//DIVERSITY 21 / DIVERSITE 21
      DIV22 : INT;	//DIVERSITY 22 / DIVERSITE 22
      DIV23 : INT;	//DIVERSITY 23 / DIVERSITE 23
      DIV24 : INT;	//DIVERSITY 24 / DIVERSITE 24
      DIV25 : INT;	//DIVERSITY 25 / DIVERSITE 25
      DIV26 : INT;	//DIVERSITY 26 / DIVERSITE 26
      DPRO : ARRAY  [1 .. 10 ] OF //WORK INSTRUCTION / DEFINITION PROCESS
INT;
      ATOP : ARRAY  [1 .. 10 ] OF //OPERATOR WAITS / ATTENTES OPERATEUR
INT;
      ETFAB : ARRAY  [1 .. 10 ] OF //PRODUCTION STATUS / ETAT FABRICATION
INT;
      RAPI : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/SIPTOL
      CRAPI_1 : INT;	//PLC DISPATCHING REASON / CAUSE DE ROUTAGE API
      CRAPI_2 : INT;	//SPARE / RESERVE CAUSE DE ROUTAGE API
      ERCAL_1 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      ERCAL_2 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      FILM_MONT : INT;	//ASSEMBY SEQUENCE / FILM USINE MONTAGE
      DFILFER1 : INT;	//DONNEES FILM FERME 1
      DFILFER2 : INT;	//DONNEES FILM FERME 2
      DFILFER3 : INT;	//DONNEES FILM FERME 3
      DFILFER4 : INT;	//DONNEES FILM FERME 4
      DFILFER5 : INT;	//DONNEES FILM FERME 5
      DFILFER6 : INT;	//DONNEES FILM FERME 6
      DAT : INT;	//DEFINITION / ATTENTE TRAVAIL
      RAPI2 : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/ HORS SIPTOL
      R5 : INT;	//SPARE / RESERVE
      R6 : INT;	//SPARE / RESERVE
      GVIN1 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN2 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN3 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN4 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN5 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN6 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN7 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN8 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN9 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
    END_STRUCT ;
    FILM_PS : INT;	//NEXT PART INFORMATION / INFORMATION PIECE SUIVANTE
    NORDRE_PS : INT;	//NEXT MANUFACTURING ORDER / ORDRE PIECE SUIVANTE
    FAMPH_PS : INT;	//NEXT FAMILY PHASE DATAS / PHASE /FAMILLE PIECE SUIVANTE
    MODELE_PS : INT;	//NEXT MODEL DATA / MODELE PIECE SUIVANTE
    DIV1_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV2_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV3_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV4_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV5_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    NRCAL : INT;	//CALCULATOR REQUEST NUMBER / NUMERO DE REQUETTE DU CALCULATEUR
    VALCAL : INT;	//CALCULATOR VALIDATION / VALIDATION CALCULATEUR
    FLAG_MDM : INT;	//FLAG/ MODE DE MARCHE "FIN DE TRAME SIPTOL"
    IPAF : STRUCT	//INFORMATIONS PIECE A FAIRE
      TVEH : INT;	//TYPE VEHICULE PIECE A FAIRE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE A FAIRE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
    IPS : STRUCT	//INFORMATIONS PIECE SUIVANTE
      TVEH : INT;	//TYPE VEHICULE PIECE SUIVANTE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE SUIVANTE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
    CP_PAF : STRUCT	//CODES PROCESS PIECE A FAIRE
      ILOT : INT;	//CODE PROCESS ILOT
      SPARE : ARRAY  [1 .. 29 ] OF //PROCESS CODE SPARE / RESERVE CODE PROCESS
INT;
    END_STRUCT ;
    CP_PS : STRUCT	//CODES PROCESS PIECE SUIVANTE
      ILOT : INT;	//CODE PROCESS ILOT
      SPARE : ARRAY  [1 .. 29 ] OF //PROCESS CODE SPARE / RESERVE CODE PROCESS
INT;
    END_STRUCT ;
  END_STRUCT ;
  A0L_ACQ_SPARE : ARRAY  [1 .. 200 ] OF //RESERVES
INT;
  T0CL_ECH : STRUCT	//T0C : TABLE D'ECHANGE POINT DE LANCEMENT SIPTOL
    VALAPI : INT;	//PLC VALIDATION / VALIDATION API "DEBUT DE TRAME SIPTOL"
    ETFLUX : INT;	//FLOW STATE / ETAT FLUX
    DINJ : INT;	//INJECTION REQUEST / DEMANDE D'INJECTION
    DSORT : INT;	//EJECTION REQUEST / DEMANDE DE SORTIE
    ORGFLUX : INT;	//FLOW ORIGIN / ORIGINE FLUX
    ORTFLUX : INT;	//FLOW DISPATCHING / ORIENTATION FLUX (RESERVE)
    CVAL2 : INT;	//VAL=2 REASON /  CAUSE VALIDATION A 2
    R1 : INT;	//SPARE / RESERVE
    R2 : INT;	//SPARE / RESERVE
    R3 : INT;	//SPARE / RESERVE
    DVEH : STRUCT	//DEFINITION VEHICULE
      NSUP : INT;	//SUPPORT NUMBER / N° DE SUPPORT
      FSUP : INT;	//SUPPORT FAMILY / FAMILLE SUPPORT
      R_FSUP : INT;	//SPARE / RESERVE POUR FAMILLE SUPPORT
      DESFI : INT;	//FINAL DISPATCH / DESTINATION FINALE
      CSFI : INT;	//FINAL EJECTION REASON / CAUSE SORTIE FINALE
      RCAL : INT;	//CALCULATOR DISPATCHING / ROUTAGE CALCULATEUR
      R_RCAL : INT;	//SPARE / RESERVE ROUTAGE CALCULATEUR
      FILM : INT;	//SEQUENCE / FILM
      NORDRE : INT;	//MANUFACTURING NUMBER / N° ORDRE DE FABRICATION
      PROG : INT;	//PROGRAM / PROGRAMME (SEMAINE DE MISE EN FABRICATION CAISSE)
      JOUR : INT;	//DAY / JOUR (NUMERO DU JOUR DE LA SEMAINE (1A7)DE MISE EN FAB CAISSE)
      IDENT : INT;	//ID / IDENTIFICATION (NUMERO DE LA CAISSE MISE EN FABRICATION ( 0 A 9999)
      CLIENT : INT;	//SPARE / RESERVE N° CLIENT
      NP : INT;	//PART NUMBER / NUMERO PIECE
      R4 : INT;	//SPARE / RESERVE
      FAMPH : INT;	//FAMILY - PHASE / FAMILLE - PHASE
      MODELE : INT;	//BODY KIND / MODELE DE CAISSE
      DIV1 : INT;	//DIVERSITY 1 / DIVERSITE 1
      DIV2 : INT;	//DIVERSITY 2 / DIVERSITE 2
      DIV3 : INT;	//DIVERSITY 3 / DIVERSITE 3
      DIV4 : INT;	//DIVERSITY 4 / DIVERSITE 4
      DIV5 : INT;	//DIVERSITY 5 / DIVERSITE 5
      DIV6 : INT;	//DIVERSITY 6 / DIVERSITE 6
      DIV7 : INT;	//DIVERSITY 7 / DIVERSITE 7
      DIV8 : INT;	//DIVERSITY 8 / DIVERSITE 8
      DIV9 : INT;	//DIVERSITY 9 / DIVERSITE 9
      DIV10 : INT;	//DIVERSITY 10 / DIVERSITE 10
      DIV11 : INT;	//DIVERSITY 11 / DIVERSITE 11
      DIV12 : INT;	//DIVERSITY 12 / DIVERSITE 12
      DIV13 : INT;	//DIVERSITY 13 / DIVERSITE 13
      DIV14 : INT;	//DIVERSITY 14 / DIVERSITE 14
      DIV15 : INT;	//DIVERSITY 15 / DIVERSITE 15
      DIV16 : INT;	//DIVERSITY 16 / DIVERSITE 16
      DIV17 : INT;	//DIVERSITY 17 / DIVERSITE 17
      DIV18 : INT;	//DIVERSITY 18 / DIVERSITE 18
      DIV19 : INT;	//DIVERSITY 19 / DIVERSITE 19
      DIV20 : INT;	//DIVERSITY 20 / DIVERSITE 20
      DIV21 : INT;	//DIVERSITY 21 / DIVERSITE 21
      DIV22 : INT;	//DIVERSITY 22 / DIVERSITE 22
      DIV23 : INT;	//DIVERSITY 23 / DIVERSITE 23
      DIV24 : INT;	//DIVERSITY 24 / DIVERSITE 24
      DIV25 : INT;	//DIVERSITY 25 / DIVERSITE 25
      DIV26 : INT;	//DIVERSITY 26 / DIVERSITE 26
      DPRO : ARRAY  [1 .. 10 ] OF //WORK INSTRUCTION / DEFINITION PROCESS
INT;
      ATOP : ARRAY  [1 .. 10 ] OF //OPERATOR WAITS / ATTENTES OPERATEUR
INT;
      ETFAB : ARRAY  [1 .. 10 ] OF //PRODUCTION STATUS / ETAT FABRICATION
INT;
      RAPI : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/SIPTOL
      CRAPI_1 : INT;	//PLC DISPATCHING REASON / CAUSE DE ROUTAGE API
      CRAPI_2 : INT;	//SPARE / RESERVE CAUSE DE ROUTAGE API
      ERCAL_1 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      ERCAL_2 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      FILM_MONT : INT;	//ASSEMBY SEQUENCE / FILM USINE MONTAGE
      DFILFER1 : INT;	//DONNEES FILM FERME 1
      DFILFER2 : INT;	//DONNEES FILM FERME 2
      DFILFER3 : INT;	//DONNEES FILM FERME 3
      DFILFER4 : INT;	//DONNEES FILM FERME 4
      DFILFER5 : INT;	//DONNEES FILM FERME 5
      DFILFER6 : INT;	//DONNEES FILM FERME 6
      DAT : INT;	//DEFINITION / ATTENTE TRAVAIL
      RAPI2 : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/ HORS SIPTOL
      R5 : INT;	//SPARE / RESERVE
      R6 : INT;	//SPARE / RESERVE
      GVIN1 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN2 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN3 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN4 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN5 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN6 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN7 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN8 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN9 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
    END_STRUCT ;
    FILM_PS : INT;	//NEXT PART INFORMATION / INFORMATION PIECE SUIVANTE
    NORDRE_PS : INT;	//NEXT MANUFACTURING ORDER / ORDRE PIECE SUIVANTE
    FAMPH_PS : INT;	//NEXT FAMILY PHASE DATAS / PHASE /FAMILLE PIECE SUIVANTE
    MODELE_PS : INT;	//NEXT MODEL DATA / MODELE PIECE SUIVANTE
    DIV1_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV2_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV3_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV4_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV5_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    NRCAL : INT;	//CALCULATOR REQUEST NUMBER / NUMERO DE REQUETTE DU CALCULATEUR
    VALCAL : INT;	//CALCULATOR VALIDATION / VALIDATION CALCULATEUR
    FLAG_MDM : INT;	//FLAG/ MODE DE MARCHE "FIN DE TRAME SIPTOL"
    IPAF : STRUCT	//INFORMATIONS PIECE A FAIRE
      TVEH : INT;	//TYPE VEHICULE PIECE A FAIRE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE A FAIRE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
    IPS : STRUCT	//INFORMATIONS PIECE SUIVANTE
      TVEH : INT;	//TYPE VEHICULE PIECE SUIVANTE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE SUIVANTE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
  END_STRUCT ;
  T0CL_ECH_SPARE : ARRAY  [1 .. 260 ] OF //RESERVES
INT;
  T0CL_ACQ : STRUCT	//T0C : TABLE D'ACQUISITION POINT DE LANCEMENT SIPTOL
    VALAPI : INT;	//PLC VALIDATION / VALIDATION API "DEBUT DE TRAME SIPTOL"
    ETFLUX : INT;	//FLOW STATE / ETAT FLUX
    DINJ : INT;	//INJECTION REQUEST / DEMANDE D'INJECTION
    DSORT : INT;	//EJECTION REQUEST / DEMANDE DE SORTIE
    ORGFLUX : INT;	//FLOW ORIGIN / ORIGINE FLUX
    ORTFLUX : INT;	//FLOW DISPATCHING / ORIENTATION FLUX (RESERVE)
    CVAL2 : INT;	//VAL=2 REASON /  CAUSE VALIDATION A 2
    R1 : INT;	//SPARE / RESERVE
    R2 : INT;	//SPARE / RESERVE
    R3 : INT;	//SPARE / RESERVE
    DVEH : STRUCT	//DEFINITION VEHICULE
      NSUP : INT;	//SUPPORT NUMBER / N° DE SUPPORT
      FSUP : INT;	//SUPPORT FAMILY / FAMILLE SUPPORT
      R_FSUP : INT;	//SPARE / RESERVE POUR FAMILLE SUPPORT
      DESFI : INT;	//FINAL DISPATCH / DESTINATION FINALE
      CSFI : INT;	//FINAL EJECTION REASON / CAUSE SORTIE FINALE
      RCAL : INT;	//CALCULATOR DISPATCHING / ROUTAGE CALCULATEUR
      R_RCAL : INT;	//SPARE / RESERVE ROUTAGE CALCULATEUR
      FILM : INT;	//SEQUENCE / FILM
      NORDRE : INT;	//MANUFACTURING NUMBER / N° ORDRE DE FABRICATION
      PROG : INT;	//PROGRAM / PROGRAMME (SEMAINE DE MISE EN FABRICATION CAISSE)
      JOUR : INT;	//DAY / JOUR (NUMERO DU JOUR DE LA SEMAINE (1A7)DE MISE EN FAB CAISSE)
      IDENT : INT;	//ID / IDENTIFICATION (NUMERO DE LA CAISSE MISE EN FABRICATION ( 0 A 9999)
      CLIENT : INT;	//SPARE / RESERVE N° CLIENT
      NP : INT;	//PART NUMBER / NUMERO PIECE
      R4 : INT;	//SPARE / RESERVE
      FAMPH : INT;	//FAMILY - PHASE / FAMILLE - PHASE
      MODELE : INT;	//BODY KIND / MODELE DE CAISSE
      DIV1 : INT;	//DIVERSITY 1 / DIVERSITE 1
      DIV2 : INT;	//DIVERSITY 2 / DIVERSITE 2
      DIV3 : INT;	//DIVERSITY 3 / DIVERSITE 3
      DIV4 : INT;	//DIVERSITY 4 / DIVERSITE 4
      DIV5 : INT;	//DIVERSITY 5 / DIVERSITE 5
      DIV6 : INT;	//DIVERSITY 6 / DIVERSITE 6
      DIV7 : INT;	//DIVERSITY 7 / DIVERSITE 7
      DIV8 : INT;	//DIVERSITY 8 / DIVERSITE 8
      DIV9 : INT;	//DIVERSITY 9 / DIVERSITE 9
      DIV10 : INT;	//DIVERSITY 10 / DIVERSITE 10
      DIV11 : INT;	//DIVERSITY 11 / DIVERSITE 11
      DIV12 : INT;	//DIVERSITY 12 / DIVERSITE 12
      DIV13 : INT;	//DIVERSITY 13 / DIVERSITE 13
      DIV14 : INT;	//DIVERSITY 14 / DIVERSITE 14
      DIV15 : INT;	//DIVERSITY 15 / DIVERSITE 15
      DIV16 : INT;	//DIVERSITY 16 / DIVERSITE 16
      DIV17 : INT;	//DIVERSITY 17 / DIVERSITE 17
      DIV18 : INT;	//DIVERSITY 18 / DIVERSITE 18
      DIV19 : INT;	//DIVERSITY 19 / DIVERSITE 19
      DIV20 : INT;	//DIVERSITY 20 / DIVERSITE 20
      DIV21 : INT;	//DIVERSITY 21 / DIVERSITE 21
      DIV22 : INT;	//DIVERSITY 22 / DIVERSITE 22
      DIV23 : INT;	//DIVERSITY 23 / DIVERSITE 23
      DIV24 : INT;	//DIVERSITY 24 / DIVERSITE 24
      DIV25 : INT;	//DIVERSITY 25 / DIVERSITE 25
      DIV26 : INT;	//DIVERSITY 26 / DIVERSITE 26
      DPRO : ARRAY  [1 .. 10 ] OF //WORK INSTRUCTION / DEFINITION PROCESS
INT;
      ATOP : ARRAY  [1 .. 10 ] OF //OPERATOR WAITS / ATTENTES OPERATEUR
INT;
      ETFAB : ARRAY  [1 .. 10 ] OF //PRODUCTION STATUS / ETAT FABRICATION
INT;
      RAPI : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/SIPTOL
      CRAPI_1 : INT;	//PLC DISPATCHING REASON / CAUSE DE ROUTAGE API
      CRAPI_2 : INT;	//SPARE / RESERVE CAUSE DE ROUTAGE API
      ERCAL_1 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      ERCAL_2 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      FILM_MONT : INT;	//ASSEMBY SEQUENCE / FILM USINE MONTAGE
      DFILFER1 : INT;	//DONNEES FILM FERME 1
      DFILFER2 : INT;	//DONNEES FILM FERME 2
      DFILFER3 : INT;	//DONNEES FILM FERME 3
      DFILFER4 : INT;	//DONNEES FILM FERME 4
      DFILFER5 : INT;	//DONNEES FILM FERME 5
      DFILFER6 : INT;	//DONNEES FILM FERME 6
      DAT : INT;	//DEFINITION / ATTENTE TRAVAIL
      RAPI2 : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/ HORS SIPTOL
      R5 : INT;	//SPARE / RESERVE
      R6 : INT;	//SPARE / RESERVE
      GVIN1 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN2 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN3 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN4 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN5 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN6 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN7 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN8 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN9 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
    END_STRUCT ;
    FILM_PS : INT;	//NEXT PART INFORMATION / INFORMATION PIECE SUIVANTE
    NORDRE_PS : INT;	//NEXT MANUFACTURING ORDER / ORDRE PIECE SUIVANTE
    FAMPH_PS : INT;	//NEXT FAMILY PHASE DATAS / PHASE /FAMILLE PIECE SUIVANTE
    MODELE_PS : INT;	//NEXT MODEL DATA / MODELE PIECE SUIVANTE
    DIV1_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV2_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV3_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV4_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV5_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    NRCAL : INT;	//CALCULATOR REQUEST NUMBER / NUMERO DE REQUETTE DU CALCULATEUR
    VALCAL : INT;	//CALCULATOR VALIDATION / VALIDATION CALCULATEUR
    FLAG_MDM : INT;	//FLAG/ MODE DE MARCHE "FIN DE TRAME SIPTOL"
    IPAF : STRUCT	//INFORMATIONS PIECE A FAIRE
      TVEH : INT;	//TYPE VEHICULE PIECE A FAIRE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE A FAIRE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
    IPS : STRUCT	//INFORMATIONS PIECE SUIVANTE
      TVEH : INT;	//TYPE VEHICULE PIECE SUIVANTE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE SUIVANTE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
    CP_PAF : STRUCT	//CODES PROCESS PIECE A FAIRE
      ILOT : INT;	//CODE PROCESS ILOT
      SPARE : ARRAY  [1 .. 29 ] OF //PROCESS CODE SPARE / RESERVE CODE PROCESS
INT;
    END_STRUCT ;
    CP_PS : STRUCT	//CODES PROCESS PIECE SUIVANTE
      ILOT : INT;	//CODE PROCESS ILOT
      SPARE : ARRAY  [1 .. 29 ] OF //PROCESS CODE SPARE / RESERVE CODE PROCESS
INT;
    END_STRUCT ;
  END_STRUCT ;
  T0CL_ACQ_SPARE : ARRAY  [1 .. 200 ] OF //RESERVES
INT;
  G0R_ECH : STRUCT	//G0 : TABLE D'ECHANGE POINT DE RECALAGE SIPTOL
    VALAPI : INT;	//PLC VALIDATION / VALIDATION API "DEBUT DE TRAME SIPTOL"
    ETFLUX : INT;	//FLOW STATE / ETAT FLUX
    DINJ : INT;	//INJECTION REQUEST / DEMANDE D'INJECTION
    DSORT : INT;	//EJECTION REQUEST / DEMANDE DE SORTIE
    ORGFLUX : INT;	//FLOW ORIGIN / ORIGINE FLUX
    ORTFLUX : INT;	//FLOW DISPATCHING / ORIENTATION FLUX (RESERVE)
    CVAL2 : INT;	//VAL=2 REASON /  CAUSE VALIDATION A 2
    R1 : INT;	//SPARE / RESERVE
    R2 : INT;	//SPARE / RESERVE
    R3 : INT;	//SPARE / RESERVE
    DVEH : STRUCT	//DEFINITION VEHICULE
      NSUP : INT;	//SUPPORT NUMBER / N° DE SUPPORT
      FSUP : INT;	//SUPPORT FAMILY / FAMILLE SUPPORT
      R_FSUP : INT;	//SPARE / RESERVE POUR FAMILLE SUPPORT
      DESFI : INT;	//FINAL DISPATCH / DESTINATION FINALE
      CSFI : INT;	//FINAL EJECTION REASON / CAUSE SORTIE FINALE
      RCAL : INT;	//CALCULATOR DISPATCHING / ROUTAGE CALCULATEUR
      R_RCAL : INT;	//SPARE / RESERVE ROUTAGE CALCULATEUR
      FILM : INT;	//SEQUENCE / FILM
      NORDRE : INT;	//MANUFACTURING NUMBER / N° ORDRE DE FABRICATION
      PROG : INT;	//PROGRAM / PROGRAMME (SEMAINE DE MISE EN FABRICATION CAISSE)
      JOUR : INT;	//DAY / JOUR (NUMERO DU JOUR DE LA SEMAINE (1A7)DE MISE EN FAB CAISSE)
      IDENT : INT;	//ID / IDENTIFICATION (NUMERO DE LA CAISSE MISE EN FABRICATION ( 0 A 9999)
      CLIENT : INT;	//SPARE / RESERVE N° CLIENT
      NP : INT;	//PART NUMBER / NUMERO PIECE
      R4 : INT;	//SPARE / RESERVE
      FAMPH : INT;	//FAMILY - PHASE / FAMILLE - PHASE
      MODELE : INT;	//BODY KIND / MODELE DE CAISSE
      DIV1 : INT;	//DIVERSITY 1 / DIVERSITE 1
      DIV2 : INT;	//DIVERSITY 2 / DIVERSITE 2
      DIV3 : INT;	//DIVERSITY 3 / DIVERSITE 3
      DIV4 : INT;	//DIVERSITY 4 / DIVERSITE 4
      DIV5 : INT;	//DIVERSITY 5 / DIVERSITE 5
      DIV6 : INT;	//DIVERSITY 6 / DIVERSITE 6
      DIV7 : INT;	//DIVERSITY 7 / DIVERSITE 7
      DIV8 : INT;	//DIVERSITY 8 / DIVERSITE 8
      DIV9 : INT;	//DIVERSITY 9 / DIVERSITE 9
      DIV10 : INT;	//DIVERSITY 10 / DIVERSITE 10
      DIV11 : INT;	//DIVERSITY 11 / DIVERSITE 11
      DIV12 : INT;	//DIVERSITY 12 / DIVERSITE 12
      DIV13 : INT;	//DIVERSITY 13 / DIVERSITE 13
      DIV14 : INT;	//DIVERSITY 14 / DIVERSITE 14
      DIV15 : INT;	//DIVERSITY 15 / DIVERSITE 15
      DIV16 : INT;	//DIVERSITY 16 / DIVERSITE 16
      DIV17 : INT;	//DIVERSITY 17 / DIVERSITE 17
      DIV18 : INT;	//DIVERSITY 18 / DIVERSITE 18
      DIV19 : INT;	//DIVERSITY 19 / DIVERSITE 19
      DIV20 : INT;	//DIVERSITY 20 / DIVERSITE 20
      DIV21 : INT;	//DIVERSITY 21 / DIVERSITE 21
      DIV22 : INT;	//DIVERSITY 22 / DIVERSITE 22
      DIV23 : INT;	//DIVERSITY 23 / DIVERSITE 23
      DIV24 : INT;	//DIVERSITY 24 / DIVERSITE 24
      DIV25 : INT;	//DIVERSITY 25 / DIVERSITE 25
      DIV26 : INT;	//DIVERSITY 26 / DIVERSITE 26
      DPRO : ARRAY  [1 .. 10 ] OF //WORK INSTRUCTION / DEFINITION PROCESS
INT;
      ATOP : ARRAY  [1 .. 10 ] OF //OPERATOR WAITS / ATTENTES OPERATEUR
INT;
      ETFAB : ARRAY  [1 .. 10 ] OF //PRODUCTION STATUS / ETAT FABRICATION
INT;
      RAPI : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/SIPTOL
      CRAPI_1 : INT;	//PLC DISPATCHING REASON / CAUSE DE ROUTAGE API
      CRAPI_2 : INT;	//SPARE / RESERVE CAUSE DE ROUTAGE API
      ERCAL_1 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      ERCAL_2 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
      FILM_MONT : INT;	//ASSEMBY SEQUENCE / FILM USINE MONTAGE
      DFILFER1 : INT;	//DONNEES FILM FERME 1
      DFILFER2 : INT;	//DONNEES FILM FERME 2
      DFILFER3 : INT;	//DONNEES FILM FERME 3
      DFILFER4 : INT;	//DONNEES FILM FERME 4
      DFILFER5 : INT;	//DONNEES FILM FERME 5
      DFILFER6 : INT;	//DONNEES FILM FERME 6
      DAT : INT;	//DEFINITION / ATTENTE TRAVAIL
      RAPI2 : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/ HORS SIPTOL
      R5 : INT;	//SPARE / RESERVE
      R6 : INT;	//SPARE / RESERVE
      GVIN1 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN2 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN3 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN4 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN5 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN6 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN7 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN8 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      GVIN9 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
    END_STRUCT ;
    FILM_PS : INT;	//NEXT PART INFORMATION / INFORMATION PIECE SUIVANTE
    NORDRE_PS : INT;	//NEXT MANUFACTURING ORDER / ORDRE PIECE SUIVANTE
    FAMPH_PS : INT;	//NEXT FAMILY PHASE DATAS / PHASE /FAMILLE PIECE SUIVANTE
    MODELE_PS : INT;	//NEXT MODEL DATA / MODELE PIECE SUIVANTE
    DIV1_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV2_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV3_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV4_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    DIV5_PS : INT;	//NEXT PART DIVERSITY / DIVERSITE PIECE SUIVANTE
    NRCAL : INT;	//CALCULATOR REQUEST NUMBER / NUMERO DE REQUETTE DU CALCULATEUR
    VALCAL : INT;	//CALCULATOR VALIDATION / VALIDATION CALCULATEUR
    FLAG_MDM : INT;	//FLAG/ MODE DE MARCHE "FIN DE TRAME SIPTOL"
    IPAF : STRUCT	//INFORMATIONS PIECE A FAIRE
      TVEH : INT;	//TYPE VEHICULE PIECE A FAIRE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE A FAIRE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
    IPS : STRUCT	//INFORMATIONS PIECE SUIVANTE
      TVEH : INT;	//TYPE VEHICULE PIECE SUIVANTE
      CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE SUIVANTE
INT;
      SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
    END_STRUCT ;
    CP_PAF : STRUCT	//CODES PROCESS PIECE A FAIRE
      ILOT : INT;	//CODE PROCESS ILOT
      SPARE : ARRAY  [1 .. 29 ] OF //PROCESS CODE SPARE / RESERVE CODE PROCESS
INT;
    END_STRUCT ;
    CP_PS : STRUCT	//CODES PROCESS PIECE SUIVANTE
      ILOT : INT;	//CODE PROCESS ILOT
      SPARE : ARRAY  [1 .. 29 ] OF //PROCESS CODE SPARE / RESERVE CODE PROCESS
INT;
    END_STRUCT ;
  END_STRUCT ;
  G0R_ECH_SPARE : ARRAY  [1 .. 260 ] OF //RESERVES
INT;
  G0R_VISU : STRUCT	//G0 : TABLE D'ECHANGE POINT DE VISU SIPTOL
    VALAPI : INT;	//PLC VALIDATION / VALIDATION API "DEBUT DE TRAME SIPTOL"
    PP2_NORDRE : INT;	//PIECE PASSEE OF -2
    PP2_FAMILLE : INT;
    PP2_PHASE : INT;
    PP2_MODELE : INT;
    PP2_FILM : INT;
    PP1_NORDRE : INT;	//PIECE PASSEE OF -1
    PP1_FAMILLE : INT;
    PP1_PHASE : INT;
    PP1_MODELE : INT;
    PP1_FILM : INT;
    PAF_NORDRE : INT;	//PIECE A FAIRE OF
    PAF_FAMILLE : INT;
    PAF_PHASE : INT;
    PAF_MODELE : INT;
    PAF_FILM : INT;
    PAF_DINJSOR : INT;	//DEMANDE INJECTION OU SORTIE
    PS1_NORDRE : INT;	//PIECE SUIVANTE OF +1
    PS1_FAMILLE : INT;
    PS1_PHASE : INT;
    PS1_MODELE : INT;
    PS1_FILM : INT;
    PS1_DINJSOR : INT;	//DEMANDE INJECTION OU SORTIE
    PS2_NORDRE : INT;	//PIECE SUIVANTE OF +2
    PS2_FAMILLE : INT;
    PS2_PHASE : INT;
    PS2_MODELE : INT;
    PS2_FILM : INT;
    PS2_DINJSOR : INT;	//DEMANDE INJECTION OU SORTIE
    PS3_NORDRE : INT;	//PIECE SUIVANTE OF +3
    PS3_FAMILLE : INT;
    PS3_PHASE : INT;
    PS3_MODELE : INT;
    PS3_FILM : INT;
    PS3_DINJSOR : INT;	//DEMANDE INJECTION OU SORTIE
    PS4_NORDRE : INT;	//PIECE SUIVANTE OF +4
    PS4_FAMILLE : INT;
    PS4_PHASE : INT;
    PS4_MODELE : INT;
    PS4_FILM : INT;
    PS4_DINJSOR : INT;	//DEMANDE INJECTION OU SORTIE
    R1 : INT;	//SPARE / RESERVE
    R2 : INT;	//SPARE / RESERVE
    R3 : INT;	//SPARE / RESERVE
    R4 : INT;	//SPARE / RESERVE
    R5 : INT;	//SPARE / RESERVE
    R6 : INT;	//SPARE / RESERVE
    R7 : INT;	//SPARE / RESERVE
    NRCAL : INT;	//CALCULATOR REQUEST NUMBER / NUMERO DE REQUETTE DU CALCULATEUR
    VALCAL : INT;	//CALCULATOR VALIDATION / VALIDATION CALCULATEUR
  END_STRUCT ;
  G0R_VISU_SPARE : ARRAY  [1 .. 450 ] OF //RESERVES
INT;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "PILE"
TITLE =PILE DE STOCKAGE
NAME : 'PILE'
VERSION : 0.1
STRUCT
  G0R_PLUS : STRUCT	//PILE VISU RECALAGE PIECES A FAIRE
    N : STRUCT	//PIECE A FAIRE
      FILM : INT;	//FILM
      NORDRE : INT;	//NUMERO D'ORDRE
      FAMILLE : INT;	//CRITERE DIVERSITE - FAMILLE
      PHASE : INT;	//CRITERE DIVERSITE - PHASE
      MODELE : INT;	//CRITERE DIVERSITE - MODELE
    END_STRUCT ;
    N1 : STRUCT	//PIECE A FAIRE +1
      FILM : INT;	//FILM
      NORDRE : INT;	//NUMERO D'ORDRE
      FAMILLE : INT;	//CRITERE DIVERSITE - FAMILLE
      PHASE : INT;	//CRITERE DIVERSITE - PHASE
      MODELE : INT;	//CRITERE DIVERSITE - MODELE
    END_STRUCT ;
    N2 : STRUCT	//PIECE A FAIRE +2
      FILM : INT;	//FILM
      NORDRE : INT;	//NUMERO D'ORDRE
      FAMILLE : INT;	//CRITERE DIVERSITE - FAMILLE
      PHASE : INT;	//CRITERE DIVERSITE - PHASE
      MODELE : INT;	//CRITERE DIVERSITE - MODELE
    END_STRUCT ;
    N3 : STRUCT	//PIECE A FAIRE +3
      FILM : INT;	//FILM
      NORDRE : INT;	//NUMERO D'ORDRE
      FAMILLE : INT;	//CRITERE DIVERSITE - FAMILLE
      PHASE : INT;	//CRITERE DIVERSITE - PHASE
      MODELE : INT;	//CRITERE DIVERSITE - MODELE
    END_STRUCT ;
    N4 : STRUCT	//PIECE A FAIRE +4
      FILM : INT;	//FILM
      NORDRE : INT;	//NUMERO D'ORDRE
      FAMILLE : INT;	//CRITERE DIVERSITE - FAMILLE
      PHASE : INT;	//CRITERE DIVERSITE - PHASE
      MODELE : INT;	//CRITERE DIVERSITE - MODELE
    END_STRUCT ;
  END_STRUCT ;
  G0R_MOINS : STRUCT	//PILE VISU RECALAGE PIECES PASSEES
    N2 : STRUCT	//PIECE PASSEE N-2
      FILM : INT;	//FILM
      NORDRE : INT;	//NUMERO D'ORDRE
      FAMILLE : INT;	//CRITERE DIVERSITE - FAMILLE
      PHASE : INT;	//CRITERE DIVERSITE - PHASE
      MODELE : INT;	//CRITERE DIVERSITE - MODELE
    END_STRUCT ;
    N1 : STRUCT	//PIECE PASSEE N-1
      FILM : INT;	//FILM
      NORDRE : INT;	//NUMERO D'ORDRE
      FAMILLE : INT;	//CRITERE DIVERSITE - FAMILLE
      PHASE : INT;	//CRITERE DIVERSITE - PHASE
      MODELE : INT;	//CRITERE DIVERSITE - MODELE
    END_STRUCT ;
  END_STRUCT ;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "IIS"
TITLE =FACILITY: SUPPORT WORD TABLE / DB MOTS SUPPORT
VERSION : 0.1
STRUCT
  T0C_1 : STRUCT	//T0C_BUTEE 1 : SUPPORT MEMORY / MEMOIRE SUPPORT
    MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
    MSE : BOOL;	//SUPPORT EVACUATED MEMORY / MEMOIRE SUPPORT EVACUE
    MTE1 : BOOL;	//WORK 1 COMPLETE MEMORY / MEMOIRE TRAVAIL 1 REALISE
    MTE2 : BOOL;	//WORK 2 COMPLETE MEMORY / MEMOIRE TRAVAIL 2 REALISE
    MTE3 : BOOL;	//WORK 3 COMPLETE MEMORY / MEMOIRE TRAVAIL 3 REALISE
    MS5 : BOOL;	//SPARE / RESERVE
    MS6 : BOOL;	//SPARE / RESERVE
    MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
    MSVIDE : BOOL;	//SUPPORT EMPTY MEMORY / MEMOIRE SUPPORT VIDE
    MSLRFID : BOOL;	//SUPPORT MEMORY RFID READING OK / MEMOIRE SUPPORT LECTURE RFID OK
    MSERFID : BOOL;	//SUPPORT MEMORY RFID WRITING OK / MEMOIRE SUPPORT ECRITURE RFID OK
    MS11 : BOOL;	//SPARE / RESERVE
    MS12 : BOOL;	//SPARE / RESERVE
    MS13 : BOOL;	//SPARE / RESERVE
    MS14 : BOOL;	//SPARE / RESERVE
    MS15 : BOOL;	//SPARE / RESERVE
  END_STRUCT ;
  T0C_2 : STRUCT	//T0C_BUTEE 2 : SUPPORT MEMORY / MEMOIRE SUPPORT
    MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
    MSE : BOOL;	//SUPPORT EVACUATED MEMORY / MEMOIRE SUPPORT EVACUE
    MTE1 : BOOL;	//WORK 1 COMPLETE MEMORY / MEMOIRE TRAVAIL 1 REALISE
    MTE2 : BOOL;	//WORK 2 COMPLETE MEMORY / MEMOIRE TRAVAIL 2 REALISE
    MTE3 : BOOL;	//WORK 3 COMPLETE MEMORY / MEMOIRE TRAVAIL 3 REALISE
    MS5 : BOOL;	//SPARE / RESERVE
    MS6 : BOOL;	//SPARE / RESERVE
    MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
    MSVIDE : BOOL;	//SUPPORT EMPTY MEMORY / MEMOIRE SUPPORT VIDE
    MSLRFID : BOOL;	//SUPPORT MEMORY RFID READING OK / MEMOIRE SUPPORT LECTURE RFID OK
    MSERFID : BOOL;	//SUPPORT MEMORY RFID WRITING OK / MEMOIRE SUPPORT ECRITURE RFID OK
    MS11 : BOOL;	//SPARE / RESERVE
    MS12 : BOOL;	//SPARE / RESERVE
    MS13 : BOOL;	//SPARE / RESERVE
    MS14 : BOOL;	//SPARE / RESERVE
    MS15 : BOOL;	//SPARE / RESERVE
  END_STRUCT ;
  T0D_8 : STRUCT	//T0D_BUTEE 8 : SUPPORT MEMORY / MEMOIRE SUPPORT
    MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
    MSE : BOOL;	//SUPPORT EVACUATED MEMORY / MEMOIRE SUPPORT EVACUE
    MTE1 : BOOL;	//WORK 1 COMPLETE MEMORY / MEMOIRE TRAVAIL 1 REALISE
    MTE2 : BOOL;	//WORK 2 COMPLETE MEMORY / MEMOIRE TRAVAIL 2 REALISE
    MTE3 : BOOL;	//WORK 3 COMPLETE MEMORY / MEMOIRE TRAVAIL 3 REALISE
    MS5 : BOOL;	//SPARE / RESERVE
    MS6 : BOOL;	//SPARE / RESERVE
    MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
    MSVIDE : BOOL;	//SUPPORT EMPTY MEMORY / MEMOIRE SUPPORT VIDE
    MSLRFID : BOOL;	//SUPPORT MEMORY RFID READING OK / MEMOIRE SUPPORT LECTURE RFID OK
    MSERFID : BOOL;	//SUPPORT MEMORY RFID WRITING OK / MEMOIRE SUPPORT ECRITURE RFID OK
    MS11 : BOOL;	//SPARE / RESERVE
    MS12 : BOOL;	//SPARE / RESERVE
    MS13 : BOOL;	//SPARE / RESERVE
    MS14 : BOOL;	//SPARE / RESERVE
    MS15 : BOOL;	//SPARE / RESERVE
  END_STRUCT ;
  T0D_9 : STRUCT	//T0D_BUTEE 9 : SUPPORT MEMORY / MEMOIRE SUPPORT
    MSP : BOOL;	//SUPPORT PRESENCE MEMORY / MEMOIRE SUPPORT PRESENT
    MSE : BOOL;	//SUPPORT EVACUATED MEMORY / MEMOIRE SUPPORT EVACUE
    MTE1 : BOOL;	//WORK 1 COMPLETE MEMORY / MEMOIRE TRAVAIL 1 REALISE
    MTE2 : BOOL;	//WORK 2 COMPLETE MEMORY / MEMOIRE TRAVAIL 2 REALISE
    MTE3 : BOOL;	//WORK 3 COMPLETE MEMORY / MEMOIRE TRAVAIL 3 REALISE
    MS5 : BOOL;	//SPARE / RESERVE
    MS6 : BOOL;	//SPARE / RESERVE
    MSAE : BOOL;	//SUPPORT TO EVACUATE MEMORY / MEMOIRE SUPPORT A EVACUER
    MSVIDE : BOOL;	//SUPPORT EMPTY MEMORY / MEMOIRE SUPPORT VIDE
    MSLRFID : BOOL;	//SUPPORT MEMORY RFID READING OK / MEMOIRE SUPPORT LECTURE RFID OK
    MSERFID : BOOL;	//SUPPORT MEMORY RFID WRITING OK / MEMOIRE SUPPORT ECRITURE RFID OK
    MS11 : BOOL;	//SPARE / RESERVE
    MS12 : BOOL;	//SPARE / RESERVE
    MS13 : BOOL;	//SPARE / RESERVE
    MS14 : BOOL;	//SPARE / RESERVE
    MS15 : BOOL;	//SPARE / RESERVE
  END_STRUCT ;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "IDENT"
TITLE =PART DATA RESERVED DB
NAME : 'IDENT'
VERSION : 0.1
STRUCT
  T0C : STRUCT	//T0C : RFID READ WRITE DATA / TABLE LECTURE ECRITURE RFID
    ID : STRUCT	//IDENTIFIANT VEHICULE
      DVEH : STRUCT	//DEFINITION VEHICULE
        NSUP : INT;	//SUPPORT NUMBER / N° DE SUPPORT
        FSUP : INT;	//SUPPORT FAMILY / FAMILLE SUPPORT
        R_FSUP : INT;	//SPARE / RESERVE POUR FAMILLE SUPPORT
        DESFI : INT;	//FINAL DISPATCH / DESTINATION FINALE
        CSFI : INT;	//FINAL EJECTION REASON / CAUSE SORTIE FINALE
        RCAL : INT;	//CALCULATOR DISPATCHING / ROUTAGE CALCULATEUR
        R_RCAL : INT;	//SPARE / RESERVE ROUTAGE CALCULATEUR
        FILM : INT;	//SEQUENCE / FILM
        NORDRE : INT;	//MANUFACTURING NUMBER / N° ORDRE DE FABRICATION
        PROG : INT;	//PROGRAM / PROGRAMME (SEMAINE DE MISE EN FABRICATION CAISSE)
        JOUR : INT;	//DAY / JOUR (NUMERO DU JOUR DE LA SEMAINE (1A7)DE MISE EN FAB CAISSE)
        IDENT : INT;	//ID / IDENTIFICATION (NUMERO DE LA CAISSE MISE EN FABRICATION ( 0 A 9999)
        CLIENT : INT;	//SPARE / RESERVE N° CLIENT
        NP : INT;	//PART NUMBER / NUMERO PIECE
        R4 : INT;	//SPARE / RESERVE
        FAMPH : INT;	//FAMILY - PHASE / FAMILLE - PHASE
        MODELE : INT;	//BODY KIND / MODELE DE CAISSE
        DIV1 : INT;	//DIVERSITY 1 / DIVERSITE 1
        DIV2 : INT;	//DIVERSITY 2 / DIVERSITE 2
        DIV3 : INT;	//DIVERSITY 3 / DIVERSITE 3
        DIV4 : INT;	//DIVERSITY 4 / DIVERSITE 4
        DIV5 : INT;	//DIVERSITY 5 / DIVERSITE 5
        DIV6 : INT;	//DIVERSITY 6 / DIVERSITE 6
        DIV7 : INT;	//DIVERSITY 7 / DIVERSITE 7
        DIV8 : INT;	//DIVERSITY 8 / DIVERSITE 8
        DIV9 : INT;	//DIVERSITY 9 / DIVERSITE 9
        DIV10 : INT;	//DIVERSITY 10 / DIVERSITE 10
        DIV11 : INT;	//DIVERSITY 11 / DIVERSITE 11
        DIV12 : INT;	//DIVERSITY 12 / DIVERSITE 12
        DIV13 : INT;	//DIVERSITY 13 / DIVERSITE 13
        DIV14 : INT;	//DIVERSITY 14 / DIVERSITE 14
        DIV15 : INT;	//DIVERSITY 15 / DIVERSITE 15
        DIV16 : INT;	//DIVERSITY 16 / DIVERSITE 16
        DIV17 : INT;	//DIVERSITY 17 / DIVERSITE 17
        DIV18 : INT;	//DIVERSITY 18 / DIVERSITE 18
        DIV19 : INT;	//DIVERSITY 19 / DIVERSITE 19
        DIV20 : INT;	//DIVERSITY 20 / DIVERSITE 20
        DIV21 : INT;	//DIVERSITY 21 / DIVERSITE 21
        DIV22 : INT;	//DIVERSITY 22 / DIVERSITE 22
        DIV23 : INT;	//DIVERSITY 23 / DIVERSITE 23
        DIV24 : INT;	//DIVERSITY 24 / DIVERSITE 24
        DIV25 : INT;	//DIVERSITY 25 / DIVERSITE 25
        DIV26 : INT;	//DIVERSITY 26 / DIVERSITE 26
        DPRO : ARRAY  [1 .. 10 ] OF //WORK INSTRUCTION / DEFINITION PROCESS
INT;
        ATOP : ARRAY  [1 .. 10 ] OF //OPERATOR WAITS / ATTENTES OPERATEUR
INT;
        ETFAB : ARRAY  [1 .. 10 ] OF //PRODUCTION STATUS / ETAT FABRICATION
INT;
        RAPI : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/SIPTOL
        CRAPI_1 : INT;	//PLC DISPATCHING REASON / CAUSE DE ROUTAGE API
        CRAPI_2 : INT;	//SPARE / RESERVE CAUSE DE ROUTAGE API
        ERCAL_1 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
        ERCAL_2 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
        FILM_MONT : INT;	//ASSEMBY SEQUENCE / FILM USINE MONTAGE
        DFILFER1 : INT;	//DONNEES FILM FERME 1
        DFILFER2 : INT;	//DONNEES FILM FERME 2
        DFILFER3 : INT;	//DONNEES FILM FERME 3
        DFILFER4 : INT;	//DONNEES FILM FERME 4
        DFILFER5 : INT;	//DONNEES FILM FERME 5
        DFILFER6 : INT;	//DONNEES FILM FERME 6
        DAT : INT;	//DEFINITION / ATTENTE TRAVAIL
        RAPI2 : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/ HORS SIPTOL
        R5 : INT;	//SPARE / RESERVE
        R6 : INT;	//SPARE / RESERVE
        GVIN1 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN2 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN3 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN4 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN5 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN6 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN7 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN8 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN9 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      END_STRUCT ;
      IPAF : STRUCT	//INFORMATIONS PIECE A FAIRE
        TVEH : INT;	//TYPE VEHICULE PIECE A FAIRE
        CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE A FAIRE
INT;
        SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
      END_STRUCT ;
      CP_PAF : STRUCT	//CODES PROCESS PIECE A FAIRE
        ILOT : INT;	//CODE PROCESS ILOT
        SPARE : ARRAY  [1 .. 29 ] OF //PROCESS CODE SPARE / RESERVE CODE PROCESS
INT;
      END_STRUCT ;
      SPARE : ARRAY  [1 .. 22 ] OF //SPARE / RESERVE
INT;
    END_STRUCT ;
  END_STRUCT ;
  T0D : STRUCT	//T0D : RFID READ WRITE DATA / TABLE LECTURE ECRITURE RFID
    ID : STRUCT	//IDENTIFIANT VEHICULE
      DVEH : STRUCT	//DEFINITION VEHICULE
        NSUP : INT;	//SUPPORT NUMBER / N° DE SUPPORT
        FSUP : INT;	//SUPPORT FAMILY / FAMILLE SUPPORT
        R_FSUP : INT;	//SPARE / RESERVE POUR FAMILLE SUPPORT
        DESFI : INT;	//FINAL DISPATCH / DESTINATION FINALE
        CSFI : INT;	//FINAL EJECTION REASON / CAUSE SORTIE FINALE
        RCAL : INT;	//CALCULATOR DISPATCHING / ROUTAGE CALCULATEUR
        R_RCAL : INT;	//SPARE / RESERVE ROUTAGE CALCULATEUR
        FILM : INT;	//SEQUENCE / FILM
        NORDRE : INT;	//MANUFACTURING NUMBER / N° ORDRE DE FABRICATION
        PROG : INT;	//PROGRAM / PROGRAMME (SEMAINE DE MISE EN FABRICATION CAISSE)
        JOUR : INT;	//DAY / JOUR (NUMERO DU JOUR DE LA SEMAINE (1A7)DE MISE EN FAB CAISSE)
        IDENT : INT;	//ID / IDENTIFICATION (NUMERO DE LA CAISSE MISE EN FABRICATION ( 0 A 9999)
        CLIENT : INT;	//SPARE / RESERVE N° CLIENT
        NP : INT;	//PART NUMBER / NUMERO PIECE
        R4 : INT;	//SPARE / RESERVE
        FAMPH : INT;	//FAMILY - PHASE / FAMILLE - PHASE
        MODELE : INT;	//BODY KIND / MODELE DE CAISSE
        DIV1 : INT;	//DIVERSITY 1 / DIVERSITE 1
        DIV2 : INT;	//DIVERSITY 2 / DIVERSITE 2
        DIV3 : INT;	//DIVERSITY 3 / DIVERSITE 3
        DIV4 : INT;	//DIVERSITY 4 / DIVERSITE 4
        DIV5 : INT;	//DIVERSITY 5 / DIVERSITE 5
        DIV6 : INT;	//DIVERSITY 6 / DIVERSITE 6
        DIV7 : INT;	//DIVERSITY 7 / DIVERSITE 7
        DIV8 : INT;	//DIVERSITY 8 / DIVERSITE 8
        DIV9 : INT;	//DIVERSITY 9 / DIVERSITE 9
        DIV10 : INT;	//DIVERSITY 10 / DIVERSITE 10
        DIV11 : INT;	//DIVERSITY 11 / DIVERSITE 11
        DIV12 : INT;	//DIVERSITY 12 / DIVERSITE 12
        DIV13 : INT;	//DIVERSITY 13 / DIVERSITE 13
        DIV14 : INT;	//DIVERSITY 14 / DIVERSITE 14
        DIV15 : INT;	//DIVERSITY 15 / DIVERSITE 15
        DIV16 : INT;	//DIVERSITY 16 / DIVERSITE 16
        DIV17 : INT;	//DIVERSITY 17 / DIVERSITE 17
        DIV18 : INT;	//DIVERSITY 18 / DIVERSITE 18
        DIV19 : INT;	//DIVERSITY 19 / DIVERSITE 19
        DIV20 : INT;	//DIVERSITY 20 / DIVERSITE 20
        DIV21 : INT;	//DIVERSITY 21 / DIVERSITE 21
        DIV22 : INT;	//DIVERSITY 22 / DIVERSITE 22
        DIV23 : INT;	//DIVERSITY 23 / DIVERSITE 23
        DIV24 : INT;	//DIVERSITY 24 / DIVERSITE 24
        DIV25 : INT;	//DIVERSITY 25 / DIVERSITE 25
        DIV26 : INT;	//DIVERSITY 26 / DIVERSITE 26
        DPRO : ARRAY  [1 .. 10 ] OF //WORK INSTRUCTION / DEFINITION PROCESS
INT;
        ATOP : ARRAY  [1 .. 10 ] OF //OPERATOR WAITS / ATTENTES OPERATEUR
INT;
        ETFAB : ARRAY  [1 .. 10 ] OF //PRODUCTION STATUS / ETAT FABRICATION
INT;
        RAPI : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/SIPTOL
        CRAPI_1 : INT;	//PLC DISPATCHING REASON / CAUSE DE ROUTAGE API
        CRAPI_2 : INT;	//SPARE / RESERVE CAUSE DE ROUTAGE API
        ERCAL_1 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
        ERCAL_2 : INT;	//CALCULATOR DISPATCHING STATUS / ETAT ROUTAGE CALCULATEUR
        FILM_MONT : INT;	//ASSEMBY SEQUENCE / FILM USINE MONTAGE
        DFILFER1 : INT;	//DONNEES FILM FERME 1
        DFILFER2 : INT;	//DONNEES FILM FERME 2
        DFILFER3 : INT;	//DONNEES FILM FERME 3
        DFILFER4 : INT;	//DONNEES FILM FERME 4
        DFILFER5 : INT;	//DONNEES FILM FERME 5
        DFILFER6 : INT;	//DONNEES FILM FERME 6
        DAT : INT;	//DEFINITION / ATTENTE TRAVAIL
        RAPI2 : INT;	//PLC/SIPTOL DISPATCHING / ROUTAGE API/ HORS SIPTOL
        R5 : INT;	//SPARE / RESERVE
        R6 : INT;	//SPARE / RESERVE
        GVIN1 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN2 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN3 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN4 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN5 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN6 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN7 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN8 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
        GVIN9 : INT;	//VIN DATA / DONNEES GRAVAGE VIN
      END_STRUCT ;
      IPAF : STRUCT	//INFORMATIONS PIECE A FAIRE
        TVEH : INT;	//TYPE VEHICULE PIECE A FAIRE
        CDIV : ARRAY  [1 .. 50 ] OF //CRITERES DIVERSITE PIECE A FAIRE
INT;
        SPARE : ARRAY  [1 .. 9 ] OF //SPARE / RESERVES
INT;
      END_STRUCT ;
      CP_PAF : STRUCT	//CODES PROCESS PIECE A FAIRE
        ILOT : INT;	//CODE PROCESS ILOT
        SPARE : ARRAY  [1 .. 29 ] OF //PROCESS CODE SPARE / RESERVE CODE PROCESS
INT;
      END_STRUCT ;
      SPARE : ARRAY  [1 .. 22 ] OF //SPARE / RESERVE
INT;
    END_STRUCT ;
  END_STRUCT ;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "AFF"
TITLE =FACILITY: STRING STORAGE SIEBERT DISPLAY / STOCKAGE MESSAGE AFFI
NAME : 'AFF'
VERSION : 1.0
STRUCT
  A0 : STRUCT
    MSG_1 : STRING[13];
    MSG_2 : STRING[13];
    MSG_3 : STRING[13];
    MSG_4 : STRING[13];
    MSG_5 : STRING[13];
    MSG_6 : STRING[13];
    MSG_7 : STRING[13];
    MSG_8 : STRING[13];
  END_STRUCT ;
  E0 : STRUCT
    MSG_1 : STRING[13];
    MSG_2 : STRING[13];
    MSG_3 : STRING[13];
    MSG_4 : STRING[13];
    MSG_5 : STRING[13];
    MSG_6 : STRING[13];
    MSG_7 : STRING[13];
    MSG_8 : STRING[13];
  END_STRUCT ;
  F9 : STRUCT
    MSG_1 : STRING[13];
    MSG_2 : STRING[13];
    MSG_3 : STRING[13];
    MSG_4 : STRING[13];
    MSG_5 : STRING[13];
    MSG_6 : STRING[13];
    MSG_7 : STRING[13];
    MSG_8 : STRING[13];
  END_STRUCT ;
  G0 : STRUCT
    MSG_1 : STRING[13];
    MSG_2 : STRING[13];
    MSG_3 : STRING[13];
    MSG_4 : STRING[13];
    MSG_5 : STRING[13];
    MSG_6 : STRING[13];
    MSG_7 : STRING[13];
    MSG_8 : STRING[13];
  END_STRUCT ;
  T0C : STRUCT
    MSG_1 : STRING[13];
    MSG_2 : STRING[13];
    MSG_3 : STRING[13];
    MSG_4 : STRING[13];
    MSG_5 : STRING[13];
    MSG_6 : STRING[13];
    MSG_7 : STRING[13];
    MSG_8 : STRING[13];
  END_STRUCT ;
  T0D : STRUCT
    MSG_1 : STRING[13];
    MSG_2 : STRING[13];
    MSG_3 : STRING[13];
    MSG_4 : STRING[13];
    MSG_5 : STRING[13];
    MSG_6 : STRING[13];
    MSG_7 : STRING[13];
    MSG_8 : STRING[13];
  END_STRUCT ;
  U9 : STRUCT
    MSG_1 : STRING[13];
    MSG_2 : STRING[13];
    MSG_3 : STRING[13];
    MSG_4 : STRING[13];
    MSG_5 : STRING[13];
    MSG_6 : STRING[13];
    MSG_7 : STRING[13];
    MSG_8 : STRING[13];
  END_STRUCT ;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "SFM_PN"
TITLE =Report System Error Diagnostic Block
// This DB is part of report system error and will be updated by the RSE FB.
// It is the interface to the status display and diagnostic support for PROFINET
//IO devices.
AUTHOR : SIMATIC
FAMILY : 'SFMDIAG'
NAME : 'SFM'
VERSION : 5.4
STRUCT
  HMI_ID : WORD;	//No. of the OP that uses the DB (0 = unused)
  System_No : WORD;	//No. of the IO system to be investigated
  Device_No : WORD;	//No. of the IO device to be investigated
  Enable : BOOL;	//Calls up the errors of the specified IO device
  Next_Error : BOOL;	//Calls up the next error of the same IO device
  Busy : BOOL;	//Busy = 1; evaluation running
  More_Errors : BOOL;	//There are more error messages
  Device_Status : BYTE;	//Status of the IO device involved
  Offset_System_Header : WORD;	//Address of the Detail_IO_Sys[n] of the IO system to be searched for
  Offset_System_Array : WORD;	//Address of the IO_Sys[n] of the IO system to be searched for
  Vendor_ID : WORD;	//Vendor ID; is filled in if supported by the CPU
  Device_ID : WORD;	//Device ID; is filled in if supported by the CPU
  Error_Level : BYTE;	//Error level 1=IO device, 2=module, 3=submodule, 4=channel
  Module_No : WORD;	//No. of the relevant module
  Submodule_No : WORD;	//No. of the relevant submodule
  Channel_No : WORD;	//No. of the relevant channel
  Error_Cat : DWORD;	//Category of the error (lexicon ID)
  Help_Cat : DWORD;	//Category of the error in the help lexicon
  Error_No : DWORD;	//Number of the error (index in the lexicon)
  Map_ErrorNo : WORD;	//The number of the error text in the export table
  Map_HelpNo : WORD;	//The number of the help text in the export table
  Number_IO_Sys : WORD  := W#16#1;	//Number of configured IO systems
  Systems_Status : WORD;	//Overview of all I/O systems (1: problem)
  Detail_IO_Sys : ARRAY  [0 .. 0 ] OF //Array of structures per IO system
    STRUCT
      System_No : WORD  := W#16#64;	//IO system number
      Max_Num_Dev : WORD  := W#16#2F;	//Maximum ID of the configured IO devices
      Offset : WORD  := W#16#36;	//Offset at the beginning of the field in bytes relative to Detail_IO_Sys
      Devices_Affected : WORD;	//Number of IO devices involved
      Offset_Status : WORD  := W#16#42;	//Offset at the beginning of the IO_Sys_Status field in bytes relative to Detail
    END_STRUCT ;
  IO_Sys_0 : ARRAY  [0 .. 5 ] OF //Status of the IO devices of IO system 100
WORD;
  IO_Sys_Status0 : ARRAY  [0 .. 0 ] OF //Status of the IO device groups of IO system 100
WORD;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "DB_MMC"
TITLE =DATA STRUCTURE FOR STORAGE ON MMC
VERSION : 1.0
STRUCT
  BDD : ARRAY  [1 .. 4, 1 .. 200 ] OF INT;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "Z1G"
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'Z1G'
VERSION : 1.0
STRUCT
  LIEN_PUP : LIEN_PUP;	//PANEL LINK
  NUM_MVT : INT;	//SELECTED MOVEMENT NUMBER
  NUM_PAGE : INT;	//SELECTED PAGE NUMBER
  PROG_SELMDF : WORD;	//Forcage MDF prog : 1=normal, 2=vidage , 4=arret_preh_vide, 8=retour_origine cyc
  TCA : DINT;	//ZONE 1: RATE TIME ZONE / TEMP CADENCE ZONE
  DDO : BOOL;	//ZONE 1: REQUEST FILLING OUT ZONE STOP LOGS
  DPR : BOOL;	//ZONE 1: REQUEST ZONE PREVENTIVE
  PMAZ : BOOL;	//ZONE 1: AUTO MODE LOST / PERTE MARCHE AUTO ZONE
  PMCY : BOOL;	//ZONE 1: CYCLE START LOST / PERTE MARCHE CYCLE ZONE
  IHM1PM : BOOL;	//PANEL MOP IN MANUAL MODE / PUPITRE MOP EN MODE MANUEL
  IHM2PM : BOOL;	//PANEL Z1SOP2 IN MANUAL MODE / PUPITRE Z1SOP2 EN MODE MANUEL
  IHM3PM : BOOL;	//PANEL Z1SOP3 IN MANUAL MODE / PUPITRE Z1SOP3 EN MODE MANUEL
  IHM4PM : BOOL;	//PANEL Z1SOP4 IN MANUAL MODE / PUPITRE Z1SOP4 EN MODE MANUEL
  PUP1DC : BOOL;	//PANEL MOP COMMUNICATION FAULT / DEFAUT COMMUNICATION PUPITRE MOP
  PUP2DC : BOOL;	//PANEL Z1SOP2 COMMUNICATION FAULT / DEFAUT COMMUNICATION PUPITRE Z1SOP2
  PUP3DC : BOOL;	//PANEL Z1SOP3 COMMUNICATION FAULT / DEFAUT COMMUNICATION PUPITRE Z1SOP3
  PUP4DC : BOOL;	//PANEL Z1SOP4 COMMUNICATION FAULT / DEFAUT COMMUNICATION PUPITRE Z1SOP4
  ITR : BOOL;	//ZONE 1: REQUISITE TIME INFORMATION
  MDV : BOOL;	//DRY RUN MEMORY
  IHMDEF : BOOL;	//HMI FAULT
  MVEC : BOOL;	//MOVEMENT IN PROGRESS INDICATOR
  RAZ : BOOL;	//RESET ZONE PRODUCTION COMPTEUR / RAZ COMPTEUR PRODUCTION ZONE
  MCYRB : BOOL;	//ZONE : ALL ROBOT CYCLE START MODE / MARCHE CYCLE DE TOUT LES ROBOTS
  DRRB : BOOL;	//ZONE : REQUEST FOR ROBOT MAIN FALLBACK POSITION / DEMANDE REPLI DES ROBOTS
  DCHEG : BOOL;	//ZONE : REQUEST FOR TIP REPLACEMENT / DEMANDE CHANGEMENT ELECTRODE
  FCHE : BOOL;	//ZONE : END OF TIP REPLACEMENT / FIN DE CHANGEMENT ELECTRODE
  A0 : STRUCT	//MONTAGE A0 / MONTAGE A0
    REPLI : BOOL;	//MONTAGE MAIN FALLBACK POSITION / POSITION DE REPLI MONTAGE A0
    MDV : BOOL;	//MONTAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE MONTAGE
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP5 : BOOL;	//PRESENT PART INFORMATION TYPE 5 / INFORMATION PIECE PRESENTE TYPE 5
    IPP6 : BOOL;	//PRESENT PART INFORMATION TYPE 6 / INFORMATION PIECE PRESENTE TYPE 6
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_A0L : STRUCT	//ECHANGES AVEC PGF LANCEMENT SIPTOL XX.XX
      AC : BOOL;	//COMPARING AUTHORIZATION / AUTORISATION COMPARAISON
      AR : BOOL;	//ANSWER AUTHORIZATION / AUTORISATION REPONSE
    END_STRUCT ;
  END_STRUCT ;
  A0L : STRUCT	//A0L - PGF LANCEMENT
    ECHG_A0 : STRUCT	//EXCHANGES WITH STAGE A0/ ECHANGES AVEC LE POSTE A0
      IPOF : BOOL;	//INFO PRESENCE ORDRE DE FABRICATION
      MAP : BOOL;	//MODE MISE AU POINT
      FABSP : BOOL;	//FABRICATION SANS PIECE
      PFB : BOOL;	//PIECE A FAIRE BONNE
      PFM : BOOL;	//PIECE A FAIRE MAUVAISE
      IFC : BOOL;	//INFORMATION FIN DE COMPARAISON
    END_STRUCT ;
  END_STRUCT ;
  A01 : STRUCT	//MONTAGE A01 / MONTAGE A01
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_A1 : STRUCT	//EXCHANGE WITH  A1
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_B0 : STRUCT	//EXCHANGE WITH  B0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
  END_STRUCT ;
  A02 : STRUCT	//MONTAGE A02 / MONTAGE A02
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_A2 : STRUCT	//EXCHANGE WITH  A2
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_B0 : STRUCT	//EXCHANGE WITH  B0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
  END_STRUCT ;
  A1 : STRUCT	//OP_BPVAL A1 / OP_BPVAL A1
    REPLI : BOOL;	//OP_BPVAL MAIN FALLBACK POSITION / POSITION DE REPLI OP_BPVAL A1
    MDV : BOOL;	//OP_BPVAL IN DRY RUN MODE / MEMOIRE DEVERMINAGE OP_BPVAL
    ECHG_A01 : STRUCT	//EXCHANGE WITH  A01
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
  END_STRUCT ;
  A2 : STRUCT	//OP_BPVAL A2 / OP_BPVAL A2
    REPLI : BOOL;	//OP_BPVAL MAIN FALLBACK POSITION / POSITION DE REPLI OP_BPVAL A2
    MDV : BOOL;	//OP_BPVAL IN DRY RUN MODE / MEMOIRE DEVERMINAGE OP_BPVAL
    ECHG_A02 : STRUCT	//EXCHANGE WITH  A02
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
  END_STRUCT ;
  B0 : STRUCT	//ROBOT B0 / ROBOT B0
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT B0
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_C01 : STRUCT	//EXCHANGE WITH  C01
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_A01 : STRUCT	//EXCHANGE WITH  A01
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_A02 : STRUCT	//EXCHANGE WITH  A02
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_C02 : STRUCT	//EXCHANGE WITH  C02
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
  END_STRUCT ;
  B0R : STRUCT	//Repouso B0R / Repouso B0R
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_B0 : STRUCT	//EXCHANGE WITH  B0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
  END_STRUCT ;
  B01 : STRUCT	//PREHENSEUR B01 / PREHENSEUR B01
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
  END_STRUCT ;
  B02 : STRUCT	//PREHENSEUR B02 / PREHENSEUR B02
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
  END_STRUCT ;
  C0 : STRUCT	//FERRAMENTA C0 / FERRAMENTA C0
    REPLI : BOOL;	//FERRAMENTA MAIN FALLBACK POSITION / POSITION DE REPLI FERRAMENTA C0
    MDV : BOOL;	//FERRAMENTA IN DRY RUN MODE / MEMOIRE DEVERMINAGE FERRAMENTA
  END_STRUCT ;
  C01 : STRUCT	//MONTAGEM C01 / MONTAGEM C01
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_B0 : STRUCT	//EXCHANGE WITH  B0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_C1 : STRUCT	//EXCHANGE WITH  C1
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_C3 : STRUCT	//EXCHANGE WITH  C3
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_D0 : STRUCT	//EXCHANGE WITH  D0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
  END_STRUCT ;
  C02 : STRUCT	//MONTAGEM C02 / MONTAGEM C02
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_B0 : STRUCT	//EXCHANGE WITH  B0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_C1 : STRUCT	//EXCHANGE WITH  C1
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_C3 : STRUCT	//EXCHANGE WITH  C3
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_D0 : STRUCT	//EXCHANGE WITH  D0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
  END_STRUCT ;
  C1 : STRUCT	//ROBOT C1 / ROBOT C1
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT C1
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_C01 : STRUCT	//EXCHANGE WITH  C01
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_C02 : STRUCT	//EXCHANGE WITH  C02
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  C3 : STRUCT	//ROBOT C3 / ROBOT C3
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT C3
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_C01 : STRUCT	//EXCHANGE WITH  C01
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_C02 : STRUCT	//EXCHANGE WITH  C02
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  D0 : STRUCT	//ROBOT D0 / ROBOT D0
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT D0
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_E0 : STRUCT	//EXCHANGE WITH  E0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_C01 : STRUCT	//EXCHANGE WITH  C01
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_C02 : STRUCT	//EXCHANGE WITH  C02
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  D01 : STRUCT	//PREHENSEUR D01 / PREHENSEUR D01
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
  END_STRUCT ;
  E0 : STRUCT	//MONTAGE E0 / MONTAGE E0
    REPLI : BOOL;	//MONTAGE MAIN FALLBACK POSITION / POSITION DE REPLI MONTAGE E0
    MDV : BOOL;	//MONTAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE MONTAGE
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP5 : BOOL;	//PRESENT PART INFORMATION TYPE 5 / INFORMATION PIECE PRESENTE TYPE 5
    IPP6 : BOOL;	//PRESENT PART INFORMATION TYPE 6 / INFORMATION PIECE PRESENTE TYPE 6
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_D0 : STRUCT	//EXCHANGE WITH  D0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_E1 : STRUCT	//EXCHANGE WITH  E1
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_E2 : STRUCT	//EXCHANGE WITH  E2
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_F0 : STRUCT	//EXCHANGE WITH  F0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_G0M : STRUCT	//EXCHANGE MATCHING POINT / ECHANGES POINT MARIAGE
      AN : BOOL;	//AUTHORIZATION OF NEUTRALIZATION / AUTORISATION DE NEUTRALISATION
      AM : BOOL;	//AUTHORIZATION OF MARIAGE / AUTORISATION DE MARIAGE
    END_STRUCT ;
  END_STRUCT ;
  E1 : STRUCT	//ROBOT E1 / ROBOT E1
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT E1
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_E0 : STRUCT	//EXCHANGE WITH  E0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  E2 : STRUCT	//ROBOT E2 / ROBOT E2
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT E2
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_E0 : STRUCT	//EXCHANGE WITH  E0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  F0 : STRUCT	//ROBOT F0 / ROBOT F0
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT F0
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_E0 : STRUCT	//EXCHANGE WITH  E0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_G0 : STRUCT	//EXCHANGE WITH  G0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_F9 : STRUCT	//EXCHANGE WITH  F9
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  F01 : STRUCT	//PREHENSEUR F01 / PREHENSEUR F01
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
  END_STRUCT ;
  F9 : STRUCT	//MONTAGE F9 / MONTAGE F9
    REPLI : BOOL;	//MONTAGE MAIN FALLBACK POSITION / POSITION DE REPLI MONTAGE F9
    MDV : BOOL;	//MONTAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE MONTAGE
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP5 : BOOL;	//PRESENT PART INFORMATION TYPE 5 / INFORMATION PIECE PRESENTE TYPE 5
    IPP6 : BOOL;	//PRESENT PART INFORMATION TYPE 6 / INFORMATION PIECE PRESENTE TYPE 6
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_F0 : STRUCT	//EXCHANGE WITH  F0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
  END_STRUCT ;
  G0 : STRUCT	//MONTAGE G0 / MONTAGE G0
    REPLI : BOOL;	//MONTAGE MAIN FALLBACK POSITION / POSITION DE REPLI MONTAGE G0
    MDV : BOOL;	//MONTAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE MONTAGE
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP5 : BOOL;	//PRESENT PART INFORMATION TYPE 5 / INFORMATION PIECE PRESENTE TYPE 5
    IPP6 : BOOL;	//PRESENT PART INFORMATION TYPE 6 / INFORMATION PIECE PRESENTE TYPE 6
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_F0 : STRUCT	//EXCHANGE WITH  F0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_G1 : STRUCT	//EXCHANGE WITH  G1
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_G3 : STRUCT	//EXCHANGE WITH  G3
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_G2 : STRUCT	//EXCHANGE WITH  G2
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_G4 : STRUCT	//EXCHANGE WITH  G4
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_H0 : STRUCT	//EXCHANGE WITH  H0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_U0 : STRUCT	//EXCHANGE WITH  U0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_G0R : STRUCT	//ECHANGES AVEC PGF RECALAGE SIPTOL XX.XX
      AC : BOOL;	//COMPARING AUTHORIZATION / AUTORISATION COMPARAISON
      AR : BOOL;	//ANSWER AUTHORIZATION / AUTORISATION REPONSE
      AC_TR : BOOL;	//DRAWER COMPARING AUTHORIZATION / AUTORISATION COMPARAISON TIROIR
      AR_TR : BOOL;	//DRAWER ANSWER AUTHORIZATION / AUTORISATION REPONSE TIROIR
    END_STRUCT ;
    ECHG_G0M : STRUCT	//EXCHANGE MATCHING POINT / ECHANGES POINT MARIAGE
      AN : BOOL;	//AUTHORIZATION OF NEUTRALIZATION / AUTORISATION DE NEUTRALISATION
      AM : BOOL;	//AUTHORIZATION OF MARIAGE / AUTORISATION DE MARIAGE
    END_STRUCT ;
  END_STRUCT ;
  G0R : STRUCT	//G0R - PGF RECALAGE
    IDOPDI : BOOL;	//INFORMATION APPEL OPERATEUR SUR DECALAGE
    IDOPINJ : BOOL;	//INFORMATION APPEL OPERATEUR SUR INJECTION
    IDOPSORT : BOOL;	//INFORMATION APPEL OPERATEUR SUR SORTIE
    VDFCE : BOOL;	//VOYANT PIECE A RETIRER DU TIROIR E/S (INJECTION)
    VDPIE : BOOL;	//VOYANT PIECE A RETIRER DU TIROIR E/S (DISCORDANCE)
    ATOPTR : BOOL;	//ATTENTE OPERATEUR SUR TIROIR E/S
    ETAT_DIV : STRUCT	//ETAT DES DIVERSITES PRESENTES
      PFBAM : BOOL;	//PIECE A FAIRE BONNE SUR TABLE AMONT
      PFMAM : BOOL;	//PIECE A FAIRE MAUVAISE SUR TABLE AMONT
      PFBTR : BOOL;	//PIECE A FAIRE BONNE SUR TIROIR E/S
      PFMTR : BOOL;	//PIECE A FAIRE MAUVAISE SUR TIROIR E/S
      IFABSPF : BOOL;	//INFO FABRICATION SANS PIECE AU FILM
      IPATR : BOOL;	//INFORMATION PIECE ABSENTE AU TIROIR E/S
      MAJMP : BOOL;	//AUTORISATION MISE A JOUR MOT PIECE
    END_STRUCT ;
    INF_RECAL : STRUCT	//INFORMATION RECALAGE
      IPOF : BOOL;	//INFORMATION PRESENTE ORDRE DE FABRICATION
      IATOF : BOOL;	//INFORMATION ATTENTE ORDRE DE FABRICATION
      ATCAL : BOOL;	//ATTENTE PROPOSITION CALCULATEUR
      VALAPIOK : BOOL;	//REPONSE DE L'API (VALAPI=1 et VALCAL=0)
      AR : BOOL;	//AUTORISATION REPONSE AU CALCULATEUR
      ADEC : BOOL;	//AUTORISATION DE DECISION
      IDINJ : BOOL;	//INFORMATION DEMANDE D'INJECTION SIPTOL
      IDSO : BOOL;	//INFORMATION DEMANDE DE SORTIE SIPTOL
      ISUNIS : BOOL;	//INFORMATION SORTIE UNIT SEULE (VEHICULE ANNULE)
      IFABSPF : BOOL;	//INFORMATION FABRICATION SANS PIECE AU FILM
      APOPINJ : BOOL;	//INFORMATION APPEL OPERATEUR SUR INJECTION
      APOPDEC : BOOL;	//INFORMATION APPEL OPERATEUR SUR DISCORDANCE
      TRAFRAI : BOOL;	//DEMANDE DE VISU TABLE ENCOURS SUR ECRAN ANALYSE
    END_STRUCT ;
    MEMDEC : STRUCT	//MEMOIRE DECISION RECALAGE
      MDESUB : BOOL;	//MEMOIRE SUBS. PIECE BONNE
      MDESUL : BOOL;	//MEMOIRE SUBS. PIECE LOUPEE
      MDEC : BOOL;	//MEMOIRE DECISION PRISE
      MDINJ : BOOL;	//MEMOIRE DEMANDE INJECTION
      MDPMQI : BOOL;	//MEMOIRE DECISION PIECE MANQUANTE SUR INJECTION
      MDAOSIP : BOOL;	//MEMOIRE DECISION APPEL OPERATEUR SIPTOL
      MDSPDI : BOOL;	//MEMOIRE DECISION SORTIE PIECE SUR DECALAGE
      MDEDI : BOOL;	//MEMOIRE DECISION INTRODUCTION PIECE SUR DECALAGE
      MDSOR : BOOL;	//MEMOIRE DEMANDE DE SORTIE (SIPTOL)
      MDSUB : BOOL;	//MEMOIRE DECISION SUBSTITUTION PIECE BONNE
      MDFNOR : BOOL;	//MEMOIRE DECISION FLUX NORMAL
      MDSUL : BOOL;	//MEMOIRE DECISION SUBSTITUTION PIECE LOUPEE
      MDSL : BOOL;	//MEMOIRE DECISION SORTIE PIECE LOUPEE
      MDSMA : BOOL;	//MEMOIRE DECISION SORTIE PIECE MAP
      MDMQDI : BOOL;	//MEMOIRE DECISION MANQUE PIECE SUR DECALAGE
      MDSORCV : BOOL;	//MEMOIRE DECISION SORTIE PIECE SIPTOL + CROCHET VIDE
      DMQSCV : BOOL;	//MEMOIRE DECISION PIECE ATTENDUS EN SORTIE MANQUANTE + CROCHET VIDE
      DMQSOR : BOOL;	//MEMOIRE DECISION ATTENDUE EN SORTIE MANQUANTE SANS CROCHET VIDE
    END_STRUCT ;
    MODCY : STRUCT	//MODIFICATION ETAT CYCLE
      RETPTR : BOOL;	//RETRAIT PIECE TIROIR E/S
      DIVINCO : BOOL;	//DIVERSITE INCONNUE
    END_STRUCT ;
    DEC_OP : STRUCT	//DECISION OPERATEUR SUR RECALAGE
      DOVINJ : BOOL;	//IHM : TOUCHE VALIDATION INJECTION
      DORINJ : BOOL;	//IHM : TOUCHE CONFIRMATION INJECTION
      DOSORTD : BOOL;	//IHM : TOUCHE DEMANDE DE SORTIE SUR DECALAGE
      DOINTD : BOOL;	//IHM : TOUCHE DEMANDE INTRO SUR DECALAGE
      DOMANQS : BOOL;	//IHM : CONFIRMATION PIECE MANQUANTE SUR DECALAGE
      DOAPOS : BOOL;	//IHM : TOUCHE APPEL OPERATEUR SUR DECALAGE
      DOSUBB : BOOL;	//IHM : TOUCHE DEMANDE DE SUBSTITUTION PIECE BONNE
      DOSUBL : BOOL;	//IHM : TOUCHE DEMANDE DE SUBSTITUTION PIECE LOUPEE
      DPLR : BOOL;	//IHM : DECLARATION PIECE LOUPEE SUR ROBOT
    END_STRUCT ;
  END_STRUCT ;
  G0M : STRUCT	//G0M - PGF MARIAGE
    DEC_MAR : STRUCT	//MATCHING DECISION / DECISION MARIAGE
      MAR_OK : BOOL;	//MATCHING OK / MARIAGE OK
      MAR_NOK : BOOL;	//MATCHING FAULT / DISCORDANCE MARIAGE
      SORT_G0 : BOOL;	//EJECT PART / SORTIE PIECE G0
      SORT_E0 : BOOL;	//EJECT PART / SORTIE PIECE E0
      SORT_T0D : BOOL;	//EJECT PART / SORTIE PIECE T0D
    END_STRUCT ;
  END_STRUCT ;
  G1 : STRUCT	//ROBOT G1 / ROBOT G1
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT G1
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_G0 : STRUCT	//EXCHANGE WITH  G0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  G2 : STRUCT	//ROBOT G2 / ROBOT G2
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT G2
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_G0 : STRUCT	//EXCHANGE WITH  G0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  G3 : STRUCT	//ROBOT G3 / ROBOT G3
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT G3
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_G0 : STRUCT	//EXCHANGE WITH  G0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  G4 : STRUCT	//ROBOT G4 / ROBOT G4
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT G4
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_G0 : STRUCT	//EXCHANGE WITH  G0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  H0 : STRUCT	//ROBOT H0 / ROBOT H0
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT H0
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_G0 : STRUCT	//EXCHANGE WITH  G0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
    DCHE : BOOL;	//TIP CHANGE REQUEST / DEMANDE DE CHANGEMENT ELECTRODE
    PCHE : BOOL;	//TIP REPLACEMENT POSITION / POSITION CHANGEMENT ELECTRODE
    NBCHE : WORD;	//COMPTEUR DE CHANGEMENT ELECTRODE / COMPTEUR DE CHANGEMENT ELECTRODE
    CCAS : BOOL;	//CONTROLE COUPURE ASSERVISSEMENT / CONTROLE COUPURE ASSERVISSEMENT
    DCHEL : BOOL;	//DEMANDE DE CHANGEMENT ELECTRODE LOCAL / DEMANDE DE CHANGEMENT ELECTRODE LOCAL
    FCHEL : BOOL;	//FIN DE CHANGEMENT ELECTRODE LOCAL / FIN DE CHANGEMENT ELECTRODE LOCAL
    DCFR : BOOL;	//DEMANDE CHANGEMENT DE FRAISE / DEMANDE CHANGEMENT DE FRAISE
  END_STRUCT ;
  H01 : STRUCT	//PREHENSEUR H01 / PREHENSEUR H01
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
  END_STRUCT ;
  T0C : STRUCT	//CHGT_MEUBLE T0C / CHGT_MEUBLE T0C
    REPLI : BOOL;	//CHGT_MEUBLE MAIN FALLBACK POSITION / POSITION DE REPLI CHGT_MEUBLE T0C
    MDV : BOOL;	//CHGT_MEUBLE IN DRY RUN MODE / MEMOIRE DEVERMINAGE CHGT_MEUBLE
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP5 : BOOL;	//PRESENT PART INFORMATION TYPE 5 / INFORMATION PIECE PRESENTE TYPE 5
    IPP6 : BOOL;	//PRESENT PART INFORMATION TYPE 6 / INFORMATION PIECE PRESENTE TYPE 6
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_T0CL : STRUCT	//ECHANGES AVEC PGF LANCEMENT SIPTOL XX.XX
      AC : BOOL;	//COMPARING AUTHORIZATION / AUTORISATION COMPARAISON
      AR : BOOL;	//ANSWER AUTHORIZATION / AUTORISATION REPONSE
    END_STRUCT ;
    IDVM : BOOL;	//STORAGE DRY RUN INFORMATION / INFORMATION DEVERMINAGE MEUBLE
  END_STRUCT ;
  T0CL : STRUCT	//T0CL - PGF LANCEMENT
    ECHG_T0C : STRUCT	//EXCHANGES WITH STAGE T0C/ ECHANGES AVEC LE POSTE T0C
      IPOF : BOOL;	//INFO PRESENCE ORDRE DE FABRICATION
      MAP : BOOL;	//MODE MISE AU POINT
      FABSP : BOOL;	//FABRICATION SANS PIECE
      PFB : BOOL;	//PIECE A FAIRE BONNE
      PFM : BOOL;	//PIECE A FAIRE MAUVAISE
      IFC : BOOL;	//INFORMATION FIN DE COMPARAISON
    END_STRUCT ;
  END_STRUCT ;
  T0D : STRUCT	//DCHGT_MEUBL T0D / DCHGT_MEUBL T0D
    REPLI : BOOL;	//DCHGT_MEUBL MAIN FALLBACK POSITION / POSITION DE REPLI DCHGT_MEUBL T0D
    MDV : BOOL;	//DCHGT_MEUBL IN DRY RUN MODE / MEMOIRE DEVERMINAGE DCHGT_MEUBL
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP5 : BOOL;	//PRESENT PART INFORMATION TYPE 5 / INFORMATION PIECE PRESENTE TYPE 5
    IPP6 : BOOL;	//PRESENT PART INFORMATION TYPE 6 / INFORMATION PIECE PRESENTE TYPE 6
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_U0 : STRUCT	//EXCHANGE WITH  U0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
    ECHG_G0M : STRUCT	//EXCHANGE MATCHING POINT / ECHANGES POINT MARIAGE
      AN : BOOL;	//AUTHORIZATION OF NEUTRALIZATION / AUTORISATION DE NEUTRALISATION
      AM : BOOL;	//AUTHORIZATION OF MARIAGE / AUTORISATION DE MARIAGE
    END_STRUCT ;
    IDVM : BOOL;	//STORAGE DRY RUN INFORMATION / INFORMATION DEVERMINAGE MEUBLE
  END_STRUCT ;
  T1 : STRUCT	//OP_BPVAL T1 / OP_BPVAL T1
    REPLI : BOOL;	//OP_BPVAL MAIN FALLBACK POSITION / POSITION DE REPLI OP_BPVAL T1
    MDV : BOOL;	//OP_BPVAL IN DRY RUN MODE / MEMOIRE DEVERMINAGE OP_BPVAL
    ECHG_T0C : STRUCT	//EXCHANGE WITH  T0C
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
  END_STRUCT ;
  U0 : STRUCT	//ROBOT U0 / ROBOT U0
    REPLI : BOOL;	//ROBOT MAIN FALLBACK POSITION / POSITION DE REPLI ROBOT U0
    MDV : BOOL;	//ROBOT IN DRY RUN MODE / MEMOIRE DEVERMINAGE ROBOT
    ECHG_G0 : STRUCT	//EXCHANGE WITH  G0
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    ECHG_T0D : STRUCT	//EXCHANGE WITH  T0D
      FT1 : BOOL;	//END OF WORK 1 / FIN DE TRAVAIL 1
      SA : BOOL;	//NOT IN ZONE / SECURITE ARRIERE
    END_STRUCT ;
    AUTO : BOOL;	//AUTOMATIC MODE / MODE AUTOMATIQUE
    MANU : BOOL;	//MANUAL MODE / MODE MANUEL
  END_STRUCT ;
  U0R : STRUCT	//Repouso U0R / Repouso U0R
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
    ECHG_U0 : STRUCT	//EXCHANGE WITH  U0
      AT1 : BOOL;	//WORK  AUTHORIZATION 1 / AUTORISATION DE TRAVAIL 1
      ART1 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 1 / AUTORISATION RECUL TRAVAIL 1
      AT2 : BOOL;	//WORK  AUTHORIZATION 2 / AUTORISATION DE TRAVAIL 2
      ART2 : BOOL;	//WORK MOVE AWAY AUTHORIZATION 2 / AUTORISATION RECUL TRAVAIL 2
    END_STRUCT ;
  END_STRUCT ;
  U01 : STRUCT	//PREHENSEUR U01 / PREHENSEUR U01
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
  END_STRUCT ;
  U02 : STRUCT	//PREHENSEUR U02 / PREHENSEUR U02
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    MDV : BOOL;	//STAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE POSTE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
  END_STRUCT ;
  U9 : STRUCT	//MONTAGE U9 / MONTAGE U9
    REPLI : BOOL;	//MONTAGE MAIN FALLBACK POSITION / POSITION DE REPLI MONTAGE U9
    MDV : BOOL;	//MONTAGE IN DRY RUN MODE / MEMOIRE DEVERMINAGE MONTAGE
    XIPP : ARRAY  [1 .. 64 ] OF //AUXILLIARY PRESENT PART INFORMATION / AUXILIAIRES INFORMATION PIECE PRESENTE
BOOL;
    IPP1 : BOOL;	//PRESENT PART INFORMATION TYPE 1 / INFORMATION PIECE PRESENTE TYPE 1
    IPP2 : BOOL;	//PRESENT PART INFORMATION TYPE 2 / INFORMATION PIECE PRESENTE TYPE 2
    IPP3 : BOOL;	//PRESENT PART INFORMATION TYPE 3 / INFORMATION PIECE PRESENTE TYPE 3
    IPP4 : BOOL;	//PRESENT PART INFORMATION TYPE 4 / INFORMATION PIECE PRESENTE TYPE 4
    IPP5 : BOOL;	//PRESENT PART INFORMATION TYPE 5 / INFORMATION PIECE PRESENTE TYPE 5
    IPP6 : BOOL;	//PRESENT PART INFORMATION TYPE 6 / INFORMATION PIECE PRESENTE TYPE 6
    IPP : BOOL;	//PRESENT PART INFORMATION / INFORMATION PIECE PRESENTE
    IPA : BOOL;	//ABSENT PART INFORMATION / INFORMATION PIECE ABSENTE
    IAP : BOOL;	//PART ABSENCE INFORMATION / INFORMATION ABSENCE PIECE
    CMR : BOOL;	//RETURNED MACHINE CONDITIONS / CONDITION MACHINE RECULEE
    CMA : BOOL;	//ADVANCED MACHINE CONDITIONS / CONDITION MACHINE AVANCEE
    DROC : BOOL;	//HOME POSITION RETURN REQUEST / DEMANDE RETOUR ORIGINE DE CYCLE
  END_STRUCT ;
  RODM : STRUCT	//ZONE ROBOTS TIP DRESS CONTROL / GESTION DU RODAGE ZONE
    RBMDR : WORD;	//TIP DRESS REQUEST WORD MEMORY / MOT MEMOIRE DEMANDE DE RODAGE
    RBMFR : WORD;	//END OF TIP DRESS WORD MEMORY / MOT MEMOIRE FIN DE RODAGE
  END_STRUCT ;
  ROD : STRUCT	//déclaration de groupe de rodage
    GR1 : ARRAY  [0 .. 15 ] OF //IHMP : Groupe de rodage 1
BOOL;
    GR2 : ARRAY  [0 .. 15 ] OF //IHMP : Groupe de rodage 2
BOOL;
    GR3 : ARRAY  [0 .. 15 ] OF //IHMP : Groupe de rodage 3
BOOL;
    GR4 : ARRAY  [0 .. 15 ] OF //IHMP : Groupe de rodage 4
BOOL;
  END_STRUCT ;
  CHELM : STRUCT	//Gestion du changement d'électrodes zone
    BDCHEG : BOOL;	//IHMP : BP Demande de changement d'électrodes
    DCHE : BOOL;	//IHMP : Demande Changement Electrodes
    BFCHE : BOOL;	//IHMP : BP fin de changement d'électrodes
    VVFCE : BOOL;	//IHMP : voyant  fin de changement d'électrodes
    BANNUL : BOOL;	//IHMP : BP annulation de la Demande de changement d'électrodes
    ABANCE : BOOL;	//IHMP : Autorisation annulation de la Demande de changement d'électrodes
    VACE : BOOL;	//IHMP : message/voyant autorisation de changement d'électrodes
    VAACE : BOOL;	//IHMP : message/voyant en attente autorisation de changement d'électrodes
    VVMFCE : BOOL;	//IHMP : message/voyant en attente validation MDF ARPV
    VAPVEC : BOOL;	//IHMP : message/voyant en attente ARPV
    C1_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot C1
    C3_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot C3
    D0_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot D0
    E1_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot E1
    E2_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot E2
    F0_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot F0
    G1_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot G1
    G2_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot G2
    G3_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot G3
    G4_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot G4
    H0_SELEC : BOOL;	//IHMP : case à cocher - Sélection du Robot H0
    RBMDC : WORD;	//Zone : Mot Mémoire Demande Changement d'électrodes
    RBMFC : WORD;	//Zone : Mot Mémoire Fin Changement d'électrodes
    FCHE : BOOL;	//Zone : Fin de changement d'électrodes
    EALR : WORD;	//Zone : Différence max rodages - alarme
  END_STRUCT ;
  CHELA : STRUCT	//déclaration de groupe de rodage
    GR1 : ARRAY  [0 .. 15 ] OF //IHMP : Groupe de Changement d'électrodes 1
BOOL;
    GR2 : ARRAY  [0 .. 15 ] OF //IHMP : Groupe de Changement d'électrodes 2
BOOL;
    GR3 : ARRAY  [0 .. 15 ] OF //IHMP : Groupe de Changement d'électrodes 3
BOOL;
    GR4 : ARRAY  [0 .. 15 ] OF //IHMP : Groupe de Changement d'électrodes 4
BOOL;
  END_STRUCT ;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

DATA_BLOCK "Z1T"
//This DB is used to record the movements reference times in a zone (area)
//Symbolic name of DB = ZxT
//DB Number = x98
//With x = zone number (1 to 9)
//DB d enregistrement des Temps ref d'une zone
//Le Nom du DB = ZxT
//Le numéro du DB = x98
//Avec x =au numero de la zone (1à 9)
//
VERSION : 1.1
STRUCT
  A01 : STRUCT
    PLA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLA
    PLB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLB
    PLC_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLC
    SRD_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRD
    SRE_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRE
  END_STRUCT ;
  A02 : STRUCT
    PLA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLA
    PLB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLB
    PLC_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLC
    SRD_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRD
    SRE_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRE
  END_STRUCT ;
  B0R : STRUCT
    TPA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT TPA
    TPB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT TPB
  END_STRUCT ;
  B01 : STRUCT
    SRA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRA
    SRB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRB
  END_STRUCT ;
  C01 : STRUCT
    PLA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLA
    PLB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLB
    PLF_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLF
    PLG_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLG
    SRC_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRC
    SRD_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRD
    SRE_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRE
    SRH_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRH
  END_STRUCT ;
  D01 : STRUCT
    SRA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRA
    SRB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRB
    SRC_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRC
  END_STRUCT ;
  E0 : STRUCT
    CAD_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT CAD
    CAE_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT CAE
    CAF_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT CAF
    PLA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLA
    SRB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRB
    SRC_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRC
    SRG_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRG
    SRH_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRH
  END_STRUCT ;
  F01 : STRUCT
    SRA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRA
    SRB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRB
    SRC_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRC
  END_STRUCT ;
  G0 : STRUCT
    CAA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT CAA
    CAC_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT CAC
    PLE_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLE
    PLF_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLF
    PLI_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLI
    SRB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRB
    SRD_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRD
    SRG_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRG
    SRH_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRH
  END_STRUCT ;
  H01 : STRUCT
    PLB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLB
    SRA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRA
  END_STRUCT ;
  U0R : STRUCT
    TPA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT TPA
    TPB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT TPB
  END_STRUCT ;
  U01 : STRUCT
    PLA_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLA
    PLB_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLB
    PLC_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT PLC
    SRD_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRD
    SRE_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT SRE
    VEF_TREF : TIME;	//REFERENCE TIME FOR MOVEMENT VEF
  END_STRUCT ;
END_STRUCT ;
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "BF_ACT_DESACT"
TITLE =BF_ACT_DESACT
//**********************************************************************
//*                           BF_ACT_DESACT                            *
//*      Assure l'activation / desactivation d'un groupe d'IODevice    *
//*      Processes activation / deactivation of an IODevice group      *
//**********************************************************************
//In english further below
//------------------------
//DESCRIPTION:
//************
//La BF ACT_DESACT permet d'activer ou de desactiver un groupe d'IO DEVICE sur le
//reseau PROFINET IO pendant le cycle machine ou lors d'operations de maintenance
//sans provoquer de defaut Profinet.
//Un groupe d'IO Device est un ensemble d'IODevice Profinet (de 1 a 16 IODevices
//par groupe) actives / desactives lors de la meme action process par exemple pour
//
//des IODevices Profinet montes en aval d'un changeur d'outil.
//
//MISE EN OEUVRE :
//****************
//Prevoir une instance de BF_ACT_DESACT par groupe d'IOdevices Profinet a activer
///desactiver.
//
//La demande de desactivation est prioritaire sur la demande d'activation.
//
//Parametrage : les numeros d'appareil dans le groupe doivent etre consecutifs
//(HWConfig).
//
//Pour plus de details sur la mise en uvre de la fonctionnalite Fast Start-Up se
//referer au guide de mise en uvre Profinet GE03.MO.160.
//
//Mettre en oeuvre le bool Sysfroid dans l'ob1 et documenter l'entree SYSFROID du
//Bloc (Voir Doc mise en oeuvre BF V3.0 mini)
//
//Codes de defaut:
//****************
//En cas d'erreur de parametrage "Diag.CodeDef" prend la valeur:
//0x827F si la valeur du parametre "DevCnt" n'est pas comprise entre 1 et 16
//0x8095 si au moins un des modules du groupe n'existe pas dans la configuration
//materielle
//Pour les autres codes d'erreur, consulter la documentation des SFC 70 et SFC 12.
//
//OBJET WINCC :
//*************
//ATTENTION :
//L'objet Act-Desact FR_EN est a utilise uniquement que pour les ecrans de
//maintenance.
//Les entrees IhmDeaReq et IhmActReq sont reservees aux ecrans de maintenance
//sous
//Wincc pour permettre une activation desactivation d'un module sans condition
//prealable.
//
//- Liens entre Objet Wincc et Programme:
//ZXG_Manu = Z$G.manu
//Pilot_HmiActReq= <Nom du DB SE>.<Non Instance BF_Act_Desact>.Pilot.IhmActReq
//Pilot_HmiDeaReq= <Nom du DB SE>.<Non Instance BF_Act_Desact>.Pilot.IhmDeaReq
//Diag_HmiSts = <Nom du DB SE>.<Non Instance BF_Act_Desact>.Diag.IhmSts
//
//
//******************************** English Information ***************************
//DESCRIPTION:
//************
//The purpose of this BF ACT_DESACT is to activate or deactivate a "group" of
//IODevices over PROFINET IO during machine cycle or during maintenance operation
//without causing Profinet failure.
//A group of IODevices is a set of Profinet IODevices (from 1 to 16 IODevices)
//that are activated or deactivated while the same machine action for example for
//Profinet IODevices located on a gripper downstream a tool changer.
//
//OPERATING :
//***********
//Put one instance of BF_ACT_DESACT for each Profinet IODevice group to be
//activated / deactivated.
//
//Deactivation request is prioritary on activation request.
//
//Parameter settings : Device number for IODevices must be contiguous (HWConfig).
//
//For further details on implementation for Fast Start Up to refer to Profinet
//installation guide GE03.MO.160.
//
//Implement the sysfroid boolean in the OB1 and put it on the SYSFROID input of
//the block (see the BF_Act_DESACT documentation in V3.0 mini)
//
//CODES FAULT  :
//****************
//In case of error in parameter settings "Diag.CodeDef" is set with following
//values :
//0x827F if parameter "DevCnt" is not between 1 and 16
//0x8095 if at least one IODevice of the group doesn't exists in the hardware
//configuration.
//For other error codes, refer to SFC70 and SFC12 documentation.
//
//WINCC OBJECT :
//*************
//WARNING :
//The "Act_desact FR_EN" Wincc Objet must be only used for Maintenance Screen.
//The IhmDeaReq and IhmActReq inputs are reserved for maintenance screens under
//Wincc to allow activation/deactivation of a module without prior conditions.
//
//- Links between Wincc object and PLC code :
//ZXG_Manu = Z$G.manu ($ =  Zone Number)
//Pilot_HmiActReq =<DB Sub assembly ame>.<BF_Instance Name>.Pilot.IhmActReq
//Pilot_HmiDeaReq= <DB Sub assembly Name>.<BF_Instance Name>.Pilot.IhmDeaRe
//Diag_HmiSts = <DB Sub assembly Name>.<BF_Instance Name>.Diag.IhmSts
//
//************************** ODIL _ID **************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 1
//Dernier ID mis en oeuvre / Last ID implemented : 2033_1
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'ACT_DES'
VERSION : 3.0
VAR_INPUT
  FirstDevNum : INT;	//First Device Number of the group / Premier numero d'appareil du groupe
  DevCnt : INT;	//Number of Devices in the group / Nombre de devices dans le groupe
  DeaReq : BOOL;	//Deactivation Request / Demande de desactivation
  ActReq : BOOL;	//Activation Request / Demande d'activation
  SYSFROID : BOOL;	//OB1 first started detection/Detection Demarrage a froid API (OB1)
  Pilot : STRUCT	//Pilot Structure / Structure Pilot
    IhmDeaReq : BOOL;	//Deactivation Request / Demande de desactivation
    IhmActReq : BOOL;	//Activation Request / Demande d'activation
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Default / Defaut
  Busy : BOOL;	//Request in progress / Requete en cours
  Dea : BOOL;	//All devices of the group deactivated / Tous les devices du groupe sont desactiv
  Act : BOOL;	//All devices of the group activated / Tous les devices du groupe sont actives
  Diag : STRUCT	//Diagnostic structure / Structure Diag
    Def : BOOL;	//Default / Defaut
    Numliste : INT;	//List Number (for SMP) / Numero de liste (SMP)
    Codedef : INT;	//Default detail / Code de defaut
    IhmSts : INT;	//Group Status / Etat du group
  END_STRUCT ;
END_VAR
VAR
  Sts : STRUCT	//Status of all devices
    ActReq : WORD;	//Activation Request for each of the 16 devices
    DeaReq : WORD;	//Deactivation Request for each of the 16 devices
    ActMod : WORD;	//Activation in progress for each of the 16 devices
    DeaMod : WORD;	//Deactivation in progress for each of the 16 devices
    EndMod : WORD;	//End of Request for each of the 16 devices
    Act : WORD;	//Activation status for each of the 16 devices
    Dea : WORD;	//Deactivation status for each of the 16 devices
    Err : WORD;	//Error status for each of the 16 devices
  END_STRUCT ;
  TONAct : TON;	//TON timer for time mesurement
  TAct : TIME;	//Duration of the latest Activation process
  TActMin : TIME  := T#1M;	//Minimum duration of the activation processes
  TActMax : TIME;	//Maximum duration of the activation processes
  XAct : BOOL;	//Auxillary bit (Falling edge of Activating)
END_VAR
VAR_TEMP
  MODE : BYTE;	///!\ Must be LB 0
  REQ : BOOL;	//Parameter REQ of SFC 12
  BUS : BOOL;	//Parameter BUSY of SFC 12
  Activating : BOOL;	//Activation process running
  Deactivating : BOOL;	//Deactivation process running
  DevNum : INT;	//Device Number
  DevMask : WORD;	//Presence bit for each of the 16 devices
  LoopCnt : INT;
  LADDR : WORD;	//Diagnostic Address of the device (SFC 70)
  RET : INT;	//Return Value of SFC 70 and SFC 12
END_VAR
BEGIN
NETWORK
TITLE =BF_ACT_DESACT
//*ODIL_ID:2033_1*
SET;
= #REQ;
//---------- Check DevCnt (>= 1 and <= 16)
L #DevCnt;
+ -1;
UW W#16#FFF0;
SPN ErrP;
//---------- Presence Bit for each of the device
L #DevCnt;
L W#16#FFFF;
SLW;
INVI;
TAW; //Device 1 => Bit 8 ... Device 9 => Bit 0
T #DevMask;
//---------- Initializations
L B#16#0;
T #Diag.Codedef;
T #MODE;
T #Sts.ActReq;
T #Sts.DeaReq;
L #DevMask;
//---------- First Cycle Deactivation Request
ON #SYSFROID;
ON #Dea;
SPB x0;
T #Sts.DeaReq; //for each of the device
T #Sts.Act; //Activated
SPA x2;
//---------- Activation Request
x0: UN #ActReq;
UN #Pilot.IhmActReq;
SPB x1;
T #Sts.ActReq; //for each of the device
//---------- Deactivation Request
x1: UN #DeaReq;
UN #Pilot.IhmDeaReq;
SPB x2;
T #Sts.DeaReq; //for each of the device
//---------- Deactivation
x2: L #Sts.ActMod; //Activation in progress
L #Sts.Act; //Activated
OW;
L #Sts.DeaReq; //Deactivation Request
UW;
L #Sts.DeaMod; //Deactivation in progress
OW;
L #Sts.EndMod; //End
INVI;
UW;
L #DevMask;
UW;
T #Sts.DeaMod; //Deactivation
U <>0;
= #Deactivating; //Deactivation in progress
//---------- Activation
L #Sts.Dea; //Deactivated
L #Sts.ActReq; //Activation Request
UW;
L #Sts.ActMod; //Activation in progress
OW;
L #Sts.EndMod; //End
INVI;
UW;
L #Sts.DeaMod; //Deactivation in progress
INVI;
UW;
L #DevMask;
UW;
T #Sts.ActMod; //Activation
U <>0;
= #Activating; //Activation in progress
//----------
O #Activating;
O #Deactivating;
= #Busy; //Activation or Deactivation in progress
//---------- Loop Initialization
L #FirstDevNum; //Initialize DevNum
T #DevNum;
LAR1 AR2; //Initialize address register (AR1)
L P##Sts;
+AR1;
L #DevCnt; //Initialize LoopCnt
Loop: T #LoopCnt;
//----------
CALL "GEO_LOG" (//Get Address of the device
MASTER := 100,
STATION := #DevNum,
SLOT := 0,
SUBSLOT := 0,
RET_VAL := #RET,
LADDR := #LADDR);
L #RET;
L B#16#0;
<>D;
= DIX [AR1,P#14.0]; //Sts.Err[]
SPB Err;
//----------
U DIX [AR1,P#4.0]; //Sts.ActMod[]
= L 0.0; //Mode.X0 -> Mode = 1 (Activation)
U DIX [AR1,P#6.0]; //Sts.DeaMod[]
= L 0.1; //Mode.X1 -> Mode = 2 (Deactivation)
//----------
CALL "D_ACT_DP" (
REQ := #REQ,
MODE := #MODE,
LADDR := #LADDR,
RET_VAL := #RET,
BUSY := #BUS);
// ---------- Evaluate result
L #RET;
L B#16#0; //Request completed without errors
==D;
= DIX [AR1,P#8.0]; //EndMod[]
// ---------- Evaluate result
POP; //RET
L B#16#1; //IO device is active (and Mode = 0)
==D;
= DIX [AR1,P#10.0]; //Sts.Act[]
// ---------- Evaluate result
POP; //RET
L B#16#2; //IO device is deactivated (and Mode = 0)
==D;
= DIX [AR1,P#12.0]; //Sts.Dea[]
// ---------- Evaluate result
POP; //RET
L W#16#80C3; //Temporary resource error
<>D;
// ----------Evaluate result
POP; //RET
L W#16#8000; //Other error
UW;
U <>0;
= DIX [AR1,P#14.0]; //Sts.Err[]
SPBN NErr;
Err: L #Diag.Codedef;
L B#16#0;
<>D;
SPB NErr;
L #RET;
T #Diag.Codedef;
// ---------- Next Device
NErr: +AR1 P#0.1;
L #DevNum;
+ 1;
T #DevNum;
L #LoopCnt;
LOOP Loop;
//---------- All devices activated
L #DevMask;
L #Sts.Act;
UW;
==D;
= #Act;
//---------- All devices deactivated
POP; //DevMask
L #Sts.Dea;
UW;
==D;
= #Dea;
//---------- Time mesurement
U #Activating;
FN #XAct;
UN #Deactivating;
SPBN T;
L #TONAct.ET;
L #TONAct.PT;
==D;
SPB T;
POP; //TONAct.ET
T #TAct;
L #TActMax;
>D;
SPBN Min;
POP; //TONAct.ET
T #TActMax;
Min: L #TAct;
L #TActMin;
<D;
SPBN T;
POP; //TONAct.ET
T #TActMin;
T: CALL #TONAct (
IN := #Activating,
PT := T#30S);
//---------- Error
Def: L #Diag.Codedef;
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
L B#16#1; //Error
SPB TSts;
U #Dea;
L B#16#2; //All devices of the group deactivated
SPB TSts;
U #Act;
L B#16#3; //All devices of the group activated
SPB TSts;
U #Deactivating;
L B#16#4; //Activation in progress
SPB TSts;
L B#16#5; //Deactivation in progress
TSts: T #Diag.IhmSts;
BEA;
ErrP: L W#16#827F; //DevCnt < 1 or DevCnt > 16
T #Diag.Codedef;
SPA Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_AFF SIEBERT (2*13) PN"
TITLE =Afficheur Siebert
//-------------------------------------------------------------------------------
//-                             BF_AFF SIEBERT (2*13)                           -
//-                 Affichage de deux lignes de 13 Caracteres                   -
//-                   Display 2 lines of 13 characters each                     -
//-------------------------------------------------------------------------------
//(English version further below)
//
//Description:
//------------
//Ce Bloc Fonctionnel gere un afficheur Siebert 2*13 Caracteres + 1 Voyant
//
//Il envoie vers l'afficheur les messages MsgLx[1], MsgLx[2], les
//attributs clignotants et le pilotage du voyant sur le front montant de "MajAff"
//et toutes les cinq secondes.
//
//Attention:
//----------
//Ce bloc fonctionnel ne fonctionne que sur les CPU 319 PN.
//Pour plus de detail voir la documentation du BF.
//
//MISE EN OEUVRE
//---------------
//1) Parametres d'entree:
//--------------------
//          ID: ID de la liaison (compris entre 1 et 4095)
//              Le meme ID doit être parametre pour tous les afficheurs.
//
//          IP: Adresse IP de l'afficheur
//              La documentation de l'adresse IP est realisee en list en amont
//              du FB. L'instruction suivante doit etre mise en uvre :
//              L B#(xxx,xx,xxx,xx)  / xxx,xx,xxx,xx = adresse IP de l'afficheur
//              T #<Nom SE>AFF_AN.IP / = Nom d'appel en multi instance du BF
//
//      MajAff: Mise a jour de l'affichage (sur front montant)
//
//         ITL: Pour eviter une surcharge de l'alimentation 24V il est recommande
//              de cascader le test lampe des afficheurs Siebert
//              Dans ce cas l'entree ITL est documentee pour :
//              - 1er afficheur par l'information test lampe de l'ilot
//                ''IG''.Itlg (Sortie de la BF_Ilot)
//              - 2eme afficheur par le front descendant de la sortie TLEC du
//                premier afficheur
//              - 3eme afficheur par le font descendant de la sortie TLEC du
//                deuxieme afficheur
//              etcjusqu'au dernier afficheur
//
//       MsgLx: Tableau des messages a afficher sur les ligne 1 et 2
//
//2) Parametres de sortie:
//   ---------------------
//        TLEC:  Test Lampe en Cours
//               Vous pouvez :
//               - Soit attribuer un variable pour chaque sortie TLEC dans le DB
//                global de zone correspondant (Z$G)
//               - Soit faire un adressage direct en utilisant pour le
//                front descendant la sortie TLEC avec l'adressage Suivant :
//
//<NOM DB d'instance du sous ensemble contenant la BF>.<Nom d'appel
//multi-instance de la BF>.TLEC
//
//
//Code de Defauts:
//----------------
//Le dernier defaut est maintenu tant qu'une transaction correcte n'a pas ete
//effectuee.
//Valeur de diag.codedef
// 0: Pas de defaut
// 1: Une erreur est survenue lors de l'appel au FC 'AG_SEND'
//    AddInfo contient le code d'erreur retourne par la fonction
//
//Dependances:
//-----------
//   Ce bloc utilise:
//      - Le FB 1685 "TCON" (FB 65 de la Bibliotheque Standard - Blocs de
//Communication)
//      - Le FB 1681 "TUSEND" (FB 67 de la Bibliotheque Standard - Blocs de
//Communication)
//
//-----------------------ENGLISH INFORMATION-------------------------------------
//Description:
//------------
//This function bloc manages a Siebert display of 2 lines of 13 characters each +
//1 lamp
//
//The Function Block sends the string message MsgLx[1] and MsgLx[2], the Blinking
//line attribute and lamp state to the display on the rising edge of "MajAff" and
//every 5 seconds.
//
//Warning:
//--------
//This function Block is suitable for CPU 319 PN only.
//See the documentation for more details
//
//OPERATING :
//----------
//1) Input parameters:
//-----------------
//          ID: Link ID (From 1 up to 4095)
//              The ID must be the same for each of the Displays
//          IP: Display IP adress
//              The IP address is completed as a list code upstream from the FB
//              The following instruction must be implemented :
//              L B#(xxx,xx,xxx,xx)/ xxx,xx,xxx,xx = the display unit IP address
//              T#<Sub assembly Name>AFF_AN.IP /= Multi instance call name
//
//      MajAff: Update Display (On the Rising Edge)
//
//         ITL: Lamp test
//              To prevent overloading of the 24V power supply we recommend
//              daisy-chaining the Siebert display unit lamp tests:
//              In this case, the ITL input is completed for:
//              The first display unit by the island lamp test data (''IG''.Itlg)
//              The second display unit by the falling edge of the first display
//              unit's TLEC output
//              The third display unit by the falling edge of the second display
//              unit's TLEC output
//              And so onup to the last display unit
//
//       MsgLx:  Message to be displayed on line 1
//
//2) Output parameters:
//  ------------------
//        TLEC: Lamp test in progress
//             You can:
//             - Either allocates a variable for each TLEC output in the global
//               DB for the corresponding zone (Z$G)
//             - Or perform direct addressing using the TLEC output with the
//               following addressing for the falling edge:
//<Instance DB NAME of the sub-assembly containing the FB>.<FB multi-instance
//call name>.TLEC
//
//Fault CODE:
//-----------
//The last fault is held on as long as exchange is not correct.
//Diag.codedef values :
// 0: No fault
// 1: A fault occurred at call of FC "AG_SEND"
//    FC return fault code in
//
//Dependancies:
//-------------
//   This FB uses:
//      - The FB 1685 "TCON" (FB 65 from the Standard Library  -
//Communication Blocks)
//      - The FB 1681 "TUSEND" (FB 67 from the Standard Library  - Communication
//Blocks)
//
//***************************** _ODIL_ID_ ************************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 4
//Dernier ID mis en oeuvre / Last ID implemented : 1860_4
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : SIEMENS
FAMILY : 'SIEBERT'
NAME : 'DISPLAY'
VERSION : 2.1
VAR_INPUT
  ID : INT;	//Link ID / ID de liaison
  IP : DWORD;	//IP address of the Display /Adresse IP de l'Afficheur sur l'ilot
  MajAff : BOOL;	//Update Display / Mise a jour de l'afficheur
  CL_L1 : BOOL;	//Blinking line 1 / Clignotement ligne 1
  CL_L2 : BOOL;	//Blinking line 2 / Clignotement ligne 2
  VDef : BOOL;	//Lamp (loading fault) / Voyant (Defaut Chargement)
  CL_VDef : BOOL;	//Blinking Lamp (loading fault) / Clignotement Voyant (Defaut Chargement)
  ITL : BOOL;	//Lamp test information/Information Test Lampe
  MsgLx : ARRAY  [1 .. 2 ] OF //Message Lines / lignes des Messages
STRING[13];
END_VAR
VAR_OUTPUT
  TLEC : BOOL;	//Lamp test in progress/Test Lampe En Cours
  Def : BOOL;	//Fault/Defaut
  Diag : STRUCT	//Diagnosis structure/Structure de diagnostic
    Def : BOOL;	//Fault/Defaut
    Ala : BOOL;	//Alarm/Alarme
    NumList : INT;	//Sparereserve
    CodeDef : INT;	//Fault code/Code du defaut
    TCONSts : WORD;	//Status of the TCON FB / Status du FB TCON
    TUSENDSts : WORD;	//Ststus of the TUSEND FB / Status du FB TUSEND
  END_STRUCT ;
END_VAR
VAR
  TCON : TCON;	//FB 65 of Standard Library - Communication Blocks
  TUSEND : TUSEND;	//FB 67 of Standard Library - Communication Blocks
  CON : STRUCT	//Parameters for TCON - Parametres pour TCON
    BLen : INT  := 64;
    ID : WORD;
    Typ : BYTE  := B#16#13;
    Act : BOOL;
    CPID : BYTE  := B#16#3;
    local_tsap_id_len : BYTE  := B#16#2;
    rem_subnet_id_len : BYTE;
    rem_staddr_len : BYTE;
    rem_tsap_id_len : BYTE;
    next_staddr_len : BYTE;
    Port : INT  := 8001;
    Pad : ARRAY  [1 .. 50 ] OF BYTE;
  END_STRUCT ;
  Rem : STRUCT	//Parameters for TUSEND - Parametres pour TUSEND
    IP : DWORD;
    Port : INT  := 8000;
    Res : INT;
  END_STRUCT ;
  Evt : BOOL;
  xITL : BOOL;	//Auxiliary bit / Bit Auxiliaire
  xTck : BOOL;	//Auxiliary bit / Bit Auxiliaire
  UpdDisp : BOOL;	//Update Display / Mise a jour de l'Afficheur
  xEvt : BYTE;
  SCnt : BYTE;	//Send
  TLC : BYTE;
  Buffer : STRUCT	//Send Buffer / Buffer d'emission
    MsgL1_1 : CHAR;
    MsgL1_2 : CHAR;
    MsgL1_3 : CHAR;
    MsgL1_4 : CHAR;
    MsgL1_5 : CHAR;
    MsgL1_6 : CHAR;
    MsgL1_7 : CHAR;
    MsgL1_8 : CHAR;
    MsgL1_9 : CHAR;
    MsgL1_A : CHAR;
    MsgL1_B : CHAR;
    MsgL1_C : CHAR;
    MsgL1_D : CHAR;
    MsgL2_1 : CHAR;
    MsgL2_2 : CHAR;
    MsgL2_3 : CHAR;
    MsgL2_4 : CHAR;
    MsgL2_5 : CHAR;
    MsgL2_6 : CHAR;
    MsgL2_7 : CHAR;
    MsgL2_8 : CHAR;
    MsgL2_9 : CHAR;
    MsgL2_A : CHAR;
    MsgL2_B : CHAR;
    MsgL2_C : CHAR;
    MsgL2_D : CHAR;
    LEsc : CHAR  := '$$';
    LCod1 : CHAR  := 'Q';
    LCod2 : CHAR  := 'A';
    LPar : CHAR  := '0';
    CR : BYTE  := B#16#D;
  END_STRUCT ;
END_VAR
VAR_TEMP
  SavAR2 : DWORD;
  StrLen : INT;	//String Length
  LoopCnt : INT;
  Tck : STRUCT	//System Tick / Tick Systeme
    Tck : TIME;	//System Tick / Tick Systeme
    ETime : TIME;	//Elapsed Time since Previous Call / Temps Ecoule depuis le derrnier Appel
    FBlk : BOOL;
  END_STRUCT ;
  BufPtr : DWORD;
  L2 : BOOL;
  Ta : BOOL;
  Tb : BOOL;
END_VAR
BEGIN
NETWORK
TITLE =Events
//*ODIL_ID:1860_1*
L #xEvt;
L DIB [AR2,P#6.0]; //MajAff, CL_L1, CL_L2, VDef, CL_VDef, (ITL)
T #xEvt;
XOW;
UW W#16#1F;
U <>0;
S #Evt;
//-------
U #ITL; //Lamp Test...
FP #xITL;
SPBN Tck;
L B#16#6; //Counetr Initialization
T #TLC;
NETWORK
TITLE =Timers
//*ODIL_ID:1860_2*
Tck: CALL "TIME_TCK" (
RET_VAL := #Tck.Tck);
//-------
L #Tck.Tck; //System Tick
UW W#16#400;
U <>0;
X #xTck; //State Change
SPBN SEND;
//------- Executed Every Second
U <>0;
= #xTck; //State
L #TLC;
L B#16#4;
>=D;
= #Ta;
L #TLC;
L B#16#1;
>=D;
UN #Ta;
= #Tb;
-D;
U >=0;
= #TLEC; //Lamp Test Running
SPM S;
T #TLC;
//-------
S: L #SCnt;
L B#16#1;
-D;
T #SCnt;
O <=0;
O #Evt;
O #TLEC;
O #CL_L1;
O #CL_L2;
O;
UN #VDef;
U #CL_VDef;
SPBN SEND;
R #Evt;
S #UpdDisp;
L B#16#5; //Refresh every X s
T #SCnt;
TAR2 #SavAR2; //Save AR2
//------- First Line
//------------------
CLR;
= #L2;
LAR1 AR2; //Multi Instance
L P##Buffer;
+AR1;
TAR1 #BufPtr;
//------- First Line
//------------------
U #Ta;
L DW#16#B2; //Square (ON)
L B#16#D; //13
SPB L1Fl;
U #CL_L1;
UN #xTck;
O #Tb;
L B#16#20; //Space (OFF)
L B#16#D; //13
SPB L1Fl;
L P##MsgLx; //(TXT)
+AR2; //Original String (1)
//---------- String
S1: L DIB [AR2,P#1.0]; //!\ Current String length of LxMsg
T #StrLen;
XOW W#16#0;
SPZ S1Nu; //Null String
//---------- Copy
S1Cy: L DIB [AR2,P#2.0]; //Original string
T DIB [AR1,P#0.0]; //String in the buffer structure
POP;
+AR1 P#1.0;
+AR2 P#1.0;
LOOP S1Cy; //Copy String
//---------- Fill
S1Nu: L B#16#D; //13
L #StrLen;
-I;
SPZ L2;
L B#16#20; //Space
TAK;
L1Fl: TAK;
T DIB [AR1,P#0.0]; //String in the buffer structure
TAK;
+AR1 P#1.0;
LOOP L1Fl;
L2: U #L2;
SPB TL;
//------- Second Line
//------------------
= #L2;
LAR2 #SavAR2; //Restore AR2
LAR1 #BufPtr;
+AR1 P#13.0;
U #Tb;
S #Evt;
L DW#16#B2; //Square (ON)
L B#16#D; //13
SPB L1Fl;
U #CL_L2;
UN #xTck;
O #Ta;
L B#16#20; //Space (OFF)
L B#16#D; //13
SPB L1Fl;
L P##MsgLx;
+AR2;
+AR2 P#16.0; //Original string (2)
SPA S1;
//------- Lamp
TL: LAR2 #SavAR2;
U #CL_VDef;
U #xTck;
O #VDef;
O #TLEC;
L '1'; //Switch On
SPB TL1;
L '0'; //Switch Off
TL1: T #Buffer.LPar;
NETWORK
TITLE =
//*ODIL_ID:1860_3*
//-------
SEND: L #ID;
T #CON.ID;
//-------
L #IP;
T #Rem.IP;
//-------
SR: CALL #TUSEND (
ID := #CON.ID,
LEN := 31,
DATA := #Buffer,
ADDR := #Rem);
//------- Initialization Request
L #TUSEND.STATUS;
L W#16#80A1;
==D;
= #TCON.REQ;
//------- Check if available
POP;
L W#16#7000;
==D;
U #UpdDisp;
= #TUSEND.REQ;
R #UpdDisp;
SPB SR;
//-------
UN #TUSEND.DONE;
SPB SE;
L B#16#0;
T #Diag.TCONSts;
T #Diag.TUSENDSts;
//------- Retry in case of Error
SE: UN #TUSEND.ERROR;
SPB CR;
S #UpdDisp;
POP;
L W#16#80A1;
XOW;
O ==0;
POP;
L W#16#80C4;
XOW;
O ==0;
SPB CR;
POP;
T #Diag.TUSENDSts;
//------- Initialization
CR: CALL #TCON (
ID := #CON.ID,
CONNECT := #CON);
UN #TCON.ERROR;
SPB EH;
L #TCON.STATUS;
T #Diag.TCONSts;
NETWORK
TITLE =
//*ODIL_ID:1860_4*
EH: L #Diag.TCONSts;
XOW W#16#0;
O <>0;
L #Diag.TUSENDSts;
XOW W#16#0;
O <>0;
= #Def;
= #Diag.Def;
L B#16#1;
SPB EHt;
L B#16#0;
EHt: T #Diag.CodeDef;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_B_VIEAPI"
TITLE =BF_B_VIEAPI
//***************************************************************************
//*                     BF "B_VIEAPI"                                       *
//*    CONTROLE L'ACTIVITE DE DEUX AUTOMATES ECHANGEANT DES INFORMATIONS    *
//*    Activity check for a link between two PLCs                           *
//***************************************************************************
//(In english further below)
//
//DESCRIPTION:
//************
//Cette boite fonctionnelle assure :
//- l'amination d'un bit de vie "Emis" de cet automate vers l'autre
//- le contrôle d'activite d'un bit de vie "Recu" de l'autre autamate par celui-ci
//En permanence, l'automate X met son bit de vie dans le meme etat que celui de
//l'automate Y, et l'automate Y met son bit de vie dans l'etat oppose de celui de
//l'automate X.
//Ainsi les bits de vie changent d'etat continuellement, si cette activite
//s'arrete alors la liaison n'est plus consideree fiable.
//
//MISE en OEUVRE:
//***********
//- L'automate X contient une FB dont l'entree "Mode" est a 1 ;
//=> il recopie l'etat de l'entree "Recu" dans la sortie "Emis"
//- L'automate Y contient une FB dont l'entree "Mode" est a 0 ;
//=> il recopie le complement de l'etat de l'entree "Recu" dans la sortie "Emis"
//- Dans ces conditions ;
//. Si l'entree "Recu" d'une FB ne change pas d'etat dans un temps indique par
//l'entree "Tavdf" , alors sa sortie "Def" signale un defaut d'activite.
//. Si l'entree "Recu" d'une FB change d'etat, alors sa sortie "Def" repasse a 0
//CONTRAINTES:
//************
//- Chaque automate doit animer une FB "B_VIEAPI" avec;
//. pour le premier, l'entree "Mode" a 1
//. pour le second, l'entree "Mode" a 0
//Une "paire" de FB sert pour une liaison entre deux automates seulement. Si un
//automate communique avec plusieurs autres, il devra animer autant de FB et de
//bits de vie que d'automates lies.
//- La valeur de temps indiquee en entree "Tavdf" est en 1/100e de seconde, elle
//est a regler suivant les temps de scrutation programme de l'automate le plus
//lent et le temps de mise a jour des informations par le systeme d'echange de
//donnees (prendre 0,5 seconde par defaut)
//
//DIAGNOSTIC SUR SIGNALEMENT DU DEFAUT:
//*************************************
//- Les FB des automates X et Y sont mal parametrees, dans le meme mode de
//fonctionnement;
//. Entrees "Mode" a 0 ; les FB mettent les bits de vie en concordance et
//attendent
//=> au bout du temps "Tavdf" , le defaut est signale par les deux FB.
//. Entrees "Mode" a 1 ; les FB mettent les bits de vie en discordance et
//attendent
//=> au bout du temps "Tavdf" , le defaut est signale par les deux FB.
//- Les FB des automates X et Y sont bien parametrees dans des modes differents ;
//. Si le systeme d'echange est hors service (ex : câble coupe), les deux
//automates X et Y fonctionnant, les FB animent les bits de vie et attendent
//=> au bout du temps "Tavdf" , le defaut est signale par les deux FB.
//. Si la liaison est en service, l'automate X fonctionne et l'automate Y est
//arrete, la FB de l'automate X anime son bit de vie et attend
//=> au bout du temps "Tavdf" , elle signale l'automate Y en defaut
//. Si la liaison est en service, les deux automates X et Y fonctionnent, mais
//l'automate Y subit un temps de scrutation programme tres long, superieur au
//temps "Tavdf", la FB de l'automate X anime son bit de vie et attend
//=> au bout du temps "Tavdf" , elle signale l'automate Y en defaut jusqu'au
//changement d'etat du bit de vie de ce dernier
//
//*********************ENGLISH INFORMATION****************************************
//
//DESCRIPTION :
//**********
//This FB checks the communication activity between two linked PLCs (parallel,
//series, network, any bit exchanges).
//Activity is continuously checked using the status changes of "life bits" sent
//with the data exchanged. When inactivity is detected a fault is signalled,
//which can, for example, be used to invalidate cycle.
//
//PLC X continuously sets its life bit to the same status as that of the PLC Y.
//PLC Y sets its life bit to the opposite status of that of PLC X. The life bits
//therefore change status continuously. If this activity stops, we can then
//consider the link to be defective and therefore unreliable.
//
//OPERATING :
//**********
//-PLC X contains an FB whose "Mode" input is set to 1:
//=> it copies the "Recu" (received) input's status into its "Emis" (transmitted)
//output
//-PLC Y contains an FB whose "Mode" input is set to 0:
//=> it copies the complement of the "Recu" input's status into its "Emis" output
//-Under these conditions:
//. If an FB's "Recu" input does not change its status within the time
//indicated by the "Tavdf" input its "Def" output signals an activity fault in
//the linked PLC.
//. If an FB's "Recu" input changes its status its "Def" output changes
//back to 0
//
//- Each PLC must order a BF _B_vieapi with :
//For the first PLC , "Mode" imput at 1
//For the second PLC, "Mode" input at 0
//One "pair" of FB's is used for only one link between two PLCs. If a PLC
//communicates with several others, it must control an FB and a life bit for each
//linked PLC
//
//- The "Tavdf" input time value is in Time format. It should be adjusted
//according
//to the slowest PLC's program polling time and the data exchange system's data
//update time (use 0.5 second, i.e. T#500MS by default).
//
//DIAGNOSTICS ON FAULT SIGNALLING:
//*******************************
//A) The FBs of PLCs X and Y are not correctly settings, they are both in the
//same
//operating mode:
//. "Mode" inputs set to 0: the FBs set the life bits to the same value and then
//wait
//=> after the "Tavdf" time both FBs signal the fault.
//. "Mode" inputs set to 1: the FBs set the life bits to the opposite value and
//then wait
//=> after the "Tavdf" time both FBs signal the fault.
//
//The FBs of PLCs X and Y are correctly set with different operating modes:
//-If the exchange system is defective (e.g.: broken cable), the two PLCs X
//and Y work, the FBs set the life bits and then wait
//=> after the "Tavdf" time both FBs signal the fault.
//-If the link is working, PLC X working and PLC Y stopped, PLC X's FB sets
//its life bit then waits
//=> after the "Tavdf" time, it signals PLC Y as defective
//-If the link is working, both PLCs X and Y are working, but PLC Y has
//very long program polling time, exceeding the "Tavdf" time, the PLC X's FB sets
//its life bit then waits
//=> after the "Tavdf" time, it signals PLC Y as defective until PLC Y's life bit
//changes status
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 4
//Dernier ID mis en oeuvre / Last ID implemented : 2006_4
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'B_VIEAPI'
VERSION : 1.3
VAR_INPUT
  Mode : BOOL;	//Function mode of activity control / MODE de fonctionnement controle d'activite
  Recu : BOOL;	//Life Bit of Receipt of equipment/bit de fonctionnement RECU de l'equipement lie
  Tavdf : TIME;	//Timer before fault (Timeout) / Temporisation AVant DeFaut
END_VAR
VAR_OUTPUT
  Emis : BOOL;	//bit Emited to equipment / bit Emis vers l'equipement lie
  Def : BOOL;	//Fault activity of equipement(Inactivity) /Defaut d'activite de l'equipement lie
  Ala : BOOL;	//Reserve for alarm (Not used) / Reserve pour alarme ( Non utilise)
  Diag : STRUCT	//Diagnosis informations / Informations de diagnostique
    Def : BOOL;	//Fault activity of Equipment tied / Defaut d'activite de l'equipement lie
    Ala : BOOL;	//Reserve / Reserve
    Numlist : INT;	//SMPLOC Number List (Reserve) / Numero de liste SMPLOC (Reserve)
    codedef : INT;	//HMI Fault code (Reserve, Not used) /Code de defaut IHM (Reserve non utilisee)
  END_STRUCT ;
END_VAR
VAR
  M_emis : BOOL;	//Memory bool Emitted / Memoire bit EMIS
  TONVie : TON;	//Life bool Timer / tempo bit de vie
END_VAR
BEGIN
NETWORK
TITLE =Animation bit de vie emis
//bit of life emitted
//*ODIL_ID:2006_1*
//
U(;
U #Recu;
U #Mode;
O;
UN #Recu;
UN #Mode;
);
S #Emis;
U(;
UN #Recu;
U #Mode;
O;
U #Recu;
UN #Mode;
);
R #Emis;
NOP 0;
NETWORK
TITLE =Signalisation manque d'activite
//No activity
//*ODIL_ID:2006_2*
//
U(;
U(;
U #Recu;
U #Emis;
U #M_emis;
O;
UN #Recu;
UN #Emis;
UN #M_emis;
);
U #Mode;
O;
U(;
U #Recu;
UN #Emis;
UN #M_emis;
O;
UN #Recu;
U #Emis;
U #M_emis;
);
UN #Mode;
);
= L 0.0;
BLD 103;
CALL #TONVie (
IN := L 0.0,
PT := #Tavdf,
Q := #Def);
NOP 0;
NETWORK
TITLE =
//*ODIL_ID:2006_3*
U #Def;
= #Diag.Def;
NETWORK
TITLE =Memoire animation bit de vie emis
//Memory bit live Emitted
//*ODIL_ID:2006_4*
//
U #Emis;
S #M_emis;
UN #Emis;
R #M_emis;
NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_BUTEE_CONVOYEUR2"
TITLE =BF_BUTEE_CONVOYEUR2
//***********************************************************************
//*                        FB : BUTEE_CONVOYEUR                         *
//*          FB : Control of a power and free conveyor Stopper          *
//***********************************************************************
//(In english further below)
//DESCRIPTION :
//*************
//La FB Assure :
//- Le pilotage de l'ouverture et de la fermeture d'une butee de convoyeur
//Bi_Rail,
//- Le controle de la securite butee,
//- La creation d'une variable pour le comptage des encours (SMPLOC)
//Cette FB prend en charge les taches de diagnostic et de recyclage suivantes :
//Diagnostic :
//- Defaut securite butee,
//- Defaut Deverrouilage de zone
//- Information pour l'IHMP du blocage de la butee
//Recyclage :
//- Memoire verrouillage d'ordre
//- Memoire verrouillage de zone
//
//MISE EN OEUVRE :
//*************
//Utilise :
//l' UDT 1988 Lien_Pup ( les information sont generees par la BF_Zone_Mode)
//Entrees :
//- T_Ref :  Indiquer la valeur en entree de la BF et non dans le DB Z$T ( pas de
//calcul realise par la BF)
//- Vtmfb :  Temporisation de maintien de l'ordre de fermeture butee. Par defaut
//cette variable est a 3,5s. Elle peut etre adaptee dans le code programme si
//besoin.
//
//LISTE DES DEFAUT :
//***************
//Valeur de codedef :
//1 = Defaut Securite Butee
//2 = Defaut deverrouillage de Zone
//
//
//**********************English Information***************************************
//Description:
//************
//This FB controls a power and free conveyor stopper.
//This FB makes following control and management tasks :
//- Control of stopper opening and closing,
//- Stopper safety check,
//- Current parts counter for SMPLOC
//
//It makes the following recycling and diagnosis tasks:
//Diagnosis:
//- Stopper safety fault
//- Zone unlocking fault.
//- Stopper blocking data (IHMP).
//
//Recycling:
//- Order locking memory
//- Zone locking memory
//
//OPERATING:
//***********
//This BF Use :
//UDT 1988 "LIEN_PUP" (written by BF_ZONE_MODE)
//IN :
//- T_ref : Indicate the value in entry of the BF and not in the DB $ZT (no lead
//of calculation realized by the BF)
//- Vtmfb: Time delay for holding the stop closing command. This variable is set
//to 3.5s by default.It can be adapted to the program.(If need)
//
//FAULT list:
//************
//Codedef values:
//1 = Stop Safety Fault
//2 = Zone Unlocking Fault
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 30
//Dernier ID mis en oeuvre / Last ID implemented : 2007_30
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'BUTEE_CV'
VERSION : 2.2
VAR_INPUT
  MF : STRUCT	//Function word conveyor stopper / Mot Fonction Butee
    Dctb : BOOL;	//Stopper Catch Check Detector / Detecteur Controle Taquet Butee
    Dcfb : BOOL;	//Stopper Closing Check Detector / Detecteur Controle Fermeture Butee
    Dpcb : BOOL;	//Stopper Load Presence Detector / Detecteur Presence Charge Butee
    Ddzb : BOOL;	//Stopper Zone Unlocking Detector / Detecteur Deverrouillage Zone Butee
    Blb : BOOL;	//Stopper Blocking / Blocage Butee
    Cob : BOOL;	//Stopper Opening Condition / Condition Ouverture Butee
    Sctrt : BOOL;	//Operation Without Catches Check / Fonctionnement Sans Controle Taquets
  END_STRUCT ;
  M_chaine : BOOL;	//Chain start / Marche Chaine
  Lien_pup : LIEN_PUP;	//Operator Panel Link Word / Mot Lien Pupitre
  pilot : STRUCT	//Recycling: Link with IHMP panel / Recyclage : Lien avec pupitre IHMP
    Ihmvob : BOOL;	//Stopper Order Locking/Verrouillage d'Ordre Butee
    Ihmvzb : BOOL;	//Stopper Zone Locking/Verrouillage de Zone butee
    Ihmcb : BOOL;	//Stopper Counter / Compteur Butee
    Ihmtrb : BOOL;	//Stopper Transit (without Catches Check)/Transit Butee (sans Controle Taquets)
  END_STRUCT ;
  T_ref : TIME;	//Reference time / Temps Reference
  vtmfb : TIME  := T#3S500MS;	//Stopper Held Closed Timer Value / Val. Tempo Maintien  Fermeture Butee
END_VAR
VAR_OUTPUT
  Obut : BOOL;	//Stopper Opening Order / Ouverture Butee
  Fbut : BOOL;	//Stopper Closing Order / Fermeture Butee
  Var_cc : BOOL;	//Bit for Counting Current Work / Comptage
  Def : BOOL;	//Stopper Fault to transmit to SMPLOC) / Defaut Butee
  Sb : BOOL;	//Stopper Safety / Securite Butee
  Vob : BOOL;	//Stopper Order Locking/ Verrouillage Ordre Butee
  Vzb : BOOL;	//Stopper Zone Locking / Verrouillage de Zone Butee
  Diag : STRUCT	//HMI Output for IHMP or Winccflexible / Diagnostic
    Def : BOOL;	//Fault Presence for IHMP / Defaut
    NumList : WORD;	//List number for IHMP (=0) (spare for update)
    CodeDef : WORD;	//Fault code: set to 1= Facility Fault  / Code du defaut
    ihmivob : BOOL;	//Stopper order Locking Information / Information Verrouillage ordre butee
    ihmivzb : BOOL;	//Stopper Zone Locking Information / Information Verrouillage zone butee
    ihmirc : BOOL;	//Stopper Counter Information / Information compteur butee
    ihmblb : BOOL;	//Stopper Blocking (IHMP screen or WinCC screen) / Information blocage butee
    ihmtrb : BOOL;	//Stopper Transit / Transit Butee
  END_STRUCT ;
END_VAR
VAR
  Z_mauto : BOOL;	//Zone automatique mode/Marche Auto Zone
  Z_mmanu : BOOL;	//Zone Manual mode/Marche Manuelle Zone
  Fmpc : BOOL;	//Load presence rising edge/Front Montant Presence Charge
  Afmpc : BOOL;	//Aux. for Load presence rising edge/Aux. Front Montant Presence Charge
  Aob : BOOL;	//Stopper opening authorization/Autorisation Ouverture Butee
  Trb : BOOL;	//Transit stop (without Catch Check)/Transit Butee (Pour Fonc. Sans Ctr Taquets)
  Tmfb : BOOL;	//Stopper held closed Timer/Tempo Maintien Fermeture Butee
  Rc : BOOL;	//Current counter relay/Relais Comptage En cours
  Tpmfb : TON;	//Stopper held closed Timer/Tempo Maintien Fermeture Butee
  mtmfb : TIME;	//Stopper held closed Timer Word/Mot Tempo Maintien Fermeture Butee
  tpddvz : TON;	//Zone Unlocking Fault Timer/Tempo Defaut Deverrouillage Zone
  Bddvz : BOOL;	//Zone Unlocking Fault Bit/Bit Defaut Deverrouillage de Zone
  Mtddvz : TIME;	//Zone Unlocking Fault Timer Word/Mot Temp Defaut Deverrouillage Zone
  Dfdvz : BOOL;	//Zone Unlocking Fault/Defaut Deverrouillage de Zone
  fr_ihmvob : BOOL;	//Stopper order locking rising edge/Front Verrouillage Ordre Butee
  fr_ihmvzb : BOOL;	//Stopper zone locking rising edge/Front Verrouillage Zone Butee
  fr_ihmcb : BOOL;	//Stopper counter rising edge/Front Compteur Butee
  fr_ihmtrb : BOOL;	//Stopper transit rising edge/Front Transit Butee
END_VAR
VAR_TEMP
  Ba1i : BOOL;	//Bit always set/Bit toujours a 1
  FP_ihmvob : BOOL;	//Stopper order locking rising edge/front montant Verrouillage Ordre Butee
  FP_ihmrvob : BOOL;	//Stopper order locking reset rising edge/front montant raz Verr. Ordre Butee
  FP_ihmvzb : BOOL;	//Stopper zone locking rising edge/front montant Verrouillage Zone Butee
  FP_ihmrvzb : BOOL;	//Stopper zone locking reset rising edge/front montant raz Verr. Zone Butee
  FP_ihmcb : BOOL;	//Stopper counter rising edge/front montant Compteur Butee
  FP_ihmrcb : BOOL;	//Stopper counter reset rising edge/front montant raz Compteur Butee
  FP_ihmtrb : BOOL;	//Stopper transit rising edge/front montant Transit Butee
  FP_ihmrtrb : BOOL;	//Stopper transit reset rising edge/front montant raz Transit Butee
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Set the bit always at 1 used inside FB
//*ODIL_ID:2007_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Lien_Pup.Z_mauto => Marche Auto Zone
//Lien_Pup.Z_mauto=> Zone Automatique mode
//*ODIL_ID:2007_2*
//
U #Lien_pup.Z_mauto;
UN #Lien_pup.Z_manup;
= #Z_mauto;
NETWORK
TITLE =Lien_Pup.Z_manup => Marche Manuelle Zone
//Lien_Pup.Z_manup => Zone Manual mode
//*ODIL_ID:2007_3*
//
U #Lien_pup.Z_manup;
UN #Lien_pup.Z_mauto;
= #Z_mmanu;
NETWORK
TITLE =SECURITE BUTEE
//Front Montant Presence Charge
//
//STOPPER SAFETY :
//Rising edge of load presence bit
//*ODIL_ID:2007_4*
//
U #MF.Dpcb;
FP #Afmpc;
= #Fmpc;
NETWORK
TITLE =Securite Butee
//Checking stopper safety
//*ODIL_ID:2007_5*
//
U(;
U #Lien_pup.Z_iadf;
U #MF.Dcfb;
O #Sb;
);
U(;
UN #MF.Sctrt;
UN #MF.Dctb;
O;
UN #Obut;
U #MF.Dcfb;
O;
U #MF.Sctrt;
U #Trb;
);
U(;
ON #Fmpc;
O #MF.Dcfb;
);
= #Sb;
NETWORK
TITLE =GESTION BUTEE
//Autorisation Ouverture Butee
//
//STOPPER MANAGEMENT :
//Stopper opening Authorization
//*ODIL_ID:2007_6*
//
U #M_chaine;
U #Z_mauto;
U #MF.Cob;
UN #MF.Blb;
UN #MF.Ddzb;
UN #Rc;
= #Aob;
NETWORK
TITLE =FRONT DE BASCULE Verrouillage Ordre Butee
//Rising edge for SR flip flop of stopper order locking
//*ODIL_ID:2007_7*
//
U #pilot.Ihmvob;
FP #fr_ihmvob;
= L 2.0;
U L 2.0;
UN #Vob;
= #FP_ihmvob;
U L 2.0;
U #Vob;
= #FP_ihmrvob;
NETWORK
TITLE =Verrouillage Ordre Butee
//Stopper Order Locking
//*ODIL_ID:2007_8*
//
U(;
U #MF.Dpcb;
U(;
O #MF.Sctrt;
O #MF.Dctb;
);
U #Aob;
UN #Vzb;
O #FP_ihmvob;
);
S #Vob;
U(;
UN #MF.Dpcb;
UN #MF.Dcfb;
O #FP_ihmrvob;
);
R #Vob;
NOP 0;
NETWORK
TITLE =FRONT DE BASCULE Transit Butee
//rising edge of SR flip flop of stopper transit
//*ODIL_ID:2007_9*
//
U #pilot.Ihmtrb;
FP #fr_ihmtrb;
= L 2.0;
U L 2.0;
UN #Trb;
= #FP_ihmtrb;
U L 2.0;
U #Trb;
= #FP_ihmrtrb;
NETWORK
TITLE =Transit Butee
//Transit Butee (Fonctionnement Sans Controle Taquets) utilise pour la securite
//butee
//
//Stopper Transit (without Catches Check) that is used for stopper safety
//*ODIL_ID:2007_10*
//
U(;
O #Vob;
O #FP_ihmtrb;
);
S #Trb;
U(;
O #Tmfb;
O #FP_ihmrtrb;
);
R #Trb;
NOP 0;
NETWORK
TITLE =FRONT DE BASCULE Verrouillage Zone Butee
//Stopper zone locking rising edge of SR flip flop
//*ODIL_ID:2007_11*
//
U #pilot.Ihmvzb;
FP #fr_ihmvzb;
= L 2.0;
U L 2.0;
UN #Vzb;
= #FP_ihmvzb;
U L 2.0;
U #Vzb;
= #FP_ihmrvzb;
NETWORK
TITLE =Verrouillage Zone Butee
//Stopper Zone Locking
//*ODIL_ID:2007_12*
//
U(;
U(;
O #MF.Sctrt;
ON #MF.Dctb;
);
U #Vob;
O #FP_ihmvzb;
);
S #Vzb;
U(;
UN #Vob;
U #MF.Ddzb;
O #FP_ihmrvzb;
);
R #Vzb;
NOP 0;
NETWORK
TITLE =Temporisation Commande Fermeture Butee
//Stopper closure control timer
//*ODIL_ID:2007_13*
//
UN #Vob;
U #MF.Dcfb;
= L 2.0;
BLD 103;
CALL #Tpmfb (
IN := L 2.0,
PT := #vtmfb,
Q := #Tmfb,
ET := #mtmfb);
NOP 0;
NETWORK
TITLE =Commande Ouverture Butee
//Stopper opening order
//*ODIL_ID:2007_14*
//
U #Vob;
U #Vzb;
U(;
O #Trb;
ON #MF.Sctrt;
);
= #Obut;
NETWORK
TITLE =Commande Fermeture Butee
//Stopper closing order
//*ODIL_ID:2007_15*
//
UN #Vob;
UN #Tmfb;
= #Fbut;
NETWORK
TITLE =FRONT DE BASCULE Compteur Butee
//rising edge of SR flip flop for stopper counter
//*ODIL_ID:2007_16*
//
U #pilot.Ihmcb;
FP #fr_ihmcb;
= L 2.0;
U L 2.0;
UN #Rc;
= #FP_ihmcb;
U L 2.0;
U #Rc;
= #FP_ihmrcb;
NETWORK
TITLE =Compteur Butee
//Stopper counter
//*ODIL_ID:2007_17*
//
U(;
U #Vob;
UN #MF.Dcfb;
O #FP_ihmcb;
);
S #Rc;
U(;
UN #Vob;
U #MF.Dpcb;
O #FP_ihmrcb;
);
R #Rc;
NOP 0;
NETWORK
TITLE =Defaut Verrouillage de Zone - Tempo
//Zone locking fault Timer
//*ODIL_ID:2007_18*
//
U #M_chaine;
UN #Vob;
U #Vzb;
UN #Lien_pup.Dmaitre;
= L 2.0;
BLD 103;
CALL #tpddvz (
IN := L 2.0,
PT := #T_ref,
Q := #Bddvz,
ET := #Mtddvz);
NOP 0;
NETWORK
TITLE =Defaut Verrouillage de Zone - Detecteur DDZ
//Zone locking fault (DDZ Detector)
//*ODIL_ID:2007_19*
//
O #Bddvz;
O;
U #Dfdvz;
UN #Lien_pup.Z_iadf;
= #Dfdvz;
NETWORK
TITLE =MAJ Sorties BF
//Mise a Jour des Sorties de la Bf : Defaut (IHMP) et variable de comptage des
//Encours
//
//Update the FB's outputs: IHMP faults and counter variable of Work-in-
//progress
//*ODIL_ID:2007_20*
//
U(;
O #Dfdvz;
ON #Sb;
);
UN #Lien_pup.Dmaitre;
= #Def;
NETWORK
TITLE =MAJ Sorties BF
//Mise a Jour des Sorties de la BF : Defaut (IHMP) et variable de comptage des
//Encours
//
//Update the FB's outputs: IHMP faults and counter variable of Work-in-
//progress
//*ODIL_ID:2007_21*
//
U #Rc;
= #Var_cc;
NETWORK
TITLE =RENSEIGNEMENT TABLE DIAG
//Diagnostic : Defaut Butee General
//
//General stopper fault
//*ODIL_ID:2007_22*
//
U #Def;
= #Diag.Def;
NETWORK
TITLE =Diagnostic: bit des defauts
//Diagnostic: N° liste de defaut propre a la FB pour IHMP
//DIAGNOSIS : FAULTS BOOLS
//Diag: List number for IHMP
//*ODIL_ID:2007_23*
//
L 0;
T #Diag.NumList;
NOP 0;
NETWORK
TITLE =RAZ code defaut
//RAZ du mot DIAG.codedef
//
//Reset of the word DIAG.codedef
//*ODIL_ID:2007_24*
//
L 0;
T #Diag.CodeDef;
NOP 0;
NETWORK
TITLE =Code def
//Code : N° de defaut ou dalarme en Decimal
//
//         1 :Defaut securite butee
//         2 :Defaut deverouillage de zone
//         4 :
//         8 :
//         16 :
//         32 :
//         64 :
//         128 :
//         256 :
//         512 :
//         1024:
//         2048:
//         4096:
//         8192:
//         16384:
//         32768:
//
//Code : Fault or alarm number in Decimal
//
//         1 : Stopper safety fault
//         2 : Zone unlocking fault
//         4 :
//         8 :
//         16 :
//         32 :
//         64 :
//         128 :
//         256 :
//         512 :
//         1024:
//         2048:
//         4096:
//         8192:
//         16384:
//         32768:
//*ODIL_ID:2007_25*
//
U #Ba1i;
= L 2.0;
U L 2.0;
UN #Sb;
SPBNB _001;
L 1;
T #Diag.CodeDef;
_001: NOP 0;
U L 2.0;
U #Dfdvz;
SPBNB _002;
L 2;
T #Diag.CodeDef;
_002: NOP 0;
NETWORK
TITLE =
//Informations Etat Butee pour IHMP Ihmvob => Verrouillage Ordre Butee
//
//Information stopper status for IHMP  Ihmvob => Stopper order Locking
//*ODIL_ID:2007_26*
//
U #Vob;
= #Diag.ihmivob;
NETWORK
TITLE =
//Informations Etat Butee pour IHMP : ihmivzb => Verrouillage Zone
//Butee
//
//Information stopper status for IHMP : ihmivzb => Stopper Zone Locking
//*ODIL_ID:2007_27*
//
U #Vzb;
= #Diag.ihmivzb;
NETWORK
TITLE =
//Informations Etat Butee pour IHMP  : ihmirc => Compteur Butee
//
//Information stopper status for IHMP :  ihmirc => stopper counter
//*ODIL_ID:2007_28*
//
U #Rc;
= #Diag.ihmirc;
NETWORK
TITLE =
//Informations Etat Butee pour IHMP  : Ihmtrb => Transit Butee
//
//Information stopper status for IHMP : Ihmtrb => stopper transit
//*ODIL_ID:2007_29*
//
U #Trb;
= #Diag.ihmtrb;
NETWORK
TITLE =
//Information : Mot Diag.ihmblb => Blocage Butee
//
//Information : Word Diag.ihmblb => Stopper locking
//*ODIL_ID:2007_30*
//
U #MF.Blb;
= #Diag.ihmblb;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_CARACT_SIEBERT"
TITLE =BF_CARACT_SIEBERT
//********************************************************************************
//*                             FB "CARACT_SIEBERT"                              *
//*                    Gestion message pour afficheur siebert                    *
//*                      Management message display siebert                      *
//********************************************************************************
//(In english further below)
//
//DESCRIPTION :
//*************
//Ce Bloc Fonctionnel permet de gérer la construction des chaines de 13
//caractères pour afficheur siebert.
//Il permet, pour chaque ligne d'un afficheur, de :
//   - rechercher le message à afficher dans un DB à partir d'un code diversité
//   - concaténer le message avec un numéro d'ordre
//
//MISE EN OEUVRE :
//****************
//INTERFACE ENTRÉE :
//MODE      : Sélection du mode de fonctionnement
//PAF_OF    : Numéro d'ordre pièce à faire (ligne 1)
//PS_OF     : Numéro d'ordre pièce suivante (ligne 2)
//M1PAF_CD  : Code diversité pièce à faire (ligne 1)
//M1PS_CD   : Code diversité pièce suivante (ligne 2)
//M1MsgX    : Tableau de message (DB AFF)
//M2MsgL1   : Message ligne 1 (pour concaténation simple)
//M2MsgL2   : Message ligne 2 (pour concaténation simple)
//MsgLx     : Tableau des messages envoyé à la BF Afficheur Siebert
//
//INTERFACE SORTIE :
//MajAff    : Test Lampe en cours sur l'afficheur
//Def       : Défaut afficheur
//Diag      : Structure de diagnostique
//  Def     : Défaut
//  Ala     : Alarme
//  Numlist : Numéro de liste IHMP
//  CodeDef : Code de défaut
//  IhmInfo : Code de défaut secondaire
//
//
//FONCTIONNEMENT :
//****************
//MODE 1 : Recherche à partir d'un code diversité (avec concaténation)
//Ce mode de fonctionnement permet de rechercher une chaine de caractère
//présente dans un DB (M1MsgX) puis de la concaténer avec un numéro d'ordre
//(PAF_OF ou PS_OF).
//La recherche puis la concaténation des messages, se fait à partir du code
//diversité (M1PAF_CD ou M1PS_CD).
//
//La constitution du message ligne 1 (pièce à faire) se fait à partir des :
//  - code diversité pièce à faire (M1PAF_CD)
//  - numéro d'ordre pièce à faire (PAF_OF)
//  - tableaux des messages (M1MsgX)
//
//La constitution du message ligne 2 (pièce suivante) se fait à partir des :
//  - code diversité pièce suivante (M1PS_CD)
//  - numéro d'ordre pièce suivante (PS_OF)
//  - tableaux des messages (M1MsgX)
//
//Mode 2 : Recherche à partir d'un code diversité (sans concaténation)
//Ce mode de fonctionnement permet de rechercher une chaine de caractère
//présente dans un DB (M1MsgX) à partir d'un code diversité (M1PAF_CD ou M1PS_CD).
//Pour ce mode de fonctionnement les entrées PAF_OF et PS_OF sont à documenter.
//La recherche d'une chaine de caractère dans le DB se faisant uniquement sur
//changement d'état de ces deux entrées.
//
//La constitution du message ligne 1 (pièce à faire) se fait à partir des :
//  - code diversité pièce à faire (M1PAF_CD)
//  - numéro d'ordre pièce à faire (PAF_OF)
//  - tableaux des messages (M1MsgX)
//
//La constitution du message ligne 2 (pièce suivante) se fait à partir des :
//  - code diversité pièce suivante (M1PS_CD)
//  - numéro d'ordre pièce suivante (PS_OF)
//  - tableaux des messages (M1MsgX)
//
//Mode 3 : Concaténation des entrées M2MsgL1 et M2MsgL2 (sans recherche)
//Ce mode de fonctionnement permet de concaténer une chaine de caractère présente
//en entrée de FB (M2MsgL1 ou M2MsgL2) puis de la concaténer avec un numéro
//d'ordre (PAF_OF ou PS_OF).
//Pour ce mode de fonctionnement les codes diversités et de DB stockant les
//chaines de caractère ne sont pas utilisés.
//
//La constitution du message ligne 1 (pièce à faire) se fait à partir des :
//  - message ligne 1 (M2MsgL1)
//  - numéro d'ordre pièce à faire (PAF_OF)
//
//La constitution du message ligne 2 (pièce suivante) se fait à partir des :
//  - message ligne 2 (M2MsgL2)
//  - numéro d'ordre pièce suivante (PS_OF)
//
//CODES D'ERREUR :
//****************
//CodeDef  IhmInfo  Commentaires
//  01       --     Défaut de paramétrage
//           01     Entrée "mode" : valeur incorrect
//           02     Entrée "M1MsgX" : type de donnée incorrecte
//           03     Entrée "M1MsgX" : zone de donnée  incorrecte
//
//  02       --     Défaut message ligne 1
//           11     Code diversité ligne 1 invalide
//           12     Incohérence code div ligne 1 et tableau msg
//           13     Numéro d'ordre ligne 1 invalide
//           14     Entrée "M2MsgL1" : type de donnée incorrecte
//           15     Entrée "M2MsgL1" : dimension incorrecte
//           16     Entrée "M2MsgL1" : valeur courante invalide
//           17     Erreur de paramétrage "MsgLx" (ligne 1)
//
//  04       --     Défaut message ligne 2
//           21     Code diversité ligne 2 invalide
//           22     Incohérence code div ligne 2 et tableau msg
//           23     Numéro d'ordre ligne 2 invalide
//           24     Entrée "M2MsgL2" : type de donnée incorrecte
//           25     Entrée "M2MsgL2" : dimension incorrecte
//           26     Entrée "M2MsgL2" : valeur courante invalide
//           27     Erreur de paramétrage "MsgLx" (ligne 2)
//
//*************************** ENGLISH INFORMATION ****************************
//DESCRIPTION :
//*************
//
//This block allows to manage the build of the chain of 13 characters for
//the Siebert display device.
//For each line of the device :
//- find the message to display from a diversity code in a DB
//- Concatened the message with a order number
//
//
//IMPLEMENTATION :
//****************
//IN interface :
//MODE      : Mode to select
//PAF_OF    : Part to do Order Number (line 1)
//PS_OF     : Next Part Order Number (line 2)
//M1PAF_CD  : Diversity Code of part to do (line 1)
//M1PS_CD   : Diversity Code of next part (line 2)
//M1MsgX    : Message table (DB AFF)
//M2MsgL1   : Message line 1 (for concatenation )
//M2MsgL2   : Message line 2 (for concatenation )
//MsgLx     : Table of message sent to the BF Afficheur Siebert
//
//OUT interface :
//MajAff    : Lampe check in progress on the display device
//Def       : Fault
//Diag      : diagnosis structure
//  Def     : Fault
//  Ala     : Alarm
//  Numlist : IHMP list number
//  CodeDef : Fault code
//  IhmInfo : secondary fault code
//
//
//PROCESS :
//**********
//MODE 1 : search from diversity code (With concatenation)
//This mode allows to find a Character
//presente in DB (M1MsgX) then to concatenate it with a Ordre number
//(PAF_OF ou PS_OF).
//this process is do from the diversity code (M1PAF_CD or M1PS_CD).
//
//The build of the message on line 1 (Part to do) is made from :
//  - Part diversity code to do (M1PAF_CD)
//  - Part Order number to do (PAF_OF)
//  - messages table (M1MsgX)
//
//The build of the message on line 2 (Next Part) is made from :
//  - Next Part diversity code (M1PS_CD)
//  - Next Part Order number (PS_OF)
//  - messages table (M1MsgX)
//
//Mode 2 : earch from diversity code (Without concatenation)
//This mode allows to find a Character
//presente in DB (M1MsgX) Fron a diversity code (M1PAF_CD or M1PS_CD).
//For this mode the PAF_OF and PS_OF input miust be documented
//The Character chain finding in tha DB could be do only on the staus change of
//the two imput
//
//The build of the message on line 1 (Part to do) is made from :
//  - Part diversity code to do (M1PAF_CD)
//  - Part Order number to do (PAF_OF)
//  - messages table (M1MsgX)
//
//The build of the message on line 2 (Next Part) is made from :
//  - Next Part diversity code (M1PS_CD)
//  - Next Part Order number (PS_OF)
//  - messages table (M1MsgX)
//
//
//Mode 3 : Concatenation of M2MsgL1 and M2MsgL2 (Without search)
//This mode allows to concatenate a character chain present in input of FB
//(M2MsgL1 ou M2MsgL2)
//with the order number (PAF_OF ou PS_OF).
//For the =is mode the diversity code and DB or not used.
//
//The build of the message on line 1 (Part to do) is made from :
//  - message line 1 (M2MsgL1)
//  - Part Order number to do (PAF_OF)
//
//The build of the message on line 2 (Next Part) is made from :
//  - message line 2 (M2MsgL2)
//  - Next Part Order number (PS_OF)
//
//Fault Code :
//****************
//CodeDef  IhmInfo  Comments
//  01       --     Setting fault
//           01     Input "mode" : invalid value
//           02     Input "M1MsgX" : invalid type of data
//           03     Input "M1MsgX" : invalid data zone
//
//  02       --     message line 1 fault
//           11     Invalid diversity line 1
//           12     Incoherence diversity code line 1 and msg table
//           13     Invalide Order number line 1
//           14     Input "M2MsgL1" : invalid type of data
//           15     Input "M2MsgL1" : Invalid size
//           16     Input "M2MsgL1" : invalid value
//           17     setting fault "MsgLx" (line 1)
//
//  04       --     Dmessage line 2 fault
//           21     Invalid diversity line 2
//           22     Incoherence diversity code line 2 and msg table
//           23     Invalide Order number line 2
//           24     Input "M2MsgL2" : invalid type of data
//           25     Input "M2MsgL2" : Invalid size
//           26     Input "M2MsgL2" : invalid value
//           27     setting fault "MsgLx" (line 2)
//
//
//****************************************************************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 6
//Dernier ID mis en oeuvre / Last ID implemented : 1856_5
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : 1856_6
AUTHOR : SIEMENS
FAMILY : 'SIEBERT'
NAME : 'CARACT'
VERSION : 1.2
VAR_INPUT
  Mode : INT;	//Mode selection / Selection mode de fonctionnement
  Paf_OF : INT;	//Part to do fabrication order / Numero d'ordre piece a faire
  Ps_OF : INT;	//Next part fabrication order / Numero d'ordre piece suivante
  M1Paf_CD : INT;	//Part to do code / Code piece a faire
  M1Ps_CD : INT;	//Next part code / Code piece suivante
  M1MsgX : ANY;	//String data stored / Table de message
  M2MsgL1 : POINTER;	//First line message / Message ligne 1
  M2MsgL2 : POINTER;	//Second line message / Message ligne 2
  MsgLx : POINTER;	//Messages to siebert display / Messages vers afficheur siebert
END_VAR
VAR_OUTPUT
  MajAff : BOOL;	//Update Display / Mise a jour afficheur
  Def : BOOL;	//Fault / Defaut
  Diag : STRUCT	//Diagnosis / Diagnostic
    Def : BOOL;	//Default / Defaut
    Ala : BOOL;	//Warning / Alarme
    NumListe : INT;	//FB identifier / Identifiant FB
    CodeDef : INT;	//Default code / Code defaut
    IhmInfo : WORD;	//Additional Information / Information additionnelle
  END_STRUCT ;
END_VAR
VAR
  xPaf_OF : WORD  := W#16#FFFF;	//Auxiliary Variable / Variable Auxiliaire
  xPs_OF : WORD  := W#16#FFFF;	//Auxiliary Variable / Variable Auxiliaire
END_VAR
VAR_TEMP
  SavAR2 : DINT;	//Pointer on the instance data / Pointeur sur les donnees de l'instance
  Dsc : ANY;	//Data Descriptor / Descipteur de Donnees
  Ret : INT;	//Return value of the SFCs/SFBs / Valeur de retour des SFCs/SFBs
  Args : STRUCT	//Input Parametres / Parametres d'entree
    MsgXDBNr : WORD;	//Configuration Data Bloc Number / Numero du Bloc de Donnees de Configuration
    MsgXBPtr : DWORD;	//Pointer on the Data / Pointeur sur les donnes
    MsgXLen : WORD;	//Lenght of the Data  / Longueur des Donnees
    MsgXCnt : WORD;	//Number of STRING[13] in the Area / Nombre de STRING[13] dans la Zone
    MsgLxDBNr : WORD;	//Data Bloc Number of Msg Lines / Numero du Bloc de Donnees des lignes de Msg
    MsgL1Ptr : DWORD;	//Pointer on the Message Line 1 / Pointeur sur le Message Ligne 1
    MsgL2Ptr : DWORD;	//Pointer on the Message Line 2 / Pointeur sur les donnes Ligne 2
  END_STRUCT ;
  MsgDBNr : WORD;	//Data Bloc Number of the Message / Numero du Bloc de donnees du Message
  MsgPtr : DWORD;	//Pointer on the Message / Pointeur sure le message
  SStr : STRUCT	//STRING[13] Source / STRING[13] Source
    MLen : BYTE;	//Max Length / Longueur Max
    CLen : BYTE;	//Current Length / Longueur Courante
    Dat : ARRAY  [1 .. 13 ] OF //Data / Donnees
CHAR;
  END_STRUCT ;
  DStr : STRUCT	//STRING[13] Formatted / STRING[13] Formattee
    Lengths : WORD;	//Max (HI Byte) and Current (lo Byte) Lengths / Long Max (PF) et Courante (pf)
    Dat : ARRAY  [1 .. 13 ] OF //Data / Donnees
CHAR;
  END_STRUCT ;
  L1Err : WORD;	//Line 1 Error Code / Code d'Erreur de la ligne 1
  L2Err : WORD;	//Line 2 Error Code / Code d'Erreur de la ligne 2
  Dec : WORD;	//Auxiliary Variable / Variable Auxiliaire
  DPAF : BOOL;	//Part to do update / Mise à jour piece a faire
  DPS : BOOL;	//Next part update / Mise à jour piece suivante
  Mod : STRUCT	//Mode information / Information Mode
    v0 : BOOL;	//Mode = 0
    v1 : BOOL;	//Mode = 1
    v2 : BOOL;	//Mode = 2
    v3 : BOOL;	//Mode = 3
  END_STRUCT ;
END_VAR
BEGIN
NETWORK
TITLE =ANALYZE INPUTS DATA
//ANALYSE DONNEES D'ENTREES
//*ODIL_ID:1856_1*
//
L #Paf_OF;
L #xPaf_OF;
<>D;
= #DPAF; //PAF_OF Changed
//-------
L #Ps_OF;
L #xPs_OF;
<>D;
= #DPS; //PS_OF Changed
//-------
UN #DPAF;
UN #DPS;
= #MajAff; //Update Display
L B#16#0;
SPB EHt;
//------- Mode
L #Mode;
SPL M;
SPA M; //Mode = 0 (Error)
SPA M1; //Mode = 1
SPA M2; //Mode = 2
SPA M1; //Mode = 3
M: L B#16#1; //Error: Invalid "MODE" Value
SPA EHEr; //Goto Error Handler
NETWORK
TITLE =ANALYZE STRING DATA
//ANALYSE DONNEES POUR MESSAGE
//*ODIL_ID:1856_2*
//
//------- Analyze "M1MsgX" Descriptor (Mode 1 & Mode 3)
//-----------------------------------
M1: LAR1 AR2; //Multi Instance
L P##M1MsgX;
+AR1;
//------- Data Type
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, ..., 19 DB)
L B#16#2;
<>D;
L B#16#2; //Error: Unexpected Data Type (M1MsgX)
SPB EHEr; //Goto Error Handler
//------- Array of Bytes
L DIB [AR1,P#6.0]; //ANY: Data Area
XOW W#16#84; //DB
L B#16#3; //Error: Unexpected Data Area (M1MsgX)
SPN EHEr; //Goto Error Handler
//------- Repetition Factor
L DIW [AR1,P#2.0]; //ANY: Repetition Factor
T #Args.MsgXLen;
//------- Data Block Number
L DIW [AR1,P#4.0]; //ANY: Data Block Number
T #Args.MsgXDBNr;
//------- Area - Offset
L DID [AR1,P#6.0]; //ANY: Area - Offset
T #Args.MsgXBPtr;
//-------
L #Args.MsgXLen;
L B#16#10; //16 - Length of a STRING[13] in the PLC Memory
/D;
T #Args.MsgXCnt;
//------- Analyse "MsgLx" Pointer (Mode 1, Mode 2 & Mode 3)
//-------------------------------
M2: LAR1 AR2; //Multi Instance
L P##MsgLx;
+AR1;
L DIW [AR1,P#0.0]; //POINTER: Data Block Number
T #Args.MsgLxDBNr;
L DID [AR1,P#2.0]; //POINTER: Area - Offset
T #Args.MsgL1Ptr;
LAR1;
+AR1 P#16.0; //SizeOf STRING[13]
TAR1 #Args.MsgL2Ptr;
//------- Initialise the Output String Len
L W#16#D0D;
T #DStr.Lengths;
//------- Set Mod.x... bit & clear all others
L #Mode;
L B#16#1;
SLW;
LAR1 P##Mod;
T LB [AR1,P#0.0];
//------- Save AR2
TAR2 #SavAR2;
NETWORK
TITLE =LINE 1 INFORMATIONS
//INFORMATIONS LIGNE 1
//*ODIL_ID:1856_3*
//
UN #DPAF; //No change detected (PAF_OF)
SPB L1e;
//------- Null "PAF_OF"
L #Paf_OF;
L B#16#0;
==D;
SPB L1Eh;
//------- Invalid "PAF_OF"
POP; //L #PAF_OF
T #Dec;
L 9999;
>D;
L B#16#13; //Error: Invalid "PAF_OF" Value
SPB L1Eh; //Goto Error Handler
U #Mod.v2;
SPB L1M2;
//------- Initialize Input String Data (Mode 1 & Mode 3)
//------------------------------------
L #M1Paf_CD;
XOW W#16#0;
L B#16#11; //Error: Code Null
SPZ L1Eh; //Goto Error Handler
POP; //L #M1PAF_CD
L #Args.MsgXCnt;
>D;
L B#16#12; //Error: Area too small or Code too big
SPB L1Eh; //Goto Error Handler
//-------
L #Args.MsgXDBNr;
T #MsgDBNr;
//-------
L #M1Paf_CD;
+ -1;
SLD 7; //Multiply by 128 (SizeOf STRING[13] in bits
LAR1 #Args.MsgXBPtr;
+AR1;
TAR1 #MsgPtr;
SPA L1IC;
//------- Initialize Input String Data (Mode 2)
//------------------------------------
L1M2: LAR1 AR2; //Multi Instance
L P##M2MsgL1;
+AR1;
L DIW [AR1,P#0.0]; //POINTER: Data Block Number
T #MsgDBNr;
L DID [AR1,P#2.0]; //POINTER: Area - Offset
T #MsgPtr;
//------- Dsc - Init Data Descriptor
//----------------------------------
L1IC: LAR1 P##Dsc;
L DW#16#1002000F;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #MsgDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #MsgPtr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Copy Input String to Local String (SStr)
CALL "BLKMOV" (
SRCBLK := #Dsc,
RET_VAL := #Ret,
DSTBLK := #SStr);
L B#16#14; //Error: Invalid Input String (Wrong Parameter)
SPBIN L1Eh; //Goto Error Handler
//-------
L #SStr.MLen;
L B#16#D;
<>D;
L B#16#15; //Error: Invalid Input String (Max String Length)
SPB L1Eh; //Goto Error Handler
//-------
L #SStr.CLen; //Current String Length
L B#16#0;
==D;
L B#16#16; //Error: Invalid Input String (Null String Length)
SPB L1Eh; //Goto Error Handler
//-------
U #Mod.v3;
LAR2 P##DStr;
L B#16#D; //Max 13 Chars
SPB L1M3;
//------- Convert OF to ASCII (Mode 1 & Mode 2)
//---------------------------------------------
L ' ';
T #DStr.Dat[5];
//------- Convert BIN to ASCII
L #Dec;
L B#16#A; //10
MOD;
+ 48; //Convert to ASCII Char
T #DStr.Dat[4];
//-------
L #Dec;
L B#16#A; //10
/D;
T #Dec;
L B#16#A; //10
MOD;
+ 48; //Convert to ASCII Char
T #DStr.Dat[3];
//-------
L #Dec;
L B#16#A; //10
/D;
T #Dec;
L B#16#A; //10
MOD;
+ 48; //Convert to ASCII Char
T #DStr.Dat[2];
//-------
L #Dec;
L B#16#A; //10
/D;
L B#16#A; //10
MOD;
+ 48; //Convert to ASCII Char
T #DStr.Dat[1];
//-------
+AR2 P#5.0;
L B#16#8; //Max 8 Chars
//------- Diversity String
//------------------------
L1M3: LAR1 P##SStr;
L #SStr.CLen; //Current String Length
TAK; //Max String Length
>=D;
SPB L1ld;
-D;
NEGD;
//------- Spaces
L1ls: L ' '; //"Space" Char
T LB [AR2,P#2.0];
+AR2 P#1.0;
POP;
LOOP L1ls;
L #SStr.CLen; //Current String Length
//------- Diversity String
L1ld: L LB [AR1,P#2.0];
T LB [AR2,P#2.0];
+AR1 P#1.0;
+AR2 P#1.0;
POP;
LOOP L1ld;
//-------
LAR2 #SavAR2; //Restore AR2
L B#16#0;
SPA L1c;
//------- Error Handler
L1Eh: LAR1 P##DStr;
L ' ';
T LD [AR1,P#2.0];
T LD [AR1,P#6.0];
T LD [AR1,P#10.0];
T LB [AR1,P#14.0];
//-------
POP;
L1c: T #L1Err;
//------- Dsc - Init Data Descriptor
//--------------------------------------------
LAR1 P##Dsc;
L DW#16#1002000F;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.MsgLxDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #Args.MsgL1Ptr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Copy Local String (DStr) to Output String
CALL "BLKMOV" (
SRCBLK := #DStr,
RET_VAL := #Ret,
DSTBLK := #Dsc);
L #L1Err;
XOW W#16#0;
SPN L1E;
L B#16#17; //Error: Wrong "MsgLx" Parameter
SPBIN L1E; //Goto Error Handler
//-------
L1e: L #Paf_OF;
T #xPaf_OF;
//-------
L B#16#0;
L1E: T #L1Err;
NETWORK
TITLE =LINE 2 INFORMATIONS
//INFORMATIONS LIGNE 2
//*ODIL_ID:1856_4*
//
UN #DPS; //No change detected (PS_OF)
SPB L2e;
//------- Null "PS_OF"
L #Ps_OF;
L B#16#0;
==D;
SPB L2Eh;
//------- Invalid "PS_OF"
POP; //L #PS_OF
T #Dec;
L 9999;
>D;
L B#16#23; //Error: Invalid "PAF_OF" Value
SPB L2Eh; //Goto Error Handler
U #Mod.v2;
SPB L2M2;
//------- Initialize Input String Data (Mode 1 & Mode 3)
//------------------------------------
L #M1Ps_CD;
XOW W#16#0;
L B#16#21; //Error: Code Null
SPZ L2Eh; //Goto Error Handler
POP; //L #M1PAF_CD
L #Args.MsgXCnt;
>D;
L B#16#22; //Error: Area too small or Code too big
SPB L2Eh; //Goto Error Handler
//-------
L #Args.MsgXDBNr;
T #MsgDBNr;
//-------
L #M1Ps_CD;
+ -1;
SLD 7; //Multiply by 128 (SizeOf STRING[13] in bits
LAR1 #Args.MsgXBPtr;
+AR1;
TAR1 #MsgPtr;
SPA L2IC;
//------- Initialize Input String Data (Mode 2)
//------------------------------------
L2M2: LAR1 AR2; //Multi Instance
L P##M2MsgL2;
+AR1;
L DIW [AR1,P#0.0]; //POINTER: Data Block Number
T #MsgDBNr;
L DID [AR1,P#2.0]; //POINTER: Area - Offset
T #MsgPtr;
//------- Dsc - Init Data Descriptor
//----------------------------------
L2IC: LAR1 P##Dsc;
L DW#16#1002000F;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #MsgDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #MsgPtr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Copy Input String to Local String (SStr)
CALL "BLKMOV" (
SRCBLK := #Dsc,
RET_VAL := #Ret,
DSTBLK := #SStr);
L B#16#24; //Error: Invalid Input String (Wrong Parameter)
SPBIN L2Eh; //Goto Error Handler
//-------
L #SStr.MLen;
L B#16#D;
<>D;
L B#16#25; //Error: Invalid Input String (Max String Length)
SPB L2Eh; //Goto Error Handler
//-------
L #SStr.CLen; //Current String Length
L B#16#0;
==D;
L B#16#26; //Error: Invalid Input String (Null String Length)
SPB L2Eh; //Goto Error Handler
//-------
U #Mod.v3;
LAR2 P##DStr;
L B#16#D; //Max 13 Chars
SPB L2M3;
//------- Convert OF to ASCII (Mode 1 & Mode 2)
//---------------------------------------------
L ' ';
T #DStr.Dat[5];
//------- Convert BIN to ASCII
L #Dec;
L B#16#A; //10
MOD;
+ 48; //Convert to ASCII Char
T #DStr.Dat[4];
//-------
L #Dec;
L B#16#A; //10
/D;
T #Dec;
L B#16#A; //10
MOD;
+ 48; //Convert to ASCII Char
T #DStr.Dat[3];
//-------
L #Dec;
L B#16#A; //10
/D;
T #Dec;
L B#16#A; //10
MOD;
+ 48; //Convert to ASCII Char
T #DStr.Dat[2];
//-------
L #Dec;
L B#16#A; //10
/D;
L B#16#A; //10
MOD;
+ 48; //Convert to ASCII Char
T #DStr.Dat[1];
//-------
+AR2 P#5.0;
L B#16#8; //Max 8 Chars
//------- Diversity String
//------------------------
L2M3: LAR1 P##SStr;
L #SStr.CLen; //Current String Length
TAK; //Max String Length
>=D;
SPB L2ld;
-D;
NEGD;
//------- Spaces
L2ls: L ' '; //"Space" Char
T LB [AR2,P#2.0];
+AR2 P#1.0;
POP;
LOOP L2ls;
L #SStr.CLen; //Current String Length
//------- Diversity String
L2ld: L LB [AR1,P#2.0];
T LB [AR2,P#2.0];
+AR1 P#1.0;
+AR2 P#1.0;
POP;
LOOP L2ld;
//-------
LAR2 #SavAR2; //Restore AR2
L B#16#0;
SPA L2c;
//------- Error Handler
L2Eh: LAR1 P##DStr;
L ' ';
T LD [AR1,P#2.0];
T LD [AR1,P#6.0];
T LD [AR1,P#10.0];
T LB [AR1,P#14.0];
//-------
POP;
L2c: T #L2Err;
//------- Dsc - Init Data Descriptor
//--------------------------------------------
LAR1 P##Dsc;
L DW#16#1002000F;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.MsgLxDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #Args.MsgL2Ptr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Copy Local String (DStr) to Output String
CALL "BLKMOV" (
SRCBLK := #DStr,
RET_VAL := #Ret,
DSTBLK := #Dsc);
L #L2Err;
XOW W#16#0;
SPN L2E;
L B#16#27; //Error: Wrong "MsgLx" Parameter
SPBIN L2E; //Goto Error Handler
//-------
L2e: L #Ps_OF;
T #xPs_OF;
//-------
L B#16#0;
L2E: T #L2Err;
NETWORK
TITLE =FAULT MANAGEMENT
//GESTION DEFAUTS
//*ODIL_ID:1856_5*
//
L #L1Err;
XOW W#16#0;
SPN EHEr;
//-------
L #L2Err;
XOW W#16#0;
SPN EHEr;
//-------
L B#16#0;
SPA EHt;
EHEr: T #Diag.IhmInfo;
SRW 4;
L B#16#1;
SLW;
EHt: T #Diag.CodeDef;
//------- Def
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_CODE_PROCESS"
TITLE =BF_CODE_PROCESS
//********************************************************************************
//*                              FB "CODE_PROCESS"                               *
//*                  Gestion base de donnees diversitees                         *
//*                     Management database diversity                            *
//********************************************************************************
//(In english further below)
//DESCRIPTION
//***********
//
//Le nombre d'informations de diversités nécessaires à chaque poste de travail
//peut être dans certains cas important (exemple : 50 mots pour définir une
//diversité produit)
//
//Ce FB permet d'associer une valeur de référence à une diversité produit pour
//chaque poste de travail.
//Il est utilisé dans le cadre d'installation capacitaire pouvant intégrer un
//grand nombre de diversité.
//Il permet également d'associer rapidement à une nouvelle diversité produit une
//valeur de référence déjà existante.
//
//Pour la description detaillee du Bloc Fonctionnel, voir le guide GE03.J2.013
//
//MISE EN OEUVRE :
//****************
//INTERFACE ENTRÉE :
//Val_trait     : Condition de validation du traitement
//Iadf          : Information annulation défaut
//Tab_ent       : Table des données d'entrée (critères à rechercher)
//Tab_param     : Table de paramétrage (liste des configurations)
//Tab_sort      : Table des données de sortie (codes process trouvé)
//Nbse          : Nombres de sous-ensemble
//Nbcf          : Nombres de configuration
//Lgcf          : Longueur d'une configuration (bytes)
//
//INTERFACE SORTIE :
//Fin_trait     : Information fin de traitement
//Defaut        : Information de défaut
//Diag          : Table de mots de diagnostic
//  Def         : Présence défaut
//  Alar        : Présence alarme
//  NumListe    : Numéro de liste défaut SMP
//  CodeSe      : N° sous-ensemble en défaut
//  CodeDef     : N° défaut ou d'alarme en décimal
//
//
//
//
//CODES D'ERREUR :
//****************
//Valeurs de Diag.codedef
//Diag.codese : numéro du sous-ensemble avec configuration inconnue.
//
//DEC  HEXA  DESCRIPTION
//1    1     Défaut configuration inconnue (voir codese)
//2    2     Défaut dimensionnement paramètres d'entrées
//4    4     Défaut type de données "Tab_param"
//8    8     Défaut dimension "Tab_param
//16   10    Défaut type de données "Tab_ent"
//32   20    Défaut dimension "Tab_ent"
//64   40    Défaut type de données "Tab_sort"
//128  80    Défaut dimension "Tab_sort"
//
//
//
//
//******************************* ENGLISH INFORMATION ****************************
//
//
//
//******************************* _ODIL_ID_ ***********************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 11
//Dernier ID mis en oeuvre / Last ID implemented : 1870_11
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'CODE_PRO'
VERSION : 1.0
VAR_INPUT
  Val_trait : BOOL;	//Condition of validation / Condition de validation
  Iadf : BOOL;	//Fault reset information / Information annulation défaut
  Tab_ent : ANY;	//Input data / Donnees d'entrées
  Tab_param : ANY;	//Setting data / Données de paramètrages
  Tab_sort : ANY;	//Output sata / Données de sorties
  Nbse : INT;	//Number of stage / Nombre de sous-ensemble
  Nbcf : INT;	//Number of configuration / Nombre de configuration
  Lgcf : INT;	//Lenght of a configuration / Longueur d'une confinguration (Bytes)
END_VAR
VAR_OUTPUT
  Fin_trait : BOOL;	//End of work / Fin de traitement
  Defaut : BOOL;	//Fault / Défaut
  Diag : STRUCT	//Diagnosis data / Données de diagnostic
    Def : BOOL;	//Fault presence / Presence défaut
    Ala : BOOL;	//Alarm / Alarme
    Numliste : INT;	//SMP fault list number / No de liste defaut SMP
    CodeSe : INT;	//Number of stage fault / No du  sous-ensemble en défaut
    CodeDef : INT;	//Fault or alarm number / No defaut ou d'alarme en Decimal
  END_STRUCT ;
END_VAR
VAR
  xVal : BOOL;	//Condition of validation auxiliary / Auxiliaire demande de traitement
  xIadf : BOOL;	//Request of fault reset auxiliary / Auxiliaire demande annulation défaut
END_VAR
VAR_TEMP
  SavDINR : INT;	//Instance DB number backup / Sauvegarde du Numero de DB d'instance
  SavAR2 : DWORD;	//AR2 register backup / Sauvegarde du registre AR2
  EntDBNR : WORD;	//Number of DB input data / Numéro DB table d'entrée
  EntTd : WORD;	//Type of input data / Type de donnée table d'entrée
  EntLg : WORD;	//Lenght of input data / Longueur table d'entrée
  EntZm : WORD;	//Memory area of input data / Zone mémoire table d'entrée
  EntPtr : DWORD;	//Starting address of input data / Adresse début table d'entrée
  ParamDBNR : WORD;	//Number of DB setting data / Numéro DB table de paramétrage
  ParamTd : WORD;	//Type of setting data / Type de donnée table de paramétrage
  ParamLg : WORD;	//Lenght of setting data / Longueur table de paramétrage
  ParamZm : DWORD;	//Memory area of setting data / Zone mémoire table de paramétrage
  ParamPtr : DWORD;	//Starting address of setting data / Adresse début table de paramétrage
  SortDBNR : WORD;	//Number of DB output data / Numéro DB table de sortie
  SortTd : WORD;	//Type of output data / Type de donnée table de sortie
  SortLg : WORD;	//Lenght of output data / Longueur table de sortie
  SortZm : DWORD;	//Memory area of output data / Zone mémoire table de sortie
  SortPtr : DWORD;	//Starting address of output data / Adresse début table de sortie
  CritPtr : DWORD;	//Criteria offset / Pointeur de critère
  SEPtr : DWORD;	//Stage offset / Pointeur de sous-ensemble
  IncCritPtr : WORD;	//Adding of criteria offset / Increment pointeur criteres
  IncSEPtr : WORD;	//Adding of stage offset / Increment pointeur sous-ensembles
  CritCnt : WORD;	//Number of criteria count / Compteur nombre de critères
  CritLPCnt : WORD;	//Loop criteria count / Compteur boucle critères
  CodSECnt : WORD;	//Number of stage code  count / Compteur nombre de code par sous-ensemble
  CodSELPCnt : WORD;	//Compteur boucle codes process / sous-ensembles
  SELPCnt : WORD;	//Loop stage count / Compteur boucle sous-ensembles
  xNbse : INT;	//Number of stage auxiliary / Auxiliaire nombre de sous-ensembles
  xNbcf : INT;	//Number of configuration auxiliary / Auxiliaire nombre de configuration
  xLgcf : INT;	//Lenght of a configuration auxiliary / Auxiliaire longueur d'une configuration
END_VAR
BEGIN
NETWORK
TITLE =SAUVEGARDE VARIABLES SYSTEM
//SYSTEM VARIABLES SAVE
//*ODIL_ID:1870_1*
TAR2 #SavAR2; // Sauvegarde registre AR2
L DINO;
T #SavDINR; // Sauvegarde numéro du DB d'instance
NETWORK
TITLE =INITIALISATION VARIABLE BF
//FB VARIABLE INITAILAISATION
//*ODIL_ID:1870_2*
CLR;
= #Fin_trait; // Initialisation sortie "Fin de traitement"
L #Nbse;
T #xNbse; // Sauvegarde paramètre "Nombre de sous-ensemble"
L #Nbcf;
T #xNbcf; // Sauvegarde paramètre "Nombre de configuration"
L #Lgcf;
T #xLgcf; // Sauvegarde paramètre "Longueur d'une configuration"
NETWORK
TITLE =CONTROLE DIMENSIONNEMENT PARAMETRAGE
//CHECK SETTING DATAS
//*ODIL_ID:1870_3*
L #xNbcf;
L #xLgcf;
*D;
SLD 3;
L 32767; // Bytes -> Bits
>D;
L B#16#2;
SPB Err; // DEFAUT 2 : ERREUR DIMENSIONNEMENT PARAMETRES ENTREES
NETWORK
TITLE =TABLE DE PARAMETRAGE
//SETTING DATA TABLE
//*ODIL_ID:1870_4*
LAR1 AR2; // Multi instance
L P##Tab_param; // Adresse de l'entrée Tab_param
+AR1;
L DIB [AR1,P#1.0]; // Type de donnée
T #ParamTd;
L DIW [AR1,P#2.0]; // Facteur de répétition
T #ParamLg;
L DIW [AR1,P#4.0]; // Numéro de DB
T #ParamDBNR;
L DIB [AR1,P#6.0]; // Zone mémoire
T #ParamZm;
L DID [AR1,P#6.0]; // Adresse de début
T #ParamPtr;
L #ParamTd;
XOW W#16#2; // Type de données : Bytes
O <>0;
L #ParamZm;
XOW W#16#84; // Zone mémoire : DB
O <>0;
L B#16#4;
SPB Err; // DEFAUT 4 : ERREUR TYPE DE DONNEES TAB_PARAM
L #xNbcf;
L #xLgcf;
*D;
L #xNbse;
*D;
L B#16#8;
SPZ Err; // Contrôle paramètres entrées <> 0
POP;
L #ParamLg;
>D;
L B#16#8;
SPB Err; // DEFAUT 8 : ERREUR DIMENSION TAB_PARAM
NETWORK
TITLE =TABLE D'ENTREE
//INPUT DATA TABLE
//*ODIL_ID:1870_5*
LAR1 AR2; // Multi instance
L P##Tab_ent; // Adresse Tab_ent
+AR1;
L DIB [AR1,P#1.0]; // Type de donnée
T #EntTd;
L DIW [AR1,P#2.0]; // Facteur de répétition
T #EntLg;
L DIW [AR1,P#4.0]; // Numéro de DB
T #EntDBNR;
L DIB [AR1,P#6.0]; // Zone mémoire
T #EntZm;
L DID [AR1,P#6.0]; // Adresse de début
T #EntPtr;
L #EntTd;
XOW W#16#2; // Type de données : Bytes
O <>0;
L #EntZm;
XOW W#16#84; // Zone mémoire : DB
O <>0;
L B#16#10;
SPB Err; // DEFAUT 16 : ERREUR TYPE DE DONNEES TAB_ENT
L #EntLg;
+ 2; // Ajout code process (2 bytes)
L #xLgcf;
<D;
L B#16#20;
SPB Err; // DEFAUT 32 : ERREUR DIMENSION TAB_ENT
NETWORK
TITLE =TABLE DE SORTIE
//OUTPUT DATA TABLE
//*ODIL_ID:1870_6*
LAR1 AR2; // Multi instance
L P##Tab_sort; // Adresse Tab_sort
+AR1;
L DIB [AR1,P#1.0]; // Type de donnée
T #SortTd;
L DIW [AR1,P#2.0]; // Facteur de répétition
T #SortLg;
L DIW [AR1,P#4.0]; // Numéro de DB
T #SortDBNR;
L DIB [AR1,P#6.0]; // Zone mémoire
T #SortZm;
L DID [AR1,P#6.0]; // Adresse de début
T #SortPtr;
L #EntTd;
XOW W#16#2; // Type de données : Bytes
O <>0;
L #EntZm;
XOW W#16#84; // Zone mémoire : DB
O <>0;
L B#16#40;
SPB Err; // DEFAUT 64 : ERREUR TYPE DE DONNEES TAB_SORT
L #SortLg;
SRW 1; // Bytes -> Words
L #xNbse;
<D;
L B#16#80;
SPB Err; // DEFAUT 128 : ERREUR DIMENSION TAB_SORT
NETWORK
TITLE =POINTEURS ET BOUCLES DE RECHERCHE
//LOOP AND OFFSET TO SEARCH
//*ODIL_ID:1870_7*
L #xLgcf;
SLD 3; // Bytes -> Bits
T #IncCritPtr; // Incrément pointeur critères
L #xLgcf;
L #xNbcf;
*D;
SLD 3; // Bytes -> Bits
T #IncSEPtr; // Incrément pointeur sous-ensemble
L #xLgcf;
SRD 1; // Bytes -> Bits
+ -1; // Soustrait code process (1 mot)
T #CritCnt; // Initialisation compteur boucle de critères
L #xNbcf;
T #CodSECnt; // Initialisation compteur boucle de codes
NETWORK
TITLE =FRONT MONTANT DEBUT DU TRAITEMENT
//COMPUTING START
//*ODIL_ID:1870_8*
U #Val_trait;
FP #xVal; // Front montant de l'entrée "Val_traitement"
SPBN END; // Saut si condition non remplie
NETWORK
TITLE =RECHERCHE DES DONNEES
//DATAS SEARCH
//*ODIL_ID:1870_9*
LAR1 #ParamPtr; // Initialisation pointeur Tab_param
L #xNbse;
AUF DI [#ParamDBNR]; // Ouverture du DB Tab_param (DB d'instance)
SL: T #SELPCnt; // Compteur boucle de sous-ensemble
//--------------------------------------// DEBUT BOUCLE SOUS-ENSEMBLE
AUF DB [#EntDBNR]; // Ouverture du DB Tab_ent (DB global)
TAR1 #SEPtr;
L #CodSECnt;
DL: T #CodSELPCnt; // Compteur boucle de codes
//**************************************// DEBUT BOUCLE CODE PROCESS
TAR1 #CritPtr;
LAR2 #EntPtr;
L #CritCnt;
CL: T #CritLPCnt; // Compteur boucle de critères
//######################################// DEBUT BOUCLE CRITERES
L DIW [AR1,P#2.0]; // Valeur du critère dans Tab_param
XOW W#16#0; // Contrôle si critère <> 0
SPZ Cx; // Saut critère suivant
L DBW [AR2,P#0.0]; // Valeur du critère dans Tab_ent
<>D;
SPB Dx; // Saut code suivant
Cx: +AR1 P#2.0; // Critère Tab_param suivant
+AR2 P#2.0; // Critère Tab_ent suivant
L #CritLPCnt;
LOOP CL;
//######################################// FIN BOUCLE CRITERES
LAR1 #CritPtr;
L DIW [AR1,P#0.0]; // Sauvegarde valeur code process Tab_param
AUF DB [#SortDBNR];
LAR1 #SortPtr;
T DBW [AR1,P#0.0]; // Transfert valeur code process dans Tab_sort
+AR1 P#2.0;
TAR1 #SortPtr; // Positionnement pointeur code process suivant dans Tab_sort
SPA Sx;
Dx: L #CritPtr;
L #IncCritPtr;
+D;
LAR1; // Chargement longueur zone critères
L #CodSELPCnt; // Code process suivant dans Tab_param
LOOP DL;
//**************************************// FIN BOUCLE CODE PROCESS
AUF DI [#SavDINR]; // Restauration DB d'instance
LAR2 #SavAR2; // Restauration registre AR2
SPA Err1; // DEFAUT 1 : CONFIGURATION INCONNUE
Sx: L #SEPtr;
L #IncSEPtr;
+D;
LAR1; // Chargement longeur zone sous-ensemble
L #SELPCnt; // Sous-ensemble suivant dans Tab_param
LOOP SL;
//--------------------------------------// FIN BOUCLE SOUS-ENSEMBLE
AUF DI [#SavDINR]; // Restauration DB d'instance
LAR2 #SavAR2; // Restauration registre AR2
= #Fin_trait; // Fin de traitement
NETWORK
TITLE =ACQUITEMENT DEFAUTS
//FAULTS RESET
//*ODIL_ID:1870_10*
END: L B#16#0;
U #Iadf;
FP #xIadf;
SPBN NAck;
T #Diag.CodeDef;
T #Diag.CodeSe;
NAck: L #Diag.CodeDef;
<>D;
= #Defaut;
= #Diag.Def;
BEA;
NETWORK
TITLE =TRAITEMENT DES DEFAUTS
//PROCESSING FAULTS
//*ODIL_ID:1870_11*
Err: T #Diag.CodeDef; // Défauts de paramétrage
SPA END;
Err1: L B#16#1; // Défaut de recherche
T #Diag.CodeDef; // Transfert code défaut
L #xNbse;
L #SELPCnt;
-D;
+ 1;
T #Diag.CodeSe; // Numéro de sous-ensemble sans configuration
SPA END;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_CONF_MACHINE"
TITLE =BF_CONF_MACHINE
//********************************************************************************
//*                              FB "CONF_MACHINE"                               *
//*                  Gestion base de donnees parametrage machine                 *
//*                      Management database machine SETUP                       *
//********************************************************************************
//(In english further below)
//DESCRIPTION
//***********
//Ce FB permet de rechercher une configuration machine permettant d'animer un
//poste de travail à partir d'un mot de référence (diversité) et d'un numéro
//d'étape (état du cycle).
//
//Il est utilisé dans le cadre d'installation capacitaire pouvant intégrer un
//grand nombre de diversités.
//Dans ce cas, il permet d'animer un poste de travail à partir des données de
//configurations stockées dans la base de données du poste.
//
//Pour la description detaillee du Bloc Fonctionnel, voir le guide GE03.J2.012.
//
//MISE EN OEUVRE :
//****************
//INTERFACE ENTRÉE :
//Val_trait : Condition de validation du traitement
//Iadf      : Information annulation défaut
//Ref       : Référence recherché
//Etape     : Etape recherché
//Tab_param : Table de paramétrage
//Tab_sort  : Table des données de sortie
//Nbcf      : Nombres de configuration
//Nbet      : Nombres d'étape
//Lgcf      : Longueur d'une configuration (bytes)
//
//INTERFACE SORTIE :
//Fin_trait   : Information fin de traitement
//Defaut      : Information de défaut
//Diag        : Table de mots de diagnostic
//  Def       : Présence défaut
//  Ala       : Présence alarme
//  NumListe  : Numéro liste de défaut SMP
//  CodeDef   : Numéro de défaut
//  Nref      : Numéro de référence (en cours)
//  Netape    : Numéro d'étape (en cours)
//
//
//
//
//
//
//CODES D'ERREUR :
//****************
//Valeurs de Diag.codedef
//
//DEC   HEXA   DESCRIPTION
//1     1      Défaut type de données table de paramétrage
//2     2      Défaut dimension table de paramétrage
//4     4      Défaut type de données table de sortie
//8     8      Défaut dimension table de sortie
//16    10     Défaut valeur mots de référence ou numéro d'étape
//32    20     Défaut transfert configuration
//64    40     Défaut référence inconnue
//
//******************************* ENGLISH INFORMATION ****************************
//
//******************************* _ODIL_ID_ *********************************
//
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 12
//Dernier ID mis en oeuvre / Last ID implemented : 1869_12
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'CF_MACHI'
VERSION : 1.0
VAR_INPUT
  Val_trait : BOOL;	//Condition of validation / Condition de validation
  Iadf : BOOL;	//Fault reset information / Information annulation défaut
  Ref : INT;	//Key to find / Référence de recherche
  Etape : INT;	//Step / Etape
  Tab_param : ANY;	//Setting data / Données de paramètrages
  Tab_sort : ANY;	//Output sata / Données de sorties
  Nbcf : INT;	//Number of configuration / Nombre de configuration
  Nbet : INT;	//Number of step / Nombre d'étape
  Lgcf : INT;	//Lenght of a configuration / Longueur d'une confinguration (Bytes)
END_VAR
VAR_OUTPUT
  Fin_trait : BOOL;	//End of work / Fin de traitement
  Defaut : BOOL;	//Fault / Defaut
  Diag : STRUCT	//Diagnosis data / Données de diagnostic
    Def : BOOL;	//Fault presence / Presence defaut
    Ala : BOOL;	//Alarm / Alarme
    Numliste : INT;	//SMP fault list number / Numero de liste defaut SMP
    CodeDef : INT;	//Fault or alarm number / No defaut ou d'alarme en Decimal
    Nref : INT;	//Numero de reference
    Netape : INT;	//Numero d'etape
  END_STRUCT ;
END_VAR
VAR
  xRef : INT;	//Key find auxiliary / Auxiliaire référence
  xEtape : INT;	//Step auxiliary / Auxiliaire étape
  xVal : BOOL;	//Condition of validation auxiliary / Auxiliaire demande de traitement
  xIadf : BOOL;	//Request of fault reset auxiliary / Auxiliaire demande annulation défaut
END_VAR
VAR_TEMP
  ParamTd : INT;	//Type of setting data / Type de donnée table de paramétrage
  ParamLg : INT;	//Lenght of setting data / Longueur table de paramétrage
  ParamDBNR : INT;	//Numéro du DB contenant la table de paramétrage
  ParamZm : INT;	//Zone mémoire de la table de parametrage
  ParamPtr : DINT;	//Starting address of setting data / Adresse début table de paramétrage
  RefPtr : DINT;	//Starting address of key of fing data / Adresse mot de référence
  SortTd : INT;	//Type of output data / Type de donnée table de sortie
  SortLg : INT;	//Lenght of output data / Longueur table de sortie
  SortDBNR : INT;	//Number of DB output data / Numéro DB table de sortie
  SortZm : INT;	//Memory area of output data / Zone mémoire table de sortie
  SortPtr : DINT;	//Starting address of output data / Adresse début table de sortie
  Ret : INT;	//Fault information (SFC SIEMENS) / Information d'erreur (SFC SIEMENS)
  RfLPCnt : INT;	//Loop key of find count / Compteur boucle références
  IncCfPtr : DINT;	//Adding of configuration offset / Increment pointeur configuration
  IncEtPtr : DINT;	//Adding of Step offset / Increment pointeur étape
  SDsc : ANY;	//Source Data Descriptor / Donnée description source
  DDsc : ANY;	//Destination Data Descriptor / Donnée description destination
  Fill : BYTE;	//Fill (SFC SIEMENS)
  Lget : INT;	//Lenght of step data / Longueur donnée étape
END_VAR
BEGIN
NETWORK
TITLE =TABLE DE PARAMETRAGE
//SETTING DATA TABLE
//*ODIL_ID:1869_1*
LAR1 AR2; // Multi instance
L P##Tab_param; // Adresse Tab_param
+AR1;
L DIB [AR1,P#1.0]; // Type de donnée
T #ParamTd;
L DIW [AR1,P#2.0]; // Facteur de répétition
T #ParamLg;
L DIW [AR1,P#4.0]; // Numéro de DB
T #ParamDBNR;
L DIB [AR1,P#6.0]; // Zone mémoire
T #ParamZm;
L DID [AR1,P#6.0]; // Adresse de début
T #ParamPtr;
NETWORK
TITLE =DEFAUTS TABLE DE PARAMETRAGE
//SETTING DATA TABLE FAULTS
//*ODIL_ID:1869_2*
L #ParamTd;
XOW W#16#2; // Type de donnée : bytes
O <>0;
L #ParamZm;
XOW W#16#84; // Zone mémoire : DB
O <>0;
L B#16#1;
SPB Err; // DEFAUT 1 : ERREUR TYPE DE DONNEES TAB_PARAM
L #Lgcf;
L #Nbcf;
*D;
L #ParamLg;
<>D; // Contrôle données entrées <> Dimenssion Tab_param
L B#16#2;
SPB Err; // DEFAUT 2 : ERREUR DIMENSION TAB_PARAM
NETWORK
TITLE =TABLE DE SORTIE
//OUTPUT DATA TABLE
//*ODIL_ID:1869_3*
LAR1 AR2; // Multi insance
L P##Tab_sort; // Adresse Tab_sort
+AR1;
L DIB [AR1,P#1.0]; // Type de donnée
T #SortTd;
L DIW [AR1,P#2.0]; // Facteur de répétition
T #SortLg;
L DIW [AR1,P#4.0]; // Numéro de DB
T #SortDBNR;
L DIB [AR1,P#6.0]; // Zone mémoire
T #SortZm;
L DID [AR1,P#6.0]; // Adresse de début
T #SortPtr;
NETWORK
TITLE =DEFAUT TABLE DE SORTIE
//OUTPUT DATA TABLE FAULTS
//*ODIL_ID:1869_4*
L #Lgcf;
+ -2; // Mot de référence non inclus
L #Nbet;
/D;
T #Lget; // Longueur des données par étape
L #SortTd;
XOW W#16#2; // Type de données : bytes
O <>0;
L #SortZm;
XOW W#16#84; // Zone mémoire : DB
O <>0;
L B#16#4; // DEFAUT 4 : ERREUR TYPE DE DONNEES TAB_SORT
SPB Err;
L #Lget;
L #SortLg;
>D; // Contrôle Longueur étape > Longueur Tab_sort
L B#16#8;
SPB Err; // DEFAUT 8 : ERREUR DIMENSION TAB_SORT
NETWORK
TITLE =CONTROLE MOTS REFERENCE ET ETAPE
//STEP & KEY OF FIND WORDS CHECK
//*ODIL_ID:1869_5*
L #Ref;
L #xRef;
<>D; // Modification valeur mot de référence
O(;
L #Etape;
L #xEtape;
<>D; // Modification valeur mot d'étape
);
SPBN Dt;
R #Fin_trait; // Init sortie fin de traitement
NETWORK
TITLE =INITIALISATION TABLE DE SORTIE
//OUTPUT DATA TABLE INITIALIZATION
//*ODIL_ID:1869_6*
LAR1 P##DDsc; // Initialisation "DDsc"
L #SortLg;
OD DW#16#10020000;
T LD [AR1,P#0.0]; // ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
L #SortDBNR;
T LW [AR1,P#4.0]; // ANY: Data Block Number
L #SortPtr;
T LD [AR1,P#6.0]; // ANY: Area - Offset
L B#16#0;
T #Fill; // Clear "Fill"
CALL "FILL" (// Initialisation tab_sort
BVAL := #Fill,
RET_VAL := #Ret,
BLK := #DDsc);
NETWORK
TITLE =DEBUT DU TRAITEMENT
//COMPUTING START
//*ODIL_ID:1869_7*
//
Dt: U #Val_trait;
FP #xVal; // Front montant Val_trait
SPBN END; // Saut si condition non remplie
NETWORK
TITLE =DEFAUT MOTS REFERENCE ET ETAPE
//STEP & KEY OF FIND WORD FAULT
//*ODIL_ID:1869_8*
L B#16#0;
L #Ref;
T #xRef; // Sauvegarde valeur mot de référence
==D; // Contrôle référence <> nulle
O(;
L B#16#0;
L #Etape;
T #xEtape; // Sauvegarde valeur mot d'étape
==D; // Contrôle étape <> nulle
);
O(;
L #Nbet;
>D; // Contrôle étape < nombre max
);
L B#16#10;
SPB Err; // DEFAUT 16 : ERREUR VALEUR MOTS REFERENCE OU ETAPE
NETWORK
TITLE =CALCUL DES INCREMENTS POUR POINTEUR
//OFFSETS CALCULATION
//*ODIL_ID:1869_9*
L #Lgcf;
SLD 3; // Bytes -> Bits
T #IncCfPtr; // Incrément pointeur configuration
L #Etape;
+ -1;
L #Lget;
*D;
+ 2;
SLD 3; // Bytes -> Bits
T #IncEtPtr; // Incrément pointeur étape
NETWORK
TITLE =RECHERCHE REFERENCE
//SEARCH KEY OF FIND
//*ODIL_ID:1869_10*
AUF DB [#ParamDBNR];
LAR1 #ParamPtr; // Init pointeur Tab_param
L #Nbcf; // Init compteur de boucle
RL: T #RfLPCnt; // ========= RECHERCHE REFERENCE =============
L DBW [AR1,P#0.0];
L #Ref; // Comparaison mot de référence
<>D;
TAR1 #RefPtr; // Sauvegarde pointeur mot de référence
SPB Rx; // Saut configuration suivante
LAR1 P##SDsc; // Init Data Descriptor ("SDsc")
L #Lget;
OD DW#16#10020000;
T LD [AR1,P#0.0]; // ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
L #ParamDBNR;
T LW [AR1,P#4.0]; // ANY: Data Block Number
L #RefPtr;
L #IncEtPtr;
+D;
T LD [AR1,P#6.0]; // ANY: Area - Offset
LAR1 P##DDsc; // Init Data Descriptor ("DDsc")
L #Lget;
OD DW#16#10020000;
T LD [AR1,P#0.0]; // ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
L #SortDBNR;
T LW [AR1,P#4.0]; // ANY: Data Block Number
L #SortPtr;
T LD [AR1,P#6.0]; // ANY: Area - Offset
CALL "BLKMOV" (// ========= TRANSFERT TAB_SORT ==========
SRCBLK := #SDsc,
RET_VAL := #Ret,
DSTBLK := #DDsc);
L B#16#20;
SPBIN Err; // DEFAUT 32 : ERREUR TRANSFERT CONFIGURATION
S #Fin_trait; // Activation fin de traitement
SPA END;
Rx: L #RefPtr; // ======= REFERENCE SUIVANTE ============
L #IncCfPtr;
+D;
LAR1; // Chargement pointeur mot de référence
L #RfLPCnt;
LOOP RL;
L B#16#40;
SPB Err; // DEFAUT 64 : REFERENCE NON TROUVEE
NETWORK
TITLE =ACQUITEMENT DEFAUTS
//FAULTS RESET
//*ODIL_ID:1869_11*
END: L B#16#0;
U #Iadf;
FP #xIadf;
SPBN NAck;
T #Diag.CodeDef;
NAck: L #Diag.CodeDef;
<>D;
= #Defaut;
= #Diag.Def;
BEA;
NETWORK
TITLE =TRAITEMENT DES DEFAUTS
//PROCESSING FAULTS
//*ODIL_ID:1869_12*
Err: T #Diag.CodeDef; //TRANSFERT CODE DEFAUT
SPA END;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_CPT_PIECE"
TITLE =BF_CPT_PIECE
//********************************************************************************
//*                             BF CPT_PIECE                                     *
//*                            COMPTAGE PIECES                                   *
//*                             PART COUNTER                                     *
//********************************************************************************
//(In English futher below)
//
//DESCRIPTION :
//************
//Assure le comptage des pièces avec visualisation de la présélection et de la
//valeur en cours.
//
//MISE EN OEUVRE :
//****************
//Le comptage pièce doit être associé au sous ensemble désigner sous ODIL comme
//référence SMP.
//
//Liens avec SMP :
//- 1 BF par diversité déclarée sous SMP.
//- La Raz des compteurs est réalisée par SMP :
//  a) déclarer une variable Sxraz (x=Numéro de zone) dans le FB de gestion de la
//     zone concernée au niveau STAT.
//  b) déclarer les variables Sxraz et Sxfraz (x=Numéro de zone)dans le DB Global
//
//   "ZxG" pour faire le lien avec les sous ensembles contenant les BF_CPT_PIECE.
//  C)Mettre en oeuvre les réseaux suivants dans le FB de gestion de Zone(FBx00):
//
// Reseau N :  Sxraz         ZxG.Sxraz
//        -----| |-------------( )
//
// Reseau N+1 : ZxG.Sxfraz    Sxraz
//         -----| |------------(R)
//  d) Mettre en oeuvre le reseau suivant en aval de la Dernièer BF_Cpt_pièce de
//  la zone :
//           ZxG.Sxraz   ZxG.Sxfraz
//        -----| |-----------( )
//Entrées du BF :
//Raz_cpt = ZxG.Sxraz
//Autcompt = ZxG.mauto ( issue de la BF zone Mode)
//Comptage  : la BF gére le font montant de l'évènement.
//
//Sortie du BF :
//Val_cour = Variable de valeur de comptage définie sous SMP (niveau STAT)
//
//CODE DEFAUT :
//*************
//Non utilisé
//
//************************** ENGLISH INFORMATION *********************************
//DESCRIPTION:
//************
//Insure the counting of parts with display of the preselection and the current
//value.
//
//OPERATING :
//*********
//The counting part must be associated to the Sub assembly indicated under ODIL
//as
//SMP references.
//
//Links with SMP:
//- 1 BF by diversity declared under SMP.
//- Raz of counter is realized by SMP:
//  A) Implement a variable Sxraz (x=zone number) in the FB of zone management
//      concerned at STAT level.
//  B) Implement variables Sxraz and Sxfraz (x= zone number) in the GlobalDB
//     "ZxG " to make the link with sub assembly containing the BF_CPT_PIECE.
//  C) Implement the following networks in the FB of zone management ( FBx00):
//
// Network N:    Sxraz          ZxG.Sxraz
//          -----¦ ¦-------------( )
//
// Network N+1: ZxG.Sxfraz       Sxraz
//          -----¦ ¦------------( R )
//  D) Implement the reseau following downstream the last BF_Cpt_pièce of the
//     zone:  ZxG.Sxraz    ZxG.Sxfraz
//          -----¦ ¦-----------( )
//BF Input:
//Raz_cpt = ZxG.Sxraz
//Autcompt = ZxG.mauto (stemming from the BF zone Mode)
//Comptage : the BF create the rising edge of the event.
//
//BF Output:
//Val_cour = Counter value defined under SMP (STAT level)
//
//FAULT CODE:
//************
//Not used
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 4
//Dernier ID mis en oeuvre / Last ID implemented : 2021_4
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'CPT_PIEC'
VERSION : 1.2
VAR_INPUT
  Raz_cpt : BOOL;	//Counter reset / Raz du compteur
  Preselec : INT;	//Preselection value max of counter/ Valeur de présélection maxi de comptage
  Autcompt : BOOL;	//Counting autorization / autorisation de comptage
  Comptage : BOOL;	//Counting / comptage
END_VAR
VAR_OUTPUT
  Fincompt : BOOL;	//End of counting / fin de comptage
  Val_cour : INT;	//Counter value / valeur courante de comptage
END_VAR
VAR
  FP_01 : BOOL;	//Rising edge memory / Bit mémmoire pour front
END_VAR
VAR_TEMP
  Ba1i : BOOL;	//Bool ever at 1 / Bit toujours a 1
END_VAR
BEGIN
NETWORK
TITLE =Mise à un des informations utiles en interne de la FB
//Information set used in internal
//*ODIL_ID:2021_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =(*Remise à zéro du compteur*)
//(* Counter reset*)
//*ODIL_ID:2021_2*
//
U #Raz_cpt;
SPBNB _001;
L 0;
T #Val_cour;
_001: NOP 0;
NETWORK
TITLE =(*Mise à 1 du bit de sortie "Fincompt"*)
//quand la valeur de préselection est atteinte.
//La valeur courante ne dépasse jamais la valeur de présélection.
//
//(*"Finrcompt" Setting*)
//When the maxi value of counter is reached
//The counter value never exceed the value of "Preselec"
//*ODIL_ID:2021_3*
//
L #Val_cour;
L #Preselec;
>=I;
= L 1.0;
U L 1.0;
BLD 102;
= #Fincompt;
U L 1.0;
SPBNB _002;
L #Preselec;
T #Val_cour;
_002: NOP 0;
NETWORK
TITLE =(*comtage des pièces *)
//(* Part counter*)
//*ODIL_ID:2021_4*
//
U #Autcompt;
U(;
U #Comptage;
BLD 100;
FP #FP_01;
);
UN #Fincompt;
SPBNB _003;
L #Val_cour;
L 1;
+I;
T #Val_cour;
_003: NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_DATABASE3"
TITLE =BF_DATABASE3
//********************************************************************************
//*                              FB "DATABASE3"                                  *
//*               Gestion de Base de donnees sur perimetre flexible              *
//*                 Database management for pallet table facility                *
//********************************************************************************
//(In english further below)
//DESCRIPTION
//***********
//
//Ce FB permet de manipuler des donnees d'identification,
//et notamment:
//- L'ecriture (ou stockage) d'informations dans
//  une zone memoire de l'automate appelee "Base de Donnees"
//- La lecture (ou restitution) de tout ou partie d'un enregistrement
//  de la base de donnees dans une table locale
//- La modification (ou mise a jour) de tout ou partie d'un enregistrement
//  de la base de donnees depuis une table locale
//- L'effacement d'un enregistrement de la base de donnees
//
//Pour la description detaillee du Bloc Fonctionnel, voir le guide GE03.J2.035
//
//Les parametres d'entree Ref et OffRef permettent d'identifier l'enregistrement
//a traiter. Ref est la clef de recherche de l'enregistrement, OffRef, la position
//de cette clef dans l'enregistrement. OffRef s'exprime en Mot.
//
//Le paramètre d'entrée Mode permet définir la gestion qui sera appliquée à la
//base
//de donnée lors d'une demande d'écriture.
//  Mode 1 :
//    - controle presence reference dans base de donnée
//    - ecriture dans emplacement vide
//    - effacement emplacement suivant
//  Mode 2 :
//    - controle presence reference dans base de donnée
//    - ecriture dans emplacement vide
//    - effacer un emplacement existant sur demande effacement
//  Mode 3 :
//    - mise à -1 des references deja existante dans base de donnée
//    - ecriture dans emplacement vide
//    - effacement emplacement suivant
//
//La taille de la table locale doit etre au moins aussi grande que la taille d'un
//enregistrement.
//
//MISE En OEUVRE :
//***************
//a) Blocs utilises avec la BF :
//------------------------------
//(Pour plus de precisions sur les format et la contruction des DB voir la
//Documentation de la BF)
//- "IDENT" : Donnees d'entree et de sortie de l'ilot utilisees par
//l'etiquette dynamique.
//- "IBD" : Base de donnees Archivage des donnees sur l'ilot
//- "Talo" : Donnees de travail au poste
//
//Attention avant toute mise en oeuvre vous devez contacter le charger daffaire
//Renault pour obtenir le mapping de letiquette dynamique
// qui sera mis en oeuvre sur le projet.
//La BF et sa mise en oeuvre utilisant des information issue de ce mapping
//
//a.1) "Ident": (Variable source)
//Les donnees sont mises a disposition dans le DB "IDENT" par la BF_Ident ( voir
//documentation de la BF)
//Les donnees sont au format tableau de Mot ou struct de mot.
//Il est indispensable pour la mise en uvre de connaitre la position du Mot
//hebergant linformation "Numero support".
//
//a.2) "IBD" :
//La basse de Donnee doit avoir un nombre d'emplacement minimum :
//= Nombre d'emplacement piece sur l'ilot (Table ou prehensseur robot) + 1 sur le
//flux concernee
//Chaque emplacement est egale au contenue d'une etiquette dynamique
//Les donnees pour chaque emplacement  sont au format Tableau de Mot ou Struct
//
//a.3) "Talo" :
//Ce DB contient l'ensemble des Donnees de travail de tous les postes devant
//effectue un travail :
//- 1 struct par sous Ensemble ou est travaille la piece
//La taille de la stuct = 1 emplacement de IDB
//Le format des variable dans la struct est libre et doit correspondre au besoin
//de traitement final des variable dans le programme.
//
//Attention : les variables « sources » venant du codage dynamique etant au
//format
//Word, lutilisation
//De donnees differentes de ce format necessite de declarer toutes les donnees (
//Bool ou Byte) contenue dans le word ( risque de decalage des donnees )
//
//b) Gestion des informations MOT support, Mot piece et Numero support :
//--------------------------------------------------------------------
//Ces informations doivent etres mises en oeuvre dans une Table Piece ("IIT").
//Le transfert des donnees dun pas de travail a lautre est assure par la
//BF_TF_TP.
//Pour plus dinformation Voir la documentation de La BF_TF_TP.
//
//b.1) Informations minimum a mettre en oeuvre dans IIT (40 octets):
//
//Les informations sont structurees par sous ensemble avec ladressage suivant :
//IIT.<Nom sous ensemble>.<Element de la struct>.<Bool de lelement(si besoin)>
//
//Elements de la struct :
//- MP ( struct image mot piece)
//- MS ( Struct image mot support)
//- Nsup ( Word N° support)
//
//Bool de lelement :
//MP (Struct de 16 Bools):
//
//Nom  *designation                *  Transfere de poste en poste
//*****************************************************************
//mpp  *memoire presence piece     *   oui ( le 1Er element de la struct)
//mpat *memoire piece a travailler *   non
//mpst *memoire piece sans travail *   non
//
//Bool de lelement :
//MS (Struct de 16 Bools):
//
//Nom  *designation                                *Transfere de poste en poste
//*****************************************************************
//mps  *memoire presence support            *   oui
//msae *memoire support a evacuer            *   non
//msebd*memoire support ecriture base de donnee    *   non
//mslrf*memoire support lecture RF300(etiquette dyn)*non
//msmbd*memoire support modification base de donnee *   non
//mslbd*memoire support lecture base de donnee      *   non
//
//c) Mise en oeuvre de la BF :
//----------------------------
//- Voir documentation de la BF ( depent de la fonction realisee Ecriture,
//Lecture, modification, effacement)
//
//Codes d'erreur:
//**************
//Valeurs de Diag.codedef
// 1: Erreur de parametrage
//     - La taille de "Talo" et "BDD" doit etre exprimee en octet
//       C'est les cas par defaut lorsque la variable est symbolique, sinon il
//       faut utiliser une syntaxe du type P#DB10.DBX 10.0 BYTE 50 par exemple.
//     - "Talo" et "BDD" doivent etre dans des Blocs de donnees
//     - La taille de "Talo" est incompatible avec LgEt, OffEt & NMot
//     - NbMaxEt doit etre superieur ou egal a 2
//     - LgET ne doit pas etre nul
//     - La taille de la BDD doit etre sufffisante pour contenir NBMaxEt
//       enregistrements
//     - L'offset de la reference doit etre dans l'enregistrement
//
// 2: Le parametre Ref ne doit pas etre nul
//
// 4: La Reference existe deja dans la BDD (lors d'une demande d'ecriture)
//
// 8: La BDD est pleine (lors d'une demande d'ecriture)
//
//16: La Reference n'existe pas dans la base donnees (lors d'une demande de
//    lecture de modification ou d'effacement)
//
//******************************* ENGLISH INFORMATION ****************************
//
//DESCRIPTION
//***********
//
//This BF allow to manage identification datas, and also:
//- to write (or store) datas in PLC memory area called "database"
//- to read (or restore) whole or part of a database record by filling a local
//data table
//- to modify (or update) whole or part of a database record from a local data
//table
//- to delete a record of the data base
//
//Please see GE03.J2.035 for more details
//
//"Ref" and "OffRef" parameters allow identification of the record to process.
//"Ref" is the key to find the record. "OffRef" corresponds to the position of
//the key inside the record. "OffRef" is expressing word.
//
//"Mode" parameter allow to defined the management of database for a writing
//request.
//de donnée lors d'une demande d'écriture.
//  Mode 1 :
//    - to check that the reference number it is not already present in the
//database
//    - to save the vehicle identifier in a free location of the database
//    - to delete the following location (n+1)
//  Mode 2 :
//    - to check that the reference number it is not already present in the
//database
//    - to save the vehicle identifier in a free location of the database
//    - to delete the process setting of the database (only for deleting request)
//  Mode 3 :
//    - set to -1 of already existing references in database
//    - to save the vehicle identifier in a free location of the database
//    - to delete the following location (n+1)
//
//The length of the local table should be at least as large as a record.
//
//OPERATING :
//***********
//a) Blocks used with BF :
//----------------------
//( For more details to type and structure of variables used in DBs see the BF
//documentation)
//- "IDENT" : Input and output datas of the facility used by ID tag
//- "IBD" : Data base of record for facility
//- "Talo" : Working datas for sub-assembly
//
//Warning : before Implementation you must contact your Renault Project Leader
//correspondent to get the ID tag mapping used in the projet.
//The BF and her operating use some informations of the ID tag mapping.
//
//a.1) "IDENT" : (Source variables)
//Data are given by the BF_Ident in the DB "IDENT" (See BF_ident documentation)
//The Data are array or 1 struct of word type.
//The position of the "Support Number" in mapping are nececessary for BF
//implementation.
//
//a.2) "IBD"
//The data base must be made with a minimun of place =  Number of part place in
//the Facility on the flow (Table, robot gripper ...) + 1
//Each place is equal to the ID tag contents
//The data for each place are Array or struct of word type
//
//a.3) "Talo"
//This db contains all the working data of the sub-assembly how must work.
//- 1 stuct by sub-assembly where the part is worked
//the stuct size  = (is equal to)  1 IDB place.
//The type of variables in the struct is free and it must be selected with the
//final used type in the program.
//
//Warning : thes sources variables coming from ID TAg are in Word type. The use
//of another type necessitates to register all the data (Bool or Byte) in the
//word
//(risk of information Offset)
//
//b) Management of Support word, part word and Support Number informations:
//------------------------------------------------------------------------
//The informations must be used in an Part Table (DB96 "IIT")
//The data transfer to an other work stage is done by the BF_TF_TP
//(For more details see the BF_TF_TP documentation)
//
//b.1) Minimun informations to operate In "IIT" DB (40 Bytes):
//The informations are structured by sub-assembly with this program adress:
//"IIT".<Sub-assembly Name>.<Struct Element>.<Information (If need)>
//
//Struct element :
//- MP ( Stuct of Part word)
//- MS ( Struct of Support word)
//- NSup ( Support Number word)
//
//Information :
//- In MP (Struct of 16 Booleans) :
//Name * Used for                *   Transfered to next sub-assembly
//****************************************************************
//mpp  * Part presence memory    *    Yes ( Must be the first information in the
//
//                                      sub-assembly Struct)
//mpat * Part to wok memory      *    Yes
//mpst * Part without work memory*    Yes
//
//- In MS  (Struct of 16 Booleans):
//Name * Used for                        *   Transfered to next sub-assembly
//*****************************************************************
//mps  *  Support presence memory        * Yes
//msae * Memory Support to evacuate      * Yes
//msedb* Memory Support writing data Base*  NO
//     *  (Function of the BF_DATABASE)  *
//mslrf* Memory Support read Tag (RF300) *  NO
//       (Function of the BF_IDENT)      *
//msmbd* Memory Support modif. data base *  NO
//     * (Function of the BF_DATABASE)   *
//msldb* Memory support read data base   *  NO
//       (Function of the BF_DATABASE)
//
//C) BF operating :
//---------------
//- See the BF_Database documentation ( it depends on the type of function used
//,Write, read, modify)
//
//
//Error definition:
//*****************
//Values of Diag.codedef :
// 1: Parameters error
//     - The size of "Talo" and "BDD" must be in byte
//       It's a typical case of a symbolical data, or this specific type must
//       be used : P#DB10.DBX 10.0 BYTE 50, for example.
//     - "Talo" and "BDD" must be inside teh data blocs
//     - The size of "Talo" is not coherent with LgEt, OffEt & NMot
//     - NbMaxEt must be higher or egual to 2
//     - LgET can't be NULL
//     - The database size must be large enough to content NBMaxEt of
//       records
//     - the offset of the key must be inside the record.
//
// 2: Parameter "Ref" can't be NULL
//
// 4: The key is yet present in the database (when trying to store)
//
// 8: Database is full (when trying to store)
//
//16: The key doesn't exist in the database (when trying to access, modify or
//delete)
//NB Reseaux BF 1er Version / Network Number in 1ft version : 11
//Dernier ID mis en oeuvre / Last ID implemented : 1871_11
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'DATABASE'
VERSION : 2.0
VAR_INPUT
  Ecr : BOOL;	//record request / Demande d'ecriture (Initialisation de l'etiquette virtuelle)
  Lec : BOOL;	//read request / Demande de lecture
  Modi : BOOL;	//Modification request / Demande de Modification
  Suppr : BOOL;	//Delete record / Demande d'effacement
  Iadf : BOOL;	//fault reset information / Info Annulation Defaut
  Mode : INT;	//Mode / Mode
  Ref : INT;	//key to find or compare / Reference a trouver ou comparer
  OffRef : INT;	//record key Offset (in Word)/ Offset de la reference dans l'enregistr (En Mot)
  LgEt : INT;	//Record size (In word) / Longueur de l'enregistrement (En Mot)
  NbMaxEt : INT;	//database record max number / Nombre max d'enregistrements dans la BDD
  OffEt : INT;	//Record data offset (in word) / Offset des donnees dans l'enregistr (en Mots)
  Talo : ANY;	//local table / Table locale
  BDD : ANY;	//Database / Base de donnees
  NMot : INT;	//Number of word to read or modify / Nombre mot a lire ou modifier
END_VAR
VAR_OUTPUT
  Foncfi : BOOL;	//definite function / fonction finie
  Def : BOOL;	//Fault / Defaut
  Diag : STRUCT	//HMI informations / Information IHM
    Def : BOOL;	//Fault presence / Presence defaut
    Ala : BOOL;	//Alarm presence / Presence d'une alarme
    NumListe : INT;	//SMP fault list number / Numero de liste defaut SMP
    CodeDef : INT;	//Fault or alarm number / No defaut ou d'alarme en Decimal
  END_STRUCT ;
END_VAR
VAR
  xW : BOOL;	//Auxilliaire de Front (W)Ecriture
  xR : BOOL;	//Auxilliaire de Front (R)Lecture
  xM : BOOL;	//Auxilliaire de Front (M) Modification
  xS : BOOL;	//Auxilliaire de Front (S) Suppression
  xCmd : BYTE;	//Auxilary Byte / Octet Auxiliaire
  xIadf : BOOL;	//Auxiliaire de Front Annulation défaut
END_VAR
VAR_TEMP
  SRC : ANY;	///!\ Data Descriptor
  DST : ANY;	///!\ Data Descriptor
  SavAR1 : DWORD;	//Sauvegarde du registre AR1
  DB_BDD : INT;	//Numero du Bloc de donnees contenant la BDD
  xOffEt : WORD;	//Offset sur l'etiquette (en Mots)
  xOffEtBit : DWORD;	//Offset sur l'etiquette (en Bits)
  xNMot : WORD;	//Longueur des donnees (en Mots)
  xLgEtBit : DWORD;	//Longueur de l'etiquette (en bits)
  LoopCnt : INT;	//Compteur de boucle
  Clef : INT;	//Clef de recherche (Reference)
  Ret : INT;	//Variable pour fonction siemens (RET_VAL)
  TaloPtr : DWORD;	//Pointeur pour TALO
  BDDPtr : DWORD;	//Pointer pour Database
  BDDRefPtr : DWORD;	//Pointeur sur la Ref du premier enregistrement de la BDD
  BDDi : INT;	//Index sur l'enregistrement trouve
  W : BOOL;	//Ecriture
  R : BOOL;	//Lecture
  M : BOOL;	//Modification
  D : BOOL;	//Effacement
  M1 : BOOL;	//Mode 1
  M2 : BOOL;	//Mode 2
  M3 : BOOL;	//Mode 3
  Fnd : BOOL;	//Reference trouvee
END_VAR
BEGIN
NETWORK
TITLE =
//*ODIL_ID:1871_1*
CLR;
= #Foncfi;
NETWORK
TITLE =
//---------- Demandes
//*ODIL_ID:1871_2*
//
L #xCmd; //Last Command Bits State
L DIB [AR2,P#0.0]; //!\Command Bits
UW W#16#F;
T #xCmd;
TAK;
XOW; //Edges
UW; //Rising edges
SPZ END;
//---------- Une seule demande a la fois...
//Aucun traitement n'est realise lors de demandes simultanees
//Aucun code d'erreur n'est remonte
L B#16#1;
==D;
= #W; //Ecriture
POP;
L B#16#2;
==D;
= #R; //Lecture
POP;
L B#16#4;
==D;
= #M; //Modification
POP;
L B#16#8;
==D;
= #D; //Effacement
//-------
UN #W;
UN #R;
UN #M;
UN #D;
SPB END;
//------- Mode (Compris entre 1 et 3)
L #Mode;
L B#16#1;
==D;
= #M1;
POP;
L B#16#2;
==D;
= #M2;
POP;
L B#16#3;
==D;
= #M3;
//-------
UN #M1;
UN #M2;
UN #M3;
SPB Er_1; //Erreur de parametrage
//------- L'effacement est ignoré hors du mode 2
UN #M2;
U #D;
SPB END;
NETWORK
TITLE =
//En cas d'ecriture, les parametres OffEt et NMot sont ignores
//Forcage de l'offset sur l'etiquette OffEt a 0 (au lieu de OffEt)
//Forcage de la longueur de l'etiquette a LgEt (au lieu de NMot)
//*ODIL_ID:1871_3*
//
L #NMot; //Nombre de Mots a copier (Lecture et Modification)
L #OffEt; //Offset
UN #W;
SPB IOE;
L #LgEt; //Nombre de mots a copier (Ecriture)
L B#16#0; //Offset
IOE: T #xOffEt;
SLW 4; //* 16 -> Offset en bits
T #xOffEtBit;
POP;
T #xNMot; //Longueur des donnees a copier (en Mots)
NETWORK
TITLE =Controle des parametres
//---------- Contole que les operandes sont de type BYTE
//*ODIL_ID:1871_4*
//
L DIB [AR2,P#15.0]; //!\ANY: DataType (2 -> Byte) Type de Talo
XOW W#16#2; //Type Byte
O <>0;
L DIB [AR2,P#25.0]; //!\ANY: DataType (2 -> Byte) Type de BDD
XOW W#16#2; //Type Byte
O <>0;
//---------- Controle que les operandes sont dans des DBs
L DIB [AR2,P#20.0]; //!\Zone de Talo
XOW W#16#84; //DB
O <>0;
L DIB [AR2,P#30.0]; //!\Zone de BDD
XOW W#16#84; //DB
O <>0;
//---------- Controle que xOffEt >= 0
L #xOffEt;
L B#16#0;
O(;
<D;
);
//---------- Controle que xOffEt + xLg <= LgEt
POP; //L #xOffEt
L #xNMot;
+D;
L #LgEt;
O(;
>D;
);
//---------- Controle que Len(Talo) >= LgEt
L DIW [AR2,P#16.0]; //!\Longueur de Talo (en octets)
SLW 1; //* 2 -> Longueur en Mots
O(;
>D;
);
//---------- Controle que NbMaxEt >= 2
L #NbMaxEt;
L B#16#2;
O(;
<D;
);
//---------- Controle que la BDD peut contenir NbMaxEt
POP; //L #NbMaxEt
L #LgEt;
*D;
O ==0; //LgEt egal a 0
SLW 1;
L DIW [AR2,P#26.0]; //!\Longueur de BDD
O(;
>D;
);
//---------- Controle de l'offset de la reference 0 <= OffRef <= (LgEt - 1)
L #OffRef;
L B#16#0;
O(;
<D;
);
POP; //L #OffRef
L #LgEt;
+ -1;
O(;
>D;
);
//----------
SPB Er_1; //Erreur de parametrage
NETWORK
TITLE =
//Controle de la valeur de la reference
//----------
//*ODIL_ID:1871_5*
//
L B#16#0;
L #Ref;
==D;
SPB Er_2; //Erreur: Reference nulle
T #Clef;
NETWORK
TITLE =Calcul de pointeurs
//---------- Calcul de la longueur de l'etiquette en bits
//*ODIL_ID:1871_6*
//
L #LgEt;
SLW 4; //* 16 -> Longueur en bits
T #xLgEtBit;
//---------- Ouverture du DB BDD
L DIW [AR2,P#28.0]; //!\ANY: Data Bloc Number
T #DB_BDD;
AUF DB [#DB_BDD]; //N° de DB de la BDD
//---------- Calcul du pointeur sur la premiere Reference dans la BDD
L DID [AR2,P#30.0]; //!\Offset de la BDD dans le DB
LAR1;
L #OffRef; //Offset de la reference dans l'enregistrement (en Mots)
SLW 4; //* 16 -> Offset en bits
+AR1;
TAR1 #BDDRefPtr;
//----------
L #NbMaxEt; //Initialisation du compteur de boucle
U #W; //Cmd
R #Fnd;
SPBN SRMD;
NETWORK
TITLE =Recherche de la reference et d'un emplacement libre (Ecriture)
//Recherche de la reference dans BDD pour eviter les doublons
//Recherche d'un enregistrement libre
//Effacement de l'enregistrement suivant (Ecr)
//*ODIL_ID:1871_7*
//
SW: T #LoopCnt;
L B#16#0;
L DBW [AR1,P#0.0]; //Reference
==D;
UN #Fnd;
SPBN Wf;
= #Fnd;
L #LoopCnt;
T #BDDi;
POP;
Wf: L #Clef;
<>D;
SPB WNx; //Not Found
//------- Effacement des emplacement existant en mode 3...
U #M3;
L -1;
T DBW [AR1,P#0.0];
//JC END
SPB WNx;
SPA Er_4; //Erreur: La reference existe deja dans la BDD (hors mode 3)
WNx: L #xLgEtBit;
+AR1;
L #LoopCnt;
LOOP SW;
UN #Fnd;
SPB Er_8; //Erreur: Base de donnees Pleine
//------- Pas d'effacement de l'enregistrement suivant en mode 2...
U #M2;
SPB Cpy;
//---------- Effacement de l'enregistrement suivant
L #NbMaxEt;
L #BDDi;
-D;
+ 1;
L #NbMaxEt;
MOD;
L #xLgEtBit; //Longueur de l'etiquette en bit
*D;
LAR1;
L #BDDRefPtr;
+AR1;
L B#16#0; //Effacement du champ Reference
T DBW [AR1,P#0.0];
SPA Cpy;
NETWORK
TITLE =Recherche de la Reference (Lecture, Modification et Effacement)
//Recherche de la reference dans BDD
//*ODIL_ID:1871_8*
//
SRMD: T #LoopCnt;
T #BDDi;
L DBW [AR1,P#0.0]; //Reference
L #Clef;
==D;
SPB RMDf; //Trouvee
L #xLgEtBit;
+AR1;
L #LoopCnt;
LOOP SRMD;
SPA Er16; //Erreur: Clef non trouvee
RMDf: UN #D;
SPB Cpy;
= #Foncfi;
L B#16#0;
T DBW [AR1,P#0.0]; //Reference
SPA END;
NETWORK
TITLE =COPIE DES DONNEES
//---------- Calcul du pointeur sur les donnees de "Talo"
//*ODIL_ID:1871_9*
//
Cpy: L DID [AR2,P#20.0]; //!\Zone & Offset de Talo
LAR1;
L #xOffEtBit; //Offset en Mot
+AR1;
TAR1 #TaloPtr;
//---------- Calcul du pointeur sur les donnees de "BDD"
L #NbMaxEt;
L #BDDi;
-D;
L #xLgEtBit;
*D;
L DID [AR2,P#30.0]; //!\Zone & Offset de BDD
UD DW#16#FFFFFF; //Zone a 0
+D;
L #xOffEtBit; //Offset en Bit
+D;
OD DW#16#84000000; //Zone DB
T #BDDPtr;
//---------- Initialisation des parametres ANY pour BLKMOV
L #xNMot; //Fact
OD DW#16#10040000; //Type
T LD 0; //!\ -> SRC
T LD 10; //!\ -> DST
U #R; //Cmd
SPB CpyR;
//---------- Transfert TALO -> BDD (Ecriture et Modification)
L DIW [AR2,P#18.0]; //!\N° de DB de TALO
T LW 4; //!\ -> SRC
L #DB_BDD; //N° de DB de BDD
T LW 14; //!\ -> DST
L #TaloPtr;
T LD 6; //!\-> SRC
L #BDDPtr;
T LD 16; //!\-> DST
SPA BlkM;
//---------- Transfert BDD -> TALO (Lecture)
CpyR: L #DB_BDD; //N° de DB de BDD
T LW 4; //!\ -> SRC
L DIW [AR2,P#18.0]; //!\N° de DB de TALO
T LW 14; //!\ -> DST
L #BDDPtr;
T LD 6; //!\-> SRC
L #TaloPtr;
T LD 16; //!\-> DST
//---------- Recopie des donnees de SRC vers DST
BlkM: CALL "BLKMOV" (
SRCBLK := #SRC,
RET_VAL := #Ret,
DSTBLK := #DST);
U BIE;
= #Foncfi;
NETWORK
TITLE =
//*ODIL_ID:1871_10*
END: L B#16#0;
U #Iadf;
FP #xIadf;
SPBN NAck;
T #Diag.CodeDef;
NAck: L #Diag.CodeDef;
<>D;
= #Def;
= #Diag.Def;
//----------
LAR1 #SavAR1; //Restauration de AR1
BEA;
NETWORK
TITLE =
//*ODIL_ID:1871_11*
Er_1: L B#16#1; //Erreur: Parametrage incorrect
SPA Err;
Er_2: L B#16#2; //Erreur: Reference Nulle
SPA Err;
Er_4: L B#16#4; //Erreur: Reference existe deja (Ecriture)
SPA Err;
Er_8: L B#16#8; //Erreur: BDD pleine (Ecriture)
SPA Err;
Er16: L B#16#10; //Erreur: Reference inexistante dans la BDD (lecture, modification ou effacement)
Err: T #Diag.CodeDef;
SPA END;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_DEVERM"
TITLE =Déverminage Table Périmètre flexible
//**********************************************************************
//*                          FB DEV_TABLE                              *
//*        PERMET DE REALISER LE DEVERMINAGE D'UNE TABLE               *
//**********************************************************************
//
//REFERENCE:  Juin 2008:      Création FB     Franck PIECQ
//
//DESCRIPTION:  LA FB "DEV_P1" ASSURE EN MODE DEVERMINAGE :
//************  - LA GESTION DES MEMOIRES SUPPORT ET MEMOIRES PIECES
//              - LA SELECTION DE LA DIVERSITE UTILISEE
//              - LA GESTION DE LA TEMPORISATION D'ATTENTE ENTRE DEUX CAISSES
//                SIMULEES
//
//
//FONCTIONNEMENT: Après avoir valider le mode déverminage,sélectionner une ou
//toutes les diversités sur la page WinCC. Le FB crée les mémoires supports et
//mémoires pièces (fonctionnement sans support) qui vont permettrent de simuler
//la présence d'une caisse à travailler. Elle assure également la création du
//mot diversité qui sera utilisé par le process pour l'envoi des codes cycles.
//En fonction des diversités sélectionnées en page écran (une ou toutes) la FB
//va enchaîner en boucle les diversités.
//
//************
//
//Interface d'entrée :
//      Mdv     : Reçoit l'information de mémoire déverminage de la zone
//      Inom    : Reçoit l'information de marche normale de la zone
//      Imel    : Reçoit l'information de montée élévateur
//      Nbdiv   : Nombre de diversité souhaité
//      Temp    : Réglage de la temporisation de déverminage table
//
//Interface de sortie :
//      Sel_dev : Information de sélection déverminage
//      Tdever  : Information de déverminage
//
//Interface d'entrée/sortie :
//      Sl_dev  : Sélection de la diversité en page écran
//      Msup    : Mémoire support présent de la table
//      Mpiec   : Mémoire présence pièce de la table
//      Mpat    : Mémoire pièce à travailler
//      Mpt     : Mémoire pièce travaillée
//NB Reseaux BF 1er Version / Network Number in 1ft version : 12
//Dernier ID mis en oeuvre / Last ID implemented : 1803_12
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : 1,....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'DEVERM'
VERSION : 1.0
VAR_INPUT
  Mdv : BOOL;	//Mémoire Déverminage
  Inorm : BOOL;	//Info mode de fonctionnement normal
  Imel : BOOL;	//Info montée élévateur de la Table de travail
  Nbdiv : INT;	//Nombre de diversité
  Temp : TIME;	//Temps d'attente entre le lancement de 2 pièces (Base de temps 1s)
END_VAR
VAR_OUTPUT
  Sel_dev : BOOL;	//Sélection déverminage OK
  Tdever : INT;	//Type de déverminage sélectionné
END_VAR
VAR_IN_OUT
  Sl_dev : INT;	//Mot sélection déverminage en page écran Wincc
  Msup : BOOL;	//Mémoire support présent
  Mpiec : BOOL;	//Mémoire pièce présente
  Mpat : BOOL;	//Mémoire pièce à travailler
  Mpt : BOOL;	//Mémoire pièce travaillée
END_VAR
VAR
  Cptdev : WORD;	//Compteur pour déverminage
  Val_tp : BOOL;	//Validation tempo
  Vcptdev : BOOL;	//Validation compteur pour déverminage
  Fmvcptdev : BOOL;	//Front montant validation compteur pour déverminage
  Vtpmp : BOOL;	//Validation tempo création mot pièce
  Tf_cmp : TIME;	//Tempo création mot pièce
  Toncm : TON;	//Tempo création mémoires pièces et supports
END_VAR
BEGIN
NETWORK
TITLE =Condition de validation tempo pour création mémoires
//*ODIL_ID:1803_2*
U #Mdv;
U #Inorm;
U #Imel;
U #Sel_dev;
UN #Msup;
UN #Mpiec;
= #Val_tp;
NETWORK
TITLE =Tempo pour création mémoires
//*ODIL_ID:1803_3*
U #Val_tp;
= L 0.0;
BLD 103;
CALL #Toncm (
IN := L 0.0,
PT := #Temp,
Q := #Vtpmp,
ET := #Tf_cmp);
NOP 0;
NETWORK
TITLE =Création mémoires
//- Mémoire support présent
//- Mémoire pièce présente
//- Mémoire pièce à travailler
//*ODIL_ID:1803_4*
//
U #Vtpmp;
S #Msup;
S #Mpiec;
S #Mpat;
NETWORK
TITLE =Remise à zéro memoires
//- Mémoire support présent
//- Mémoire pièce présente
//- Mémoire pièce à travailler
//*ODIL_ID:1803_5*
//
U #Mdv;
U #Imel;
U #Mpt;
R #Msup;
R #Mpiec;
R #Mpat;
NETWORK
TITLE =Vérification de la limite d'utilisation inférieure
//*ODIL_ID:1803_6*
U(;
L #Sl_dev;
L -1;
<I;
);
SPBNB _002;
L -1;
T #Sl_dev;
_002: NOP 0;
NETWORK
TITLE =Vérification de la limite d'utilisation supérieure
//*ODIL_ID:1803_7*
U(;
L #Sl_dev;
L #Nbdiv;
>I;
);
SPBNB _003;
L #Nbdiv;
T #Sl_dev;
_003: NOP 0;
NETWORK
TITLE =Condition de Comptage type de pièce pour déverminage automatique
//*ODIL_ID:1803_8*
U #Mdv;
U #Inorm;
U #Msup;
U #Imel;
UN #Mpt;
= #Vcptdev;
NETWORK
TITLE =Comptage type de pièce pour déverminage automatique
//*ODIL_ID:1803_9*
U(;
U #Vcptdev;
FP #Fmvcptdev;
O(;
L #Tdever;
L 0;
==I;
);
);
U(;
L #Sl_dev;
L -1;
==I;
);
SPBNB _004;
L #Tdever;
L 1;
+I;
T #Tdever;
_004: NOP 0;
NETWORK
TITLE =Compteur type de pièce pour déverminage par type
//*ODIL_ID:1803_10*
U #Vcptdev;
U(;
L #Sl_dev;
L 0;
>I;
);
U(;
L #Sl_dev;
L #Nbdiv;
<=I;
);
SPBNB _005;
L #Sl_dev;
T #Tdever;
_005: NOP 0;
NETWORK
TITLE =Remise à zéro compteur pour déverminage
//*ODIL_ID:1803_11*
U(;
U #Vcptdev;
U(;
L #Tdever;
L #Nbdiv;
>I;
);
ON #Mdv;
);
SPBNB _006;
L 0;
T #Tdever;
_006: NOP 0;
NETWORK
TITLE =Sélection déverminage OK
//*ODIL_ID:1803_12*
U #Mdv;
U(;
U(;
L #Sl_dev;
L 0;
>I;
);
U(;
L #Sl_dev;
L #Nbdiv;
<=I;
);
O(;
L #Sl_dev;
L -1;
==I;
);
);
= #Sel_dev;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_DIAG_PROFINET"
//**********************************************************************
//*                        BF_DIAG_PROFINET                            *
//*     Assure le traitement du diagnostic des IOdevices Profinet      *
//*         Processes the diagnostic of Profinet IODevices             *
//**********************************************************************
//(in english further below)
//DESCRIPTION:
//************
//Ce FB assure le traitement du diagnostic des IOdevices Profinet
//
//Version 1.3 Compatible avec le FW 2.7 des CPU 319F
//
//MISE EN OEUVRE:
//***************
//1) Blocs associes :
//- 1 DB d'instance ( DB 2036 ) DB_PN pour la BF_Diag_Profinet
//- 1 DB Global (DB78) Conf_PN ( topologie reseau)uniquement si pupitre sans IHMP
//  - Si le pupitre contient IHMP :
//     Il faut mettre a 1 l'entree P_Ihmp, et le DB CONF_PN n'est pas necessaire.
//  - Si le pupitre ne contient pas IHMP :
//     Il faut mettre a 0 l'entree P_Ihmp, et le DB CONF_PN est necessaire sur
//     l'entree DB_Config de la BF.
//Pour la mise en oeuvre du DB78 voir detail dans la documentation
//BF_Diag_Profinet
//
//2) SFM :
//Voir detail dans documentation BF_Diag_profinet
//
//3) Appels dans la structure programme pour la fonction Diag_Profinet
//3.1)Dans OB1 :
//- Faire un Call du FB20 "SFM_FB" avec le DB75 "SFM_DB" pour instance
//  avant l'appel du FC1 (FC Ilot)
//- Dans FC1 : Faire un Call du FB1 (Gestion ilot) avec le DB1 "I01" pour instance
//- Dans FB1 mettre en oeuvre la BF_Diag_Profinet FB2026 avec le DB 2036 "DB_PN"
//  pour instance
//
//3.2) Dans OB100 :
//- Mettre en oeuvre la BF_Diag_Profinet FB2026 avec le DB 2036 "DB_PN" pour
// instance (Seul les entrees DB_SFM et DB_Config sont a mettre en oeuvre)
//3.3) Dans OB86 :
//- Faire un Call du FB20 "SFM_FB" avec le DB75 "SFM_DB" pour instance
//  avant de mettre en oeuvre la BF_Diag_Profinet FB2026 avec le DB 2036 "DB_PN"
//
//  pour instance (Seul les entrees DB_SFM et DB_Config sont a mettre en oeuvre)
//
//CODE DEFAUT :
//*************
//Valeur de Diag.codedef :
//1 = Defaut module I/O
//257 = I/O configure present avec alarme
//
//----------------------English information-------------------------------
//DESCRIPTION:
//************
//This FB processes the diagnostic of Profinet IODevices.
//
//Version 1.3 compatible with FW 2.7 of CPU319F
//
//OPERATING :
//***********
//1) Blocks associate:
//- 1 DB of instance(DB 2036) "DB_PN" for the BF_Diag_Profinet
//- 1 Global DB (DB78) "Conf_PN" (Profinet network topology) only if panel without
//
//  IHMP
// - If panel contains IHMP :
//     It is necessary to put to 1 the P_Ihmp input, and the DB CONF_PN
//     is not necessary.
//  - If panel does not contain IHMP:
//     It is necessary to put to 0 P_Ihmp input, and the DB CONF_PN
//is necessary on the DB_Config imput of the BF.
//For the implementation of the DB78 see detail in the documentation
//BF_Diag_Profinet
//
//2) SFM:
//See detail in documentation BF_Diag_profinet
//
//3) Calls in the structure progra) for the function Diag_Profinet
//3.1) In OB1:
//- Make Call of FB20 " SFM_FB " with the DB75 " SFM_DB " for instance before the
//  call of the FC1 (Facility FC)
//- In FC1: Make Call ofFB1 (Facility Management) with the DB1 "I01" for instance
//- In FB1 operate the BF_Diag_Profinet FB2026 with the DB 2036 "DB_PN" for
// instance
//
//3.2) In OB100:
//- Operate the BF_Diag_Profinet FB2026 with the DB 2036 "DB_PN" for Instance
//(  Warning : Only DB_SFM and DB_config Input must be used)
//3.3) In OB86:
//- Make Call du FB20 " SFM_FB " with the DB75 " SFM_DB " for instance before
//operating BF_Diag_Profinet FB2026 with the DB 2036 "DB_PN" for instance
//  (Warning : Only DB_SFM and DB_config Input must be used)
//
//FAULT CODE :
//************
//Values of Diag.codedef :
//1 = Profinet I/O module in fault
//257 = Profinet I/O module configured is present with an alarm
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 41
//Dernier ID mis en oeuvre / Last ID implemented : 2036_41
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'DIAG_PN'
VERSION : 1.5
VAR_INPUT
  D_pn : BOOL;	//PROFINET start, fault reset / Demarrage de bus, d'acquittement des defauts
  P_IHMP : BOOL;	//IHMP presence (1=yes,0=no) / Presence IHMP (1=oui,0=non)
  DB_SFM : BLOCK_DB;	//SFM DB / DB SFM
  DB_CONFIG : BLOCK_DB;	//DB configuration reseau
END_VAR
VAR_OUTPUT
  Pn_run : BOOL;	//Bus in operation / Bus en fonctionnement
  Defaut : BOOL;	//SMPLOC fault bit / Bit de defaut SMPLOC
  Alarme : BOOL;	//SMPLOC alarm bit / Bit d'alarme SMPLOC
  Diag : STRUCT	//IHMP diagnostic structure / Structure de diagnostic IHMP
    Def : BOOL;	//Fault bit / Bit de defaut
    Ala : BOOL;	//Alarm bit / Bit d'alarme
    Numliste : INT  := 52;	//SMP fault list number / N° de liste defaut SMP
    Codedef : INT;	//Fault or alarm number / N° de defaut ou d'alarme
    Info_def_iodevice : INT;	//Number of first faulty IODevice / Numero du 1er I/O device en defaut
    Info_ala_iodevice : INT;	//Number of first IODevice with alarm / Numero du 1er I/O device en alarme
    Info_def_iodevice1 : INT;	//I/O associated with code 1 / I/O associe au code 1
    Info_def_iodevice2 : INT;	//I/O associated with code 2 / I/O associe au code 2
    Info_def_iodevice3 : INT;	//I/O associated with code 3 / I/O associe au code 3
    Info_def_iodevice4 : INT;	//I/O associated with code 4 / I/O associe au code 4
    Info_def_iodevice5 : INT;	//I/O associated with code 5 / I/O associe au code 5
    Info_def_iodevice6 : INT;	//I/O associated with code 6 / I/O associe au code 6
    Info_def_iodevice7 : INT;	//I/O associated with code 7 / I/O associe au code 7
    Info_def_iodevice8 : INT;	//I/O associated with code 8 / I/O associe au code 8
    Info_def_iodevice9 : INT;	//I/O associated with code 9 / I/O associe au code 9
    Info_def_iodevice10 : INT;	//I/O associated with code 10 / I/O associe au code 10
    Info_codedef_iodevice1 : INT;	//History of fault code 1 / Historique code defaut1
    Info_codedef_iodevice2 : INT;	//History of fault code 2 / Historique code defaut2
    Info_codedef_iodevice3 : INT;	//History of fault code 3 / Historique code defaut3
    Info_codedef_iodevice4 : INT;	//History of fault code 4 / Historique code defaut4
    Info_codedef_iodevice5 : INT;	//History of fault code 5 / Historique code defaut5
    Info_codedef_iodevice6 : INT;	//History of fault code 6 / Historique code defaut6
    Info_codedef_iodevice7 : INT;	//History of fault code 7 / Historique code defaut7
    Info_codedef_iodevice8 : INT;	//History of fault code 8 / Historique code defaut8
    Info_codedef_iodevice9 : INT;	//History of fault code 9 / Historique code defaut9
    Info_codedef_iodevice10 : INT;	//History of fault code 10 / Historique code defaut10
  END_STRUCT ;
END_VAR
VAR
  RESERVE : ARRAY  [1 .. 21 ] OF //SPARE for begining Hystory at DIX 100.0
WORD;
  History : STRUCT	//History
    DateTime : ARRAY  [1 .. 100 ] OF //Date and Time
DATE_AND_TIME;
    EventClass : ARRAY  [1 .. 100 ] OF //Event class B#16#38 Event gone, B#16#39 Event come
BYTE;
    Fault_ID : ARRAY  [1 .. 100 ] OF //Fault ID OB86 C1 - C8
BYTE;
    Mastersystem : ARRAY  [1 .. 100 ] OF //Mastersystem ID
BYTE;
    Slave : ARRAY  [1 .. 100 ] OF //Slave address
BYTE;
  END_STRUCT ;
  Affichage : STRUCT	//Screen
    DateTime : ARRAY  [1 .. 10 ] OF //Date and Time
DATE_AND_TIME;
    EventClass : ARRAY  [1 .. 10 ] OF //Event class B#16#38 Event gone, B#16#39 Event come
BYTE;
    Fault_ID : ARRAY  [1 .. 10 ] OF //Fault ID OB86 C1 - C8
BYTE;
    Mastersystem : ARRAY  [1 .. 10 ] OF //Mastersystem ID
BYTE;
    Device : ARRAY  [1 .. 10 ] OF //Slave address
BYTE;
    NumEvenement : ARRAY  [1 .. 10 ] OF //Numero evenement page history
INT;
  END_STRUCT ;
  Devices_Affected : INT;	//Number of IO device affected
  IO_Device : ARRAY  [1 .. 256 ] OF //IO devices state ARRAY
BYTE;
  Count_IO_Device : ARRAY  [1 .. 256 ] OF //Counter IO Device
BYTE;
  HistoryPageNo : BYTE;	//History page number
  PageNo_Max : BYTE  := B#16#9;	//Max Page number
  RAZ_Date_Time : DATE_AND_TIME;
  HistoryActiv : BOOL;	//Screen History activ
  PageAdd : BOOL;	//History > Next page
  PageSub : BOOL;	//History > Previous page
  FM_HistoryActiv : BOOL;	//Front Montant Page History Active
  RAZ_Count : BOOL;
  LMI : INT;	//Last Module Index
  TON_Act : TON;
  ConfDevCnt : INT;	//Configured Device Count
  ConfDevList : ARRAY  [1 .. 256 ] OF //Configured Device List
BYTE;
  ProbDevCnt : INT;	//Problematic Device Count
  ProbDevInd : INT;
  ProbDevList : ARRAY  [1 .. 256 ] OF //Problematic Device List
BYTE;
  StatNr : INT;
  StatAdd : WORD;
  Disp : BYTE  := B#16#FF;	//Dispatch
  Def : BOOL;
  Ala : BOOL;
  Act : BOOL;
END_VAR
VAR_TEMP
  Calc : STRUCT	//DONT MOVE BECAUSE USED WITH LW0 AND L0.x
    X0 : BOOL;
    X1 : BOOL;
  END_STRUCT ;
  Tmp_PLC_Time : STRUCT	//SPS Uhrzeit & Datum
    Fault : INT;	//Return value SFC01
    DateTime : DATE_AND_TIME;	//PLC Date and Time
    Test : DATE_AND_TIME;
  END_STRUCT ;
  Tmp_SFC6 : STRUCT	//Read local data
    Top_SI : STRUCT
      EV_Class : BYTE;	//Event class
      EV_No : BYTE;	//Event number
      Priority : BYTE;
      OB_No : BYTE;	//OB Number
      Tpy2_3 : BYTE;
      Typ1 : BYTE;
      ZI_1 : WORD;
      ZI_2_3 : DWORD;
    END_STRUCT ;
    Start_Up : STRUCT
      EV_Class : BYTE;
      EV_Num : BYTE;
      Priority : BYTE;
      Num : BYTE;
      Tpy2_3 : BYTE;
      Typ1 : BYTE;
      ZI_1 : WORD;
      ZI_2_3 : DWORD;
    END_STRUCT ;
    Fault : INT;	//Return value
  END_STRUCT ;
  BK_AR1 : DWORD;	//Backup AR1
  BK_AR2_OB1 : DWORD;	//Backup AR2
  BK_AR2_OB86 : DWORD;	//Backup AR2
  Ret_Val_Code : INT;
  Index_Datetime : INT;	//index Date-Time
  Index_EventClass : INT;	//index EventClass
  Index_Fault_ID : INT;	//index Fault_ID
  Index_MasterSystem : INT;	//index MasterSystem
  Index_Slave : INT;	//index Slave
  Resul_Mult_NumEvenement : INT;	//Resultat multiplication NumEvenement et index
  IOD_No : INT;	//Number IO Device
  T_SRC_any : ANY;	//Pointer
  Insert_Value : BOOL;	//Insert new value
  Ba1i : BOOL;	//Bit always at 1
  Boucle : WORD;
  Fill : BYTE;
  Ret : INT;
  Busy : BOOL;
  SZL_Header : STRUCT
    DRLen : WORD;
    DRCnt : WORD;
  END_STRUCT ;
  DR_SSI : STRUCT	//Station Status Information
    INDEX : WORD;
    Status : ARRAY  [0 .. 2047 ] OF BOOL;
  END_STRUCT ;
  DR_MSI : STRUCT	//Module Status Information
    adr1 : WORD;
    adr2 : WORD;
    logadr : WORD;
    Solltyp : WORD;
    Isttyp : WORD;
    reserved : WORD;
    Eastat : STRUCT
      ID : BYTE;
      B0 : BOOL;
      B1 : BOOL;	//Present
      B2 : BOOL;	//Unreachable
      B3 : BOOL;	//Deactivated
      B4 : BOOL;	//Default
      B5 : BOOL;
      B6 : BOOL;
      B7 : BOOL;
    END_STRUCT ;
    Ber_bgbr : WORD;
  END_STRUCT ;
  DevNum : BYTE;
  ConfDevInd : INT;
  SavAR2 : DINT;
  AR1 : DINT;
  AR2 : DINT;
  TON_ReaQ : BOOL;
  Deactivated : BOOL;
  Activating : BOOL;
END_VAR
BEGIN
NETWORK
TITLE =
//*ODIL_ID:2036_1*
CALL "RD_SINFO" (
RET_VAL := #Tmp_SFC6.Fault,
TOP_SI := #Tmp_SFC6.Top_SI,
START_UP_SI := #Tmp_SFC6.Start_Up);
L #Tmp_SFC6.Top_SI.OB_No; //Test OB1
L 1;
==D;
SPB O1;
L #Tmp_SFC6.Top_SI.OB_No; //Test OB100
L 100;
==D;
SPB O100;
BEA; //Jump END
NETWORK
TITLE =OB100 - Creation de la liste des IODevices configures
//- Initialisation du Tableau "IO_Device" avec la valeur 3 (Non Configure)
//- Acquisition de la liste des IODevices Configures
//- Initialisaion du tableau "ConvDevList".
//ConvDevList[1] = Numero du dernier IODevice configure -1
//De fait pour l'IODevice 256 (100Hex) la valeur 255 (FFHex) est rangee dans le
//tableau.
//*ODIL_ID:2036_2*
//
O100: L B#16#FF;
T #Disp;
L B#16#3;
T #Fill;
CALL "FILL" (
BVAL := #Fill,
RET_VAL := #Ret,
BLK := #IO_Device);
B100: CALL "RDSYSST" (
REQ := TRUE,
SZL_ID := W#16#94,
INDEX := W#16#64,
RET_VAL := #Ret,
BUSY := #Busy,
SZL_HEADER := #SZL_Header,
DR := #DR_SSI);
L #Ret;
L B#16#0;
<>D;
SPB B100;
//Creates the list of IO devices
L B#16#0;
T #ConfDevCnt;
L 256;
L100: T #ConfDevInd;
LAR1 P##DR_SSI;
+AR1;
UN L [AR1,P#2.0]; //ConfDevDevice does'nt exist
SPB l100;
L #ConfDevCnt;
SLW 3; //Make bit Ptr
LAR1 P##ConfDevList;
+AR1;
L #ConfDevInd;
+ -1;
T DIB [AR1,P#0.0]; //ConvDevList[ConfDevInd] = NumIOdev - 1
L #ConfDevCnt;
+ 1;
T #ConfDevCnt; //ConfDevCnt += 1
l100: L #ConfDevInd;
LOOP L100;
L #ConfDevCnt;
L B#16#0;
==D;
BEB;
T #Disp;
BEA;
NETWORK
TITLE =OB1 -
//*ODIL_ID:2036_3*
O1: L #Disp;
SPL Disp;
SPA Dis0; //Get Active device list
SPA Dis1; //Get Device status
Disp: BEA;
Dis0: CALL "RDSYSST" (
REQ := TRUE,
SZL_ID := W#16#694,
INDEX := W#16#64,
RET_VAL := #Ret,
BUSY := #Busy,
SZL_HEADER := #SZL_Header,
DR := #DR_SSI);
L #Ret;
L B#16#0;
<>D;
SPB E1;
T #ProbDevCnt;
L #ConfDevCnt;
Loop: T #ConfDevInd;
+ -1;
SLW 3; //Make bit Ptr
LAR1 P##ConfDevList;
+AR1;
L DIB [AR1,P#0.0]; //ConfDef[ConfDevInd] (DevNum)
LAR1 P##DR_SSI;
+AR1;
UN L [AR1,P#2.1]; //Device NOK
SPB Dok;
LAR1 P##ProbDevList;
L #ProbDevCnt;
SLW 3;
+AR1;
POP;
T DIB [AR1,P#0.0]; //ProbDevList[ProbDevCnt]
L #ProbDevCnt;
+ 1;
T #ProbDevCnt; //ProbDevCnt +=1
SPA LEnd;
Dok: LAR1 P##IO_Device;
SLW 3; //Make Bit Ptr
+AR1;
L B#16#0; //Device Ok
T DIB [AR1,P#0.0]; //IO_Device[ConfDevInd]
LEnd: L #ConfDevInd;
LOOP Loop;
L #ProbDevCnt;
L B#16#0;
==D;
R #Defaut;
R #Alarme;
SPB E1;
R #Act;
R #Ala;
R #Def;
T #ProbDevInd;
P: LAR1 P##ProbDevList;
L #ProbDevInd;
SLW 3; //Make BitPtr
+AR1;
L DIB [AR1,P#0.0]; //ProbDevList[ProbDevInd]
+ 1;
T #StatNr; //DevNum
CALL "GEO_LOG" (
MASTER := 100,
STATION := #StatNr,
SLOT := 0,
SUBSLOT := 0,
RET_VAL := #Ret,
LADDR := #StatAdd);
L B#16#1;
T #Disp;
Dis1: CALL "RDSYSST" (
REQ := TRUE,
SZL_ID := W#16#C91,
INDEX := #StatAdd,
RET_VAL := #Ret,
BUSY := #Busy,
SZL_HEADER := #SZL_Header,
DR := #DR_MSI);
L #Ret;
L B#16#0;
<>D;
BEB;
LAR1 P##IO_Device;
L #StatNr;
+ -1;
SLW 3; //Make BitPtr
+AR1;
L DIB [AR1,P#0.0]; //IO_Device[StatNr]
L B#16#4;
==D;
= #Deactivated; //Desactive
POP;
L B#16#5;
==D;
= #Activating; //En cours d'activation
//----------
U #DR_MSI.Eastat.B3; //Deactivated
L B#16#4;
SPB T;
//----------
U #Deactivated;
UN #DR_MSI.Eastat.B3; //Deactivated
S #Act; //Restart Timer
//----------
U #Activating;
U #DR_MSI.Eastat.B1; //Present
L B#16#0;
SPB T;
//----------
U #Activating;
UN #TON_Act.Q;
O #Act;
U #DR_MSI.Eastat.B2; //Unreachable
L B#16#5; //Activating
SPB T;
//----------
U #DR_MSI.Eastat.B2; //Unreachable
S #Def;
L B#16#2; //Default
SPB T;
//----------
U #DR_MSI.Eastat.B1; //Present
S #Ala;
L B#16#1; //Alarm
SPB T;
//----------
L B#16#0;
T: T DIB [AR1,P#0.0]; //IO_Device[StatNr]
L #ProbDevInd;
+ 1;
T #ProbDevInd;
L #ProbDevCnt;
<D;
SPB P;
L B#16#0;
T #Disp;
U #Def;
= #Defaut;
R #Ala;
U #Ala;
= #Alarme;
E1: UN #Act;
= #TON_Act.IN;
CALL #TON_Act (
PT := T#15S);
U #Defaut;
= #Diag.Def;
U #Alarme;
= #Diag.Ala;
O #Pn_run;
O #D_pn;
UN #Defaut;
= #Pn_run;
BEA;
NETWORK
TITLE =Bit used intern FB
//*ODIL_ID:2036_4*
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Read PLC Time
//*ODIL_ID:2036_5*
CALL "READ_CLK" (
RET_VAL := #Tmp_PLC_Time.Fault,
CDT := #Tmp_PLC_Time.DateTime);
NETWORK
TITLE =Wich is the calling OB
//*ODIL_ID:2036_6*
CALL "RD_SINFO" (
RET_VAL := #Tmp_SFC6.Fault,
TOP_SI := #Tmp_SFC6.Top_SI,
START_UP_SI := #Tmp_SFC6.Start_Up);
L #Tmp_SFC6.Top_SI.OB_No; //Test OB1
L 1;
==I;
SPB OB1;
L #Tmp_SFC6.Top_SI.OB_No; //Test OB86
L 86;
==I;
SPB OB86;
L #Tmp_SFC6.Top_SI.OB_No; //Test OB100
L 100;
==I;
SPB OB10;
SPA END; //Jump END
NETWORK
TITLE =OB1
//********************  OB 1  ********************
//*ODIL_ID:2036_7*
//

NETWORK
TITLE =Backup AR2
//*ODIL_ID:2036_8*
OB1: TAR1 #BK_AR1;
TAR2 #BK_AR2_OB1;
NETWORK
TITLE =Update state of PROFINET IO DEVICES
//*ODIL_ID:2036_9*
AUF #DB_SFM; //Writing nbr IO Devices affected
L DBW 50;
T #Devices_Affected;
L 1442;
SLD 3;
+AR2; //Multi Instance
TAR; //AR1 = AR2 & AR2 = AR1
L DBW 48; //Offset
SLD 3;
LAR2;
L DBW 46;
LOOP: U DBX [AR2,P#0.0];
= DIX [AR1,P#0.0];
U DBX [AR2,P#0.1];
= DIX [AR1,P#0.1];
+AR1 P#1.0; //DIX Ptr
+AR2 P#0.2; //DBX Ptr
LOOP LOOP;
LAR2 #BK_AR2_OB1; //Restore AR2
NETWORK
TITLE =Screen Hystory
//*ODIL_ID:2036_10*
UN #HistoryActiv; // Selection screen history
SPB NoHi;
NETWORK
TITLE =Screen Hystory Page +/-
//*ODIL_ID:2036_11*
U #PageAdd; // Function next page '+'
SPB P_Pl;
U #PageSub; // Function last page '-'
SPB P_Mi;
SPA P_Hi;
P_Pl: R #PageAdd;
L #HistoryPageNo;
L 1;
+I;
T #HistoryPageNo;
L #PageNo_Max;
<=I;
SPB P_Hi;
L 0;
T #HistoryPageNo;
SPA P_Hi;
P_Mi: R #PageSub;
L #HistoryPageNo;
L 1;
-I;
T #HistoryPageNo;
L 0;
>=I;
SPB P_Hi;
T #HistoryPageNo;
NETWORK
TITLE =Initialisation by opening screen History
//*ODIL_ID:2036_12*
P_Hi: U #HistoryActiv;
FP #FM_HistoryActiv;
SPBNB NoIn;
L 0;
T #HistoryPageNo;
L 9;
T #PageNo_Max;
NETWORK
TITLE =Update number Event
//*ODIL_ID:2036_13*
NoIn: L #HistoryPageNo;
L 10;
*I;
T #Affichage.NumEvenement[1];
L 1;
+I;
T #Affichage.NumEvenement[2];
L 1;
+I;
T #Affichage.NumEvenement[3];
L 1;
+I;
T #Affichage.NumEvenement[4];
L 1;
+I;
T #Affichage.NumEvenement[5];
L 1;
+I;
T #Affichage.NumEvenement[6];
L 1;
+I;
T #Affichage.NumEvenement[7];
L 1;
+I;
T #Affichage.NumEvenement[8];
L 1;
+I;
T #Affichage.NumEvenement[9];
L 1;
+I;
T #Affichage.NumEvenement[10];
NETWORK
TITLE =Update Date&Time
//*ODIL_ID:2036_14*
L #HistoryPageNo;
L 80;
*I;
L 100;
+I;
T #Index_Datetime;
LAR1 P##T_SRC_any;
L DW#16#10020050;
T D [AR1,P#0.0];
L DW#16#85000000;
L #Index_Datetime;
SLD 3;
OD;
T D [AR1,P#6.0];
CALL "BLKMOV" (
SRCBLK := #T_SRC_any,
RET_VAL := #Ret_Val_Code,
DSTBLK := P#DIX 1300.0 WORD 80);
NETWORK
TITLE =Update EventClass
//*ODIL_ID:2036_15*
L #HistoryPageNo;
L 5;
*I;
L 900;
+I;
T #Index_EventClass;
LAR1 P##T_SRC_any;
L DW#16#1002000A;
T D [AR1,P#0.0];
L DW#16#85000000;
L #Index_EventClass;
SLD 3;
OD;
T D [AR1,P#6.0];
CALL "BLKMOV" (
SRCBLK := #T_SRC_any,
RET_VAL := #Ret_Val_Code,
DSTBLK := P#DIX 1380.0 WORD 10);
NETWORK
TITLE =Update Fault_ID
//*ODIL_ID:2036_16*
L #HistoryPageNo;
L 5;
*I;
L 1000;
+I;
T #Index_Fault_ID;
LAR1 P##T_SRC_any;
L DW#16#1002000A;
T D [AR1,P#0.0];
L DW#16#85000000;
L #Index_Fault_ID;
SLD 3;
OD;
T D [AR1,P#6.0];
CALL "BLKMOV" (
SRCBLK := #T_SRC_any,
RET_VAL := #Ret_Val_Code,
DSTBLK := P#DIX 1390.0 WORD 10);
NETWORK
TITLE =Update MasterSystem
//*ODIL_ID:2036_17*
L #HistoryPageNo;
L 5;
*I;
L 1100;
+I;
T #Index_MasterSystem;
LAR1 P##T_SRC_any;
L DW#16#1002000A;
T D [AR1,P#0.0];
L DW#16#85000000;
L #Index_MasterSystem;
SLD 3;
OD;
T D [AR1,P#6.0];
CALL "BLKMOV" (
SRCBLK := #T_SRC_any,
RET_VAL := #Ret_Val_Code,
DSTBLK := P#DIX 1400.0 WORD 10);
NETWORK
TITLE =Update IO Device
//*ODIL_ID:2036_18*
L #HistoryPageNo;
L 5;
*I;
L 1200;
+I;
T #Index_Slave;
LAR1 P##T_SRC_any;
L DW#16#1002000A;
T D [AR1,P#0.0];
L DW#16#85000000;
L #Index_Slave;
SLD 3;
OD;
T D [AR1,P#6.0];
CALL "BLKMOV" (
SRCBLK := #T_SRC_any,
RET_VAL := #Ret_Val_Code,
DSTBLK := P#DIX 1410.0 WORD 10);
NETWORK
TITLE =Delay in zero counters
//*ODIL_ID:2036_19*
NoHi: UN #RAZ_Count;
SPB NoRa;
L 0;
T LW 0;
CALL "FILL" (
BVAL := LB 0,
RET_VAL := #Ret_Val_Code,
BLK := P#DBX 1698.0 BYTE 256);
CALL "BLKMOV" (
SRCBLK := #Tmp_PLC_Time.DateTime,
RET_VAL := #Ret_Val_Code,
DSTBLK := P#DBX 1956.0 WORD 4);
SET;
R #RAZ_Count;
NETWORK
TITLE =Initialisation output Def and Ala
//*ODIL_ID:2036_20*
NoRa: SET;
R #Defaut;
R #Diag.Def;
R #Alarme;
R #Diag.Ala;
L 0;
T #Diag.Codedef;
T #Diag.Info_def_iodevice;
T #Diag.Info_ala_iodevice;
NETWORK
TITLE =Devices affected ?
//*ODIL_ID:2036_21*
L #Devices_Affected;
L 0;
==I;
SPB End1;
NETWORK
TITLE =
//*ODIL_ID:2036_22*
U #P_IHMP;
SPB Ihmp;
NETWORK
TITLE =Search of first IO device affected LOP
//IO Device Failed Code 2
//*ODIL_ID:2036_23*
//
L 0;
SLD 3;
LAR1;
TAR; //Multi Instance
AUF #DB_CONFIG;
DebU: L 0;
L DBW [AR2,P#0.0];
==I;
SPB NoDe;
L 1441; // 1441 = 1442 - 1
+I;
SLD 3;
LAR1;
L 2;
L DIB [AR1,P#0.0];
==I;
SPB EndU;
+AR2 P#2.0; //DBX Ptr
SPA DebU;
EndU: L DBW [AR2,P#0.0];
LAR1 #BK_AR1;
LAR2 #BK_AR2_OB1;
T #Diag.Info_def_iodevice;
T #Diag.Info_def_iodevice1;
SET;
S #Defaut;
S #Diag.Def;
R #Alarme;
R #Diag.Ala;
SPA End1;
NETWORK
TITLE =Search of first IO device affected LOP
//IO Device Fault Code 1
//*ODIL_ID:2036_24*
//
NoDe: LAR1 #BK_AR1;
LAR2 #BK_AR2_OB1;
L 0;
SLD 3;
LAR1;
TAR; //Multi Instance
AUF #DB_CONFIG;
DebV: L 0;
L DBW [AR2,P#0.0];
==I;
SPB End1;
L 1441; // 1441 = 1442 - 1
+I;
SLD 3;
LAR1;
L 1;
L DIB [AR1,P#0.0];
==I;
SPB EndV;
+AR2 P#2.0; //DBX Ptr
SPA DebV;
EndV: L DBW [AR2,P#0.0];
LAR1 #BK_AR1;
LAR2 #BK_AR2_OB1;
T #Diag.Info_ala_iodevice;
SET;
R #Defaut;
R #Diag.Def;
S #Alarme;
S #Diag.Ala;
SPA End1;
NETWORK
TITLE =Ecriture Defaut ou alarme pour MOP
//*ODIL_ID:2036_25*
Ihmp: L 1442;
SLD 3;
LAR1;
AUF #DB_SFM;
L DBW 46;
MOOP: T #Boucle;
L B#16#2;
L DIB [AR1,P#0.0];
==D;
S #Defaut;
S #Diag.Def;
L B#16#1;
==D;
S #Alarme;
S #Diag.Ala;
+AR1 P#1.0; //DIX Ptr
L #Boucle;
LOOP MOOP;
NETWORK
TITLE =
//*ODIL_ID:2036_26*
End1: LAR1 #BK_AR1;
LAR2 #BK_AR2_OB1;
U #Defaut;
R #Alarme;
R #Diag.Ala;
NETWORK
TITLE =Writing Pn_run
//Specifique RSA
//*ODIL_ID:2036_27*
//
U #D_pn;
S #Pn_run;
U #Defaut;
R #Pn_run;
NOP 0;
NETWORK
TITLE =Writing default code
//Specifique RSA
//*ODIL_ID:2036_28*
//
U #Ba1i;
= L 88.0;
U L 88.0;
U #Alarme;
SPBNB _001;
L 257;
T #Diag.Codedef;
_001: NOP 0;
U L 88.0;
U #Defaut;
SPBNB _002;
L 1;
T #Diag.Codedef;
_002: NOP 0;
U L 88.0;
UN #Alarme;
UN #Defaut;
SPBNB _003;
L 0;
T #Diag.Codedef;
_003: NOP 0;
NETWORK
TITLE =Writing Numliste for IHMP
//Specifique RSA
//*ODIL_ID:2036_29*
//
L 52;
T #Diag.Numliste;
NOP 0;
NETWORK
TITLE =End of OB1
//*ODIL_ID:2036_30*
SPA END;
NETWORK
TITLE =OB86
//********************  OB 86  ********************
//*ODIL_ID:2036_31*
//

NETWORK
TITLE =Backup AR2
//*ODIL_ID:2036_32*
TAR2 #BK_AR2_OB86;
NETWORK
TITLE =Controle parametres OB86
//*ODIL_ID:2036_33*
OB86: U(;
O(;
L #Tmp_SFC6.Top_SI.EV_Class;
L B#16#39;
==I;
);
O(;
L #Tmp_SFC6.Top_SI.EV_Class;
L B#16#38;
==I;
);
);
U(;
O(;
L #Tmp_SFC6.Top_SI.EV_No;
L B#16#CB;
==I;
);
O(;
L #Tmp_SFC6.Top_SI.EV_No;
L B#16#CC;
==I;
);
O(;
L #Tmp_SFC6.Top_SI.EV_No;
L B#16#CD;
==I;
);
O(;
L #Tmp_SFC6.Top_SI.EV_No;
L B#16#CE;
==I;
);
);
= #Insert_Value;
NETWORK
TITLE =Insertion donnees de diagnostic dans le buffer
//*ODIL_ID:2036_34*
UN #Insert_Value;
SPB EndI;
L P#884.0; // Startadress timestamp
LAR1;
Copy: L DID [AR1,P#0.0]; // Move PLC timestamp
T DID [AR1,P#8.0];
L DID [AR1,P#4.0];
T DID [AR1,P#12.0];
TAR1;
L P#8.0;
-D;
LAR1;
TAR1;
L P#100.0;
>=D;
SPB Copy;
L P#998.0; // Startadress diagnostic info
LAR1;
Cop1: L DIB [AR1,P#0.0]; // Move Event class
T DIB [AR1,P#1.0];
L DIB [AR1,P#100.0]; // Move Event number
T DIB [AR1,P#101.0];
L DIB [AR1,P#200.0]; // Move Mastersystem ID
T DIB [AR1,P#201.0];
L DIB [AR1,P#300.0]; // Move DP-Station adress
T DIB [AR1,P#301.0];
TAR1;
L P#1.0;
-D;
LAR1;
TAR1;
L P#900.0;
>=D;
SPB Cop1;
L P##Tmp_PLC_Time;
LAR1;
L LD [AR1,P#2.0]; // Date & Time
T DID 100;
L LD [AR1,P#6.0]; // Date & Time
T DID 104;
L P##Tmp_SFC6; // Pointer OB86 info
LAR1;
L LB [AR1,P#0.0]; // Event class
T #History.EventClass[1];
L LB [AR1,P#1.0]; // Event number(C0,C1,....)
T #History.Fault_ID[1];
L LB [AR1,P#10.0]; //Mastersytem ID
SRD 3;
UW W#16#F;
T #History.Mastersystem[1];
L LB [AR1,P#11.0]; // IO Device
T #History.Slave[1];
NETWORK
TITLE =Controle parametres OB86
//*ODIL_ID:2036_35*
EndI: U(;
L #Tmp_SFC6.Top_SI.EV_Class;
L B#16#39;
==I;
);
U(;
O(;
L #Tmp_SFC6.Top_SI.EV_No;
L B#16#CB;
==I;
);
O(;
L #Tmp_SFC6.Top_SI.EV_No;
L B#16#CC;
==I;
);
O(;
L #Tmp_SFC6.Top_SI.EV_No;
L B#16#CD;
==I;
);
O(;
L #Tmp_SFC6.Top_SI.EV_No;
L B#16#CE;
==I;
);
);
= #Insert_Value;
NETWORK
TITLE =Incrementation counter IO Device
//*ODIL_ID:2036_36*
UN #Insert_Value;
SPB END;
L #Tmp_SFC6.Top_SI.ZI_2_3;
SLD 22;
SRD 22;
T #IOD_No;
L 1698;
+I;
L 1;
-I;
SLW 3;
LAR1;
L DIB [AR1,P#0.0];
L 1;
+I;
T DIB [AR1,P#0.0];
NETWORK
TITLE =Insertion diagnostic info for IHMP
//Specifique RSA
//*ODIL_ID:2036_37*
//
UN #Insert_Value;
SPB END;
L #Diag.Info_codedef_iodevice9;
T #Diag.Info_codedef_iodevice10;
L #Diag.Info_codedef_iodevice8;
T #Diag.Info_codedef_iodevice9;
L #Diag.Info_codedef_iodevice7;
T #Diag.Info_codedef_iodevice8;
L #Diag.Info_codedef_iodevice6;
T #Diag.Info_codedef_iodevice7;
L #Diag.Info_codedef_iodevice5;
T #Diag.Info_codedef_iodevice6;
L #Diag.Info_codedef_iodevice4;
T #Diag.Info_codedef_iodevice5;
L #Diag.Info_codedef_iodevice3;
T #Diag.Info_codedef_iodevice4;
L #Diag.Info_codedef_iodevice2;
T #Diag.Info_codedef_iodevice3;
L #Diag.Info_codedef_iodevice1;
T #Diag.Info_codedef_iodevice2;
L #Diag.Info_def_iodevice9;
T #Diag.Info_def_iodevice10;
L #Diag.Info_def_iodevice8;
T #Diag.Info_def_iodevice9;
L #Diag.Info_def_iodevice7;
T #Diag.Info_def_iodevice8;
L #Diag.Info_def_iodevice6;
T #Diag.Info_def_iodevice7;
L #Diag.Info_def_iodevice5;
T #Diag.Info_def_iodevice6;
L #Diag.Info_def_iodevice4;
T #Diag.Info_def_iodevice5;
L #Diag.Info_def_iodevice3;
T #Diag.Info_def_iodevice4;
L #Diag.Info_def_iodevice2;
T #Diag.Info_def_iodevice3;
L #Diag.Info_def_iodevice1;
T #Diag.Info_def_iodevice2;
L #Tmp_SFC6.Top_SI.EV_No;
T #Diag.Info_codedef_iodevice1;
NETWORK
TITLE =
//*ODIL_ID:2036_38*
LAR2 #BK_AR2_OB86;
SPA END;
NETWORK
TITLE =OB100
//********************  OB 100  ********************
//*ODIL_ID:2036_39*
//

NETWORK
TITLE =Initialisation state IO Devices
//*ODIL_ID:2036_40*
OB10: L 3;
T LB 0;
CALL "FILL" (
BVAL := LB 0,
RET_VAL := #Ret_Val_Code,
BLK := P#DIX 1442.0 BYTE 256);
NETWORK
TITLE =End of block
//*ODIL_ID:2036_41*
END: NOP 0;
END_FUNCTION_BLOCK

DATA_BLOCK "DB_PN"
VERSION : 0.1
"BF_DIAG_PROFINET"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "BF_FIFO"
TITLE =BF_FIFO
//*******************************************************************************
//*                           "FB" BF_FIFO                                      *
//*                Assure la gestion d'une pile FIFO                            *
//*                Ensure management of a FIFO stack                            *
//*******************************************************************************
//
//(In english further below)
//
//DESCRIPTION:
//************
//Ce FB permet de gerer une pile FIFO. Il prend en charge
//- L'initialisation de la pile avec la valeur "ValInit"
//  "ValInit" sert ensuite a identifier la prochaine entree disponible dans la
//  pile.
//- La copie dans la pile  de la table "Entree" sur le front de "Empile" si la
//  pile n'est pas deja pleine.
//- La copie du premier element de la pile dans la Table "Sortie" sur le front de
//  "Depile" si la pile n'est pas deja vide, suivie de la mise a jour de la pile
//
//Pour la description detaillee du Bloc Fonctionnel, voir le guide GE03.FP.210
//
//MISE En OEUVRE :
//****************
//
//- La pile est normalement un tableau de [1 .. NbEleMax] elements.
//- Ce tableau doit etre dans un Bloc de Donnees.
//  Dans la structure programme de base le DB 90 " Pile " est reserve a cet effet
//
//La pile est remplie dans l'ordre croissant des
//index. Pile[1] contient ainsi l'element recopie dans "Sortie" lors d'une
//demande de depilage.
//
//- "Entree" et "Sortie" doivent etre des Tableaux ou des Structures. De fait, le
//type WORD pour ces parametres n'est pas autorise.
//(Utiliser alors une syntaxe de type P#DBm.DBX n.0 BYTE 2)
//
///!\ La taille d'un element de la pile est celle de "Entree" et "Sortie".
//
//La sortie EmpileOK (resp DepileOK) est maintenu tant que Empile (resp Depile)
//est maintenu a un.
//
///!\ Si la demande ne peut etre realisee (P_Vide & Depile ou P_Pleine & Empile)
//aucun defaut n'est signale...
//
///!\ L'ensemble des elements presents dans la pile est recopie en cas de
//depilage, ceci peut entrainer un allongement du temps de cycle de l'automate.
//
//CODE de DEFAUT :
//****************
//NON UTILISE
//
//*************************** ENGLISH INFORMATION *****************************
//DESCRIPTION :
//************
//This BF manages a FIFO Stack. It handles the following operations:
//
//- Initialisation of the stack with the "ValInit" value. "ValInit" is
//subsequently used to identify the next available input in the stack.
//- Copying the "Input" table on the"Stacking" edge into the stack, if the stack
//is not already full.
//- Copying the first element in the stack into the "Output" Table on the
//"Unstacking" edge, if the stack is not already empty, then updating the stack.
//
//Detailed description can be found in GE03.FP.210
//
//OPERATING :
//***********
//- The stack is normally a table of [1 .. NbEleMax] elements.
//- This table must be in a Data Block.
// In the program structure of base the DB 90 "Pile" is reserved for that purpose
//
//The stack is filled in ascending index order. Stack[1] therefore contains the
//element copied into "Sortie" during an unstacking request.
//
//- "Entree" and "Sortie" must be Tables or Structures.
//This means that simple type variables (WORD, DWORD, INT, etc.) are not
//authorized for these parameters.
//(Use a syntax of type P#DBm.DBX n.0 BYTE 2)
//
///!\ The size of an element of the stack is equal to size of "Entree" or
//"Sortie"
//
//Output "EmpileOK" (resp DepileOK) is held as so long as Empile (resp Depile) is
//held at 1.
//
///!\ If the request cannot be performed (P_Vide & Depile or P_Pleine & Empile),
//no fault is signalled...
//
///!\ All elements present in the stack are copied in the event of unstacking.
//This can cause an increase in the PLC's cycle time.
//
//FAULT list:
//************
//NOT USED
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 7
//Dernier ID mis en oeuvre / Last ID implemented : 2039_7
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'FIFO'
VERSION : 1.2
VAR_INPUT
  InitPile : BOOL;	//Stack initialization / Initialisation de la pile
  Empile : BOOL;	//Stacking request / Empilage d'un element dans la pile
  Depile : BOOL;	//Unstacking request / Depilage d'un element de la pile
  NbEleMax : INT;	//Maximum number of datas in the stack / Nombre d'elements maximum dans la pile
  Entree : ANY;	//Data to stack / Element a entrer dans la pile
  Sortie : ANY;	//Data to unstack / Element de sortie de la pile
  Pile : ANY;	//Stack / Pile
  ValInit : WORD  := W#16#FFFF;	//Value which points on empty data / Marqueur d'emplacement libre
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Parameter fault / Defaut de parametrage
  P_Vide : BOOL;	//Stack is empty / Pile vide
  P_Pleine : BOOL;	//Stack is full / Pile Pleine
  EmpileOk : BOOL;	//Stacking finished / Empillage OK
  DepileOk : BOOL;	//Unstacking finished / Depillage OK
END_VAR
VAR
  xInit : BOOL;	//Auxilliaire de Front
  xEmpile : BOOL;	//Auxilliaire de Front
  xDepile : BOOL;	//Auxilliaire de Front
END_VAR
VAR_TEMP
  Src : ANY;	//Zone source pour le SFC 20 (BLK_MOV)
  Dst : ANY;	//Zone destination pour le SFC 20 et le SFC 21 (FILL)
  RecSizeBit : INT;	//Taille d'un element de la pile (en bit)
  Mark : WORD;	//Image de ValInit
  DBPile : INT;	//N° du Bloc de donnees de pile
  PtrPile : DINT;	//Pointeur sur un element de la pile
  LoopCnt : INT;	//Compteur de boucle
  ret : INT;	//Valeur retournee par les SFC 20 et SFC 21
  I : BOOL;	//Front montant de InitPile
  E : BOOL;	//Front montant de Empile
  D : BOOL;	//Front montant de Depile
END_VAR
BEGIN
NETWORK
TITLE =
//*ODIL_ID:2039_1*
//----------  Maintient de la sortie EmpileOK avec l'entree Empile
//
U #Empile;
U #EmpileOk;
= #EmpileOk;
//---------- Maintient de la sortie DempileOK avec l'entree Depile
U #Depile;
U #DepileOk;
= #DepileOk;
//---------- Attente d'une commande a executer
O(;
U #Empile;
FP #xEmpile;
= #E; //Front montant de Empile
);
O(;
U #Depile;
FP #xDepile;
= #D; //Front montant de Depile
);
O(;
U #InitPile;
FP #xInit;
= #I; //Front montant de InitPile
);
NOT;
BEB; //Fin d'execution du bloc
NETWORK
TITLE =Controles
//Controle des parametres (decodage des parametres ANY)
//*ODIL_ID:2039_2*
//---------- Entree & Sortie de type et taille identique ?
//
L DID [AR2,P#4.0]; //Type & Fact de "Entree"
L DID [AR2,P#14.0]; //Type & Fact de "Sortie"
O(;
<>D;
);
//---------- Entree & Pile du meme type ?
L DIB [AR2,P#5.0]; //Type de "Entree"
L DIB [AR2,P#25.0]; //Type de "Pile"
O(;
<>D;
);
//---------- Pile de type 2 (Byte) ?
L B#16#2; //Type Byte
O(;
<>D;
);
//---------- Pile dans un DB ?
L DIB [AR2,P#30.0]; //"Zone" de Pile
L B#16#84; //DB
O(;
<>D;
);
//---------- Pile suffisante pour contenir NbEleMax ?
L DIW [AR2,P#26.0]; //Facteur de repetition de "Pile" (Taille en octet)
L DIW [AR2,P#6.0]; //Facteur de repetition de "Entree" (Taille en octet)
/D;
L #NbEleMax;
O(;
<D;
);
//---------- Pile suffisante pour contenir 2 elements
L B#16#2; //La pile doit au moins pouvoir contenir deux elements
O(;
<D;
);
= #Def; //Defaut de parametrage
SPB END;
NETWORK
TITLE =Initialisation de variables
//*ODIL_ID:2039_3*
//----------
//
L #ValInit;
T #Mark;
//----------
L DIW [AR2,P#6.0]; //Facteur de repetition de "Pile" (Taille en octet)
SLW 3; //Multiplication par 8
T #RecSizeBit;
//----------
L DIW [AR2,P#28.0]; //DB Pile
T #DBPile;
AUF DB [#DBPile];
//----------
L DID [AR2,P#30.0]; //Ptr Pile
T #PtrPile;
NETWORK
TITLE =Init
//*ODIL_ID:2039_4*
UN #I;
SPB E;
//---------- Initialisation de la variable "Dst"
L DID [AR2,P#24.0]; //Type & Fact de "Pile"
T LD 10;
L #DBPile; //N° de DB "Pile"
T LW 14;
L #PtrPile; //Zone & Ptr de "Pile"
T LD 16;
//---------- Appel du SFC 21 "FILL"
CALL "FILL" (
BVAL := #ValInit,
RET_VAL := #ret,
BLK := #Dst);
NETWORK
TITLE =Empile
//Recherche du premier emplacement libre
//Recopie de "Entree" a cet emplacement
//*ODIL_ID:2039_5*
//
E: UN #E;
SPB D;
L #DBPile; //DB Pile
T LW 14; //DB Dst
LAR1 #PtrPile; //Ptr Pile
//---------- Boucle de recherche du premier emplacement libre
L #NbEleMax; //Init du compteur de boucle
push: T #LoopCnt;
L DBW [AR1,P#0.0];
L #Mark;
==D;
SPB Cpy; //Emplacement libre trouve
//---------- Incrementation du registre d'adresse
L #RecSizeBit;
+AR1;
L #LoopCnt;
LOOP push; //Boucle
SPA END; //Pile Pleine
//---------- Copie de "Entree" dans la pile (initialisation de Src et Dst)
Cpy: L DID [AR2,P#4.0]; //Typ & Fact de Entree
T LD 0; //Typ & Fact de Src
T LD 10; //Typ & Fact de Dst
L DIW [AR2,P#8.0]; //DB Entree
T LW 4; //DB Src
L DID [AR2,P#10.0]; //Ptr Entree
T LD 6; //Ptr Src
TAR1 LD 16; //Ptr Dst
//---------- Copie de Src vers Dst
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #ret,
DSTBLK := #Dst);
SET;
= #EmpileOk;
NETWORK
TITLE =Depile
//Recopie du premier element de la pile dans "Sortie"
//Decalage des elements de la pile
//Effacement du dernier element de la pile
//*ODIL_ID:2039_6*
//
D: UN #D;
SPB END;
//---------- Initialisation des variables Src & Dst
L DID [AR2,P#14.0]; //Typ & Fact de Sortie
T LD 0; //Typ & Fact de Src
T LD 10; //Typ & Fact de Dst
L #DBPile; //DB Pile
T LW 4; //DB Src
LAR1 #PtrPile; //Ptr Pile
TAR1 LD 6; //Ptr Src
L DBW [AR1,P#0.0]; //Premier mot du premier element de la pile
L #Mark;
==D;
SPB END; //Pile Vide
//---------- Sortie
L DIW [AR2,P#18.0]; //DB Sortie
T LW 14; //DB Dest
L DID [AR2,P#20.0]; //Ptr Sortie
T LD 16; //Ptr Dst
//---------- Copie de Src vers Dst
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #ret,
DSTBLK := #Dst);
//----------
L LW 4; //DB Src
T LW 14; //DB Dst
//---------- Boucle de copie de l'element N+1 sur l'element N
L #NbEleMax; //Init du compteur de boucle
pop: T #LoopCnt;
L DBW [AR1,P#0.0];
L #Mark;
==D;
SPB Clr;
//---------- Incrementation du registre d'adresse
TAR1 LD 16; //Ptr Destination
L #RecSizeBit;
+AR1;
TAR1 LD 6; //Ptr Source
//---------- Copie de Src vers Dst
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #ret,
DSTBLK := #Dst);
L #LoopCnt;
LOOP pop;
//---------- Effacement du dernier element de la pile
Clr: CALL "FILL" (
BVAL := #ValInit,
RET_VAL := #ret,
BLK := #Dst);
SET;
= #DepileOk;
NETWORK
TITLE =P_Vide & P_Pleine
//*ODIL_ID:2039_7*
END: U #Def;
BEB;
//---------- Test pile Vide
LAR1 #PtrPile; //Pointeur sur le premier element de la pile
L DBW [AR1,P#0.0]; //Premier mot du premier element de la pile
L #Mark;
==D;
= #P_Vide;
//---------- Test pile Pleine
L #NbEleMax; //calcul de la position du dernier element de la pile
+ -1;
L #RecSizeBit;
*I;
+AR1;
L DBW [AR1,P#0.0]; //Premier mot du dernier element de la pile
L #Mark;
<>D;
= #P_Pleine;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_IDENT"
TITLE =BF_IDENT
//********************************************************************************
//*                                       BF_IDENT                               *
//*                                    Identification (RFID)
//*
//********************************************************************************
//(In English further below)
//
//Description:
//------------
//Ce Bloc Fonctionnel permet de lire/ecrire des etiquettes RFID
//Le parametrage par defaut permet de lire/ecire des etiquettes de la gamme RF 300
//
//
//Pre requis:
//----------
//Un ASM correctement parametre doit se trouver dans la configuration materielle.
//Attention aux parametres en fonction du materiel:
//1)RF180 :
//- Mode USER = FB45
//- Mode MOBY = Adressage normal MOBY U/D / RF300
//- Vitesse de transmission = 115,2 Kbaud
//2)ASM 456 :
//- Mode USER = FB45 / FC45
//- Mode MOBY = Adressage normal MOBY U/D/P
//- Vitesse de transmission = 115,2 Kbaud
//3) ASM475 :
//- Base parameter = Default ou MOBY U/D normal addressing
//- Baudrate to SLG = Default ou 115,2 kBaud
//Le non respect de ce parametrage conduit a une erreur systematique lors de la
//phase d'initialisation du FB 2015 (CodeDef 13 dec - AddInf 21 dec)
//
//Mise en Oeuvre
//--------------------
//1) Addresse de l'ASM dans la configuration materielle :
//- L'adresse assignee dans la configuration materielle doit etre la meme pour
//  les entrees et les sorties sous HW config.
//- Cette adresse doit etre documentee sur l'entree ASMAddr du bloc.
//
//2) Initialisation de la fonction :
//Il est recommande pour chaque instance de BF_Ident de passer l'entree
//Pilot.Init a 1 dans l'OB100.
//exemple en langage LIST :
//SET
//= "Nom du DB du sous ensemble".nom d'intance du bloc.Pilot.init
//= "Nom du DB du sous ensemble".nom d'intance du bloc.Pilot.init
//
//3) DB global associe au BF_Ident :
//- Dans la structure programme le DB93 est reserve aux fonctions Identification
//   Nom symbolique = IDENT
//- 2 formats sont possibles pour les donnees , Tableau de mot ou structure en
//    fonction des besoins :
//   - Tableau de mot : si pas d'exploitation direct du detail de l'information
//   - Structure : si exploitation direct d'une information ( Nom de la variable
//                en clair)
//- Nom symbolique des Donnees = <Nom du SE>_<Fonction realisee> :
//   avec Fonction realisee = lec (pour lecture) ou ecr (pour ecriture)
//   exemple BF_ident pour lecture des donnees dans Sous Ensemble A0 = A0_lec
//
//4) Entrees de la BF
//
//   Mode:       Code de la commande
//                  - 1 = Lecture (sur element statique)
//                  - 2 = Ecriture (sur element statique)
//                  - 257 = Lecture a la volee (sur element dynamique)
//   Address:    Adresse sur l'etiquette (numero du mot)
//   Len:        Longueur (en mot) des donnees
//   DBNR:       Numero du bloc de donnees source ou destination
//   Offset:     Position des donnees dans le DB
//
//5) Parametres d'entree/sortie:
//
//   Lock:       Synchronisation de plusieurs contrats sur une antenne
//               Ce parametre doit etre renseigne avec la meme variable
//               pour toutes les instances du bloc fonctionnel qui travaillent
//               avec la meme antenne.
//
//Defauts:
//--------
//Le defaut est maintenu jusqu'a son acquittement sur l'entree Reset.
//Si apres acquittement l'entree Val est toujours positionnee, la commande est
//relancee.
//VERIFIER LE FORMAT DES DONNEES LORS DE L'AFFICHAGE DES CODES DE DEFAUT
//
//Diag.codedef contient la description general du defaut.
//en fonction de ce Defaut Diag.addinf peut contenir des informations
//complementaires
//
//Valeur de Diag.codedef :
// 0 = Pas de defaut
// 1 = Numero de voie incorrect (Erreur de parametrage).
// 2 = Erreur d'acces
//       Addresse de l'ASM incorrecte
//       Probleme de communication
//       ASM hors tension ou defectueux
//    Diag.Addinf contient le code de l'erreur retourne par le SFC 14 (DPRD_DAT)
//       8090 Hex = Addresse incorrecte
//       80A0 Hex = Erreur d'acces
// 3 = Valeur de mode incorrecte (Erreur de parametrage)
// 4 = Numero de bloc de donnees incorrect
//    Diag.Addinf contient le code de l'erreur retourne par le SFC 24 (TEST_DB) :
//       80A1 Hex = Numero de DB nul ou superieur au maximum autorise pour la CPU
//       80B1 Hex = Bloc de donnees inexistant
//       80B2 Hex = Bloc de donnees dans la memoire de chargement ("UNLINKED")
// 5 = Longueur des donnees nulle
// 6 = Bloc de donnees trop petit pour servir la requete
// 7 = Bloc de donnees protege en ecriture (pour une commande de lecture)
// 8 = Absence d'etiquette lors d'une commande statique
// 9 = Erreur lors de la copie des donnees
//    Diag.Addinf contient le code de l'erreur retourne par le SFC 20 (BLK_MOV)
//       8122 Hex = Bloc de donnee trop petit pour servir la requete
//       813A Hex = Bloc de donnee Inexistant
// 10 (0A Hex) = Erreur lors de l'envoi de donnees a l'ASM
//            Diag.Addinf contient le code de l'erreur retourne par le SFB 53
//
//             (WRREC)Voir documentation du SFB 53
//            80C3 Hex = Ressources CPU temporairement epuisees
//            80C4 Hex = Erreur de communication temporaire
// 11 (0B Hex) = Erreur lors de la reception de donnees depuis l'ASM
//            Diag.Addinf contient le code de l'erreur retourne par le SFB 52
//             (RDREC)Voir documentation du SFB 52
//            80C3 Hex = Ressources CPU temporairement epuisees
//            80C4 Hex = Erreur de communication temporaire
// 12 (0C Hex) = Donnees recues inattendues
// 13 (0D Hex) = Erreur lors du traitement de la commande par l'ASM
//           Diag.Addinf contient le code de l'erreur retourne par l'ASM
//           1 Hex = L'etiquette est sortie du champ prematurement
//           3 Hex = Probleme liaison avec l'antenne
//           6 Hex = Champ parasite sur l'antenne
//           C Hex = Impossible d'ecrire dans l'etiquette (Etiquette defectueuse)
//           D Hex = Acces en dehors de l'espace d'adressage de l'etiquette.
//           13 Hex = Memoire de l'ASM ou de l'antenne insuffisante pour traiter
//                    la commande
//           15 Hex = Parametrage incorrect
// 14 (0E Hex) = Pas de reponse de l'ASM
// 15 (0F Hex) = Depassement du temps enveloppe
// 16 (10 Hex) = Pas de liaison avec l'antenne (SLG)
// 17 (11 Hex) = L'entree "Val" est retombee avant la fin du contrat
// 18 (12 Hex) = Depassement du temps enveloppe pendant l'initialisation
//
//
//************************** ENGLISH INFORMATION  ****************************
//
//Description:
//------------
//This Functional Block is used to Read / Write the Siemens RFID TAG
//The dafault parameter settings makes able to Read / Write the RF 300 TAG
//
//PREREQUISITE :
//**************
//An ASM properly parametered has to be in the material configuration.
//Alarms in the parameters according to the hardware :
//1) RF180 :
//- USER Mode = FB45
//- MOBY Mode = Normal addressing MOBY U/D / RF300
//- Transmission speed = 115,2 Kbps
//2)ASM 456 :
//- USER Mode = FB45
//- MOBY Mode = Normal addressing MOBY U/D/P
//- Transmission speed = 115,2 Kbps
//3) ASM475 :
//- Base parameter =  By Default or MOBY U/D normal addressing
//- Bandwidth to SLG = By Default or 115,2 Kbps
//If this parameter setting is not respected, there is a systematic error during
//the initialization of FB2015 (Codedef=13 (DEC) and  Addinf = 21 (DEC))
//
//OPERATING :
//***********
//1) Address of the ASM in the hardware configuration:
//- The address assigned in the hardware configuration has to be the same for
//Inputs and Outputs under HW config.
//- This address must be filled on the ASMAddr input of the block.
//
//2) Reset of the  function block:
//It is recommended for every BF_IDENT to set Pilot.init input in the OB100.
//Code Example in LIST language :
//SET
//=  "DB name of sub assembly".BF instance Name.Pilot.init
//=  "DB name of sub assembly".BF instance Name.Pilot.init
//
//3) Global DB associated with the BF_Ident:
//- In the program structure the DB93 is reserved for the Identification
//functions
// Symbolic name = IDENT
//- 2 data types are possible for the data, Word Array or Structure according
//to needs:
//   - WORD ARRAY : if there is no direct use of the detailled information
//   - Structure: if there is direct use of an information (if the code uses tha
//name of the variable)
//  - symbolic Name of the Data = < Sub assembly Name> _ < Function performed>:
//   With Function performed = lec (for reading) or ecr (for writing).
//   Example : BF_ident for reading the data in the sub-assembly A0 = A0_lec
//
//4) BF inputs:
// Mode : Order code
//        - 1 = Reading (for static reading)
//        - 2 = Writing (for static reading)
//        - 257 = Dynamic reading (reading while the tag is moving)
// Address : Word address in the tag (Word number)
// Len : length of word to be read or written
// DBNR : DB number of source data(for writting data to the tag) or destination
//       (for writting data to the PLC)
// Offset : Data offset in the global DB
//
//5) BF IN_OUT :
// Lock : Synchronization of several requests on an antenna.
//        This parameter must be filled with the same variable for all the
//        instance of the FB_Ident which work with the same antenna.
//
//CODE FAULT :
//************
//The code fault is set ('1') until acknowledgement by the input "Reset"
//If after reset, the "Val" input is set, request starts again.
//CHECK the format (DEC or HEX) of the codes faults
//
//Diag.codedef is used for the generic Faults.
//According to this Fault Diag.addinf can contain additional information.
//
//Diag.codedef Values :
// 0 = No fault
// 1 = Bad line number (BF parameterization error)
// 2 = Error of access
//     ASM Address incorrect
//     Communications problem
//     ASM power off or defective
//Diag.Addinf contain the error code returned by SFC 14 (DPRD_DAT)
//       8090 Hex = Incorrect Address
//       80A0 Hex = Error of access
// 3 = Invalid "Mode" value (BF parameterization error)
// 4 = Invalid Data Block number
//    Diag.Addinf contains the code returned by SFC 24 (TEST_DB) :
//       80A1 Hex = Db Number equal to 0 or higher to maximum number available by
//PLC
//       80B1 Hex = DB not exists
//       80B2 Hex = DB in load memory ("UNLINKED")
// 5 = Length of data invalid (length = 0)
// 6 = DB too small according to the request
// 7 = DB write-protected (for a reading request)
// 8 = Tag missing during the order (only in static Mode)
// 9 = Data copy fault
//    Diag.Addinf contain the code return by SFC 20 (BLK_MOV)
//       8122 Hex = DB too small to serve the request
//       813A Hex = DB No-existent
// 10 (0A Hex) = sending data to ASM error
//            Diag.Addinf contain the code return by SFB 53(WRREC)see SFB 53
//            documentation in Step7
//            80C3 Hex = CPU resources Temporarily exhausted
//            80C4 Hex = temporary Comunication error
// 11 (0B Hex) = reception of data to ASM error
//            Diag.Addinf contain the code return by SFB 52
//             (RDREC)see SFB 52 documentation in Step7
//            80C3 Hex = CPU resources Temporarily exhausted
//            80C4 Hex = temporary Comunication error
// 12 (0C Hex) = Unexpected successful data
// 13 (0D Hex) = ASM Order error
//           Diag.Addinf contain the code return by ASM
//           1 Hex = Tag is out of the RF field
//           3 Hex = antenna link fault
//           6 Hex = Stray radiation on the antenna
//           C Hex = Impossible to write in the tag (Tag defective)
//           D Hex = Access out of the address range
//           13 Hex = Tag or antenna memory too small to process the request
//
//           15 Hex = Invalid parameter
// 14 (0E Hex) = No feedback from ASM
// 15 (0F Hex) = Time out
// 16 (10 Hex) = No link with antenna (SLG)
// 17 (11 Hex) = Input "Val" has fallen before the end of request
// 18 (12 Hex) = Initialization Time out
//
//************************* _ODIL_ID_ ****************************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 17
//Dernier ID mis en oeuvre / Last ID implemented : 2015_17
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RFID'
NAME : 'RF300'
VERSION : 2.4
VAR_INPUT
  ASMAddr : INT;	//ASM Address / Adresse de L'ASM
  ASMChannel : INT;	//ASM Line Number (1 or 2) /Numero de voie sur l'Asm (1 ou 2)
  Module : INT;	//Reserved (not used) / Reserve (Non utilisee)
  Val : BOOL;	//Execution (order of the function) / Execution
  Reset : BOOL;	//Fault reset /Acquittement defaut
  Mode : INT;	//1 read ,2 write,257 continuous read /1 Lect.,2 Ecrit.,257 Lect. a la volee
  Address : INT;	//Tag address / Adresse sur l'etiquette
  Len : INT;	//Length in word / Longueur en Mot
  DBNR : INT;	//PLC data block number / Numero du Bloc de donnees Source ou Destination
  Offset : INT;	//Offset on PLC data block / Offset sur le Bloc de donnees
  Pilot : STRUCT	//HMI Inputs / Entrees IHM
    Init : BOOL;	//ASM Initialization / Initialisation de l'ASM
    ClearCnt : BOOL;	//Counter Reset / Initialisation des compteurs
    ClearDur : BOOL;	//Timer Reset / Initialisation des durees
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Ok : BOOL;	//End of Order without Fault / Commande terminee sans erreur
  Def : BOOL;	//End of Order with Fault /Commande terminee avec erreur
  Busy : BOOL;	//Order In progress / Commande en cours
  Tag : BOOL;	//Tag presence /Etiquette presente
  Diag : STRUCT	//Diagnostic Structure / Structure de diagnostique
    Def : BOOL;	//Fault (End of Order with fault)/ Commande terminee avec erreur
    Ok : BOOL;	//OK ( End of Order Without Fault )/Commande terminee sans erreur
    Val : BOOL;	//command validation / Validation de la commande
    Tag : BOOL;	//Tag Presence /Presence etiquette
    NumList : INT;	//Reserved for SMP Fault list Number / Numero de liste defaut SMP
    CodeDef : WORD;	//Fault Code /Code du defaut
    AddInf : WORD;	//Information complementary   /Information complementaire
    Mode : INT;	//Mode mirror / Copie de "Mode"
    IniCnt : DWORD;	//Reset Compter / Compteur d'initialisation
    CmdCnt : DWORD;	//Counter of good Transaction / Compteur de transaction correcte
    ErrCnt : DWORD;	//Counter of Fault / Compteur d'erreur
    CmdDur : TIME;	//Time of the last Transaction /Duree de la derniere transaction
    MinCmdDur : TIME  := T#1M;	//minimum Time (1 minute) / Duree minimum (1 minute)
    MaxCmdDur : TIME;	//Maximum Time / Duree Maximum
    CmdTimeOut : TIME  := T#1M;	//Time out  / Temps enveloppe (1 minute)
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Lock : BYTE;	//Synchronization / Synchronisation
END_VAR
VAR
  Cmd : STRUCT	//Command structure
    Cmd : BYTE;	//Moby Command
    Address : WORD;	//Tag Address
    Qty : WORD;	//Quantity in Byte
    DBNR : WORD;	//Data DBNR
    Offset : WORD;	//Offset
    Rd : BOOL;	//Read
    Wr : BOOL;	//Write
    Dyn : BOOL;	//Dynamic
  END_STRUCT ;
  Ini : STRUCT	//Ini structure
    CmdBuf : STRUCT
      Len : BYTE  := B#16#A;
      Cmd : BYTE;
      Sts : BYTE;
      ScaT : BYTE;	//Scanning Time
      Para : BYTE  := B#16#25;	//Parameter
      Opt1 : BYTE  := B#16#2;	//Option 1
      Dili : BYTE;	//Distance limiting
      ResA : BYTE;
      ReSB : BYTE  := B#16#1;
      Fcon : BYTE;	//Field on control
      Ftim : BYTE;	//Field on time
    END_STRUCT ;
    AckBuf : STRUCT
      Len : BYTE;
      Cmd : BYTE;
      Sts : BYTE;
      VerHi : BYTE;
      VerLo : BYTE;
      Res : BYTE;
    END_STRUCT ;
  END_STRUCT ;
  Dat : STRUCT	//Dat structure
    CmdQty : WORD;	//Processed quantity
    CmdBuf : STRUCT	//Command buffer
      Len : BYTE;
      Cmd : BYTE;
      Sts : BYTE;
      AddHi : BYTE;
      AddLo : BYTE;
      Qty : BYTE;
      Dat : ARRAY  [1 .. 233 ] OF BYTE;
    END_STRUCT ;
    AckQty : WORD;	//Processed quantity
    AckBuf : STRUCT	//Acknowlegement buffer
      Len : BYTE;
      Cmd : BYTE;
      Sts : BYTE;
      AddHi : BYTE;
      AddLo : BYTE;
      Qty : BYTE;
      Dat : ARRAY  [1 .. 233 ] OF BYTE;
    END_STRUCT ;
  END_STRUCT ;
  WR_REC : WRREC;	//Write function
  RD_REC : RDREC;	//Read function
  SFBStatus : DWORD;	//Standard SFBs STATUS
  SxxStTime : TIME;	//Timer
  IniStTime : TIME;	//Timer
  CmdStTime : TIME;	//Timer
  CmdTOCnt : WORD;	//Command to count
  xCmdCnt : WORD;	//Last command counter
  xAckCnt : WORD;	//Last Acknowledgement counter
  Sxx : BYTE;
  LSxx : BYTE;
  Res : BOOL;
  WRREC : BOOL;	//Write record
  RDREC : BOOL;	//Read record
  CmdRunning : BOOL;	//command running
  Error : BOOL;
END_VAR
VAR_TEMP
  SavAR1 : DWORD;	//AR1 Backup
  SLGAddr : WORD;	//Address of the SLG in the IO Area
  SLGPtr : DWORD;	//Pointer on the SLG IO area
  SLGIn : STRUCT	//Input Word
    Tag : BOOL;	//Tag present
    X9 : BOOL;	//reserve
    X10 : BOOL;	//reserve
    CmdCntLo : BOOL;	//Command counter Low bit
    CmdCntHi : BOOL;	//Command counter High bit
    AckCntLo : BOOL;	//Acknowledgement counter Low bit
    AckCntHi : BOOL;	//Acknowledgement counter High bit
    Reset : BOOL;	//Power Up
    TagCnt0 : BOOL;	//reserve
    TagCnt1 : BOOL;
    TagCnt2 : BOOL;
    TagCnt3 : BOOL;
    RErr : BOOL;	//Reader Error
    Busy : BOOL;
    X6 : BOOL;
    X7 : BOOL;
  END_STRUCT ;
  SLGLock : STRUCT	//Synchronisation
    Ready : BOOL;	//ASM Initialized
    Locked : BOOL;	//Ini or Cmd in progress
  END_STRUCT ;
  Ret : INT;	//Standard SFCs RET_VAL
  SChg : BOOL;	//Step Changed
  SxxTimeOut : BOOL;	//Step Timeout Error
  WP : BOOL;	//DB Write Protected
  DBLen : WORD;	//Length of the Data DB (SFC24 - TEST_DB)
  Blk : ANY;	//for SFC 20 - BLKMOV & SFC 21 - FILL
  Qty : INT;	//Quantity
  SysTick : TIME;	//System Tick for timers
  ErrCode : WORD;	//Error
END_VAR
BEGIN
NETWORK
TITLE =Read System Tick
//*ODIL_ID:2015_1*
//Save AR1
//
TAR1 #SavAR1;
//Read System Tick
CALL "TIME_TCK" (
RET_VAL := #SysTick);
//----------
L #Mode;
T #Diag.Mode;
//----------
CLR;
= #SLGIn.Tag;
= #SChg;
NETWORK
TITLE =Clear Counters and duration
//*ODIL_ID:2015_2*
L B#16#0;
UN #Pilot.ClearCnt;
SPB ncc;
R #Pilot.ClearCnt;
T #Diag.CmdCnt;
T #Diag.IniCnt;
T #Diag.ErrCnt;
ncc: UN #Pilot.ClearDur;
SPB S;
R #Pilot.ClearDur;
T #CmdTOCnt;
T #Diag.MaxCmdDur;
L L#60000; //60s
T #Diag.MinCmdDur;
T #Diag.CmdTimeOut;
NETWORK
TITLE =
//*ODIL_ID:2015_3*
//----------
//
S: L #Lock;
LAR1 P##SLGLock;
T LB [AR1,P#0.0];
//---------- Control of the "ASMChannel" Parameter (1 or 2)
O(;
L #ASMChannel;
L B#16#1;
==D;
);
O(;
POP; //L #ASMChannel
L B#16#2;
==D;
);
SPBN E001; //Error: Invalid Channel Number
//---------- Calculation of a pointer on the SLG IO area
POP; //L #ASMChannel
UW W#16#2; //1 -> 0 & 2 -> 2
L #ASMAddr; //Logical address of the ASM
+I;
T #SLGAddr;
SLW 3; //Make bit Ptr
T #SLGPtr; //Pointer on the SLG IO area
//---------- Read Input Word
CALL "DPRD_DAT" (
LADDR := #SLGAddr,
RET_VAL := #Ret,
RECORD := #SLGIn);
SPBIN E002;
//---------- Reader Error
U #SLGIn.RErr;
SPB E016;
//---------- Goto Error Handler in case of Error
U #Error;
SPB ErrH;
//----------
LAR1 P##SLGIn;
L LW [AR1,P#0.0];
//---------- Evaluation of the Cmd Counter (Acknowledgement of the previous command)
L #xCmdCnt;
L LW [AR1,P#0.0]; //L Input Word
UW W#16#1800; //Cmd Counter (X11 & X12)
//0000:0 - 0800:1 - 1000:2 - 1800:3
<>D;
S #WRREC; //Write Record
T #xCmdCnt;
//---------- Evaluation of the Ack Counter (Indication of the availability of a response)
L #xAckCnt;
L LW [AR1,P#0.0]; //L Input Word
UW W#16#6000; //Ack Counter (X13 & X14)
//0000:0 - 2000:1 - 4000:2 - 6000:3
<>D;
S #RDREC; //Read Record
T #xAckCnt;
//----------
O #SLGIn.Reset; //Initialisation request from the ASM
O #Pilot.Init; //Initialisation request from the process
R #SLGLock.Ready;
R #Pilot.Init;
//----------
O #CmdRunning;
ON #SLGLock.Locked;
UN #SLGLock.Ready;
L B#16#1;
SPB SChg;
NETWORK
TITLE =
//*ODIL_ID:2015_4*
L #Sxx;
SChg: T #Sxx;
L #LSxx;
<>D;
= #SChg; //Change
SPBN SPL;
POP; //L #Sxx
T #LSxx;
//----------
L B#16#1;
>=D;
= #SLGLock.Locked;
POP;
L B#16#5;
>=D;
= #CmdRunning;
= #Busy;
//----------
L #SysTick;
T #SxxStTime;
SPL: L #SysTick;
L #SxxStTime;
-D;
UD DW#16#7FFFFFFF;
L 2500;
>D;
= #SxxTimeOut;
//----------
Sxx: L #Sxx;
SPL ZZZ;
SPA S00; //...
SPA S01; //Init
SPA S02; //Init Write Record
SPA S03; //Init
SPA S04; //Init Read Record
SPA S05; //Data Initialize
SPA S06; //Data
SPA S07; //Data Write Record
SPA S08; //Data
SPA S09; //Data Read Record
ZZZ: SPA End;
NETWORK
TITLE =Step 0
//*ODIL_ID:2015_5*
S00: UN #SLGLock.Locked;
U #Val;
UN #Ok;
L B#16#5;
SPB SChg;
SPA End;
NETWORK
TITLE =Step 1 - SLG Init
//*ODIL_ID:2015_6*
S01: UN #SChg;
SPB S01x;
S #Res;
L #SysTick;
T #IniStTime;
S01x: U #SLGIn.Reset; //SLG Reset
U #SLGIn.CmdCntLo; //CmdCnt = 1 (Low TRUE, Hi FALSE)
UN #SLGIn.CmdCntHi;
R #Res;
U #Res;
L B#16#0;
SPBN UpdO;
L W#16#8000;
//---------- Updates the Output Word
UpdO: LAR1 #SLGPtr;
T PAW [AR1,P#0.0];
O #SLGIn.Reset;
O #Res;
SPB Ini;
L #ASMAddr;
T #WR_REC.ID;
T #RD_REC.ID;
L #ASMChannel;
+ 100;
T #WR_REC.INDEX; //Data Record Number
T #RD_REC.INDEX;
L B#16#2; //S02 - SLG Init - Write Record
SPA SChg; //-> Next Step
NETWORK
TITLE =Step 2 - SLG Init
//Write Record
//*ODIL_ID:2015_7*
//
S02: U #SChg;
= #WR_REC.REQ;
CALL #WR_REC (//Write Record Reset
LEN := 11,
STATUS := #SFBStatus,
RECORD := #Ini.CmdBuf);
U #WR_REC.ERROR;
SPB E010; //Error SFB 53
UN #WR_REC.DONE;
SPB Ini;
L B#16#3; //S03 - SLG Init - Wait AckCnt = 1
SPA SChg; //-> Next Step
NETWORK
TITLE =Step 3 - SLG Init
//Wait for Ack Counter = 1
//*ODIL_ID:2015_8*
//
S03: L B#16#1; //S01
U #SxxTimeOut; //Restart the Initialization process
SPB SChg;
ON #SLGIn.AckCntLo;
O #SLGIn.AckCntHi;
SPB Ini;
L B#16#4; //S04 - SLG Init - Read Record
SPA SChg; //-> Next Step
NETWORK
TITLE =Step 4 - SLG Init
//Read Record
//*ODIL_ID:2015_9*
//
S04: U #SChg;
= #RD_REC.REQ;
CALL #RD_REC (//Read Record Reset
MLEN := 6,
STATUS := #SFBStatus,
RECORD := #Ini.AckBuf);
U #RD_REC.ERROR;
SPB E011; //Error
UN #RD_REC.VALID;
SPB Ini;
//---------- Control of Cmd
L #Ini.AckBuf.Cmd;
L B#16#0;
<>D;
SPB E012; //Error: Unexpected Data
//---------- Control of the Moby Status (Discard error 1F: Running command canceled by RESET)
L B#16#1F;
L #Ini.AckBuf.Sts;
UW;
O ==0;
O(;
==D;
);
SPBN E013; //Error: ASM Error
S #SLGLock.Ready;
L #Diag.IniCnt;
+ L#1;
T #Diag.IniCnt;
L B#16#0; //S00
SPA SChg; //-> Next Step
NETWORK
TITLE =Step 5 - Data
//Request control and Initialization
//*ODIL_ID:2015_10*
//
S05: L B#16#0; //Init Sent and received Quantities
T #Dat.CmdQty;
T #Dat.AckQty;
T #Diag.CmdDur;
SET;
R #Cmd.Rd;
R #Cmd.Wr;
R #Cmd.Dyn;
//---------- Control of the "Mode" Parameter (1, 2 or 257)
O(;
L #Mode; //Control the Mode value
L B#16#1; //Static Read
==D;
S #Cmd.Rd;
);
O(;
POP; //L #Mode
L B#16#2; //Static Write
==D;
S #Cmd.Wr;
);
O(;
POP; //L #Mode
L W#16#101; //Dynamic Read (257)
==D;
S #Cmd.Rd;
S #Cmd.Dyn; //Dynamic Mode
);
SPBN E003; //Error: Invalid Mode Value
//---------- Conversion of the "Mode"
POP; //L #Mode
XOW W#16#3; //1 -> 2 (Read), 2 -> 1 (Write)
UW W#16#3;
T #Cmd.Cmd;
//---------- Get DB Properties
L #DBNR;
T #Cmd.DBNR;
CALL "TEST_DB" (
DB_NUMBER := #Cmd.DBNR,
RET_VAL := #Ret,
DB_LENGTH := #DBLen,
WRITE_PROT := #WP);
SPBIN E004; //Error: Invalid DB Number
//---------- Conversion and control of the Input Parameters
L #Len; //Length in Word
L B#16#2;
*D; //Length in Byte
SPZ E005; //Error: Invalid 0 Length
T #Cmd.Qty;
L #Offset;
T #Cmd.Offset;
+D;
L #DBLen;
-D;
SPP E006; //Error: DB too small
L #Address; //Word Address
SLW 1; // * 2 -> Byte Address
T #Cmd.Address;
//----------
U #WP;
U #Cmd.Rd;
SPB E007; //Error: DB Write Protected
//---------- Checking the Tag presence in static mode
UN #Cmd.Dyn;
UN #SLGIn.Tag;
SPB E008; //Error: No Tag Detected
R #RDREC;
L #ASMAddr;
T #WR_REC.ID;
T #RD_REC.ID;
L #ASMChannel;
+ 110;
T #WR_REC.INDEX; //Data Record Number
T #RD_REC.INDEX;
L #SysTick; //Start Time
T #CmdStTime;
L B#16#6; //S06
SPA SChg; //-> Next Step
NETWORK
TITLE =Step 6 - Data
//Init WRREC Data
//Wait for Cmd Cnt Change
//*ODIL_ID:2015_11*
//---------- Control of the remaining data
//
S06: U #SChg;
SPBN S06x;
L #Cmd.Qty; //Initial quantity
L #Dat.CmdQty; //Processed quantity
<>D;
SPB S06c;
L B#16#8; //S08
SPA SChg; //-> Next Step
//---------- Update of the Quantity in the buffer
S06c: T #Qty; //Processed quantity
-I; //Remaining Quantity
L B#16#E9; //233
<=D; //Last Command
SPBNB LCd1;
POP; //Remaining Quantity (1 <= x <= 233)
LCd1: T #Dat.CmdBuf.Qty;
//---------- Update of the processed quantity
L #Dat.CmdQty;
+I;
T #Dat.CmdQty;
//---------- Update of the Cmd in the buffer
L #Cmd.Cmd;
SPBI LCd2;
OW W#16#40; //Chain Command bit mask
LCd2: T #Dat.CmdBuf.Cmd;
//---------- Update of the Address in the buffer
L #Qty;
L #Cmd.Address;
+I;
T #Dat.CmdBuf.AddLo;
TAW;
T #Dat.CmdBuf.AddHi;
//---------- Check if it is a Read Command
L B#16#0; //Len
U #Cmd.Rd;
SPB CRD;
//---------- Preparation of the copy
LAR1 P##Blk;
L #Dat.CmdBuf.Qty; //Byte count
OD DW#16#10020000;
T LD [AR1,P#0.0];
L #Cmd.DBNR; //DB Number
T LW [AR1,P#4.0];
L #Qty; //DB Offset
L #Cmd.Offset;
+D;
SLD 3; //Make bit Ptr
OD DW#16#84000000;
T LD [AR1,P#6.0];
//---------- Copy the data from the DB to the buffer
CALL "BLKMOV" (
SRCBLK := #Blk,
RET_VAL := #Ret,
DSTBLK := #Dat.CmdBuf.Dat);
SPBIN E009; //Error: Copy from DB to Buffer
L #Dat.CmdBuf.Qty;
//----------
CRD: + 5;
T #Dat.CmdBuf.Len;
+ 1;
T #WR_REC.LEN;
S06x: U #SxxTimeOut;
SPB E014; //Error: Wrong ASM Address
UN #WRREC;
SPB Cmd;
R #WRREC;
L B#16#7; //S07
SPA SChg; //-> Next Step
NETWORK
TITLE =Step 7 - Data
//Write Record
//*ODIL_ID:2015_12*
//
S07: U #SChg;
= #WR_REC.REQ;
CALL #WR_REC (//Write Record Data
STATUS := #SFBStatus,
RECORD := #Dat.CmdBuf);
U #WR_REC.ERROR;
SPB E010; //Error: SFB 53
UN #WR_REC.DONE;
SPB Cmd;
L B#16#6; //S06
SPA SChg; //-> Next Step
NETWORK
TITLE =Step 8 - Data
//Wait for Ack Cnt Change (New Data Available)
//*ODIL_ID:2015_13*
//
S08: UN #RDREC;
SPB Cmd;
R #RDREC;
L B#16#9; //S09
SPA SChg; //-> Next Step
NETWORK
TITLE =Step 10 - Data
//Read Record
//*ODIL_ID:2015_14*
//
S09: U #SChg;
= #RD_REC.REQ;
CALL #RD_REC (//Read Record Data
MLEN := 239,
STATUS := #SFBStatus,
RECORD := #Dat.AckBuf);
U #RD_REC.ERROR;
SPB E011; //Error: SFB 52
UN #RD_REC.VALID;
SPB Cmd;
//----------
L #Cmd.Qty; //Initial Quantity
L #Dat.AckQty; //Processed Quantity
T #Qty;
-I; //Remaining Quantity
L B#16#E9; //233
<=D; //Last Command
SPBNB LAk1;
POP; //Remaining Quantity (1 <= x <= 233)
//---------- Update of the processed quantity
LAk1: L #Dat.AckQty; //Add the remaining quantity or 233
+I;
T #Dat.AckQty;
//---------- Control of Cmd
L #Cmd.Cmd;
SPBI LAk2;
OW W#16#40;
LAk2: L #Dat.AckBuf.Cmd;
<>D;
SPB E012; //Error: Dat Ack - Unexpected Data
//---------- Control of the Moby Status
L #Dat.AckBuf.Sts;
UW W#16#1F;
SPN E013; //Error: Dat Ack - ASM Error
//---------- Check if it is a Write command
U #Cmd.Wr;
SPB AWR;
L #Dat.AckBuf.AddLo;
L #Dat.AckBuf.AddHi;
TAW;
OW;
L #Qty; //Processed quantity
-I;
L #Cmd.Address;
-I;
SPN E012; //Error: Dat Ack - Unexpected Data
//---------- Preparation of the copy
LAR1 P##Blk;
L #Dat.AckBuf.Qty; //Byte count
OD DW#16#10020000;
T LD [AR1,P#0.0];
L #Cmd.DBNR; //DB Number
T LW [AR1,P#4.0];
L #Qty; //DB Offset
L #Cmd.Offset;
+D;
SLD 3; //Make bit Ptr
OD DW#16#84000000;
T LD [AR1,P#6.0];
//---------- Copy the data from the Buffer to the DB
CALL "BLKMOV" (//Copy
SRCBLK := #Dat.AckBuf.Dat,
RET_VAL := #Ret,
DSTBLK := #Blk);
SPBIN E009; //Error: Copy from Buffer to DB
//---------- Check if it is the last Acknowledgement
AWR: L #Dat.AckBuf.Cmd;
UW W#16#40;
L B#16#8; //S08
SPN SChg; //-> Next Step
SET;
= #Ok;
L #SysTick; //Updates the command duration
L #CmdStTime;
-D;
UD DW#16#7FFFFFFF;
T #Diag.CmdDur;
L #Diag.MaxCmdDur; //Updates the Max command duration
>D;
SPBN TMax;
POP; //L #Diag.CmdDur
T #Diag.MaxCmdDur;
TMax: POP; //L #Diag.CmdDur
L #Diag.MinCmdDur; //Updates the min command duration
<D;
SPBN Tmin;
POP; //L #Diag.CmdDur
T #Diag.MinCmdDur;
Tmin: L B#16#64; //Updates the timeout
L #CmdTOCnt;
<D;
O #Cmd.Dyn;
SPB S11x;
+ 1;
T #CmdTOCnt;
<>D;
SPB S11x;
L #Diag.MaxCmdDur;
+ L#1000; //add 1 Second
T #Diag.CmdTimeOut;
S11x: L #Diag.CmdCnt; //Updates the command counter
+ L#1;
T #Diag.CmdCnt;
L B#16#0; //S00 - Init
SPA SChg; //-> Next Step
NETWORK
TITLE =Timeout
//*ODIL_ID:2015_15*
//---------- Initialisation
//
Ini: L #SysTick;
L #IniStTime;
-D;
UD DW#16#7FFFFFFF;
L 10000; //10s
>D;
UN #Error;
SPB E018; //TimeOut Error (Initialisation)
SPA End;
//----------
Cmd: UN #Val;
UN #Error;
SPB E017; //Error: Lost of "Val" during data transmission
//---------- Data transfer
L #SysTick;
L #CmdStTime;
-D;
UD DW#16#7FFFFFFF;
L #Diag.CmdTimeOut;
>D;
UN #Cmd.Dyn;
UN #Error;
SPB E015; //TimeOut Error (Data Transfer)
SPA End;
NETWORK
TITLE =Error
//Bit 7 of the ErrCode means that the ASM must be initialized
//*ODIL_ID:2015_16*
//
E001: L B#16#81; //Error: Invalid Channel Number (No ASM Init)
SPA Er_1; // No Additional information
E002: L B#16#82; //Error: SFC 14
SPA Er_2; // Ret
E003: L B#16#3; //Error: Invalid Mode Value (No ASM Init)
SPA Er_1; // No Additional information
E004: L B#16#4; //Error: Invalid DB Number (No ASM Init)
SPA Er_2; // Ret
E005: L B#16#5; //Error: Invalid 0 Length (No ASM Init)
SPA Er_1; // No Additional information
E006: L B#16#6; //Error: DB too small (No ASM Init)
SPA Er_1; // No Additional information
E007: L B#16#7; //Error: DB Write Protected (No ASM Init)
SPA Er_1; // No Additional information
E008: L B#16#88; //Error: No Tag Detected
SPA Er_1; // No Additional information
E009: L B#16#89; //Error: SFC 20
SPA Er_2; // Ret
E010: L B#16#8A; //Error: SFB 53
SPA Er_3; // Status
E011: L B#16#8B; //Error: SFB 52
SPA Er_3; // Status
E012: L B#16#8C; //Error: Unexpected Data
SPA Er_1; // No Additional information
E013: L B#16#8D; //Error: ASM Error
T #ErrCode;
POP; // ASM Error Code
SPA Err;
E014: L B#16#8E; //Error: No ASM Acknowledgment
SPA Er_1; // No Additional information
E015: L B#16#8F; //Error: TimeOut
SPA Er_1; // No Additional information
E016: L B#16#90; //Error: Reader
SPA Er_1; // No Additional information
E017: L B#16#91; //Error: Application (Lost of "Val" during data transmission)
SPA Er_1; // No Additional information
E018: L B#16#12; //Error: Timeout during initialization
SPA Er_1; // No Additional information
Er_1: T #ErrCode;
L B#16#0; //No Additionnal Information
SPA Err;
Er_2: T #ErrCode;
L #Ret; //Ret
SPA Err;
Er_3: L #SFBStatus; //SFB 52/53 STATUS
SRD 8;
//...
POP;
T #ErrCode;
L #SFBStatus;
SRD 8;
SPA Err;
Err: U #Error;
SPB ErrH;
S #Error;
R #Busy;
T #Diag.AddInf;
UN #CmdRunning;
SPB NCnt;
L #Diag.ErrCnt;
+ L#1;
T #Diag.ErrCnt;
NCnt: L #ErrCode;
L W#16#7F;
UW;
T #Diag.CodeDef;
<>D; //SLG Init
R #SLGLock.Ready;
//----------
ErrH: L #SFBStatus;
UD DW#16#FFFF00;
L DW#16#700100;
==D;
SPB Sxx; //SFB Completion
POP;
L DW#16#700200;
==D;
SPB Sxx;
//----------
L B#16#0;
UN #Reset;
SPB NRes;
T #Diag.CodeDef;
T #Diag.AddInf;
NRes: L #Diag.CodeDef;
<>D;
= #Def;
= #Diag.Def;
O #Def;
O #Reset;
SPB End;
R #Error;
T #Sxx;
NETWORK
TITLE =
//*ODIL_ID:2015_17*
//----------
//
End: LAR1 P##SLGLock;
L LB [AR1,P#0.0];
T #Lock;
//----------
U #Val;
= #Diag.Val;
U #Val;
U #Ok;
= #Ok;
= #Diag.Ok;
//----------
U #SLGIn.Tag;
= #Tag;
= #Diag.Tag;
LAR1 #SavAR1;
BEA;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_IHM_WINCC"
TITLE =BF_IHM_WINCC
//**********************************************************************
//*                           BF_IHM_WINCC                             *
//*                    Coordination API / Winccflexible                *
//*                    Coordination PLC / Winccflexible                *
//**********************************************************************
//(English description further below)
//
//DESCRIPTION:
//************
//Ce FB renseigne la page en cours sur Wincc Flexible et permet de selectionner
//une page sur le pupitre
//
//Visualisation numero de la page active : Sortie Num_pwincc
//
//Selection page :
//     1 - Renseigner le numero de la page a afficher : Entree Num_page
//     2 - Le changement de page se fait sur un passage de 0 a 1 de Entree
//         Val_page
//
//Il sert ausi a la mise a l'heure de l'automate et synchronise l'heure du
//pupitre Wincc Flexible avec l'heure de l'automate uniquement pour un pupitre LOP
//
//MISE en OEUVRE :
//***************
//1) LOP et MOP :
//--------------
//Instancier la BF avec le DB1962 et de Nom "DB_IHM_WINCC" pas de multi-instance.
//
//2) DLOP :
//--------
//Instancier la BF avec le DB1963 et de Nom "DB_IHM_DLOP" pas de multi-instance.
//
//3)Wincc pour MOP :
//-----------------
//- Au niveau du MOP la declaration de la date et l'heure au niveau de
//l'application WinCC entraine un decalage du PC genant sur le suivi des moyens.
//Pour regler ce probleme assure-vous que la fonction date/heure sur l'automate
//est devalidee dans le parametre de coordination de la liaison sous Wincc.
//
//- Pour permettre a l'application Wincc de repasser en avant plan sur
//l'application IHMP, l'ihmp utilise l'entree "Pilot.Ihmavplan" de la BF.
//Cette variable est associee a un script "ShowScreen " sous Wincc Flexible.
//
//4)Programme S7 pour LOP et Dlop :
//-------------------------
//- Traitement du Numero de page(Sortie "Num_pwincc") pour la BF_zone_mode_IHM :
//Le Numero de page doit etre transfere dans la BF_Zone Mode associee au pupitre
//touch_panel.
//Le 1er Pupitre Touch_panel (LOP) est associe a la zone 1
//Le 2eme Pupitre Touch_panel (DLOP) est associe a la zone 2
//L'affectation est a mettre en uvre apres la BF_Ihm_Wincc via une fonction MOVE.
//
//- Bit de vie des touch_panel :
//Le bit de vie doit etre genere avant la BF_Zone_Mode_IHM via une fonction
//"ADD_I" ( voir documentation BF_IHM_Wincc)
//
//INTERFACE:
//**********
//1)ENTREES :
//Val_page   : Validation appel page Wincc Flexible
//Num_page   : Numero de la page a afficher sur Wincc Flexible
//Pilot      : Structure de pilotage IHM
//     Ihmnump1         : Type de vue courant
//     Ihmnump2         : Numero de la vue actuelle
//     Ihmnump3         : Reserve
//     Ihmnump4         : Numero du champ actuel
//     Ihmnump5         : Reserve
//     Ihmsaisieannee   : Saisie annee pour mise a l'heure API
//     Ihmsaisiemois    : Saisie mois pour mise a l'heure API
//     Ihmsaisiejour    : Saisie jour pour mise a l'heure API
//     Ihmsaisieheure   : Saisie heure pour mise a l'heure API
//     Ihmsaisisminute  : Saisie minute pour mise a l'heure API
//     Ihmsaisieseconde : Saisie seconde pour mise a l'heure API
//     Ihmordretrf      : Ordre de transfert de la date et heure saise dans l'API
//
//2) SORTIES :
//Num_pwincc : Numero page active Wincc Flexible
//Diag       : Structure de diagnostic IHM
//     Ihmresv              : Reserve
//     Ihmnumtache          : Numero de tache
//     Ihmparam1            : Parametre 1
//     Ihmparam2            : Parametre 2
//     Ihmparam3            : Parametre 3
//     Ihmlecdateheure      : Date et heure courante sur automate
//     Ihmlecdateheure_Res1 : Date et heure courante sur automate Reserve
//     Ihmlecdateheure_Res2 : Date et heure courante sur automate Reserve
//     Ihmlecdateheure_Res3 : Date et heure courante sur automate Reserve
//     Ihmlecdateheure_Res4 : Date et heure courante sur automate Reserve
//
//**************************ENGLISH INFORMATION**********************************
//DESCRIPTION:
//************
//This FB gives current WinCC Flexible screen and can select a screen on operator
//panel.
//
//Current active screen number is in output Num_pwincc
//
//Screen selection :
//     1 - Indicate screen number to be displayed in Input Num_page
//     2 - Screen switch is made when Input Val_page switches from 0 to 1
//
//This FB also updates PLC Time and synchronize operator panel's time with PLC
//time only for LOP Panel.
//
//OPERATING :
//***************
//1) LOP and MOP :
//--------------
//BF Instance use DB1962 with "DB_IHM_WINCC"for name. Multi-instance is not
//allowed.
//
//2) DLOP :
//--------
//BF Instance use DB1963 with "DB_IHM_DLOP"for name. Multi-instance is not
//allowed.
//
//3)Wincc for MOP :
//-----------------
//- On the MOP the declaration of the date and the time on the WinCC application
//causes a misalignment of the PC that is problematic for production monitoring
//system(SMP).
//To solve this problem check that the date/time function  on the PLC is
//unvalidated in the link coordination settings under Wincc.
//
//- The IHMP uses the BF input "Pilot.Ihmavplan" to allow the Wincc application
//to
//be displayed in the foreground on the IHMP application.
//This variable is associated with a "ShowScreen" script under Wincc Flexible.
//
//
//4)S7 Program for LOP and Dlop :
//-------------------------
//- Treatment of the Screen Number ("Num_pwincc" output) for BF_zone_mode_IHM :
//The Screen Number must be transferred in BF_Zone_Mode_Ihm associated to the
//touch_panel.
//1st Touch_panel (LOP) is associated to zone 1
//2nd Touch_panel (DLOP) is associated to zone 2
//The affectation must be implemented after BF_Ihm_Wincc with siemens "MOVE"
//function.
//
//- Life bit of wincc touch_panel :
//Life bit must be generated befor the BF_zone_mode_ihm by siemens "ADD_I"
//function (see the BF_Ihm_Wincc documentation)
//
//IO PARAMETERS:
//**************
//1)INPUTS :
//Val_page   : WinCC flexible screen call validation
//Num_page   : Number of the screen to be displayed on Wincc Flexible
//Pilot      : HMI control structure
//     Ihmnump1         : Current view type
//     Ihmnump2         : Current view number
//     Ihmnump3         : Spare
//     Ihmnump4         : Current field number
//     Ihmnump5         : Spare
//     Ihmsaisieannee   : Year selection for PLC settings
//     Ihmsaisiemois    : Month selection for PLC settings
//     Ihmsaisiejour    : Day selection for PLC settings
//     Ihmsaisieheure   : Hour selection for PLC settings
//     Ihmsaisisminute  : Minute selection for PLC settings
//     Ihmsaisieseconde : Second selection for PLC settings
//     Ihmordretrf      : Time and hour transfert order from HMI to PLC
//
//2) OUTPUTS :
//Num_pwincc : Active screen number in WinCC Flexible RT
//Diag       : IHMP diagnosis structure
//     Ihmresv              : Spare
//     Ihmnumtache          : Task number
//     Ihmparam1            : Parameter 1
//     Ihmparam2            : Parameter 2
//     Ihmparam3            : Parameter 3
//     Ihmlecdateheure      : Current Date and Time in PLC
//     Ihmlecdateheure_Res1 : Spare current Date and Time in PLC
//     Ihmlecdateheure_Res2 : Spare current Date and Time in PLC
//     Ihmlecdateheure_Res3 : Spare current Date and Time in PLC
//     Ihmlecdateheure_Res4 : Spare current Date and Time in PLC
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 10
//Dernier ID mis en oeuvre / Last ID implemented : 1962_10
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'IHM_WINC'
VERSION : 1.3
VAR_INPUT
  Val_page : BOOL;	//WinCCFlexible screen call validation/Validation appel page Wincc Flexible
  Num_page : INT;	//WinCCflex screen number to be displayed/Num page a afficher sur Wincc Flexible
  Pilot : STRUCT
    Ihmnump1 : INT;	//Current view type/Type de vue courant
    Ihmnump2 : INT;	//Current view number/Numero de la vue actuelle
    Ihmnump3 : INT;	//Spare/Reserve
    Ihmnump4 : INT;	//Current field/Numero du champ actuel
    Ihmnump5 : INT;	//Spare/Reserve
    Ihmsaisieannee : BYTE;	//Year selection for PLC settings/Saisie annee pour mise a l'heure API
    Ihmsaisiemois : BYTE;	//Month selection for PLC settings/Saisie mois pour mise a l'heure API
    Ihmsaisiejour : BYTE;	//Day selection for PLC settings/Saisie jour pour mise a l'heure API
    Ihmsaisieheure : BYTE;	//Hour selection for PLC settings/Saisie heure pour mise a l'heure API
    Ihmsaisisminute : BYTE;	//Minute selection for PLC settings/Saisie minute pour mise a l'heure API
    Ihmsaisieseconde : BYTE;	//Second selection for PLC settings/Saisie seconde pour mise a l'heure API
    Ihmordretrf : BOOL;	//Day and time transfert order/Ordre de transfert date et heure saisies dans API
    Ihmavplan : BOOL;	//Put in front WINCC RT screen/Mise en avant plan de la page WINCC RT
    Ihmcoordination : ARRAY  [0 .. 15 ] OF //Heart beat coordination / Coordination pour bit de vie WINCC NE PAS SUPPRIMER
BOOL;
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Num_pwincc : INT;	//WinCC Flexible current screen/Numero page active Wincc Flexible
  Diag : STRUCT
    Ihmresv : BYTE;	//Spare/Reserve
    Ihmnumtache : BYTE;	//Task number/Numero de tache
    Ihmparam1 : INT;	//Parameter 1/Parametre 1
    Ihmparam2 : INT;	//Parameter 2/Parametre 2
    Ihmparam3 : INT;	//Parameter 3/Parametre 3
    Ihmlecdateheure : DATE_AND_TIME;	//PLC current time and day/Date et heure courante sur automate
    Ihmlecdateheure_Res1 : BYTE;	//Spare PLC current time and day/Date et heure courante sur automate Reserve
    Ihmlecdateheure_Res2 : BYTE;	//Spare PLC current time and day/Date et heure courante sur automate Reserve
    Ihmlecdateheure_Res3 : BYTE;	//Spare PLC current time and day/Date et heure courante sur automate Reserve
    Ihmlecdateheure_Res4 : BYTE;	//Spare PLC current time and day/Date et heure courante sur automate Reserve
  END_STRUCT ;
END_VAR
VAR
  FP_1 : BOOL;
  FP_2 : BOOL;
END_VAR
VAR_TEMP
  DateHeure : DATE_AND_TIME;
  Fault_Readclock : INT;	//Return value SFC01
  Fault_Setclock : INT;	//Return value SFC01
  Ba1i : BOOL;	//Bit toujours a 1
  lecdateheure : DATE_AND_TIME;	//Image Date et heure courante sur automate
  RETVAL : INT;	//Bit poubelle
  aux1 : BOOL;	//Bit auxiliare
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//*ODIL_ID:1962_1*
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Lecture date & heure API pour synchro Wincc Flexible
//*ODIL_ID:1962_2*
CALL "READ_CLK" (
RET_VAL := #Fault_Readclock,
CDT := #Diag.Ihmlecdateheure);
NOP 0;
NETWORK
TITLE =Mise a jour champs de saisie sur "page 13"
//Mise a jour champs de saisie sur "page 13" page mise a jour WINCC FLEX
//*ODIL_ID:1962_3*
//
U(;
U(;
U(;
U(;
U(;
CALL "BLKMOV" (
SRCBLK := #Diag.Ihmlecdateheure,
RET_VAL := #RETVAL,
DSTBLK := #lecdateheure);
U BIE;
);
U(;
L #Num_pwincc;
L 13;
==I;
);
FP #FP_2;
SPBNB _001;
CALL "BLKMOV" (
SRCBLK := LB 14,
RET_VAL := #RETVAL,
DSTBLK := #Pilot.Ihmsaisieannee);
_001: U BIE;
);
SPBNB _002;
CALL "BLKMOV" (
SRCBLK := LB 15,
RET_VAL := #RETVAL,
DSTBLK := #Pilot.Ihmsaisiemois);
_002: U BIE;
);
SPBNB _003;
CALL "BLKMOV" (
SRCBLK := LB 16,
RET_VAL := #RETVAL,
DSTBLK := #Pilot.Ihmsaisiejour);
_003: U BIE;
);
SPBNB _004;
CALL "BLKMOV" (
SRCBLK := LB 17,
RET_VAL := #RETVAL,
DSTBLK := #Pilot.Ihmsaisieheure);
_004: U BIE;
);
SPBNB _005;
CALL "BLKMOV" (
SRCBLK := LB 18,
RET_VAL := #RETVAL,
DSTBLK := #Pilot.Ihmsaisisminute);
_005: U BIE;
= #aux1;
NETWORK
TITLE =Mise a jour champs de saisie sur "page 13"
//Mise a jour champs de saisie sur "page 13" page mise a jour WINCC FLEX
//*ODIL_ID:1962_4*
//

NETWORK
TITLE =Mise en forme Date a ecrire sur l'API
//*ODIL_ID:1962_5*
U(;
U(;
L #Pilot.Ihmsaisieannee;
T LB 0;
SET;
SAVE;
CLR;
U BIE;
);
SPBNB _006;
L #Pilot.Ihmsaisiemois;
T LB 1;
SET;
SAVE;
CLR;
_006: U BIE;
);
SPBNB _007;
L #Pilot.Ihmsaisiejour;
T LB 2;
_007: NOP 0;
NETWORK
TITLE =Mise en forme Heure a ecrire sur l'API
//*ODIL_ID:1962_6*
U(;
L #Pilot.Ihmsaisieheure;
T LB 3;
SET;
SAVE;
CLR;
U BIE;
);
SPBNB _008;
L #Pilot.Ihmsaisisminute;
T LB 4;
_008: NOP 0;
NETWORK
TITLE =Ecriture date & heure sur API
//*ODIL_ID:1962_7*
U #Ba1i;
= L 25.0;
U L 25.0;
U #Pilot.Ihmordretrf;
SPBNB _009;
CALL "SET_CLK" (
PDT := #DateHeure,
RET_VAL := #Fault_Setclock);
_009: U BIE;
R #Pilot.Ihmordretrf;
U L 25.0;
U(;
L #Fault_Setclock;
L 0;
<>I;
);
R #Pilot.Ihmordretrf;
NETWORK
TITLE =Affichage numero page courante Wincc Flexible
//*ODIL_ID:1962_8*
L #Pilot.Ihmnump2;
T #Num_pwincc;
NOP 0;
NETWORK
TITLE =Preparation parametres contrat WinccFlexible Selection de vue
//Numero tache 51 Selection de vue
//Parametre 1 : Numero de vue
//Parametre 1 : Non utilise
//Parametre 1 : Numero de champ
//*ODIL_ID:1962_9*
//
U(;
U(;
L 0;
T #Diag.Ihmparam3;
SET;
SAVE;
CLR;
U BIE;
);
SPBNB _00a;
L 0;
T #Diag.Ihmparam2;
SET;
SAVE;
CLR;
_00a: U BIE;
);
SPBNB _00b;
L #Num_page;
T #Diag.Ihmparam1;
_00b: NOP 0;
NETWORK
TITLE =Lancement contrat WinccFlexible Selection de vue
//Numero tache 51 Selection de vue
//Parametre 1 : Numero de vue
//Parametre 1 : Non utilise
//Parametre 1 : Numero de champ
//*ODIL_ID:1962_10*
//
U #Val_page;
FP #FP_1;
SPBNB _00c;
L 51;
T #Diag.Ihmnumtache;
_00c: NOP 0;
END_FUNCTION_BLOCK

DATA_BLOCK "DB_IHM_WINCC"
VERSION : 0.1
"BF_IHM_WINCC"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "BF_ILOT"
TITLE =BF_ILOT
//**********************************************************************
//*                            BF_ILOT                                 *
//*                           **********                               *
//*                PERMET DE GENERER LES INFOS ILOT                    *
//*           USE FOR GENERATING FACILITY INFORMATIONS                 *
//*
//*********************************************************************
//
//(In english further below)
//DESCRIPTION:  LE FB "ILOT" ASSURE:
//************
//- La generation des infos ILOT
//(rearmement, annulation defaut,test lampes, info clignotement, arret fin de
//journee,defaut ilot)
//
//- La mise en forme dans un mot des infos ILOT (UDT LIEN_ILOT)
//
//MISE En OEUVRE :
//**************
//- IN :
//- Bri ,Btl, Badi, Bafj sont reservees pour la connexion de Boutons
//poussoirs hard. les Boutons logiciels correspondant pour les ihm sont
//disponibles dans l'entree Pilot (Sauf BRi = BP reamement Ilot du pupitre)
//- Inf_def : recois l'information d'une zone en defaut sur l'ilot qui est
//generee par la BF_Zone_Modes_Ihm de chaque zone et mise en oeuvre dans le DB
//global Z$G (exemple Z1G.Ihmz1def or Z2G.IhmZ2def or ...)
//- Idcarte : A personaliser suivant l'installation (elle peu recevoir les
//informations de defaut des cartes de communication, passerelles ... necessaires
//au bon fonctionnement de l'ilot)
//
//OUT :
//- Ir : si cpu Non Safety a mettre en oeuvre dans le DB99 "IG" (IG.Ir)
//       si Cpu Safety mettre en oeuvre dirrectement le memento safety associe
//- Itlg : a mettre en oeuvre dans le DB99 "IG" (IG.Itlg)
//- Iadf : si cpu Non Safety a mettre en oeuvre dans le DB99 "IG" (IG.Iadf)
//       si Cpu Safety mettre en oeuvre dirrectement le memento safety associe
//- Mafj, Icl, Def_api,Df_ilot  : A mettre en oeuvre dans le DB99 "IG"
//- S_vieapi : Variable SMP ( Mot de vie de la liaison entre SMP et L'api)
//- Vdefi et Vafj sont reservees pour la connexion de Voyants hard. les
//voyants logiciels correspondant pour les ihm sont disponibles
//dans le sortie Diag
//
//Informations de suivi SMP par rapport a la sortie Def_api :
//Pour le suivi SMP des Variables STAT sont a mettre en oeuvre dans le FB1 .
//La sortie Def_api est a associer a la zone de mise en oeuvre du Pupitre (MOP ou
//LOP)de l'ilot.
//La variable stat associee a pour Nom symbolique S<N°Zone du pupitre>dfapi
//(exemple si Pupitre mis en oeuvre dans la zone 4 = S4dfapi)
//A cette variable le suivi a besoins d'une copie de l'image de defaut pour
//toutes
//les Zones de l'ilot.
//Le nom de ces variable est le suivant : S$def_api  avec $ = N° de la zone
//Ainsi suivant l'exemple il faut rajouter les variables S1def_api, S2def_api,
//S3def_api et S4def_api.
//
//L'equation suivante est a mettre en oeuvre en aval de la BF :
//IG.def_api       S4dfal24V           S4defapi
//--| |------------|/|-----------------( )-----|  <-- Pour pupitre Mis en oeuvre
//              |              |       S4def_api      Dans la zone 4
//              |              |-------( )-----|
//              |   S1dfal24V          S1def_api
//              |---|/|----------------( )-----|
//              |   S2dfal24V          S2def_api
//              |---|/|----------------( )-----|
//              |   S3dfal24V          S3def_api
//              |---|/|----------------( )-----|
//S$dfal24v = defaut d'alimentation 24 Volts de la zone concerne
//
//  POUR LA DESCRIPTION DETAILLEE DE LA FB : VOIR GUIDE GE03.FP.235
//
//CODE de DEFAUT :
//***************
//Valeur de Diag.codedef
//1 = Defaut Ilot
//
//************************** ENGLISH DESCRIPTION ***********************
//DESCRIPTION :
//*************
//- Ensure generation of facility information
//(Control On, Fault Reset, Lamp test, Blincking information, end of Production
//stop, facility fault)
//- organisation of facility information into a dedicated word (UDT LIEN_ILOT)
//
//OPERATING :
//***********
//- IN:
//- Bri, Btl, Badi, Bafj are reserved for the connection of hard Pushbuttons.
//Software Buttons (for ihm) are available in the input Pilot
//(Except BRI = Pushbutton on Panel)
//- Inf_def: receive the information of a faulty zone in the Facility which is
//generated by the BF_Zone_Modes_Ihm of every zone and implementation in the
//global DB Z$G (example Z1G.Ihmz1def OR Z2G.IhmZ2def)
//- Idcarte:  According to the Facility it receives the information of defect
//of the communication cards, gateway ... that is necessary for its good
//functioning of the facility
//
//OUT:
//- Ir: if no Safety CPU use the DB99 " IG " ( IG.Ir)
//      if Safety CPU use the Memento associated to safety code
//- Itlg: operate in the DB99 " IG " ( IG.Itlg)
//- Iadf: if no Safety CPU use the DB99 " IG " ( IG.Iadf)
//      if Safety CPU use the Memento associated to safety code
//- Mafj, Icl, Def_api, Df_ilot: implement in the DB99 " IG "
//- S_vieapi: SMP Variable (Word of life for SMP/PLC communication check)
//- Vdefi and Vafj is reserved for the connection of hard lamp. Software Lamp for
//HMI are available in Diag output
//
//Information of follow-up SMP depending on Def_api output:
//for the follow-up SMP, STAT Variables must be defined in the FB1.
//The Def_api output must be associated with the zone of implementation of the
//panel
//(MOP or LOP) in the facility.
//The STAT variable associated take this symbolic Name S<panel zone Number>dfapi
//(examples with panel located in the zone 4 = S4dfapi)
//the follow-up needs a copy of the image of defect for all the Zones
//The name of these variable is the following one: $Sdef_api with $ = Zone Number.
// So according to the example it is necessary to add variables
//S1def_api, S2def_api, S3def_api and S4def_api.
//
//The following equation must be implemented downstream to the BF:
//IG.def_api       S4dfal24V           S4defapi
//--| |------------|/|-----------------( )-----|  <-- for a MOP Panel located in
//              |              |       S4def_api  <---zone 4
//              |              |-------( )-----|
//              |   S1dfal24V          S1def_api
//              |---|/|----------------( )-----|
//              |   S2dfal24V          S2def_api
//              |---|/|----------------( )-----|
//              |   S3dfal24V          S3def_api
//              |---|/|----------------( )-----|
//S$dfal24v =  24 Volts Fault in the Zone
//See GE03.FP.235 for details
//
//FAULT CODE  :
//***************
//Value of Diag.codedef
//1 = Facility Fault
//
//******************************** _ODIL_ID_ ***************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 20
//Dernier ID mis en oeuvre / Last ID implemented : 2004_20
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'ILOT'
VERSION : 2.0
VAR_INPUT
  Bri : BOOL;	//Facility Control On button / Bouton Rearmement Ilot
  Btl : BOOL;	//Test lamp button / Bouton Test Lampes
  Badi : BOOL;	//Fault Reset button / Bouton Annulation Defaut Ilot
  Bafj : BOOL;	//End of Production Stop Button / Bouton Arret Fin Journee
  Inf_def : BOOL;	//Facility Fault Information / Info Defaut Ilot
  Idcarte : BOOL;	//Component Failure Information / Info Defaut Carte
  ICL_S : BOOL;	//System Blincking Information / Info CLignotement Systeme
  Pilot : STRUCT
    Ihmtl : BOOL;	//HMI Test lamp Information / info Test lampe des IHM (Wincc ou IHMP)
    Ihmadf : BOOL;	//HMI Fault reset Information / Info acquitement defaut des IHM (Wincc ou IHMP)
    Ihmafj : BOOL;	//HMI End of Production Stop Info. / Info Arret fin de journee des IHM
    Ihmdef : BOOL;	//HMI facility Fault Information / Information defaut Ilot IHMP
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Ir : BOOL;	//Facility Control On Information / Info de Rearmement Ilot
  Itlg : BOOL;	//Main Test Lamp Information / Info Test Lampes General
  Iadf : BOOL;	//Fault Reset Information / Info Annulation Defauts
  Mafj : BOOL;	//End of Production Stop Memory / Memoire Arret Fin Journe
  Icl : BOOL;	//Blincking Information / Info Clignotement
  Def_api : BOOL;	//PLC Card Failure / Defaut Carte
  S_vieapi : WORD;	//PLC Heart beat Word / Mot de Vie API
  Vdefi : BOOL;	//Facility Fault Lamp / Voyant Defaut Ilot
  Vafj : BOOL;	//End of production Stop Lamp / Voyant Arret Fin Journee
  Df_ilot : BOOL;	//Facility Fault / Defaut Ilot
  Ala : BOOL;	//Facility Alarm / Alerte ilot
  Diag : STRUCT	//HMI Diagnostic / Diagnostic IHMP
    Def : BOOL;	//IHMP Fault / Defaut pour IHMP
    Ala : BOOL;	//IHMP Alarm / Alerte pour IHMP
    Numliste : INT;	//List number / Numero de liste
    Codedef : INT;	//Fault Code / Code defaut
    Ihmvafj : BOOL;	//IHMP End of Production stop Lamp / Voyant Arret Fin Journee pour IHMP
    IhmDf_ilot : BOOL;	//IHMP Facility Fault / Defaut Ilot pour IHMP
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Lien_ilo : LIEN_ILOT;
END_VAR
VAR
  TPIr : TP;
  TPIadf : TP;
  Defcarte : BOOL;	//PLC Card Failure / Defaut Cartes API
END_VAR
VAR_TEMP
  Ba1i : BOOL;	//Forced to 1 Bit / Bit toujours a 1
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Forcing to 1 usefull information for BF
//*ODIL_ID:2004_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =RAZ DES MOTS FONCTION SUR REMISE EN "RUN" DE L'AUTOMATE
//Gestion dans l'OB1 "Sysfroid"
//
//Reset of linking word when PLC is run
//Management is made in OB1 "Sysfroid"
//*ODIL_ID:2004_2*
//

NETWORK
TITLE =DEFAUT API : DEFAUT CARTES RACK AUTOMATES
//PLC FAILURE: PLC RACK COMPONENT FAULT
//*ODIL_ID:2004_3*
//
U #Idcarte;
UN #Lien_ilo.DMAITRE;
S #Defcarte;
UN #Idcarte;
U #Iadf;
R #Defcarte;
NOP 0;
NETWORK
TITLE =VOYANT DEFAUT API : DEFAUT CARTES RACK AUTOMATES
//PLC FAULT LAMP: PLC RACK COMPONENT FAULT
//*ODIL_ID:2004_4*
//
U #Defcarte;
= #Def_api;
NETWORK
TITLE =SUIVI: CONTROLE MOT DE VIE AUTOMATE
//CHECK OF PLC HEART BEAT WORD
//*ODIL_ID:2004_5*
//
L #S_vieapi;
L 1;
+I;
T #S_vieapi;
NOP 0;
NETWORK
TITLE =SUIVI: CONTROLE MOT DE VIE AUTOMATE
//CHECK OF PLC HEART BEAT WORD
//*ODIL_ID:2004_6*
//
U(;
L #S_vieapi;
L 32767;
>=I;
);
SPBNB _001;
L 0;
T #S_vieapi;
_001: NOP 0;
NETWORK
TITLE =INFO CLIGNOTEMENT
//Propriete CPU Octect memento de cadence 1
//
//CLOCK MEMORY INFORMATION
//Using PLC clock memory 1
//*ODIL_ID:2004_7*
//
U #ICL_S;
= #Lien_ilo.ICL;
= #Icl;
NETWORK
TITLE =INFO TEST LAMPES ILOT
//FACILITY LAMP TEST INFORMATION
//*ODIL_ID:2004_8*
//
O #Btl;
O #Pilot.Ihmtl;
= #Lien_ilo.ITLG;
= #Itlg;
NETWORK
TITLE =INFO REARMEMENT ILOT (Tempo de 3s)
//Le passage a 1 de la sortie est effectif pour 3 s des l'appui sur le bouton et
//meme si celui-ci est relache
//
//FACILITY CONTROL ON INFORMATION (temporised to 3sec)
//Output is set to 1 for 3 second as soon as button is pressed and evenif it's
//released
//*ODIL_ID:2004_9*
//
U #Bri;
= L 1.0;
BLD 103;
CALL #TPIr (
IN := L 1.0,
PT := T#3S,
Q := #Ir);
NOP 0;
NETWORK
TITLE =INFO REARMEMENT ILOT (Tempo de 3s)
//FACILITY CONTROL ON INFORMATION (temporised to 3sec)
//*ODIL_ID:2004_10*
//
U #Ir;
= #Lien_ilo.IR;
NETWORK
TITLE =INFO ANNULATION DEFAUTS (Creneau de 1s)
//Le passage a 1 de la sortie est effectif pour 1 s des l'appui sur le bouton et
//meme si celui-ci est relache
//
//FAULT RESET INFORMATION (For 1s)
//Output is set to 1 for 3 second as soon as button is pressed and evenif it's
//released
//*ODIL_ID:2004_11*
//
U(;
O #Badi;
O #Pilot.Ihmadf;
);
= L 1.0;
BLD 103;
CALL #TPIadf (
IN := L 1.0,
PT := T#1S,
Q := #Iadf);
NOP 0;
NETWORK
TITLE =INFO ANNULATION DEFAUTS (Creneau de 1s)
//FAULT RESET INFORMATION (For 1s)
//*ODIL_ID:2004_12*
//
U #Iadf;
= #Lien_ilo.IADF;
NETWORK
TITLE =ARRET FIN JOURNEE
//END OF PRODUCTION STOP
//*ODIL_ID:2004_13*
//
U(;
O #Bafj;
O #Mafj;
O #Pilot.Ihmafj;
);
UN #Ir;
= #Lien_ilo.MAFJ;
= #Mafj;
NETWORK
TITLE =VOYANT ARRET FIN JOURNEE
//END OF PRODUCTION STOP LAMP
//*ODIL_ID:2004_14*
//
O #Mafj;
O #Itlg;
= #Vafj;
= #Diag.Ihmvafj;
NETWORK
TITLE =DEFAUT ILOT
//FACILITY FAULT
//*ODIL_ID:2004_15*
//
O #Def_api;
O #Inf_def;
O #Pilot.Ihmdef;
= #Df_ilot;
= #Diag.IhmDf_ilot;
NETWORK
TITLE =VOYANT DEFAUT ILOT
//FACILITY FAULT LAMP
//*ODIL_ID:2004_16*
//
U #Df_ilot;
U #Icl;
O #Itlg;
= #Vdefi;
NETWORK
TITLE =Raz Ala et Def
//Alarm and fault Reset
//*ODIL_ID:2004_17*
//
U #Ba1i;
R #Diag.Ala;
R #Ala;
R #Diag.Def;
NETWORK
TITLE =Numliste
//List Number
//*ODIL_ID:2004_18*
//
L 0;
T #Diag.Numliste;
NOP 0;
NETWORK
TITLE =RAZ Codedef
//Fault code Reset
//*ODIL_ID:2004_19*
//
UN #Diag.Def;
UN #Diag.Ala;
SPBNB _002;
L 0;
T #Diag.Codedef;
_002: NOP 0;
NETWORK
TITLE =Defaut pour IHMP
//IHMP Faults
//*ODIL_ID:2004_20*
//
U #Df_ilot;
= L 1.0;
U L 1.0;
BLD 102;
= #Diag.Def;
U L 1.0;
SPBNB _003;
L 1;
T #Diag.Codedef;
_003: NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MMC"
TITLE =BF_MMC
//********************************************************************************
//*                                BF MMC                                        *
//*                                                                              *
//*         PERMET LA SAUVEGARDE MANUELLE DES ETATS DES INFO PIECES              *
//*                 AINSI QUE LA RESTITUTION DES ETATS                           *
//*                                                                              *
//*      USED FOR MANUAL BACK-UP COPY OF PART DATA AS WELL AS RESTORATION        *
//********************************************************************************
//( In English further below)
//DESCRIPTION:
//************
//LE FB MMC ASSURE:
//-LA SAUVEGARDE MANUELLE DES ETATS DE DB VERS DES DB SUR LA MMC
//-LA RESTITUTION MANUELLE DES ETATS DE DB MMC VERS DES DB AUTOMATE
//
//CETTE SAUVEGARDE ou RESTITUTION EST UNIQUEMENT POSSIBLE QUAND MODE MANUEL SUR
//L'INSTALATION
//
//MISE EN OEUVRE
//***************
//- La sauvegarde des donnees dans la MMC est assuree par Le DB2000 "DB_MMC" qui
//  doit etre cree avec l'attribut UNLINKED.
//- Il est conseille d'utilliser la meme structure entre le DB_MMC et le ou les
//  DBs a sauvegarder pour facilite la lecture dans le DB2000
//- Pour garantir la coherence des donnees, vous ne devez pas modifier la zone
//  source durant l'execution du bloc.
//  Pour cela l'entree Manu de la BF doit recevoir l'information de toutes les
//  zones de l'ilot en Manuel (somme des ZxG.manu issue des BF_zone_modes_IHM).
//- L'entree Iadf recevoir l'image de l'annulation des defaut sur l'ilot
//  ( IG.iadf issue de la BF_ILOT)
//- l'activation de l'entree Pilot.IhmDde_Trf lance une ecriture sur la MMC
//(Pilot.IhmSens=1) ou une lecture de la MMC (Pilot.IhmSens=0). Il faut au
//prealable renseigner les autres informations de l'entree Pilot (voir
//documentation de la BF_MMC sur modification du script sous Wincc.)
//- La mise en oeuvre de la BF est associe a des ecrans Wincc
//
//CODES de defaut :
//****************
//1) Diag .codedef :
//1 = Defaut de la fonction sauvegarde (API --> MMC)
//2 = Defaut de restitution (MMC --> API)
//
//2) Diag.Ihmerreur: N° de defaut ou d'etat en hexa des fonctions SFC83 ou 84
//(Lecture ecriture)
//
//a) information d'etat :
//0000 = Pas d'erreur
//0081 = La zone cible est plus grande que la zone source. La zone source est
//       inscrite entierement dans la zone cible, les octets restants de la zone
//
//     cible n'etant pas modifies.
//7000 = Premier appel avec REQ=0 : pas de transmission de donnees active ; BUSY
//       a la valeur 0.
//7001 = Premier appel avec REQ=1 : la transmission de donnees a ete lancee ;
//      BUSY a la valeur 1.
//7002 = Appel intermediaire (REQ insignifiant) : la transmission de donnees est
//       deja active ; BUSY a la valeur 1.
//
//b) information de defaut
//8081 = La zone source est plus grande que la zone cible. La zone cible est
//     entierement ecrasee, les octets restants de la zone source etant ignores.
//8093 = Aucun bloc de donnees ou un bloc de donnees ne se trouvant pas dans la
//      memoire de travail est indique au parametre DSTBLK.
//80B1 = Aucun bloc de donnees n'est indique au parametre SRCBLK, ou le bloc de
//      donnees qui y est indique n'est pas un objet de la memoire de chargement
//      (p. ex.un DB cree par la SFC 22).
//80B4 = Il n'est pas permis de lire un DB a attribut F.
//80C0 = Le DB cible est en cours de traitement par une autre SFC ou une fonction
//       de communication.
//80C3 = Le nombre maximum de SFC 83 simultanement actives est momentanement deja
//       atteint.
//
//c) Informations d'erreur generales
//8x7F = Erreur interne Ce code d'erreur signale une erreur interne au niveau du
//       parametre x.
//8x01 = Identificateur de syntaxe illicite pour un parametre ANY
//8x22 = Erreur de longueur de zone a la lecture d'un parametre
//8x23 = Erreur de longueur de zone a l'ecriture d'un parametre
//      Ce code d'erreur signale que le parametre x est entierement ou
//       partiellement situe hors de la zone d'operandes ou que la longueur d'un
//
//     champ de bits n'est pas divisible par 8 dans un parametre ANY.
//8x24 = Erreur de zone a la lecture d'un parametre
//8x25 = Erreur de zone a l'ecriture d'un parametre
//      Ce code d'erreur signale que le parametre x est situe dans une zone
//      illicite pour cette fonction systeme. La description de chaque fonction
//
//   precise les zones illicites pour cette fonction.
//8x26 = Le parametre contient un numero de cellule de temporisation trop
//      grand.Ce code d'erreur signale que la cellule de temporisation precisee
//
//   dans le parametre x n'existe pas.
//8x27 = Le parametre contient un numero de cellule de comptage trop grand
//       (numero de compteur errone).Ce code d'erreur signale que la cellule de
//
//     comptage precisee dans le parametre x n'existe pas.
//8x28 = Erreur d'alignement a la lecture d'un parametre
//8x29 = Erreur d'alignement a l'ecriture d'un parametre
//      Ce code d'erreur signale que la reference au parametre x est un operande
//      dont l'adresse de bit n'est pas 0.
//8x30 = Le parametre se trouve dans le bloc de donnees global protege en
//       ecriture.
//8x31 = Le parametre se trouve dans le bloc de donnees d'instance protege en
//       ecriture.Ce code d'erreur signale que le parametre x se trouve dans un
//
//    bloc de donnees protege en ecriture. Si ce bloc de donnees a ete ouvert
//
// par la fonction systeme elle-meme, elle sort toujours la valeur W#16#8x30.
//8x32 = Le parametre contient un numero de DB trop grand (numero de DB errone).
//8x34 = Le parametre contient un numero de FC trop grand (numero de FC errone).
//8x35 = Le parametre contient un numero de FB trop grand (numero de FB errone).
//      Ce code d'erreur signale que le parametre x contient un numero de bloc
//       superieur au plus grand numero admis.
//8x3A = Le parametre contient le numero d'un DB qui n'est pas charge.
//8x3C = Le parametre contient le numero d'une FC qui n'est pas chargee.
//8x3E = Le parametre contient le numero d'un FB qui n'est pas charge.
//8x42 = Erreur d'acces lors d'une tentative de lecture d'un parametre dans la
//       zone de peripherie des entrees
//8x43 = Erreur d'acces lors d'une tentative d'ecriture d'un parametre dans la
//       zone de peripherie des sorties
//8x44 = Erreur lors du n-ieme (n > 1) acces en lecture apres l'apparition d'une
//       erreur
//8x45 = Erreur lors du n-ieme (n > 1) acces en ecriture apres l'apparition d'une
//       erreur ce code d'erreur signale que l'acces au parametre souhaite est
//refuse.
//
//************************** ENGLISH INFORMATION  ****************************
//DESCRIPTION :
//*************
// THE FB MMC ENSURES:
//- THE MANUAL BACK-UP COPY OF THE STATES OF PLC DB TOWARDS MMC DB
//- The MANUAL RESTORATION OF THE STATES OF MMC DB TOWARDS PLC DB
//
//THIS BACK-UP COPY or RESTORATION IS ONLY POSSIBLE IF THE INSTALATION IS IN
//MANUAL MODE
//
//OPERATING :
//***********
//- The back-up copy of the data in the MMC is ensured by The DB2000 "DB_MMC".
//  This DB must be created with the attribute UNLINKED (For more details see BF
//  documentation).
//- To make easier data reading in the DB 2000 we recommend using the same
//structure (format) as the one of the DB or DBs to be backed up.
//- To guarantee the coherence of the data, you can not modify source data during
//  the execution of this block.
//  That's why, Manu input of BF must receive all Manual Mode informations of the
//  facility (sum of the ZxG.manu coming from BF_zone_modes_IHM).
//- The Iadf input receive the image of Facility Fault reset (IG.iadf coming from
//  the BF_ILOT)
//- The activation of Pilot.IhmDde_Trf input launches a back-up copy on the MMC
//(with Pilot.IhmSens=1) or a PLC restoration from the MMC (With Pilot.
//IhmSens=0). (this activation comes from MMC Wincc screen)
//It is beforehand necessary to fill the other information of Pilot input
//(For more information see The BF_MMC documentation in Wincc script chapter)
//- the implementation of the BF is associated to MMC Wincc screen.
//
//FAULT CODES :
//*************
//1) Diag .codedef : ( For HMI)
//1 = Back-up copy Fault (PLC -(to)-> MMC)
//2 = Restoration Fault  (MMC -(to)-> PLC)
//
//2) Diag.Ihmerreur: Fault or Status values of SFC83 or 84 in Hexadecimal
//(Reading or writing function )
//
//a) Status information :
//0000 = No error
//0081 = The target zone is larger than the source zone. The source zone is
//       entirely written in the target zone, the remaining bytes in the target
//       zone are not modified.
//7000 = First call with REQ=0: data transmission not activated: BUSY is set to
//
//       the value 0.
//7001 = First call with REQ=1: data transmission has been started: BUSY is set
//to
//       the value 1.
//7002 = Intermediate call (REQ not significant): data transmission is already
//       activated: BUSY is set to the value 1.
//
//b) Fault informations :
//8081 = The source zone is larger than the target zone. The target zone is
//     completely overwritten, the remaining bytes in the source zone are ignored.
//8093 =  There is no Data Block or a Data Block that is not in the work buffer
//is
//        indicated in the DSTBLK setting.
//80B1 = There is no Data Block indicated in the SRCBLK setting, or the Data
//Block
//       that is indicated in SRCBLK is not an object in the loading buffer
//       (e.g. a DB created by the SFC 22).
//80B4 = It is forbidden to read a DB with the F attribute.
//80C0 = The target DB is being processed by another SFC or by a communication
//       function.
//80C3 = The maximum number of SFC 83 active at the same time has been reached at
//       the present time.
//
//C) General Fault informations
//   X represents the Setting No. in the SFC 83 or 84 function
//8x7F = Internal error. This error code signals an internal error for setting x.
//8x01 = Illicit syntax identifier for an Any setting
//8x22 = Zone length error on a setting read
//8x23 = Zone length error on a setting write. This error code means that the
//
//      setting x is completely or partly located outside the operand zone or
//
//     that the length of a field of bits is not divisible by 8 in an Any setting.
//8x24 = Zone error on a setting read
//8x25 = Zone error on a setting write. This error code means that the setting x
//
//     is located in an illicit zone for this system function. The description
//
//   of each function specifies the illicit zones for the function.
//8x26 = The setting contains a timeout cell number that is too large. This error
//
//    code means that the timeout cell specified in setting x does not exist.
//8x27 = The setting contains a counting cell number that is too large (incorrect
//
//      counter number). This error code means that the counting cell specified
//
//    in setting x does not exist.
//8x28 = Alignment error on a setting read
//8x29 = Alignment error on a setting write. This error code means that the
//       reference to setting x is an operand whose bit address is not 0.
//8x30 = The setting is located in the write-protected global data block.
//8x31 = The setting is located in the write-protected instance data block. This
//       error code means that the setting x is located in a write-protected data
//
//      block. If this data block was opened by the system function itself it
//       always has the value W#16#8x30.
//8x32 = The setting contains a DB number that is too large (incorrect DB number).
//8x34 = The setting contains an FC number that is too large
//       (incorrect FC number).
//8x35 = The setting contains an FB number that is too large
//     (incorrect FB number). This error code means that the setting x contains a
//      block number greater than the largest permitted number.
//8x3A = The setting contains the number of a DB that is not loaded.
//8x3C = The setting contains the number of an FC that is not loaded.
//8x3A = The setting contains the number of an FB that is not loaded.
//8x42 = Access error when trying to read a setting in the input peripheral zone
//8x43 = Access error when trying to write a setting in the output peripheral zone
//8x44 = Error during the nth (n > 1) read access after an error occurs
//8x45 = Error during the nth (n > 1) write access after an error occurs. This
//       error code means that the access to the desired setting is refused.
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 19
//Dernier ID mis en oeuvre / Last ID implemented : 2000_19
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'MMC'
VERSION : 2.1
VAR_INPUT
  Iadf : BOOL;	//Fault reset / Acquitement defaut
  Mmanu : BOOL;	//Manual mode (facility) / Mode manuel (ilot)
  Pilot : STRUCT	//IHMP control structure / Structure de pilotage IHMP
    IhmDde_trf : BOOL;	//Transfer request / Demande de transfert
    IhmSens : BOOL;	//1: PLC->MMC;  0: MMC->PLC
    IhmPLC_DB_No : INT;	//PLC DB Number / Numero DB automate
    IhmPLC_word : INT;	//1st word number of PLC DB / Num 1er word du DB automate
    IhmMMC_DB_No : INT;	//DB number memory card (MMC) / Num DB carte memoire
    IhmMMC_word : INT;	//1st word number of MMC DB /Num 1er word du DB carte memoire
    IhmLong_word : INT;	//Number of word to be transfered /Nombre de word a transferer
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Def_Sauv : BOOL;	//Fault while saving data (SMPLOC) / Defaut sauvegarde de donnees pour SMPLOC
  Def_Rest : BOOL;	//Fault while restoring data (SMPLOC) / Defaut restitution de donnees pour SMPLOC
  Defaut : BOOL;	//Generic SMPLOC fault / Defaut SMPLOC
  Diag : STRUCT	//Diagnostic structure for IHMP / Structure diagnostique pour IHMP
    Def : BOOL;	//Fault (HMI) / Defaut (IHM)
    Ala : BOOL;	//Alarm (HMI) / Alarme (IHM)
    Numliste : INT;	//List number for IHMP / Numero de liste pour IHMP
    Codedef : INT;	//HMI Fault code /Code de defaut IHM
    Ihmerreur : INT;	//SFC83 or 84 fault code / code de defaut SFC83 ou 84
    Ihmcontrat_OK : BOOL;	//Transfer finished with no fault / Transfert termine sans defaut
    Ihmdef_sauv : BOOL;	//Fault while saving data / Defaut sauvegarde de donnees
    Ihmdef_rest : BOOL;	//Fault while restoring data / Defaut restitution de donnees
    Ihmvdmanu : BOOL;	//Manual mode asked /Mode de marche manu demande
  END_STRUCT ;
END_VAR
VAR
  Req_Ecr : BOOL;
  Req_Lec : BOOL;
  Busy_Ecr : BOOL;
  Busy_Lec : BOOL;
  En_cours_Ecr : BOOL;
  En_cours_Lec : BOOL;
  Def_Ecr : BOOL;
  Def_Lec : BOOL;
  Code_Ecr : INT;
  Code_Lec : INT;
  Code_W_Ecr : WORD;
  Code_W_Lec : WORD;
END_VAR
VAR_TEMP
  PLC_any : ANY;
  MMC_any : ANY;
  Code_Ret_Val : INT;
  Ba1i : BOOL;	//Bit toujours a 1
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//*ODIL_ID:2000_1*
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Mise en forme pointeur PLC
//*ODIL_ID:2000_2*
LAR1 P##PLC_any; //Chargement AR1 sur pointer
L DW#16#10040000;
L #Pilot.IhmLong_word;
OD;
T D [AR1,P#0.0]; //recuperation du nombre de word du DB "PLC"
L #Pilot.IhmPLC_DB_No;
T W [AR1,P#4.0]; //recuperation du numero de DB
L DW#16#84000000;
L #Pilot.IhmPLC_word;
SLD 3;
OD;
T D [AR1,P#6.0]; //recuperation des donnees a tranferer
NETWORK
TITLE =Mise en forme pointeur MMC
//*ODIL_ID:2000_3*
LAR1 P##MMC_any; //Chargement AR1 sur pointer
L DW#16#10040000;
L #Pilot.IhmLong_word;
OD;
T D [AR1,P#0.0]; //recuperation du nombre de word du DB "MMC"
L #Pilot.IhmMMC_DB_No;
T W [AR1,P#4.0]; //recuperation du numero de DB
L DW#16#84000000;
L #Pilot.IhmMMC_word;
SLD 3;
OD;
T D [AR1,P#6.0]; //recuperation des donnees a tranferer
NETWORK
TITLE =Activation demandes de transfert
//*ODIL_ID:2000_4*
U #Pilot.IhmDde_trf;
UN #Busy_Ecr;
UN #Busy_Lec;
UN #Diag.Ihmcontrat_OK;
UN #Defaut;
= L 23.0;
U L 23.0;
U #Pilot.IhmSens;
S #Req_Ecr;
U L 23.0;
UN #Pilot.IhmSens;
S #Req_Lec;
NETWORK
TITLE =Sauvegarde de PLC vers MMC
//*ODIL_ID:2000_5*
U #Req_Ecr;
= L 23.0;
BLD 103;
UN #Defaut;
SPBNB _001;
CALL "WRIT_DBL" (
REQ := L 23.0,
SRCBLK := #PLC_any,
RET_VAL := #Code_Ecr,
BUSY := #Busy_Ecr,
DSTBLK := #MMC_any);
_001: NOP 0;
NETWORK
TITLE =Restauration de MMC vers PLC
//*ODIL_ID:2000_6*
U #Req_Lec;
= L 23.0;
BLD 103;
UN #Defaut;
U #Mmanu;
SPBNB _002;
CALL "READ_DBL" (
REQ := L 23.0,
SRCBLK := #MMC_any,
RET_VAL := #Code_Lec,
BUSY := #Busy_Lec,
DSTBLK := #PLC_any);
_002: NOP 0;
NETWORK
TITLE =Conversion codes de defaut de Hex en Dec
//*ODIL_ID:2000_7*
U #Pilot.IhmSens;
= L 23.0;
U L 23.0;
SPBNB _003;
L #Code_Ecr;
T #Code_W_Ecr;
_003: NOP 0;
U L 23.0;
SPBNB _004;
L #Code_Ecr;
T #Diag.Ihmerreur;
_004: NOP 0;
NETWORK
TITLE =Conversion codes de defaut de Hex en Dec
//*ODIL_ID:2000_8*
UN #Pilot.IhmSens;
= L 23.0;
U L 23.0;
SPBNB _005;
L #Code_Lec;
T #Code_W_Lec;
_005: NOP 0;
U L 23.0;
SPBNB _006;
L #Code_Lec;
T #Diag.Ihmerreur;
_006: NOP 0;
NETWORK
TITLE =Raz Demande d'ecriture
//*ODIL_ID:2000_9*
U #Req_Ecr;
= L 23.0;
U L 23.0;
U(;
L #Code_W_Ecr;
L W#16#7001;
==D;
);
= #En_cours_Ecr;
U L 23.0;
U(;
L #Code_W_Ecr;
L W#16#0;
<>D;
);
U(;
L #Code_W_Ecr;
L W#16#7000;
<>D;
);
U(;
L #Code_W_Ecr;
L W#16#7001;
<>D;
);
U(;
L #Code_W_Ecr;
L W#16#7002;
<>D;
);
= #Def_Ecr;
R #Req_Ecr;
U L 23.0;
U(;
L #Code_W_Ecr;
L W#16#7002;
==D;
);
= L 23.1;
U L 23.1;
BLD 102;
R #Req_Ecr;
U L 23.1;
UN #Def_Ecr;
S #Diag.Ihmcontrat_OK;
NETWORK
TITLE =Raz Demande de lecture
//*ODIL_ID:2000_10*
U #Req_Lec;
= L 23.0;
U L 23.0;
U(;
L #Code_W_Lec;
L W#16#7001;
==D;
);
= #En_cours_Lec;
U L 23.0;
U(;
U(;
L #Code_W_Lec;
L W#16#0;
<>D;
);
U(;
L #Code_W_Lec;
L W#16#7000;
<>D;
);
U(;
L #Code_W_Lec;
L W#16#7001;
<>D;
);
U(;
L #Code_W_Lec;
L W#16#7002;
<>D;
);
ON #Mmanu;
);
= #Def_Lec;
R #Req_Lec;
U L 23.0;
U(;
L #Code_W_Lec;
L W#16#7002;
==D;
);
= L 23.1;
U L 23.1;
BLD 102;
R #Req_Lec;
U L 23.1;
UN #Def_Lec;
S #Diag.Ihmcontrat_OK;
NETWORK
TITLE =Raz infos complementaires
//*ODIL_ID:2000_11*
UN #Pilot.IhmDde_trf;
R #Diag.Ihmcontrat_OK;
R #Req_Ecr;
R #Req_Lec;
NETWORK
TITLE =Ecriture Numliste
//*ODIL_ID:2000_12*
L 0;
T #Diag.Numliste;
NOP 0;
NETWORK
TITLE =Ecriture Def
//*ODIL_ID:2000_13*
U(;
O #Def_Ecr;
O #Def_Lec;
);
S #Defaut;
U #Iadf;
R #Defaut;
NOP 0;
NETWORK
TITLE =DEFAUT IHMP ET RAZ DE OK TRANSFERT
//DEFAUT IHMP ET RAZ DE OK TRANSFERT
//*ODIL_ID:2000_14*
//
U #Defaut;
R #Diag.Ihmcontrat_OK;
= #Diag.Def;
NETWORK
TITLE =Ecritures sorties SMPLOC
//*ODIL_ID:2000_15*
U #Defaut;
= L 23.0;
U L 23.0;
U #Pilot.IhmSens;
= #Def_Sauv;
= #Diag.Ihmdef_sauv;
U L 23.0;
UN #Pilot.IhmSens;
= #Def_Rest;
= #Diag.Ihmdef_rest;
NETWORK
TITLE =Raz code defaut
//*ODIL_ID:2000_16*
UN #Defaut;
SPBNB _007;
L 0;
T #Diag.Codedef;
_007: NOP 0;
NETWORK
TITLE =Defaut ecriture
//*ODIL_ID:2000_17*
U #Pilot.IhmSens;
U #Def_Ecr;
SPBNB _008;
L 1;
T #Diag.Codedef;
_008: NOP 0;
NETWORK
TITLE =Defaut restitution
//*ODIL_ID:2000_18*
UN #Pilot.IhmSens;
U #Def_Lec;
SPBNB _009;
L 2;
T #Diag.Codedef;
_009: NOP 0;
NETWORK
TITLE =demande de passage en Manuel pour Transfert
//demande de passage en Manuel pour Transfert
//*ODIL_ID:2000_19*
//
U #Pilot.IhmDde_trf;
UN #Busy_Ecr;
UN #Busy_Lec;
UN #Diag.Ihmcontrat_OK;
UN #Pilot.IhmSens;
UN #Mmanu;
O;
U #Diag.Ihmvdmanu;
UN #Iadf;
= #Diag.Ihmvdmanu;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MODBUS_MASTER_CP340"
TITLE =BF_MODBUS_MASTER_CP340
//-------------------------------------------------------------------------------
//-                      BF_MODBUS MASTER CP340                                 -
//-             Modbus (JBus) Maitre sur CP 340 (liaison serie)                 -
//-                  Modbus (JBus) Master with CP 340 (serial)                  -
//-------------------------------------------------------------------------------
//(In English Further below)
//
//Description:
//------------
//Ce Bloc Fonctionnel gere la communication Modbus (= JBUS) Maitre sur liaison
//serie (Modbus RTU).
//Il prend en charge les fonctions
//   - 03: Read Multiple Registers
//   - 16: Write Multiple Registers
//a l'exclusion de toute autre fonction.
//
//Pre requis:
//----------
//1 coupleur Serie CP 340 dument parametre dans HW Config (parametres de
//communication: vitesse, parite,...)
//(Pour plus de details voir la documentation de la BF)
//
//Le parametrage des coupleurs de communication CP340 necessite l'installation
//d'un
//logiciel de configuration additionnel (Add On). "CP PtP Param"
//
//Au cas ou il ne serait pas deja installe, ce logiciel est telechargeable depuis:
//http://support.automation.siemens.com/WW/view/fr/27013524
//
//Dependances:
//-----------
//   Ce bloc utilise:
//     - FB1699 "P_RCV" (FB 2 de la bibliotheque "CP PtP")
//     - FB1698 "P_SEND" (FB 3 de la bibliotheque "CP PtP")
//
//Mise en oeuvre :
//----------------
//LA BF doit etre mise en oeuvre dans le FB4 "COM" du programme.
// 1 Dialogue (Lecture ou ecriture) = 1 BF
//Interverrouiller la validation de ces BF, afin de sequencer les echanges.
// lancer l'echange que lorsque le precedent est termine. ( Entree Valid / Sortie
//OK et En_cours)
//
//1) CPAddress = valeur de l'adresse d'entree du CP340 sous Hwconfig
//      Selectionner le coupleur ->Propriete -> General -> Adresses
//
//2) Registre_ debut : Adresse en mot du premier mot de la zone de registre Modbus
//                    Lue ou ecrite dans le destinataire ( %MW ou DB declare /
//BF_Modbus slave)
//
//3) NBmots : Longeur de la zone (Maxi 120 mots / Trame)
//
//4) Num_esclave : = N° d'esclave Modbus affecter au destinataire ( Voir slave_ID
//sur BF_Modbus slave)
//
//5) Mode : 1 = Lecture, 2 = ecriture
//
//6) Bloc_Zech : Pointeur de la zone Memoire API
//          ( Valeur des info lue ou a ecrire)
//               taille = ou > a Nbmots
//               Syntaxe : P#DByy.DBXzzz.0 WORD www
//               Avec :- yy =  N° du DB global
//                  De base les DB globaux 89 a 80 sont reserves dans la
//structure
//                    Programme 1 carte = 1 DB
//                    Nom synbolique du DB = COM<N° de la carte dans le rack>
//                     - zzz = Adresse de debut dans le DB en OCTET
//                     - www = Nombre de Mots a partir de l'adresse de debut
//Defauts:
//--------
//Ihmlist =1 hexa    Parametres en INPUT incorrects
//    CodeDef =1  Parametre "Mode" incorrect
//    AddInf      Valeur de "Mode" renseigne en Entree
//    -----------------------------------------------------
//    CodeDef =2  Bloc_Zech - Parametre "Type" incorrect
//    AddInf      Parametre TYPE lu dans "Bloc_Zech"
//    -----------------------------------------------------
//    CodeDef =3  Taille de "Bloc_Zech" inferieur au  Parametre "NBmots" en INPUT
//     AddInf      =0
//    -----------------------------------------------------
//    CodeDef =4  Erreur d'accessibilite a "Bloc_Zech"
//    AddInf      Code de retour de la fonction "TEST_DB"
//    -----------------------------------------------------
//    CodeDef =5  Parametre "Nbmots" incorrect (Min=1; Max 120)
//    AddInf      Valeur de "Nbmots" renseigne en Entree
//    -----------------------------------------------------
//
//Ihmlist =2 hexa    Defauts SFB et SFC (ex: BlkMove)
//    CodeDef =1  Retour d'erreur de BLKMOV de requete
//    AddInf      Code de retour de la fonction "BLKMOV"
//    -----------------------------------------------------
//    CodeDef =2  Retour d'erreur de BLKMOV de reponse
//    AddInf      Code de retour de la fonction "BLKMOV"
//    -----------------------------------------------------
//
//Ihmlist =4 hexa    Defaut en sortie FB_SND
//    CodeDef =1  FB_SND termine en erreur
//    AddInf      Code de retour de la fonction "FB_SND"
//    -----------------------------------------------------
//    CodeDef =2  FB_SND termine en TIMEOUT
//    AddInf      Code de retour de la fonction "FB_SND"
//    -----------------------------------------------------
//
//Ihmlist =8 hexa    Defaut en sortie FB_RCV
//    CodeDef =1  FB_RCV termine en erreur
//    AddInf      Code de retour de la fonction "FB_RCV"
//    -----------------------------------------------------
//    CodeDef =2  FB_RCV termine en TIMEOUT
//    AddInf      Code de retour de la fonction "FB_RCV"
//    -----------------------------------------------------
//
//Ihmlist =16 hexa  Contenu de la reponse Modbus
//    CodeDef =1   Erreur - Discordance CRC
//    AddInf       =0
//    -----------------------------------------------------
//    CodeDef =2   Trame recue inferieur a 5 octets
//    AddInf       Longueur de la trame recu en sortie de FB_RCV
//    -----------------------------------------------------
//    CodeDef =3   Longueur trame recue NOK
//    AddInf       Longueur de la trame recu en sortie de FB_RCV
//    -----------------------------------------------------
//    CodeDef =6   Champ "Function code" NOK
//    AddInf       Valeur du champ Function code lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =7   Champ "Byte Count" NOK - mode Lecture
//    AddInf       Valeur du champ Byte Count lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =8   Champ "Starting address" NOK - mode ecriture
//    AddInf       Valeur du champ Starting address lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =9   Champ "Quantity of registers" NOK - mode ecriture
//    AddInf       Valeur du champ Quantity of registers lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =11 (0B Hex)   Reponse d'exception Modbus
//    AddInf                 Code d'exception Modbus
//    -----------------------------------------------------
//
//
//
//******************** ENGLISH INFORMATION *************************************
//Description:
//------------
//This Bloc processes the Modbus (JBus) Master communication (Over serial line)
//Modbus Functions accepted:
//   - 03: Read Multiple Registers
//   - 16: Write Multiple Registers
//No other function supported
//
//
//Prerequisite:
//----------
//A CP 340 correctly setup (Address, protocol,communication speed, ...)must be in
//place in the hardware configuration
//
//(For more details see the BF documentation)
//
//The CP340 parameterizing necessitate a Add on software : "CP Ptp Param"
//
//If this sowtare isn't on your PG you can install it from :
//http://support.automation.siemens.com/WW/view/fr/27013524
//
//Dependence:
//-----------
//   This bloc uses:
//      - FB 1698 "P_RCV"   (FB 2 from the library "CP PtP" CP340)
//      - FB 1699 "P_SEND"  (FB 3 from the library "CP PtP" CP340)
//
//Operating :
//-----------
//The BF must be implemented in the FB4 "Com" of the PLC program.
//1 discussion ( Reading or writing) = 1 block BF
//interlock the block validation for sequence the exchange.
//Start the exchange only if preceding exchange is terminated.
//( "Valid" Input / "OK" and "En_cours" output)
//
//1) CPAddress = entry address value of CP340 under Hwconfig
// Select the coupler - > object Properties - > General - > addresses
//
//2) Registre_debut : Adress in Word of the first word of Modbus aera registry
//         read or write in the receiver ( %MW or DB declared/ BF_Modbus slave)
//
//3) NBmots : aera length ( 120 Word by frame maxi)
//
//4) Num_esclave : = Slave Number of the receiver
//        (See input slave_Id on BF_modbus slave)
//
//5) Mode = 1 readind, 2 = writing
//
//6) Bloc_Zech :  PLC memory area pointer ( values of data read or to written)
//   lenght = or > to Nbmots
//   code syntax : P#DByy.DBXzzz.0 WORD www
//   With :  - yy = DB glogal Number
//        basicaly the global DB 89 to 80 are reserved in the Program structure.
//        1 CP340 card  = 1 DB
//        Symbolic nam of DB = COM<N° of the CP340 card in PLC rack>
//          - zzz =  DB sart adress in OCTET
//          - www =  Number of word from start adress.
//
//Faults:
//--------
//Ihmlist =1 hexa    INPUT parameters incorrect
//    CodeDef =1  Parameter "Mode" incorrect
//    AddInf      Value of the "Mode" parameter in INPUT
//    -----------------------------------------------------
//    CodeDef =2  Bloc_Zech - Parameter "Type" incorrect
//    AddInf      Value of Parameter "TYPE"
//    -----------------------------------------------------
//    CodeDef =3  Size of "Bloc_Zech" less than INPUT Parameter "NBmots"
//     AddInf      =0
//    -----------------------------------------------------
//    CodeDef =4  Access error to "Bloc_Zech"
//    AddInf      Error code of "TEST_DB" function
//    -----------------------------------------------------
//    CodeDef =5 Parameter "Nbmots" incorrect (Min=1; Max=120)
//    AddInf     Value of Parameter "Nbmots" in INPUT
//    -----------------------------------------------------
//
//Ihmlist =2 hexa    Error from SFB and SFC (eg: BlkMove)
//    CodeDef =1  Error code of "BLKMOV" during request
//    AddInf      Error code of "BLKMOV" function
//    -----------------------------------------------------
//    CodeDef =2  Error code of "BLKMOV" during response
//    AddInf      Error code of "BLKMOV" function
//    -----------------------------------------------------
//
//Ihmlist =4 hexa    Error of "FB_Send" function
//    CodeDef =1  FB_SEND terminated in error
//    AddInf      Error code of "FB_SEND" function
//    -----------------------------------------------------
//    CodeDef =2  FB_SEND terminated in TIMEOUT
//    AddInf      Error code of "FB_SEND" function
//    -----------------------------------------------------
//
//Ihmlist =8 hexa    Error of "FB_RCV" function
//    CodeDef =1  FB_RCV terminated in error
//    AddInf      Error code of "FB_RCV" function
//    -----------------------------------------------------
//    CodeDef =2  FB_RCV terminated in TIMEOUT
//    AddInf      Error code of "FB_RCV" function
//    -----------------------------------------------------
//
//Ihmlist =16 hexa  Content of Modbus Response
//    CodeDef =1   Error - CRC incorrect
//    AddInf       =0
//    -----------------------------------------------------
//    CodeDef =2   Frame received less than 5 bytes
//    AddInf       Size of the received frame in output of FB_RCV
//    -----------------------------------------------------
//    CodeDef =3   Size of received Frame Incorrect
//    AddInf       Size of the received frame in output of FB_RCV
//    -----------------------------------------------------
//    CodeDef =6   Field "Function code" NOK
//    AddInf       Value of the field "Function code" read in the response
//    -----------------------------------------------------
//    CodeDef =7   Field "Byte Count" NOK - READ mode
//    AddInf       Value of the field "Byte Count" read in the response
//    -----------------------------------------------------
//    CodeDef =8   Field "Starting address" NOK - WRITE mode
//    AddInf       Value of the field "Starting address" read in the response
//    -----------------------------------------------------
//    CodeDef =9   Field "Quantity of registers" NOK - WRITE mode
//    AddInf       Value of the field "Quantity of registers" read in the response
//    -----------------------------------------------------
//    CodeDef =11 (0B Hex)   Exception Modbus response
//    AddInf                 Modbus Exception code
//    -----------------------------------------------------
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 19
//Dernier ID mis en oeuvre / Last ID implemented : 1958_19
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'COM'
NAME : 'JBUS_MS'
VERSION : 2.2
VAR_INPUT
  Valid : BOOL;	//Validation of the dialog (rise edge) /Validation du dialogue sur front montant
  CPAddress : INT;	//CP340 address in HW Config/ Adresse du coupleur CP340 (dans HW Config)
  Registre_debut : INT;	//Starting Modbus address of remote partner/Adresse Modbus de debut du partenaire
  NBmots : INT;	//Number of Modbus registers / Nombre de mots a lire ou ecrire (max=120)
  Num_esclave : INT;	//JBUS slave Number of remote partner / numero de l'esclave Jbus du destinataire
  Mode : INT;	//Using MODE: 1=read; 2=write / Mode d'utilisation. 1= lecture; 2= ecriture
  Bloc_Zech : ANY;	//Data exchanging area / Zone d'echange (ex: P#DB90.DBx100.0 WORD 100)
END_VAR
VAR_OUTPUT
  OK : BOOL;	//END of the exchange is correct / Fin de dialogue CORRECT
  En_cours : BOOL;	//Exchange in progress / Dialogue en Cours
  Def : BOOL;	//END of the exchange in error (see Diag) / Fin de dialogue en Defaut (voir Diag)
  Diag : STRUCT	//Diagnostic structure / Structure de diagnostic
    Def : BOOL;	//Fault / Defaut
    Ala : BOOL;	//Alarm / Alarme
    Numlist : INT;	//Reserved for SMP Fault list Number / Numero de liste defaut SMP
    CodeDef : INT;	//Error code / Code du defaut
    IhmList : INT;	//List number of the fault / Numero de liste du defaut
    AddInf : INT;	//Further Informations / Informations complementaires
    OKCmpt : DINT;	//Counter of correct Modbus dialogs / Compteur de dialogues corrects
    ErrCmpt : DINT;	//Counter of defaults / Compteur d'erreurs
  END_STRUCT ;
END_VAR
VAR
  Tempo_timeout : TON;	//Temporisation de mesure du Timeout
  FB_SND : P_SEND;	//Instance de P_SEND
  FB_RCV : P_RCV;	//Instance de P_RCV
  val_tempo : BOOL;	//Validation de la temporisation de mesure du Timeout
  m_valid : BOOL;	//Memoire de l'INPUT Valid
  Buffer : ARRAY  [0 .. 130 ] OF WORD;
  temps_ecoule : TIME;	//Mesure du Temps ecoule depuis la validation de la BF
  timeout_recv : TIME;
  timeout_send : TIME;
  Mode_lecture : BOOL;	//FB en Mode 1 (Lecture MOdbus)
  Zech_Length : WORD;	//Taille de "Block_Zech" en Nombre d'octets
  Zech_NDB : WORD;	//N° de DB "Block_Zech" (bytes 4-5 du Parametre ANY)
  Zech_adr : DINT;	//Adresse de "Block_Zech" (bytes 6-9 du Parametre ANY)
  Ctr_INPUT_OK : BOOL;	//Etape : controle OK des parametres d'entree
  encours_send : BOOL;	//Etape : en cours d'envoie des donnees
  encours_rcvt : BOOL;	//Etape : en cours de reception des donnees du CP340
  fin_recept : BOOL;	//Etape : Fin de reception des donnees du CP340
  Fin_trt_FB : BOOL;	//Fin de traitement de la BF
END_VAR
VAR_TEMP
  ret_val2 : INT;
  ret_val3 : INT;	//Retour de diag fonction "Test_DB"
  SavAR1 : DINT;	//Backup of the Address register 1
  SavAR2 : DINT;	//Backup of the Address register 2
  BufferAddrDBi : DINT;	//Contient l'adresse ABSOLUE de Buffer dans le DBi
  Nb_DBi : INT;	//N° du DB d'instance
  Indx_Buffer : INT;	//Index de "Buffer" dans le DBi
  Send_length : INT;
  send_done : BOOL;
  send_error : BOOL;
  send_status : WORD;
  recv_ndr : BOOL;	//AG_RECV: nouvelles donnees recues
  recv_error : BOOL;
  recv_status : WORD;
  recv_Len : INT;	//AG_RECV: longueur des donnees recues
  ZechBlk : ANY;	//Parametre ANY correspondant a la zone d'echange (donnees lues ou ecrites)
  ZregMBBlk : ANY;	//Param ANY correspondant a la zone des registres dans la Tram Modbus du "Buffer"
  wp : BOOL;
  LoopCnt : BYTE;	//Index de boucle
  code_fonction : BYTE;	//Valeur du champ "Code Fonction" de la trame recue
END_VAR
BEGIN
NETWORK
TITLE =Sauvegarde AR1 et AR2
//Sauvegarde des registres d'adresse, avant utilisation dans ce FB
//*ODIL_ID:1958_1*
//
TAR1 #SavAR1;
TAR2 #SavAR2;
NETWORK
TITLE =Controles validite des donnees en ENTREE
//Controles effectues avant le lancement du cycle du FB
//
//======
//Rappel sur le format ANY:
//Byte 0: 10hex - Byte 1: Type de donnees
//Byte 2-3: facteur de repetition
//Byte 4-5: N° de DB
//Byte 6-9: Zone memoire et adresse
//
//======
//Rappel sur le contenu d'une trame Modbus RTU
//  ____________________________
// | N°Escl.  |  datas  |CRC16 |
// |__________|_________|______|
//
//Contenu:
//--------
//- N° d'esclave (Unit ID) - 1 octet
//
//Contenu des DATAs:
//------------------
//
//* Trame DATA en Mode LECTURE
//
//Contenu de la REQUETE
//- Function code - 1 octet - = 3 Hex
//- Starting address - 2 octets
//- Quantity of Registers - 2 octets - = 1 a 125
//
//Contenu de la REPONSE normale
//- Function code - 1 octet - = 3 Hex
//- Byte Count - 1 octet
//- Register value - (Quantitee de registres lus) x2 octets
//
//Contenu de la REPONSE d'exception Modbus
//- error code - 1 octet - = 83 Hex
//- Exception code - 1 octet
//
//
//* Trame DATA en Mode ECRITURE
//
//Contenu de la REQUETE
//- Function code - 1 octet - =10 Hex
//- Starting address - 2 octets
//- Quantity of Registers - 2 octets - = 1 a 125
//- Byte Count - 1 octet - = Quantitee de registres ecrits x2
//- Register value - (Quantitee de registres ecrits) x2 octets
//
//
//Contenu de la REPONSE normale
//- Function code - 1 octet - =10 Hex
//- Starting address - 2 octets
//- Quantity of Registers - 2 octets - = 1 a 123
//
//Contenu de la REPONSE d'exception Modbus
//- error code - 1 octet - = 90 Hex
//- Exception code - 1 octet
//
//Contenu CRC16:
//--------------
//- Checksum des donnees (N° escl. + Datas) - 2 octets
//*ODIL_ID:1958_2*
//
U #Ctr_INPUT_OK; //Si Controle deja effectue
SPB val5; //sauter a la section suivante
//--------- Reset des defauts si FB non valide, et si le traitement n'a pas ete effectue
//ces defauts ont ete montes lors du controle des ENTREEs
UN #Valid; //RAZ des defauts si FB non valide
SPBN val1; //rem: controle de validite des entrees, uniquement si FB validee
L 0; //RAZ de INT et DINT
T #Diag.IhmList; //
T #Diag.CodeDef; //
T #Diag.AddInf;
SET; //Mise a 1 du RLG
R #Diag.Def; //RAZ de BOOLEEN
R #Diag.Ala;
R #Def;
SPA end; //Saut en Fin de FB
//-------- Mode de fonctionnement du FB: Lecture ou Ecriture
val1: L 1; //Mode(INPUT)=1 ==> lecture
L #Mode;
==I;
S #Mode_lecture; //Mise a 1 mode lecture
SPB val2;
L 2; //Mode(INPUT)=2 ==> Ecriture
==I;
R #Mode_lecture; //Mise a 0 mode lecture
SPBN e001; //erreur-Parametre "Mode" incorrect
//--------- Verification de l'INPUT NBmots
// //Valeur Mini=1; MAX = 120
val2: NOP 0;
L #NBmots;
O(;
L 120;
>I;
);
O(;
POP; //L #NBmots
L 1;
<I;
);
SPB e005; //Erreur - Parametre NBmots incorrect (Min 1 - Max 120)
//--------- Validite Zone d'echange Bloc_Zech (ANY)
//---------- Recopie de Bloc_Zech (ANY) dans plusieurs variables (INT ou DINT)
// pour utilisation par la suite
LAR1 AR2; //AR2 contient l'Adresse ABSOLUE dans le DBi, du debut de la zone de donnees de ce FB
L P##Bloc_Zech; //Charge dans Accu1 l'adresse RELATIVE de ce Bloc ANY
+AR1; //AR1 contient l'adresse ABSOLUE de Bloc_Zech dans le DBi
//---------- //Taille de la zone d'echange
L DIB [AR1,P#1.0]; //Test du Byte 1 (Type de donnees) du Parametre ANY "Bloc_Zech"
O(; //Test si ce parametre est de type 8 bits
L 2; //si =2 ==> Type Byte
==I;
);
O(;
POP; //= L DIB [AR1,P#1.0]
L 3; //si =3 ==> Type Char
==I;
);
SPBN valA;
L DIW [AR1,P#2.0]; //Param ANY Octets 2 -3 (Facteur de repetition)
T #Zech_Length; //Taille de "Bloc_Zech" en Nombre d'octets
SPA valC;
valA: NOP 0; //Test du Byte 1 (Type de donnees) du Parametre ANY "Bloc_Zech"
O(; //Test si ce parametre est de type 16 bits
POP; //= L DIB [AR1,P#1.0]
L 4; //si =4 ==> Type Word
==I;
);
O(;
POP; //= L DIB [AR1,P#1.0]
L 5; //si =5 ==> Type Int
==I;
);
SPBN valB;
L DIW [AR1,P#2.0]; //Param ANY Octets 2 -3 (Facteur de repetition)
L 2; //Nombre d'octets = 2 fois Nbre de Mots
*I;
T #Zech_Length; //Taille de "Bloc_Zech" en Nombre d'octets
SPA valC;
valB: NOP 0; //Test du Byte 1 du Parametre ANY (Type de donnees)
O(; //Test si ce parametre est de type 32 bits
POP; //= L DIB [AR1,P#1.0]
L 6; //si =6 ==> Type DWord
==I;
);
O(;
POP; //= L DIB [AR1,P#1.0]
L 7; //si =7 ==> Type DInt
==I;
);
SPBN e002; //"Bloc_Zech" - Parametre "Type" incorrect
L DIW [AR1,P#2.0]; //Param ANY Octets 2 -3 (Facteur de repetition)
L 4; //Nombre d'octets = 4 fois Nbre de DoubleMots
*I;
T #Zech_Length; //Taille de "Bloc_Zech" en Nombre d'octets
//---------- Verification de la coherence Taille de "Bloc_Zech" avec NBmots en INPUT
valC: NOP 0; //La Taille de "Bloc_Zech" doit etre superieur ou egale a NBmots en INPUT
L #NBmots;
L 2; //NBmots; correspondance en Octets
*I;
L #Zech_Length;
>D;
SPB e003; //Erreur Taille de "Bloc_Zech" inferieur au Parametre "NBmots" en INPUT
//---------- //Recuperation du N° de DB de la zone d'echange
L DIW [AR1,P#4.0];
T #Zech_NDB; //Recopie Octets 4-5 (N° de DB)
//---------- //Recuperation de l'adresse pointee dans la zone d'echange
L DID [AR1,P#6.0];
T #Zech_adr; //Recopie Octets 6-9 (adresse pointee)
//---------- Test de "Bloc_Zech"
CALL "TEST_DB" (
DB_NUMBER := #Zech_NDB,
RET_VAL := #ret_val3,
DB_LENGTH := #Zech_Length,
WRITE_PROT := #wp);
SPBIN e004; //Erreur d'accessibilite a "Bloc_Zech"
//--------------------- Fin de verification des INPUT
L 0; //RAZ de INT et DINT
T #Diag.IhmList; //
T #Diag.CodeDef; //
T #Diag.AddInf;
SET; //Mise a 1 du RLG
R #Diag.Def; //RAZ de BOOLEEN
R #Diag.Ala;
R #Def;
S #Ctr_INPUT_OK;
S #En_cours; //Mise a 1 de la Sortie "En_cours"
NETWORK
TITLE =FB devalidee, fin d'execution du FB
//Dans ces cas, ne pas derouler le FB
//*ODIL_ID:1958_3*
//
val5: O(;
UN #Valid;
UN #m_valid;
);
O(;
U #Valid;
U #Fin_trt_FB;
);
SPBN buf0;
BEA; //Fin de bloc inconditionnelle
NETWORK
TITLE =Calcul de l'adresse ABSOLUE de la zone "BUFFER"
//Zone BUFFER, d'ou sont emmises et recues les donnees.
//Calcul de l'Adresse ABSOLUE dans le DB d'intance
//*ODIL_ID:1958_4*
//
buf0: LAR1 AR2; //AR2 contient l'Adresse ABSOLUE dans le DBi, du debut de la zone de donnees de ce FB
L P##Buffer; // adresse RELATIVE de "Buffer" dans la zone de donnees du FB
+AR1;
TAR1 #BufferAddrDBi; //#BufferAddrDBi Contient l'adresse ABSOLUE de "Buffer" dans le DBi
//---------- Index de "Buffer" dans le DBi
L #BufferAddrDBi; //chargement dans Accu1
// // SRW 3--> SRD 3; correction dans la version V2-1 de ce BUG
SRD 3; //decalage de 3 bits sur la droite, pour recuperer l'adresse en octets de ce pointer (cf. format de ANY)
T #Indx_Buffer; //Memorisation pour la suite
//---------- N° de DB d'instance
L DINO; //recuperation du N° de DB d'instance
T #Nb_DBi; //Memorisation pour la suite
NETWORK
TITLE =Tempo de surveillance du timeout
//"Temp_ecoule" utilise par la suite pour gerer les TimeOUT
//*ODIL_ID:1958_5*
//
CALL #Tempo_timeout (// Lancement ou arret dela tempo (selon etat de Val_tempo)
IN := #val_tempo,
PT := T#2M,
ET := #temps_ecoule);
NETWORK
TITLE =Initialisation apres la validation ou devalidation
//Initialisation sur Front montant de validation, ainsi que sur Front montant de
//devalidation (en fin de traitement du FB)
//*ODIL_ID:1958_6*
//
//--------Front montant de validation --------------
U #Valid;
UN #Fin_trt_FB;
UN #m_valid;
SPBN ini2; // Si pas de front montant, ne pas initialiser
S #m_valid; //Memorisation de la validation
//------- Zone d'initialisation sur front montant validation --------
SET; //Mettre a 1 le RLG
S #val_tempo; //Lancement de la tempo de surveillance du timeout
SPA orp0; // fin initialisation sur front montant validation
//------ RAZ apres Devalidation du FB apres son traitement ------
ini2: NOP 0;
U #Fin_trt_FB; //
SPBN orp0; //RAZ apres fin de traitement
UN #Valid; //et devalidation du FB
SPBN end; //Sinon, saut en Fin de FB
SET; //Mettre a 1 le RLG
R #m_valid; //
R #Fin_trt_FB; //RAZ de BOOLEEN
R #Mode_lecture; //
R #val_tempo; //
R #Diag.Def; //RAZ de BOOLEEN
R #Diag.Ala; //
R #Ctr_INPUT_OK; //RAZ de BOOLEEN
R #encours_send; //
R #encours_rcvt; //
R #fin_recept; //
R #OK;
R #En_cours;
R #Def;
L 0; //RAZ de INT et DINT
T #Diag.IhmList; //
T #Diag.CodeDef; //
T #Diag.AddInf;
SPA end; // fin initialisation apres Devalidation du FB
// //Saut en Fin de FB
NETWORK
TITLE =Orientation vers zones programme
//*ODIL_ID:1958_7*
//Saut vers la zone programme a derouler
//
orp0: NOP 0;
U #Fin_trt_FB; //Fin de traitement du FB
SPB end; //Saut en Fin de FB
U #encours_send; //FB_SND a devalider
UN #FB_SND.REQ;
SPB snd4;
U #encours_send; //FB_SND en cours
SPB snd0;
U #encours_rcvt; //FB_RCV en cours
SPB rcv0;
NETWORK
TITLE =========== Envoi de la requete MODBUS ==========
//- Construction de la trame Modbus (data + CRC)
//- Envoi de la commande FB_SND
//*ODIL_ID:1958_8*
//

NETWORK
TITLE =Contruction des DATAS de la trame Modbus
//La Trame Modbus est construite dans la table de mots "Buffer" (STAT)
//Trame DATA commune LECTURE et ECRITURE
//- N° esclave
//- Function code - 1 octet
//- Starting address - 2 octets
//- Quantity of Registers - 2 octets
//*ODIL_ID:1958_9*
//
LAR1 #BufferAddrDBi; //fait pointer AR1 sur l'adresse ABSOLUE de debut de "Buffer" dans le DBi
// N° d'esclave - 1 octet
L #Num_esclave; // renseigne en INPUT
T DIB [AR1,P#0.0];
// Function code - 1 octet
U #Mode_lecture; //En mode demande de LECTURE
SPBN req4;
L 3; // Fonction Modbus =3 : Read Holding Registers
T DIB [AR1,P#1.0];
SPA reqa;
req4: NOP 0; //En mode demande d'ECRITURE
L 16; // Fonction Modbus =16 (decimale) : Write Multiple Registers
T DIB [AR1,P#1.0];
// Starting Address - 2 octets
reqa: L #Registre_debut; // renseigne en INPUT
T DIW [AR1,P#2.0];
// Quantity of Registers - 2 octets
L #NBmots; // renseigne en INPUT (Nbre de MOTS)
T DIW [AR1,P#4.0];
NETWORK
TITLE =Contruction des DATAS de la trame Modbus - Suite
//Pour la trame de demande d'ECRITURE, y ajouter:
//- Byte count - 1 octet
//- Register Value - registres a envoyer (N octets recopies de la ZONE ECHANGE
//vers le BUFFER)
//       * Construction des parametres ANY correspondants a ces 2 blocs
//       * Utilisation de la fonction BLKMOV pour transferer les donnees de ces 2
//         blocs
//*ODIL_ID:1958_10*
//
U #Mode_lecture; //En mode demande de LECTURE
SPB CRC0; //Aller etape suivante (construction CRC)
// //Sinon, en Mode ECRITURE
// Byte count - 1 octet
L #NBmots; //renseigne en INPUT du FB
L 2; //= Nbre de mots demandes x2 (=nombre d'octets)
*I;
T DIB [AR1,P#6.0];
//------- Register Value - recopie des donnees a envoyer ---------
//Construction du parametre ANY "ZechBlk" source des donnees - zone SOURCE de BLKMOV
LAR1 P##ZechBlk; // AR1 pointe au debut du parametre ANY
//
//
L W#16#1004; // Byte 0: 10hex - Byte 1: 04==> Type de donnees WORD;
T LW [AR1,P#0.0];
L #NBmots; //= Nbre de mots demandes
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres de mots demandes
L #Zech_NDB;
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB) specifies en entree du FB dans le Param. ANY Bloc_Zech
L #Zech_adr;
T LD [AR1,P#6.0]; //Recopie Octets 6-9 (adresse pointee)specifies en entree du FB dans le Param. ANY Bloc_Zech
//Construction du parametre ANY de la zone des valeurs des registres dans "Buffer" - zone DESTINATION de BLKMOV
LAR1 P##ZregMBBlk; // AR1 pointe au debut du parametre ANY
// correspondant a la zone des registres dans la Tram Modbus du "Buffer"
L W#16#1004; // Byte 0: 10hex - Byte 1: 04 ==> Type de donnees WORD;
T LW [AR1,P#0.0];
L #NBmots; //= Nbre de mots demandes
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres de mots demandes
L DINO; //Recuperation du N° du DBi de cette BF
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB)
LAR2 #BufferAddrDBi; // AR2 pointe au debut de la zone "Buffer"
L P#7.0; //Trame Modbus: debut des registres Modbus, 7 octets apres le debut de la trame
+AR2;
TAR2; //Charge AR2 dans Accu1
T LD [AR1,P#6.0]; //Adresse Absolue des registres Modbus du Bloc "Buffer"
LAR2 #SavAR2; //Restore AR2
//Recopie des donnees Modbus a envoyer, dans le Buffer (zone de registre Modbus)
CALL "BLKMOV" (
SRCBLK := #ZechBlk,
RET_VAL := #ret_val2,
DSTBLK := #ZregMBBlk);
L 0;
L #ret_val2;
<>I; //Erreur si le retour de la fonction est different de 0
SPB e020; //Retour d'erreur de BLKMOV de requete
// // FIN de la construction de la trame DATA MODBUS dans le BUFFER
NETWORK
TITLE =Contruction du CRC des DATAS de la trame Modbus - Fin
//Calcul du CRC
//- 2 derniers octets de la Trame
//*ODIL_ID:1958_11*
//                                      // Nombre d'octets de DATAs a charger dans
//l'Accu1 (utilise par LOOP)
//
CRC0: U #Mode_lecture; //En mode demande de LECTURE
SPBN CRCa;
L 6; // 6 octets
SPA CRC;
CRCa: NOP 0; //en Mode ECRITURE
// //Taille =1 octet NUM_SLAVE + 6 octets (Fonction, starting address...) + registres a envoyer
L #NBmots;
L 2; //= Nbre de registres a envoyer x2 (=nombre d'octets)
*I;
L 7; //debut de la trame: 1 octet NUM_SLAVE + 6 octets (Fonction, starting address...)
+I; //
//---------- CRC Calculation
CRC: NOP 0;
LAR1 #BufferAddrDBi; //fait pointer AR1 sur l'adresse ABSOLUE de debut de "Buffer" dans le DBi
L W#16#FFFF; //Exclude CRC
TAK;
CRC1: T #LoopCnt;
POP; //CRC
L DIB [AR1,P#0.0];
XOW;
L B#16#8;
CRC2: TAK; //LoopCnt
SRW 1;
SPZ CRC3;
XOW W#16#A001;
CRC3: TAK;
LOOP CRC2;
POP;
+AR1 P#1.0;
L #LoopCnt;
LOOP CRC1;
POP;
TAW; //Swap ACCU1 LoHi & ACCU1
T DIW [AR1,P#0.0];
//----------
NETWORK
TITLE =Construction des parametres en entree de FB_SND
//Calcul de la longueur des donnees a envoyer
//*ODIL_ID:1958_12*
//
snd0: NOP 0;
//---------- Longueur des donnees a envoyer
U #Mode_lecture; //en mode LECTURE
SPBN snd1;
L 8; // en mode lecture, le nombre d'octets a envoyer est 8
T #Send_length; //Parametre Longueur de FB_SND
SPA snd2;
snd1: NOP 0; //en mode ECRITURE
L #NBmots;
L 2; //NB d'octets correspondant au nombre de registres a ecrire
*I;
L 9; //plus 9 octets (Funct°, start addr... CRC)
+I;
T #Send_length; //Parametre Longueur de FB_SND
NETWORK
TITLE =Envoie de la requete Modbus - FB_SND
//Envoie dans le coupleur CP340, du contenu du BUFFER (contenant la trame
//Modbus)
//*ODIL_ID:1958_13*
//
snd2: NOP 0;
UN #encours_send;
SPBN snd3; //a la premiere validation,
L #temps_ecoule; //initialisation du temps de reference du Timeout pour FB_SND
T #timeout_send;
snd3: SET; //Mise a 1 du RLG
S #encours_send; // Memorisation phase d'envoi de donnees
S #FB_SND.REQ; // validation de FB_SND
//Lancement de la fonction FB_SND
snd4: CALL #FB_SND (
LADDR := #CPAddress,
DB_NO := #Nb_DBi,
DBB_NO := #Indx_Buffer,
LEN := #Send_length,
DONE := #send_done,
ERROR := #send_error,
STATUS := #send_status);
U #encours_send; //
UN #FB_SND.REQ; //Apres prise en compte de la devalidation de FB_SND
SPBN snd6;
R #encours_send;
S #encours_rcvt; //Lancement de la phase de reception de la reponse
L #temps_ecoule; //initialisation du temps de reference du Timeout pour FB_RCV
T #timeout_recv;
SPA rcv0;
//FB_SND termine en erreur
snd6: U #send_error;
SPB e040; //FB_SND termine en erreur
//FB_SND termine correctement
U #send_done;
SPBN snd5;
R #FB_SND.REQ; //RAZ de validation FB_SND
SPA end; //Saut en Fin de FB
// // sinon FB_SND encore active
// surveillance du Timeout
snd5: L #temps_ecoule; //Visualisation du temps pour FB_SND
L #timeout_send;
-D; //Accu2-Accu1
L 3000; // 3 secondes
<D;
SPBN e041; //FB_SND termine en TIMEOUT
SPA end; //Saut en Fin de FB
NETWORK
TITLE =========== RECEPTION et ANALYSE de la reponse MODBUS ==========
//- Reception des donnees recues dans le CP340
//     * lancement de FB_RCV pour recuperer les donnees du CP340
//
//- Si ces donnees ne proviennent pas de l'esclave interroge, retour en mode de
//   reception, et attente des donnees suivantes
//     * Analyse du N° d'esclave Modbus de la trame recue
//
//- Sinon, analyse et traitement de la trame recue:
//     * controle de la coherence des donnees recues
//     * controle du CRC recu et calcule
//     * En mode LECTURE, recopie des registres de la trame, dans la Zone
//       d'echange
//*ODIL_ID:1958_14*
//

NETWORK
TITLE =Reception de la reponse Modbus - FB_RCV
//Lancement de FB_RCV pour recuperer les donnees du CP340
//*ODIL_ID:1958_15*
//
rcv0: NOP 0;
U #encours_rcvt;
SPBN ant0; //Sinon aller dans la phase d'Analyse de la Trame
CALL #FB_RCV (
EN_R := TRUE,
LADDR := #CPAddress,
DB_NO := #Nb_DBi,
DBB_NO := #Indx_Buffer,
NDR := #recv_ndr,
ERROR := #recv_error,
LEN := #recv_Len,
STATUS := #recv_status);
//-------- FB_RCV termine en erreur
U #recv_error;
SPB e080; //FB_RCV termine en erreur
//-------- Surveillance du TimeOUT
L #temps_ecoule; //Visualisation du temps pour FB_RCV
L #timeout_recv;
-D; //Accu2-Accu1
L 3000; // 3 secondes
<D;
SPBN e081; //FB_RCV termine en TIMEOUT
//-------- FB_RCV termine correctement
U #recv_ndr;
SPBN end; //Saut en Fin de FB
SET; //Mise a 1 du RLG
R #encours_rcvt;
S #fin_recept; //Lancement de la phase d'Analyse de la Trame recue
NETWORK
TITLE =Analyse de la trame recue
//Cette trame contient les donnees
//- N° d'esclave (Unit ID) - 1 octet
//
//Suivi des DATAs:
//
//*Reponse normale a une demande de Lecture
//- Function code - 1 octet
//- Byte Count - 1 octet
//- Register value - (Quantitee de registres lus) x2 octets
//
//*Reponse normale a une demande d'ecriture
//- Function code - 1 octet
//- Starting address - 2 octets
//- Quantity of registers - 2 octets
//
//*Reponse d'exception Modbus en ecriture ou en lecture
//- error code - 1 octet
//- Exception code - 1 octet
//
//Termine par le CRC - 2 octets
//*ODIL_ID:1958_16*
//
ant0: U #fin_recept;
SPBN end; //Saut en Fin de FB
LAR1 #BufferAddrDBi; //fait pointer AR1 sur l'adresse de debut de Buffer dans le DBi
//--------- Controle du champ "N° esclave" - octet 0
L #Num_esclave;
L DIB [AR1,P#0.0]; //Buffer: octet 0
==I;
SPB ant1; //Control OK, aller au controle suivant
// Sinon, abandon de la trame recue, et retour en mode de reception
SET; //Mise a 1 du RLG
R #fin_recept;
S #encours_rcvt;
SPA end;
//--------- Controle Longueur mini de la trame recue
ant1: L 5; //longueur mini de la trame = 5 octets (reponse exception MOdbus, + 2 octets de CRC
L #recv_Len;
>I;
SPB e161; //Erreur - Trame recue inferieur a 5 octets
//--------- Controle du CRC de la trame recue
// // Nombre d'octets de DATAs a charger dans l'Accu1 (utilise par LOOP)
+ -2; //enlever les 2 derniers octets de la trame (=CRC recu)
//---------- CRC Calculation
NOP 0;
LAR1 #BufferAddrDBi; //fait pointer AR1 sur l'adresse ABSOLUE de debut de "Buffer" dans le DBi
L W#16#FFFF; //Exclude CRC
TAK;
crc4: T #LoopCnt;
POP; //CRC
L DIB [AR1,P#0.0];
XOW;
L B#16#8;
crc5: TAK; //LoopCnt
SRW 1;
SPZ crc6;
XOW W#16#A001;
crc6: TAK;
LOOP crc5;
POP;
+AR1 P#1.0;
L #LoopCnt;
LOOP crc4;
POP;
TAW; //Swap ACCU1 LoHi & ACCU1
L DIW [AR1,P#0.0]; //Recuperer le CRC recu de la trame
<>D; //comparer avec CRC calcule
SPB e160; //Erreur - Discordance CRC
//---------- Controle du champ Code fonction - octet 1
LAR1 #BufferAddrDBi; //fait pointer AR1 sur l'adresse de debut de Buffer dans le DBi
L DIB [AR1,P#1.0]; //Buffer: octet 1 - Code Fonction
T #code_fonction; //Memorisation de cette valeur
//********** // En mode LECTURE
U #Mode_lecture;
SPBN antA; //sinon saut au mode ecriture
L 3; //Code fonction = 3 pour la lecture
==I;
SPBN antD; //sinon, comparer a une autre valeur
// ****** Controle Longueur de la trame recue
L #NBmots;
L 2;
*I; //NBmots: correspondance en Octets
+ 5; //5 octets supplementaires de la reponse (dont CRC)
L #recv_Len;
<>I;
SPB e162; //Erreur - Longueur trame recue NOK
SPA ant2; //aller a la phase suivante
antD: POP; //= L #code_fonction
L B#16#83; //Code fonction = 83 (Hex): code d'erreur Modbus en lecture
==I;
SPBN e165; //Erreur - champ "Function code" NOK
// ****** Controle Longueur de la trame recue
L 5; //5 octets de la reponse d'exception Modbus (dont CRC)
L #recv_Len;
<>I;
SPB e162; //Erreur - Longueur trame recue NOK
// Erreur d'exception Modbus
L DIB [AR1,P#2.0]; //recuperation du code d'exception Modbus
T #Diag.AddInf;
SPA e170; //Reponse d'exception Modbus
//********** //En mode ECRITURE
antA: NOP 0;
L B#16#10; //Code fonction = 10 (Hex) pour l'ecriture
L #code_fonction;
==I;
SPBN antE; //sinon, comparer a une autre valeur
// ****** Controle Longueur de la trame recue
L 8; //8 octets de la reponse a une demande d'ecriture (dont CRC)
L #recv_Len;
<>I;
SPB e162; //Erreur - Longueur trame recue NOK
SPA ant3; //aller a la phase suivante
antE: L B#16#90; //Code fonction = 90 (Hex): code d'erreur Modbus en Ecriture
==I;
SPBN e165; //Erreur - champ "Function code" NOK
// ****** Controle Longueur de la trame recue
L 5; //5 octets de la reponse d'exception Modbus (dont CRC)
L #recv_Len;
<>I;
SPB e162; //Erreur - Longueur trame recue NOK
// Erreur d'exception Modbus
L DIB [AR1,P#2.0]; //recuperation du code d'exception Modbus
T #Diag.AddInf;
SPA e170; //Reponse d'exception Modbus
//--------- suite Controle de la Reponse en MODE LECTURE
ant2: U #Mode_lecture;
SPBN ant3;
//******* Controle du champ "Byte Count" - octet 2
L #NBmots;
L 2;
*I; //Le champ doit contenir la taille (en octets) des regitres modbus
L DIB [AR1,P#2.0];
==I;
SPB dat0; //Control OK, recuperation des registres envoyes
T #Diag.AddInf;
SPA e166; //Erreur - Trame recue champ "Byte Count" NOK - mode Lecture
//--------- suite Controle de la Reponse en MODE ECRITURE
//******* Controle du champ "Starting address" - octets 2 et 3
ant3: NOP 0;
L #Registre_debut; //Input du FB
L DIW [AR1,P#2.0]; //Buffer: octets 2 et 3
==I;
SPB antB; //Controle OK, aller au control suivant
T #Diag.AddInf;
SPA e167; //Erreur - champ "Starting address" NOK - mode ecriture
//******* Controle du champ "Quantity of registers" - octets 4 et 5
antB: NOP 0;
L #NBmots;
L DIW [AR1,P#4.0]; //Buffer: octets 4 et 5
==I;
SPB antC; //Controle OK, fin du traitement OK
T #Diag.AddInf;
SPA e168; //Erreur - champ "Quantity of registers" NOK - mode ecriture
//--------- Fin de traitement OK en ECRITURE
antC: SET; //Mise a 1 du RLG
S #OK; //fin du traitement OK
R #En_cours;
S #Fin_trt_FB;
L #Diag.OKCmpt;
+ L#1; //+ 1 compteur d'echanges corrects
T #Diag.OKCmpt;
SPA end; //Saut en Fin de FB
NETWORK
TITLE =Recuperation des registres en mode LECTURE par BLKMOV
//Pour la reponse a la demande de LECTURE,
//- recopier les registres recus dans le BUFFER, vers la ZONE ECHANGE "Bloc_Zech"
//       * Construction des parametres ANY correspondants a ces 2 blocs
//       * Utilisation de la fonction BLKMOV pour transferer les donnees d'un
//blocs a l'autre
//*ODIL_ID:1958_17*
//
dat0: NOP 0; //En mode demande de LECTURE
//--------- Construction du parametre ANY "ZechBlk" source des donnees - zone DESTINATION de BLKMOV
LAR1 P##ZechBlk; // AR1 pointe au debut du parametre ANY
//
//
L W#16#1004; // Byte 0: 10hex - Byte 1: 04==> Type de donnees WORD;
T LW [AR1,P#0.0];
L #NBmots; //= Nbre de mots demandes en INPUT du FB
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres de mots demandes
L #Zech_NDB;
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB) specifies en entree du FB dans le Param. ANY Bloc_Zech
L #Zech_adr;
T LD [AR1,P#6.0]; //Recopie Octets 6-9 (adresse pointee)specifies en entree du FB dans le Param. ANY Bloc_Zech
//--------- Construction du parametre ANY de la zone des valeurs des registres dans "Buffer" - zone SOURCE de BLKMOV
LAR1 P##ZregMBBlk; // AR1 pointe au debut du parametre ANY
// correspondant a la zone des registres dans la Trame Modbus du "Buffer"
L W#16#1004; // Byte 0: 10hex - Byte 1: 04 ==> Type de donnees WORD;
T LW [AR1,P#0.0];
L #NBmots; //= Nbre de mots demandes
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres de mots demandes
L DINO; //Recuperation du N° du DBi de cette BF
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB)
LAR2 #BufferAddrDBi; // AR2 pointe au debut de la zone "Buffer"
L P#3.0; //Trame Modbus: debut des registres Modbus, 3 octets apres le debut de la trame
+AR2;
TAR2; //Charge AR2 dans Accu1
T LD [AR1,P#6.0]; //Adresse Absolue des registres Modbus du Bloc "Buffer"
LAR2 #SavAR2; //Restore AR2
//--------- Recopie des donnees Modbus recues dans le BUFFER, vers la Zone d'echange (INPUT "Bloc_Zech")
CALL "BLKMOV" (
SRCBLK := #ZregMBBlk,
RET_VAL := #ret_val2,
DSTBLK := #ZechBlk);
L 0;
L #ret_val2;
==I; //Erreur si le retour de la fonction est different de 0
SPBN e021; //Retour d'erreur de BLKMOV de reponse
//--------- Fin de traitement OK en LECTURE
S #OK; //fin du traitement OK
R #En_cours;
S #Fin_trt_FB;
L #Diag.OKCmpt;
+ L#1; //+ 1 compteur d'echanges corrects
T #Diag.OKCmpt;
SPA end; //Saut en Fin de FB
NETWORK
TITLE =----------- Erreurs et diagnostics -----------
//*ODIL_ID:1958_18*
//---------Numlist = 1 hexa - Parametres en INPUT non corrects
//
e001: L #Mode;
T #Diag.AddInf;
L W#16#1;
L 1; //erreur-Parametre "Mode" incorrect
SPA ERVa;
e002: L DIB [AR1,P#1.0]; //Recopie Byte 1 du Parametre ANY (Type de donnees)
T #Diag.AddInf;
L W#16#1;
L 2; //"Bloc_Zech" - Parametre "Type" incorrect
SPA ERVa;
e003: L 0;
T #Diag.AddInf;
L W#16#1;
L 3; //Erreur Taille de "Bloc_Zech" inferieur au Parametre "NBmots" en INPUT
SPA ERVa;
e004: L #ret_val3;
T #Diag.AddInf;
L W#16#1;
L 4; //Erreur d'accessibilite a "Bloc_Zech"
SPA ERVa;
e005: L #NBmots;
T #Diag.AddInf;
L W#16#1;
L 5; //Erreur - Parametre NBmots incorrect (Min 1 - Max 120)
SPA ERVa;
//---------Numlist = 2 hexa - defaut SFB et SFC (ex: BlkMove)
e020: L #ret_val2;
T #Diag.AddInf;
L W#16#2;
L 1; //Retour d'erreur de BLKMOV de requete
SPA ERR;
e021: L #ret_val2;
T #Diag.AddInf;
L W#16#2;
L 2; //Retour d'erreur de BLKMOV de reponse
SPA ERR;
//---------Numlist = 4 hexa - defaut en sortie FB_SND
e040: L #send_status;
T #Diag.AddInf;
L W#16#4;
L 1; //FB_SND termine en erreur
SPA ERR;
e041: L #send_status;
T #Diag.AddInf;
L W#16#4;
L 2; //FB_SND termine en TIMEOUT
SPA ERR;
//---------Numlist = 8 hexa - defaut en sortie FB_RCV
e080: L #recv_status;
T #Diag.AddInf;
L W#16#8;
L 1; //FB_RCV termine en erreur
SPA ERR;
e081: L #recv_status;
T #Diag.AddInf;
L W#16#8;
L 2; //FB_RCV termine en TIMEOUT
SPA ERR;
//---------Numlist = 16 hexa - contenu de la reponse Modbus
e160: NOP 0;
L W#16#16;
L 1; //Erreur - Discordance CRC
SPA ERR;
e161: NOP 0;
L #recv_Len;
T #Diag.AddInf;
L W#16#16;
L 2; //Erreur - Trame recue inferieur a 5 octets
SPA ERR;
e162: NOP 0;
L #recv_Len;
T #Diag.AddInf;
L W#16#16;
L 3; //Erreur - Longueur trame recue NOK
SPA ERR;
e165: NOP 0;
L #code_fonction;
T #Diag.AddInf;
L W#16#16;
L 6; //Erreur - champ "Function code" NOK
SPA ERR;
e166: NOP 0;
L W#16#16;
L 7; //Erreur - Trame recue champ "Byte Count" NOK - mode Lecture
SPA ERR;
e167: NOP 0;
L W#16#16;
L 8; //Erreur - champ "Starting address" NOK - mode ecriture
SPA ERR;
e168: NOP 0;
L W#16#16;
L 9; //Erreur - champ "Quantity of registers" NOK - mode ecriture
SPA ERR;
e170: NOP 0;
L W#16#16;
L 11; //Reponse d'exception Modbus
SPA ERR;
//--------------
ERR: T #Diag.CodeDef; //Sortie sur Erreurs
POP;
T #Diag.IhmList;
L #Diag.ErrCmpt; //Compteur d'erreur +1
+ L#1;
T #Diag.ErrCmpt;
SET; //Mise a 1 du RLG
S #Def;
S #Diag.Def;
R #En_cours;
S #Fin_trt_FB;
SPA end; //Saut en Fin de FB
ERVa: NOP 0; // Sortie FB sur parametres Input NOK (pas de fin de traitement)
T #Diag.CodeDef;
POP;
T #Diag.IhmList;
SET; //Mise a 1 du RLG
S #Def;
S #Diag.Def;
SPA end; //Saut en Fin de FB
NETWORK
TITLE =Fin de Bloc
//*ODIL_ID:1958_19*
end: NOP 0;
LAR1 #SavAR1; //Restitution des registres d'adresse
LAR2 #SavAR2;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MODBUS_SLAVE_CP340"
TITLE =Modbus Esclave avec CP 340
//******************************************************************************
//* Modbus (Jbus) Esclave Server avec CP340 (liaison serie)                    *
//* Modbus (Jbus) Slave with CP340 (serial)                                    *
//******************************************************************************
//(In English Further below)
//
//Description:
//------------
//Ce Bloc Fonctionnel gere la communication Modbus (JBus) esclave.
//Il prend en charge les fonctions
//   -  3: Read Multiple Registers
//   - 16: Write Multiple Registers
//a l'exclusion de toute autre fonction.
//
//Les donnees Modbus lues et ecrites, sont echangees dans le DB designe
//par le parametre ModDBNR (entree IN).
//Le parametre ModBaseReg (entree IN) correspond a un Offset d'adresse a
//appliquer au mot 0 du DB d'echange Modbus, afin de les lier aux adresses des
//echanges Modbus.
//Exemple:
//
//DBW (0 + ModBaseReg) <=> adresse Modbus = 0
//DBW (2 + ModBaseReg) <=> adresse Modbus = 1
//...
//
//Pre requis:
//----------
//Un CP 340 dument parametre (Adresse, protocole, vitesse de transmission, format
//de caractere, delai inter-caractere) doit se trouver dans la configuration
//materielle.
//
//Defauts:
//--------
//Le dernier defaut est maintenu tant qu'une transaction correcte n'a pas ete
//effectuee.
//
// 0: Pas de defaut
//
// 1: Une erreur s'est produite lors de l'appel du FB "P_RCV"
//    AddInfo contient le code d'erreur retourne par le FB
//
// 2: Le parametre "SlaveID" (Numero d'esclave) est incorrect
//
// 3: Longueur de trame incorrecte
//
// 4: Erreur de CRC
//
// 5: Fonction Modbus non supportee
//    Une reponse d'exception Modbus 1 (ILLEGAL FUNCTION CODE) est envoyee
//
// 6: Une erreur s'est produite lors de l'appel du SFC "TEST_DB"
//    Addinfo contient le code d'erreur retourne par la SFC
//    Une reponse d'exception Modbus 4 (SLAVE DEVICE FAILURE) est envoyee
//
// 7: L'adresse dans la requete est inferieure a "ModBaseReg"
//    Une reponse d'exception Modbus 2 (ILLEGAL DATA ADDRESS) est envoyee
//
// 8: Le bloc de donnees est trop petit pour servir la requete
//    Une reponse d'exception Modbus 2 (ILLEGAL DATA ADDRESS) est envoyee
//
// 9: Requete erronee (Le champ "Nombre de Registres" est incorrect)
//    Une reponse d'exception Modbus 2 (ILLEGAL DATA VALUE) est envoyee
//
//10: Une erreur s'est produite lors de l'appel du SFC "BLK_MOV"
//    AddInfo contient le code d'erreur retourne par le SFC
//    Une reponse d'exception Modbus 4 (SLAVE DEVICE FAILURE) est envoyee
//
//11: Une erreur s'est produite lors de l'appel du FB "P_SEND"
//    AddInfo contient le code d'erreur retourne par le FB
//
//12: Pas de requete du maitre depuis plus de 30 secondes
//
//Dependances:
//-----------
//   Ce bloc utilise:
//      - Le FB 1698 "P_RCV"   (FB 2 de la bibliotheque "CP PtP" CP340)
//      - Le FB 1699 "P_SEND"  (FB 3 de la bibliotheque "CP PtP" CP340)
//      - Le SFB 4   "TON"
//      - Le SFB 24  "TEST_DB"
//      - Le SFB 20  "BLK_MOV"
//
//
//******************** ENGLISH INFORMATION *************************************
//Description:
//------------
//This Bloc processes the Modbus (JBus) slave communication
//Modbus Functions accepted:
//   -  3: Read Multiple Registers
//   - 16: Write Multiple Registers
//and no more else
//
//The Modbus datas read and wrote, are exchanged in the DB designed by the
//ModDBNR parameter (INPUT)
//The parameter ModBaseReg (INPUT) is a Offset to apply to the word 0 of the
//Modbus Exchange DB, in order to make the link with the Modbus address of the
//dialog.
//
//Exemple:
//
//DBW (0 + ModBaseReg) <=> Modbus address = 0
//DBW (2 + ModBaseReg) <=> Modbus address = 1
//...
//
//Prerequisite:
//----------
//A CP 340 correctly setup (Address, protocol,communication speed, ...)must be in
//place in the hardware configuration
//
//Faults:
//--------
//Last fault stay to its state till the next correct communication exchange
//
// 0: No fault
//
// 1: an error occured calling FB "P_RCV"
//    AddInfo contains error code returned by the FB
//
// 2: "SlaveID" parameter(slave number) is incorrect
//
// 3: Length of the frame is incorrect
//
// 4: CRC error
//
// 5: Modbus Function is not supported
//     An exception error code 1 ("ILLEGAL FUNCTION CODE") is sent back
//
// 6: an error occured calling SFC "TEST_DB"
//    AddInfo contains error code returned by the SFC
//    An exception error code 4 ("SLAVE DEVICE FAILURE") is sent back
//
// 7: The Modbbus address in the request in Less than "ModBaseReg"
//    An exception error code 2 ("ILLEGAL DATA ADDRESS") is sent back
//
// 8: The exchange DB is too small to answer the request
//    An exception error code 2 ("ILLEGAL DATA ADDRESS") is sent back
//
// 9: Incorrect request (Field "Number of registers" is incorrect)
//    An exception error code 3 ("ILLEGAL DATA VALUE") is sent back
//
//10: an error occured calling SFC "BLK_MOV"
//    AddInfo contains error code returned by the SFC
//    An exception error code 4 ("SLAVE DEVICE FAILURE") is sent back
//
//11: an error occured calling FB "P_SEND"
//    AddInfo contains error code returned by the FB
//
//12: None request from the master since more than 30 seconds
//
//Dependence:
//-----------
//   This bloc uses:
//      - FB 1698 "P_RCV"   (FB 2 from the library "CP PtP" CP340)
//      - FB 1699 "P_SEND"  (FB 3 from the library "CP PtP" CP340)
//      - SFB 4   "TON"
//      - SFB 24  "TEST_DB"
//      - SFB 20  "BLK_MOV"
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 5
//Dernier ID mis en oeuvre / Last ID implemented : 1959_5
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : SIEMENS
FAMILY : 'COM'
NAME : 'JBUS_SL'
VERSION : 1.4
VAR_INPUT
  CPAddress : INT;	//Ethernet CP340 address in HW Config/ Adresse du coupleur CP340 (dans HW Config)
  SlaveID : INT;	//JBus Slave Number / Numero d'esclave JBus
  ModDBNR : INT;	//Modbus exchange DB number / Numero du Bloc de donnees Modbus
  ModBaseReg : INT;	//Offset of DBW0 of Modbus DB/ Offset du DBW 0 du DB Modbus
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Default / Defaut
  Diag : STRUCT	//Structure de diagnostic
    Def : BOOL;	//Default / Defaut
    Ala : BOOL;	//Alarm / Alarme
    NumList : INT;	//Reserve for IHMP - not used / reserve IHMP - non utilise
    CodeDef : INT;	//Error code / Code du defaut
    AddInf : INT;	//Further Informations / Informations complementaires
    RepCnt : DINT;	//Counter of Modbus responses / Compteur de reponses
    ErrCnt : DINT;	//Counter of defaults / Compteur d'erreurs
  END_STRUCT ;
END_VAR
VAR
  FB_RCV : P_RCV;
  FB_SND : P_SEND;
  TOCOM : TON;
  Buffer : STRUCT
    SlaveID : BYTE;
    FCode : BYTE;
    ModRegAdd : WORD;
    ModRegCnt : WORD;
    Data : ARRAY  [1 .. 249 ] OF BYTE;
    Dummy : ARRAY  [1 .. 768 ] OF BYTE;
  END_STRUCT ;
  Ex : BOOL;	//Modbus Exception Response
END_VAR
VAR_TEMP
  SavAR1 : DINT;	//Backup of the Address register 1
  SavAR2 : DINT;	//Backup of the Address register 2
  SrcBlk : ANY;
  DstBlk : ANY;
  Ret : INT;	//Return value for the SFCs
  ModRegAdd : INT;
  MaxModRegCnt : INT;	//Max Modbus Register Count (125 for Read Request, 123 for Write Request)
  BufDBNR : INT;	//Instance DB Number that contains the Send/Receive Buffer
  BufDBIndex : INT;	//Index on the Send/Receive Buffer
  BufDBBasePtr : DINT;	//Pointer on the Send/Receive Buffer
  BufDBPtr : DINT;	//Pointer on the Send/Receive Buffer
  DatDBNR : WORD;	//Modbus DB Number that contains the Modbus Registers
  DatDBLen : WORD;	//Size of the Modbus DB
  DatDBPtr : DINT;	//Pointer on the Modbus DB
  BlkMovDstPtr : DINT;
  LoopCnt : BYTE;	//Loop Counter
  CRCR : BOOL;
  WP : BOOL;
END_VAR
BEGIN
NETWORK
TITLE =Init
//*ODIL_ID:1959_1*
//---------- Save AR1 & AR2
TAR1 #SavAR1;
TAR2 #SavAR2;
//----------
L DINO; //Get the instance DB Number
T #BufDBNR;
//---------- Calculates
LAR1 AR2; //For Multi instance FB purposes
L P##Buffer;
+AR1;
TAR1;
T #BufDBBasePtr;
// // SRW 3--> SRD 3; correction dans la version V1-3 de ce BUG
SRD 3; //decalage de 3 bits sur la droite, pour recuperer l'adresse en octets de ce pointer (cf. format Pointer)
T #BufDBIndex;
//----------
NETWORK
TITLE =Receive
//*ODIL_ID:1959_2*
//---------- Receive
CALL #FB_RCV (
EN_R := TRUE,
LADDR := #CPAddress,
DB_NO := #BufDBNR,
DBB_NO := #BufDBIndex);
U #FB_RCV.ERROR;
SPB E001; //Error:
UN #FB_RCV.NDR;
SPB SND;
//---------- Check SlaveID Parameter
O(;
L #SlaveID;
L B#16#1;
<D;
);
O(;
POP; //L #SlaveID
L B#16#F7; //247
>D;
);
SPB E002; //Error: Invalid SlaveID parameter
//----------
POP; //L #SlaveID
L #Buffer.SlaveID;
<>D;
SPB SND;
//----------
L #FB_RCV.LEN;
L B#16#4; //Smallest possible Modbus frame
<=D;
SPB E003; //Error: Invalid Message Length
S #CRCR; //Calculate CRC for the received frame
R #Ex; //Reset Exception Response
POP; //L #FB_RCV.LEN
//---------- CRC Calculation
CRC: + -2;
LAR1 #BufDBBasePtr;
L W#16#FFFF; //Exclude CRC
TAK;
CRC1: T #LoopCnt;
POP; //CRC
L DIB [AR1,P#0.0];
XOW;
L B#16#8;
CRC2: TAK; //LoopCnt
SRW 1;
SPZ CRC3;
XOW W#16#A001;
CRC3: TAK;
LOOP CRC2;
POP;
+AR1 P#1.0;
L #LoopCnt;
LOOP CRC1;
POP;
TAW; //Swap ACCU1 LoHi & ACCU1 LoLo
UN #CRCR;
SPB CRCS; //CRC Send
R #CRCR;
L DIW [AR1,P#0.0];
<>D;
SPB E004; //Error: CRC
//----------
NETWORK
TITLE =Decode Function Code
//*ODIL_ID:1959_3*
//----------
LAR1 #BufDBBasePtr;
L #Buffer.ModRegAdd;
T #ModRegAdd;
//---------- Read Multiple Registers
L #Buffer.FCode;
L B#16#3; //Function Code 3 (Read Multiple Registers)
<>D;
SPB nF03;
L B#16#7D; //Initialize the Max Count
T #MaxModRegCnt; //-> 125 Words
L #Buffer.ModRegCnt;
SLW 1;
T DIB [AR1,P#2.0]; //ByteCnt
+ 5; //1 SlaveID + 1 FCode + 1 ByteCnt + 2 CRC
T #FB_SND.LEN;
L B#16#8; //Expected frame length
+AR1 P#3.0; //Data Offset in the Buffer
TAR1 #BufDBPtr;
LAR1 P##SrcBlk; //Initialize the "BLK_MOV" parameters
LAR2 P##DstBlk;
SPA Ctrl;
//---------- Write Multiple Registers
nF03: POP; //L #Buffer.FCode
L B#16#10; //Function Code 16 (Write Multiple Registers)
<>D;
SPB E005; //Exception: Ex1 (ILLEGAL FUNCTION CODE)
L B#16#7B; //Initialize the Max Count
T #MaxModRegCnt; //-> 123 Words
+AR1 P#7.0; //Data Offset in the Buffer
TAR1 #BufDBPtr;
L B#16#8; //Response Length 1 SlaveID + 1 Fcode + 2 Address + 2 RegCnt + 2 CRC
T #FB_SND.LEN;
L #Buffer.ModRegCnt;
SLW 1;
+ 9; //1 SlaveID + 1 FCode + 2 Add + 2 RegCnt + 1 ByteCnt + 2 CRC
LAR1 P##DstBlk; //Initialize the "BLK_MOV" parameters
LAR2 P##SrcBlk;
//---------- Control the Register count
Ctrl: TAR2 #BlkMovDstPtr; //SAve & Restore AR2
LAR2 #SavAR2;
//----------
L #FB_RCV.LEN;
<>D;
SPB E003; //Error: Invalid frame Length
//----------
L #ModDBNR;
T #DatDBNR;
//----------
CALL "TEST_DB" (
DB_NUMBER := #DatDBNR,
RET_VAL := #Ret,
DB_LENGTH := #DatDBLen,
WRITE_PROT := #WP);
SPBIN E006; //Error: DB
//----------
O(; //Acc = #Buffer.ModRegCnt
L #Buffer.ModRegCnt;
L B#16#1;
<I;
);
O(;
POP; //L #ModRegCnt
L #MaxModRegCnt;
>I;
);
SPB E009; //Exception: Ex3 (ILLEGAL DATA VALUE)
//----------
L #ModRegAdd; //Modbus Register Address
L #ModBaseReg;
<D;
SPB E007; //Exception: Ex2 (ILLEGAL DATA ADDRESS)
-D; //Acc := ModRegAdd - ModBaseReg
L #Buffer.ModRegCnt;
+D; //Acc := ModRegAdd - ModBaseReg + ModRegCnt
TAK; //Acc := ModRegAdd - ModBaseReg
SLD 4; //Make bit Ptr
OD DW#16#84000000;
T #DatDBPtr;
POP; //Acc := ModRegAdd - ModBaseReg + ModRegCnt
L #DatDBLen; //Modbus DB Length (Byte)
SRW 1; //Divide by 2
>D;
SPB E008; //Exception: Ex2 (ILLEGAL DATA ADDRESS)
//---------- Initialize Src and Dst
L #Buffer.ModRegCnt;
LAR2 #BlkMovDstPtr;
OD DW#16#10040000;
T LD [AR1,P#0.0];
T LD [AR2,P#0.0];
L #DatDBNR; //DBNR
T LW [AR1,P#4.0];
L #BufDBNR;
T LW [AR2,P#4.0];
L #DatDBPtr; //Offset
T LD [AR1,P#6.0];
L #BufDBPtr;
T LD [AR2,P#6.0];
//---------- Restore AR2
LAR2 #SavAR2;
//---------- Copy
CALL "BLKMOV" (
SRCBLK := #SrcBlk,
RET_VAL := #Ret,
DSTBLK := #DstBlk);
SPBIN E010; //Error: Cpy
NETWORK
TITLE =Send
//*ODIL_ID:1959_4*
//---------- CRC Calculation:
L #FB_SND.LEN;
SPA CRC;
CRCS: T DIW [AR1,P#0.0];
S #FB_SND.REQ;
//----------
SND: CALL #FB_SND (//Send
LADDR := #CPAddress,
DB_NO := #BufDBNR,
DBB_NO := #BufDBIndex);
U #FB_SND.ERROR;
SPB E011;
UN #FB_SND.DONE;
SPB End;
L #Diag.RepCnt;
+ L#1;
T #Diag.RepCnt;
U #Ex;
R #Ex;
SPB End;
L B#16#0; //Clear Error
T #Diag.CodeDef;
T #Diag.AddInf;
//----------
End: L #Diag.CodeDef;
L B#16#0;
<>D;
= #Diag.Def;
= #Def;
//----------
U #FB_SND.REQ;
R #FB_SND.REQ;
NOT;
= #TOCOM.IN;
CALL #TOCOM (
PT := T#30S);
U #TOCOM.Q;
UN #Diag.Def;
SPB E012;
//---------- Restore AR1 & AR2
LAR1 #SavAR1;
LAR2 #SavAR2;
BEA;
NETWORK
TITLE =Errors
//*ODIL_ID:1959_5*
E001: L B#16#1; //Error: "FB_RCV"
L #FB_RCV.STATUS;
SPA Err;
E002: L B#16#2; //Error: Wrong SlaveID
SPA Err0; // No additionnal information
E003: L B#16#3; //Error: Invalid Message Length
SPA Err0; // No additionnal information
E004: L B#16#4; //Error: Wrong CRC
SPA Err0; // No additionnal information
E005: L B#16#1; //Exception: Ex1 (ILLEGAL FUNCTION CODE)
L B#16#5;
SPA Ex;
E006: L B#16#4; //Error: "TEST_DB"
L B#16#6; //Exception: Ex4 (SLAVE DEVICE FAILURE)
SPA Ex;
E007: L B#16#2; //Exception: Ex2 (ILLEGAL DATA ADDRESS)
L B#16#7; // Check Parameter "ModBaseReg"
SPA Ex;
E008: L B#16#2; //Exception: Ex2 (ILLEGAL DATA ADDRESS)
L B#16#8; // DB Size too small
SPA Ex;
E009: L B#16#3; //Exception: Ex3 (ILLEGAL DATA VALUE)
L B#16#9;
SPA Ex;
E010: L B#16#4; //Error: "BLK_MOV"
L B#16#A; //Exception: Ex4 (SLAVE DEVICE FAILURE)
SPA Ex;
E011: L B#16#B; //Error: "FB_SND"
L #FB_SND.STATUS;
SPA Err;
E012: L B#16#C; //Error: No communication
//----------
Err0: L B#16#0;
Err: T #Diag.AddInf;
POP;
T #Diag.CodeDef;
L #Diag.ErrCnt;
+ L#1;
T #Diag.ErrCnt;
SPA End;
//----------
Ex: T #Diag.CodeDef;
POP; //Exception Code
LAR1 #BufDBBasePtr;
T DIB [AR1,P#2.0];
L B#16#4;
<>D;
L B#16#0;
SPB Ex4;
L #Ret;
Ex4: T #Diag.AddInf;
SET;
S DIX [AR1,P#1.7]; //Function Code
S #Ex; //Modbus Exception Response
L #Diag.ErrCnt; //Increase Error Counter
+ L#1;
T #Diag.ErrCnt;
L B#16#5; //Initialize response length
T #FB_SND.LEN;
SPA CRC; //Calculates CRC
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MODBUS_TCPIP_MASTER"
TITLE =BF Modbus TCP/IP Master (Client)
//-------------------------------------------------------------------------------
//-                    BF MODBUS TCP MASTER                                     -
//-         Modbus TCP/IP Client sur CP 343-1 (Lean et Classique)               -
//-         Modbus TCP/IP Client with CP 343-1 (Lean and Classic)               -
//-------------------------------------------------------------------------------
//(In English Further below)
//
//Description:
//------------
//Ce Bloc Fonctionnel gere la communication Modbus Maitre sur TCP/IP (=Client
//Modbus TCP/IP).
//Il prend en charge les fonctions Modbus
//   - 03: Read Multiple Registers
//   - 16: Write Multiple Registers
//a l'exclusion de toute autre fonction.
//
//Pre requis:
//----------
//- Coupleur Ethernet CP 343-1 ou CP 343-1 Lean correctement parametre dans HW
//Config (adresse IP; masque IP, adresse routeur (si besoins)
//- correctement parametre avec NetPro (creer une Liaison TCP, avec etablissement
//de la liaison actif, avec le partenaire de liaison (destinataire du dialogue) en
//ecoute sur le port 502, avec le port local different de 502 (ex: port = 2000)
//(Pour plus de details voir la documentation de la BF)
//
//Dependances:
//-----------
//   Ce bloc utilise:
//      - Le FC 1699 "AG_RCV" (FC 6 de la bibliotheque "SIMATIC_NET_CP")
//      - Le FC 1698 "AG_SND" (FC 5 de la bibliotheque "SIMATIC_NET_CP")
//
//Mise en oeuvre :
//---------------
//- Cette BF est a mettre en oeuvre au niveau des FB de la structure programme
//  gerant les sous-ensembles et qui doivent dialoguer en Modbus Maitre
//- Il est conseille de  programmer la LECTURE en debut de programme,
//  et l'ECRITURE, en fin de programme
//- Pour CHAQUE dialogue (lecture ou ecriture) ou l'API S7-300 est client Modbus
//   programmer UNE INSTANCE de la BF ModbusTCP_Master
//- Le DB d'echange Modbus contenant la Zone d'echange des registres
// lus ou ecrits est specifie par le parametre Bloc_Zech en entree de la BF :
//  - 1 meme DB peut contenir une ou plusieurs zones d'echanges, selon le besoin
//     Dans le cas ou cet API, dialogue aussi en tant que SERVEUR Modbus TCP
//     le DB d'echange Modbus associe a ce dialogue, doit etre distinct.
//      (ex: avec un systeme de pilotage ou de supervision)
//
//1) CPAddress : sous Netpro
//   Selectionner la cpu de l'api, dans le tableau de la liste des liaisons,
//   selectionner la liaison -> propriete -> General -> patte LADDR sur la
//   fenetre Parametres de bloc
//     valeur au format-> W#xx#yyy
//2) ID_LiaisonTC : sous Netpro
//   Selectionner la cpu de l'api, dans le tableau de la liste des liaisons,
//   selectionner la liaison -> propriete -> General -> patte ID sur la fenetre
//   Parametres de bloc
//3) Registre_ debut : Adresse en mot du premier mot de la zone de registre Modbus
//               Lue ou ecrite dans le destinataire ( %MW ou DB declare en S7)
//4) NBmots : Longeur de la zone (Maxi 120 mots / Trame)
//5) Num_esclave :
//= N° d'esclave Modbus affecte au destinataire si un pont Modbus/Jbus est utilise
//= 0 si le destinataire est un client Modbus TCP/IP
//6) Mode : 1 = Lecture, 2 = ecriture
//7) Bloc_Zech :
//Pointeur de la zone Memoire API ( Valeur des infos lues ou a ecrire)
//               taille = ou > a Nbmots
//               Syntaxe : P#DByy.DBXzzz.0 WORD www
//               Avec :- yy =  N° du DB global
//               De base les DB globaux 89 a 80 sont reserves dans la structure
//               Programme 1 carte = 1 DB
//               Nom synbolique du DB = COM<N° de la carte dans le rack>
//                     - zzz = Adresse de debut dans le DB en OCTET
//                     - www = Nombre de Mots a partir de l'adresse de debut
//Defauts:
//--------
//Ihmlist =1 hexa    Parametres en INPUT incorrects
//    CodeDef =1  Parametre "Mode" incorrect
//    AddInf      Valeur de "Mode" renseigne en Entree
//    -----------------------------------------------------
//    CodeDef =2  Bloc_Zech - Parametre "Type" incorrect
//    AddInf      Parametre TYPE lu dans "Bloc_Zech"
//    -----------------------------------------------------
//    CodeDef =3  Taille de "Bloc_Zech" inferieur au  Parametre "NBmots" en INPUT
//    AddInf      =0
//    -----------------------------------------------------
//    CodeDef =4  Erreur d'accessibilite a "Bloc_Zech"
//    AddInf      Code de retour de la fonction "TEST_DB"
//    -----------------------------------------------------
//    CodeDef =5  Parametre "Nbmots" incorrect (Min=1; Max=120)
//    AddInf      Valeur de "Nbmots" renseigne en Entree
//    -----------------------------------------------------
//Ihmlist =2 hexa    Defauts SFB et SFC (ex: BlkMove)
//    CodeDef =1  Retour d'erreur de BLKMOV de requete
//    AddInf      Code de retour de la fonction "BLKMOV"
//    -----------------------------------------------------
//    CodeDef =2  Retour d'erreur de BLKMOV de reponse
//    AddInf      Code de retour de la fonction "BLKMOV"
//    -----------------------------------------------------
//Ihmlist =4 hexa    Defaut en sortie AG_Send
//    CodeDef =1  AG_SEND termine en erreur
//    AddInf      Code de retour de la fonction "AG_SEND"(*)
//    -----------------------------------------------------
//    CodeDef =2  AG_SEND termine en TIMEOUT
//    AddInf      Code de retour de la fonction "AG_SEND"(*)
//    -----------------------------------------------------
//Ihmlist =8 hexa    Defaut en sortie AG_RECV
//    CodeDef =1  AG_Recv termine en erreur
//    AddInf      Code de retour de la fonction "AG_RECV"(*)
//    -----------------------------------------------------
//    CodeDef =2  AG_Recv termine en TIMEOUT
//    AddInf      Code de retour de la fonction "AG_RECV"(*)
//    -----------------------------------------------------
//    CodeDef =3  Erreur de vidage de la memoire tampon du coupleur Ethernet
//    AddInf      Valeur du parametre "LEN" en sortie de la fonction "AG_RECV"
//    -----------------------------------------------------
//Ihmlist =16 hexa  Contenu de la reponse Modbus
//    CodeDef =1   Trame 1 Transaction ID NOK
//    AddInf       Valeur du champ Trans ID lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =2   Trame 1 Protocol ID NOK
//    AddInf       Valeur du champ Protocol ID lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =3   Trame 1 champ "Length" NOK
//    AddInf       Valeur du champ Length lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =4   ALARME ! - Trame 2 champ "Unit ID" NOK
//    AddInf       Valeur du champ Unit ID lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =5   Trame 2 reponse exception Modbus, champ "Error code" NOK
//    AddInf       Valeur du champ Error code lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =6   Trame 2 champ "Function code" NOK
//    AddInf       Valeur du champ Function code lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =7   Trame 2 champ "Byte Count" NOK - mode Lecture
//    AddInf       Valeur du champ Byte Count lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =8   Trame 2 champ "Starting address" NOK - mode ecriture
//    AddInf       Valeur du champ Starting address lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =9   Trame 2 champ "Quantity of registers" NOK - mode ecriture
//    AddInf       Valeur du champ Quantity of registers lue dans la trame Modbus
//    -----------------------------------------------------
//    CodeDef =11 (0B Hex)   Reponse d'exception Modbus
//    AddInf                 Code d'exception Modbus
//    -----------------------------------------------------
//(*)Principaux Codes d'erreur retournes par les FC "AG_SEND" et "AG_RECV"
//          | Code |
//Code (Dec)| (Hex)| Signification
//----------|------|------------------------------------
//32978 ou  | 80D2 | Adresse de debut de module erronee
//-32558    |      |  => Controlez le parametre "CPAddress"
//----------|------|------------------------------------
//33155 ou  | 8183 |Absence de configuration ou bien le service n'a pas encore ete
//-32381            lance sur le CP Ethernet
//                    => Probleme Ethernet:
//                     * câble reseau debranche
//                     * faire un ping du CPEthernet vers le serveur Modbus
//                       (esclave)
//                     * faire un Ping du serveur Modbus vers le CP Ethernet
//                     => Liaison TCP pas encore etablie ' relancer le dialogue
//                      (Temps detablissement de la liaison: 30s a 1 Minute)
//                     => Controler l'etat de la liaison dans NetPro (en ligne
//                       dans Netpro,cliquer une fois sur la CPU, et visualiser
//                       l'etat de la liaison)
//                     => Controler le parametre ID_LiaisonTCP
//                     => Controler le parametrage de la liaison (ID_LiaisonTCP)
//                      dans NetPro
//                     => Recharger la liaison dans l'API (par NetPro)
//                     => Le destinataire de dialogue n'acepte pas la connexion
//                     TCP (pas en ecoute sur le port 502, ou bien trop de
//                     connexions ouvertes sur ce port)
//                     => Faire un reset des APIs en dialogue
//----------|------|------------------------------------
//33158 ou  | 8186 |Parametre "ID" incorrect
//-32378    |      | => Controlez le parametre "ID"
//----------|------|------------------------------------
//33540 ou  | 8304 |La liaison n'est pas etablie
//-31996             => Controlez l'activite du maitre Modbus TCP/IP.
//                   => Verifiez le câblage de la liaison
//
//******************** ENGLISH INFORMATION *************************************
//Description:
//------------
//This Bloc processes the Modbus Master communication (= Modbus TCP/IP Client)
//Modbus Functions accepted:
//   - 03: Read Multiple Registers
//   - 16: Write Multiple Registers
//No other function supported
//
//Prerequisite:
//----------
//- A CP 343-1 or CP 343-1 Lean correctly setup in HW Config (IP address,
//IP mask, IP gateway if necessary)
//- Correctly setup In NetPro (TCP link, with active connection establishment,
//with IP address of remote partner on port 502 , local port <> 502)
//(For more details see the BF documentation)
//
//Dependence:
//-----------
//   This bloc uses:
//      - FC 1699 "AG_RCV" (FC 6 from the library "SIMATIC_NET_CP")
//      - FC 1698 "AG_SND" (FC 5 from the library "SIMATIC_NET_CP")
//
//OPERATING :
//-----------
//- This BF must be implemented in the program structure under the sub assembly
//FB that must exchange datas.
//- It's advised to code the reading at the beginning of the program and the
//writing at the botton of the program.
//- For each dialog (Read or writte) where the plc is Modbus client,
//  program one BF_ModbusTCP_Master instance.
//- The exchange Modbus DB containing the regitry exchange aera read and wrote is
//specified by the input Bloc_zech :
// - A same DB have one or more exchange aera ( depend of your needs).
//   In case of the PLC exchange as Modbus TCP server,
//   The modbus exchange DB must be distinct.
//    ( Example :  with flow or product monitoring system)
//
//1)CpAdresse : under Netpro,
//  Select the PLC cpu, in the table of the connection lists,
// select the connection - > object properties - > General - > LADDR on the block
//parameter window
// Format of value  -> W#xx#yyy
//2)ID_LiaisonTC : Under netpro,
//Select the PLC cpu, in the table of the connection lists,
// select the connection - > object properties - > General - > ID on the block
//parameter window
//3)Registre_debut : Adress in Word of the first word of Modbus aera registry
//         read or written in the receiver ( %MW or DB declared/ BF_Modbus slave)
//4)NBmots : aera length ( 120 Word by frame maxi)
//5) Num_esclave :
//= Slave Number of the receiver if a Modbus /jbus gateway is used.
//= 0 if the receiver is a Modbus TCP/IP client.
//6) Mode = 1 readind, 2 = writing
//7) Bloc_Zech :  PLC memory area pointer ( values of data reading or to write)
//   lenght = or > to Nbmots
//   code syntax : P#DByy.DBXzzz.0 WORD www
//   With :  - yy = DB glogal Number
//        basicaly the global DB 89 to 80 are reserved in the Program structure.
//        1 CP340 card  = 1 DB
//        Symbolic name of DB = COM<Card Number in rack>
//          - zzz =  DB sart adress in OCTET
//          - www =  Number of word from start adress.
//Faults:
//--------
//Ihmlist =1 hexa   Wrong INPUT parameters
//    CodeDef =1  wrong Parameter "Mode"
//    AddInf      Value of the "Mode" parameter in INPUT
//    -----------------------------------------------------
//    CodeDef =2  Bloc_Zech - Parameter "Type" incorrect
//    AddInf      Value of Parameter "TYPE"
//    -----------------------------------------------------
//    CodeDef =3  Size of "Bloc_Zech" smaller than INPUT Parameter "NBmots"
//     AddInf      =0
//    -----------------------------------------------------
//    CodeDef =4  Access error to "Bloc_Zech"
//    AddInf      Error code of "TEST_DB" function
//    -----------------------------------------------------
//    CodeDef =5  Parameter "Nbmots" incorrect (Min=1; Max=120)
//    AddInf     Value of Parameter "Nbmots" in INPUT
//    -----------------------------------------------------
//Ihmlist =2 hexa    Error from SFB and SFC (eg: BlkMove)
//    CodeDef =1  Error code of "BLKMOV" request
//    AddInf      Error code of "BLKMOV" function
//    -----------------------------------------------------
//    CodeDef =2  Error code of "BLKMOV" response
//    AddInf      Error code of "BLKMOV" function
//    -----------------------------------------------------
//Ihmlist =4 hexa    Error of "AG_Send" function
//    CodeDef =1  AG_SEND End with error
//    AddInf      Error code of "AG_SEND" function
//    -----------------------------------------------------
//    CodeDef =2  AG_SEND end in TIMEOUT
//    AddInf      Error code of "AG_SEND" function
//    -----------------------------------------------------
//Ihmlist =8 hexa    Error of "AG_RECV" function
//    CodeDef =1  AG_Recv End with error
//    AddInf      Error code of "AG_RECV" function
//    -----------------------------------------------------
//    CodeDef =2  AG_Recv end in TIMEOUT
//    AddInf      Error code of "AG_RECV" function
//    -----------------------------------------------------
//    CodeDef =3  Error during the dump of memory of the Ethernet CP
//    AddInf      Value of Parameter "LEN" in output of "AG_RECV" function
//    -----------------------------------------------------
//Ihmlist =16 hexa  Content of Modbus Response
//    CodeDef =1   Frame 1 ID transaction NOK
//    AddInf       Value of the field Trans ID read in the response
//    -----------------------------------------------------
//    CodeDef =2   Frame 1 Protocol ID NOK
//    AddInf       Value of the field Protocol ID read in the response
//    -----------------------------------------------------
//    CodeDef =3   Frame 1 field "Length" NOK
//    AddInf       Value of the field "Length" read in the response
//    -----------------------------------------------------
//    CodeDef =4   ALARM ! - Frame 2 field "Unit ID" NOK
//    AddInf       Value of the field "Unit ID" read in the response
//    -----------------------------------------------------
//    CodeDef =5   Frame 2 Exception Modbus response, field "Error code" NOK
//    AddInf       Value of the field "Error code" read in the response
//    -----------------------------------------------------
//    CodeDef =6   Frame 2 field "Function code" NOK
//    AddInf       Value of the field "Function code" read in the response
//    -----------------------------------------------------
//    CodeDef =7   Frame 2 field "Byte Count" NOK - READ mode
//    AddInf       Value of the field "Byte Count" read in the response
//    -----------------------------------------------------
//    CodeDef =8   Frame 2 field "Starting address" NOK - WRITE mode
//    AddInf       Value of the field "Starting address" read in the response
//    -----------------------------------------------------
//    CodeDef =9   Frame 2 field "Quantity of registers" NOK - WRITE mode
//    AddInf       Value of the field "Quantity of registers" read in the response
//    -----------------------------------------------------
//    CodeDef =11 (0B Hex)   Exception Modbus response
//    AddInf                 Modbus Exception code
//    -----------------------------------------------------
//(*) FC "AG_SEND" et "AG_RECV" main error code
//          | Code |
//Code (Dec)| (Hex)| Notification
//----------|------|------------------------------------
//32978 ou  | 80D2 | Module start adress erroneous
//-32558    |      |  => check "CPAddress" parameter
//----------|------|------------------------------------
//33155 ou  | 8183 |No configuration or service isn't started on Ethernet CP
//-32381             => Ethernet problem:
//                     * Ethernet cable unpluged
//                     * Do a ping command of CP Ethernet to Modbus server
//                       (slave)
//                     * Do a Ping command of Modbus server to CP Ethernet
//                     => Link TCP not set ' restart the dialog
//                      (Link Time set : 30s to 1 minute)
//                     => Check the link status under netpro ( Online in netpro,
//select the PLC and check the link status)
//                     => Check ID_LiaisonTCP parameter on BF
//                     => Check ID_LiaisonTCP parameter in netpro
//                     => reload the link in PLC (by NetPro)
//                     => The dialog receiver dont accepts TCP the connexion ( no
//listening on 502 port or over opening conexion port)
//                     => Rest the PLCs in dialog
//----------|------|------------------------------------
//33158 ou  | 8186 |  Wrong "ID" PARAMETER
//-32378    |      | => Check "ID" parameter
//----------|------|------------------------------------
//33540 ou  | 8304 |Link isn't set
//-31996             => Check the activity of Modbus TCP/IP Master.
//                   => check the wiring
//
//**************************** _ODIL_ID_ ***************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 25
//Dernier ID mis en oeuvre / Last ID implemented : 1960_25
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'COM'
NAME : 'MBTCP_Ma'
VERSION : 2.1
VAR_INPUT
  Valid : BOOL;	//Validation of the dialog (rise edge) /Validation du dialogue sur front montant
  CPAddress : WORD;	//Ethernet CP address in HW Config/ Adresse du coupleur Ethernet (dans HW Config)
  ID_liaisonTCP : INT;	//TCP Connection ID (in NetPro) / ID de la liaison TCP (dans NetPro)
  Registre_debut : INT;	//Starting Modbus address of remote partner/Adresse Modbus de debut du partenaire
  NBmots : INT;	//Number of Modbus registers / Nombre de mots a lire ou ecrire (max=120)
  Num_esclave : INT;	//JBUS slave Number of remote partner / numero de l'esclave Jbus du destinataire
  Mode : INT;	//Using MODE: 1=read; 2=write / Mode d'utilisation. 1= lecture; 2= ecriture
  Bloc_Zech : ANY;	//Data exchanging area / Zone d'echange (ex: P#DB90.DBx100.0 WORD 100)
END_VAR
VAR_OUTPUT
  OK : BOOL;	//END of the exchange is correct / Fin de dialogue CORRECT
  En_cours : BOOL;	//Exchange in progress / Dialogue en Cours
  Def : BOOL;	//END of the exchange in error (see Diag) / Fin de dialogue en Defaut (voir Diag)
  Diag : STRUCT	//Diagnostic structure / Structure de diagnostic
    Def : BOOL;	//Fault / Defaut
    Ala : BOOL;	//Alarm / Alarme
    Numlist : INT;	//Reserved for SMP List number / Reserve pour numero de liste SMP
    CodeDef : INT;	//Fault code / Code du defaut
    IhmList : INT;	//List number of the fault / Numero de liste du defaut
    AddInf : INT;	//Further Informations / Informations complementaires
    OKCmpt : DINT;	//Counter of correct Modbus dialogs / Compteur de dialogues corrects
    ErrCmpt : DINT;	//Counter of defaults / Compteur d'erreurs
  END_STRUCT ;
END_VAR
VAR
  Tempo_timeout : TON;	//Temporisation de mesure du Timeout
  val_tempo : BOOL;	//Validation de la temporisation de mesure du Timeout
  mem_trans_ID : WORD;	//Memorisation du param Tansaction Identifier( Header[0]
  recv_longrest : INT;	//Reception: Taille de la trame restante (Nbr Octets)
  Buffer : ARRAY  [0 .. 130 ] OF WORD;
  m_valid : BOOL;	//Memoire de l'INPUT Valid
  temps_ecoule : TIME;	//Mesure du Temps ecoule depuis la validation de la BF
  temp_precedent : TIME;
  timeout_recv : TIME;
  timeout_send : TIME;
  delta_temps : TIME;
  Mode_lecture : BOOL;	//FB en Mode 1 (Lecture MOdbus)
  Champs_length : INT;	//Trame Modbus-Header: Longueur des donnees restantes dans la trame (2 bytes)
  Zech_Length : WORD;	//Taille de "Block_Zech" en Nombre d'octets
  Zech_NDB : WORD;	//N° de DB "Block_Zech" (bytes 4-5 du Parametre ANY)
  Zech_adr : DINT;	//Adresse de "Block_Zech" (bytes 6-9 du Parametre ANY)
  Ctr_INPUT_OK : BOOL;	//Etape : controle OK des parametres d'entree
  encours_send : BOOL;	//Etape : en cours d'envoie des donnees
  encours_rcvt1 : BOOL;	//Etape a: en cours de reception de la trame 1 d'entete
  fin_recept1 : BOOL;	//Etape b: Premiere reception terminee
  encours_rcvt2 : BOOL;	//Etape c: en cours de reception de la trame 2
  fin_recept2 : BOOL;	//Etape D: Fin de reception de la derniere trame
  Fin_trt_FB : BOOL;	//Fin de traitement de la BF
  except_code_resp : BOOL;	//Reponse Modbus en erreur d'exception
  dvidage_tampon_CP : BOOL;	//Demande de vidage
  vidage_tampon_CP : BOOL;
  timeout_vidage : TIME;
  mvidage_tampon_CP_2 : BOOL;	//Memorisation: un vidage a ete effectue - 2eme tour AG_Recv
  mvidage_tampon_CP : BOOL;	//Memorisation: un vidage a ete effectue
END_VAR
VAR_TEMP
  ret_val2 : INT;
  ret_val3 : INT;	//Retour de diag fonction "Test_DB"
  ret_val1 : INT;
  SavAR1 : DINT;	//Backup of the Address register 1
  SavAR2 : DINT;	//Backup of the Address register 2
  BufferAddrDBi : DINT;	//Contient l'adresse ABSOLUE de Buffer dans le DBi
  BufferBlk : ANY;	//Parametre ANY en entree de AG_SEND et AG_RECV
  BufferAddrT2 : DINT;	//Adresse ABSOLUE de l'octet 6 de Buffer (adresse debut trame 2) dans le DBi
  time_cpu : TIME;
  Send_length : INT;
  send_done : BOOL;
  send_error : BOOL;
  send_status : WORD;
  recv_ndr : BOOL;	//AG_RECV: nouvelles donnees recues
  recv_error : BOOL;
  recv_status : WORD;
  recv_Len : INT;	//AG_RECV: longueur des donnees recues
  ZechBlk : ANY;	//Parametre ANY correspondant a la zone d'echange (donnees lues ou ecrites)
  ZregMBBlk : ANY;	//Param ANY correspondant a la zone des registres dans la Tram Modbus du "Buffer"
  wp : BOOL;
END_VAR
BEGIN
NETWORK
TITLE =Sauvegarde AR1 et AR2
//Sauvegarde des registres d'adresse, avant utilisation dans ce FB
//*ODIL_ID:1960_1*
//
TAR1 #SavAR1;
TAR2 #SavAR2;
NETWORK
TITLE =Controles validite des donnees en ENTREE
//Controles effectues avant le lancement du cycle du FB
//
//======
//Rappel sur le format ANY:
//Byte 0: 10hex - Byte 1: Type de donnees
//Byte 2-3: facteur de repetition
//Byte 4-5: N° de DB
//Byte 6-9: Zone memoire et adresse
//
//======
//Rappel sur le contenu d'une trame Modbus TCP
//  ____________________
// | Header   |  datas  |
// |__________|_________|
//
//Contenu du Header:
//------------------
//- Transaction identifier - 2 octets
//- Protocole indentifier - 2 octets
//- Length - 2 octets
//- N° d'esclave (Unit ID) - 1 octet
//
//Contenu des DATAs:
//------------------
//
//* Trame DATA en Mode LECTURE
//
//Contenu de la REQUETE
//- Function code - 1 octet - = 3 Hex
//- Starting address - 2 octets
//- Quantity of Registers - 2 octets - = 1 a 125
//
//Contenu de la REPONSE normale
//- Function code - 1 octet - = 3 Hex
//- Byte Count - 1 octet
//- Register value - (Quantitee de registres lus) x2 octets
//
//Contenu de la REPONSE d'exception Modbus
//- error code - 1 octet - = 83 Hex
//- Exception code - 1 octet
//
//
//* Trame DATA en Mode ECRITURE
//
//Contenu de la REQUETE
//- Function code - 1 octet - =10 Hex
//- Starting address - 2 octets
//- Quantity of Registers - 2 octets - = 1 a 125
//- Byte Count - 1 octet - = Quantitee de registres ecrits x2
//- Register value - (Quantitee de registres ecrits) x2 octets
//
//
//Contenu de la REPONSE normale
//- Function code - 1 octet - =10 Hex
//- Starting address - 2 octets
//- Quantity of Registers - 2 octets - = 1 a 123
//
//Contenu de la REPONSE d'exception Modbus
//- error code - 1 octet - = 90 Hex
//- Exception code - 1 octet
//*ODIL_ID:1960_2*
//
U #Ctr_INPUT_OK; //Si Controle deja effectue
SPB val5; //sauter a la section suivante
//--------- Reset des defauts si FB non valide, et si le traitement n'a pas ete effectue
//ces defauts ont ete montes lors du controle des ENTREEs
UN #Valid; //RAZ des defauts si FB non valide
SPBN val1; //rem: controle de validite des entrees, uniquement si FB validee
L 0; //RAZ de INT et DINT
T #Diag.IhmList; //
T #Diag.CodeDef; //
T #Diag.AddInf;
SET; //Mise a 1 du RLG
R #Diag.Def; //RAZ de BOOLEEN
R #Diag.Ala;
R #Def;
SPA end; //Saut en Fin de FB
//-------- Mode de fonctionnement du FB: Lecture ou Ecriture
val1: L 1; //Mode(INPUT)=1 ==> lecture
L #Mode;
==I;
S #Mode_lecture; //Mise a 1 mode lecture
SPB val2;
L 2; //Mode(INPUT)=2 ==> Ecriture
==I;
R #Mode_lecture; //Mise a 0 mode lecture
SPBN e001; //erreur-Parametre "Mode" incorrect
//--------- Verification de l'INPUT NBmots
// //Valeur Mini=1; MAX = 120
val2: NOP 0;
L #NBmots;
O(;
L 120;
>I;
);
O(;
POP; //L #NBmots
L 1;
<I;
);
SPB e005; //Erreur - Parametre NBmots incorrect (Min 1 - Max 120)
//--------- Validite Zone d'echange Bloc_Zech (ANY)
//---------- Recopie de Bloc_Zech (ANY) dans plusieurs variables (INT ou DINT)
// pour utilisation par la suite
LAR1 AR2; //AR2 contient l'Adresse ABSOLUE dans le DBi, du debut de la zone de donnees de ce FB
L P##Bloc_Zech; //Charge dans Accu1 l'adresse RELATIVE de ce Bloc ANY
+AR1; //AR1 contient l'adresse ABSOLUE de Bloc_Zech dans le DBi
//---------- //Taille de la zone d'echange
L DIB [AR1,P#1.0]; //Test du Byte 1 (Type de donnees) du Parametre ANY "Bloc_Zech"
O(; //Test si ce parametre est de type 8 bits
L 2; //si =2 ==> Type Byte
==I;
);
O(;
POP; //= L DIB [AR1,P#1.0]
L 3; //si =3 ==> Type Char
==I;
);
SPBN valA;
L DIW [AR1,P#2.0]; //Param ANY Octets 2 -3 (Facteur de repetition)
T #Zech_Length; //Taille de "Bloc_Zech" en Nombre d'octets
SPA valC;
valA: NOP 0; //Test du Byte 1 (Type de donnees) du Parametre ANY "Bloc_Zech"
O(; //Test si ce parametre est de type 16 bits
POP; //= L DIB [AR1,P#1.0]
L 4; //si =4 ==> Type Word
==I;
);
O(;
POP; //= L DIB [AR1,P#1.0]
L 5; //si =5 ==> Type Int
==I;
);
SPBN valB;
L DIW [AR1,P#2.0]; //Param ANY Octets 2 -3 (Facteur de repetition)
L 2; //Nombre d'octets = 2 fois Nbre de Mots
*I;
T #Zech_Length; //Taille de "Bloc_Zech" en Nombre d'octets
SPA valC;
valB: NOP 0; //Test du Byte 1 du Parametre ANY (Type de donnees)
O(; //Test si ce parametre est de type 32 bits
POP; //= L DIB [AR1,P#1.0]
L 6; //si =6 ==> Type DWord
==I;
);
O(;
POP; //= L DIB [AR1,P#1.0]
L 7; //si =7 ==> Type DInt
==I;
);
SPBN e002; //"Bloc_Zech" - Parametre "Type" incorrect
L DIW [AR1,P#2.0]; //Param ANY Octets 2 -3 (Facteur de repetition)
L 4; //Nombre d'octets = 4 fois Nbre de DoubleMots
*I;
T #Zech_Length; //Taille de "Bloc_Zech" en Nombre d'octets
//---------- Verification de la coherence Taille de "Bloc_Zech" avec NBmots en INPUT
valC: NOP 0; //La Taille de "Bloc_Zech" doit etre superieur ou egale a NBmots en INPUT
L #NBmots;
L 2; //NBmots; correspondance en Octets
*I;
L #Zech_Length;
>D;
SPB e003; //Erreur Taille de "Bloc_Zech" inferieur au Parametre "NBmots" en INPUT
//---------- //Recuperation du N° de DB de la zone d'echange
L DIW [AR1,P#4.0];
T #Zech_NDB; //Recopie Octets 4-5 (N° de DB)
//---------- //Recuperation de l'adresse pointee dans la zone d'echange
L DID [AR1,P#6.0];
T #Zech_adr; //Recopie Octets 6-9 (adresse pointee)
//---------- Test de "Bloc_Zech"
CALL "TEST_DB" (
DB_NUMBER := #Zech_NDB,
RET_VAL := #ret_val3,
DB_LENGTH := #Zech_Length,
WRITE_PROT := #wp);
SPBIN e004; //Erreur d'accessibilite a "Bloc_Zech"
//--------------------- Fin de verification des INPUT
L 0; //RAZ de INT et DINT
T #Diag.IhmList; //
T #Diag.CodeDef; //
T #Diag.AddInf;
SET; //Mise a 1 du RLG
R #Diag.Def; //RAZ de BOOLEEN
R #Diag.Ala;
R #Def;
S #Ctr_INPUT_OK;
S #En_cours; //Mise a 1 de la Sortie "En_cours"
NETWORK
TITLE =FB devalidee, fin d'execution du FB
//Dans ces cas, ne pas derouler le FB
//*ODIL_ID:1960_3*
//
val5: O(;
UN #Valid;
UN #m_valid;
);
O(;
U #Valid;
U #Fin_trt_FB;
);
SPBN buf0;
BEA; //Fin de bloc inconditionnelle
NETWORK
TITLE =Calcul de l'adresse ABSOLUE de la zone "BUFFER"
//Zone BUFFER, d'ou sont emmises et recues les donnees.
//Calcul de l'Adresse ABSOLUE dans le DB d'intance
//*ODIL_ID:1960_4*
//
buf0: LAR1 AR2; //AR2 contient l'Adresse ABSOLUE dans le DBi, du debut de la zone de donnees de ce FB
L P##Buffer; // adresse RELATIVE de "Buffer" dans la zone de donnees du FB
+AR1;
TAR1 #BufferAddrDBi; //#BufferAddrDBi Contient l'adresse ABSOLUE de "Buffer" dans le DBi
NETWORK
TITLE =Tempo de surveillance du timeout
//"Temp_ecoule" utilise par la suite pour gerer les TimeOUT
//*ODIL_ID:1960_5*
//
CALL #Tempo_timeout (// Lancement ou arret dela tempo (selon etat de Val_tempo)
IN := #val_tempo,
PT := T#2M,
ET := #temps_ecoule);
NETWORK
TITLE =Initialisation apres la validation ou devalidation
//Initialisation sur Front montant de validation, ainsi que sur Front montant de
//devalidation (en fin de traitement du FB)
//*ODIL_ID:1960_6*
//
//--------Front montant de validation --------------
//
U #Valid;
UN #Fin_trt_FB;
UN #m_valid;
SPBN ini2; // Si pas de front montant, ne pas initialiser
S #m_valid; //Memorisation de la validation
//------- Zone d'initialisation sur front montant validation --------
SET; //Mettre a 1 le RLG
S #val_tempo; //Lancement de la tempo de surveillance du timeout
SPA orp0; // fin initialisation sur front montant validation
//------ RAZ apres Devalidation du FB apres son traitement ------
ini2: NOP 0;
U #Fin_trt_FB; //
SPBN orp0; //RAZ apres fin de traitement
UN #Valid; //et devalidation du FB
SPBN end; //Sinon, saut en Fin de FB
SET; //Mettre a 1 le RLG
R #m_valid; //
R #Fin_trt_FB; //RAZ de BOOLEEN
R #Mode_lecture; //
R #val_tempo; //
R #Diag.Def; //RAZ de BOOLEEN
R #Diag.Ala; //
R #Ctr_INPUT_OK; //RAZ de BOOLEEN
R #encours_send; //
R #encours_rcvt1; //
R #fin_recept1; //
R #encours_rcvt2; //
R #fin_recept2; //
R #except_code_resp;
R #OK;
R #En_cours;
R #Def;
L 0; //RAZ de INT et DINT
T #Diag.IhmList; //
T #Diag.CodeDef; //
T #Diag.AddInf;
SPA end; // fin initialisation apres Devalidation du FB
// //Saut en Fin de FB
NETWORK
TITLE =Orientation vers zones programme
//*ODIL_ID:1960_7*
//Saut vers la zone programme a derouler
//
orp0: NOP 0;
U #Fin_trt_FB; //Fin de traitement du FB
SPB end; //Saut en Fin de FB
U #vidage_tampon_CP; //Vidage en cours
SPB vid0;
U #dvidage_tampon_CP; //Demande de vidage (externe a la FB)
SPBN orp1;
L #temps_ecoule; //Initialisation du Timeout
T #timeout_vidage;
SET; //Mise a 1 du RLG
R #dvidage_tampon_CP;
S #vidage_tampon_CP;
SPA vid0;
orp1: U #encours_send; //AG_SEND en cours
SPB snd0;
O #encours_rcvt1;
O #encours_rcvt2;
SPB rcv0;
NETWORK
TITLE =========== Envoi de la requete MODBUS ==========
//- Construction de la trame Modbus TCP (Header + data)
//- Construction du parametre ANY en entree de AG_SENG
//- Envoi de la commande AG_SEND
//*ODIL_ID:1960_8*
//

NETWORK
TITLE =Construction du HEADER de la trame Modbus-TCP
//La Trame Modbus est construite dans la table de mots "Buffer" (STAT)
//
//Header de la Trame Modbus TCP:
//- Transaction identifier - 2 octets
//- Protocole indentifier - 2 octets
//- Length - 2 octets
//- N° d'esclave - 1 octet
//*ODIL_ID:1960_9*
//
LAR1 #BufferAddrDBi; //fait pointer AR1 sur l'adresse ABSOLUE de debut de "Buffer" dans le DBi
// Transaction identifier - 2 octets - incrementation de 1 a chaque requete Modbus
L #mem_trans_ID;
L 1; // incrementation de 1
+I;
T DIW [AR1,P#0.0]; //Trame Modbus - Trans ID
T #mem_trans_ID; // memorisation de cette nouvelle valeur de transaction
// Protocole indentifier - 2 octets - Protocole ID =0 pour Modbus
L 0;
T DIW [AR1,P#2.0]; //Trame Modbus - Protocole ID
// Length - 2 octets // Number of following Bytes including NUM_SLAVE
U #Mode_lecture; //En mode demande de LECTURE
SPBN req1;
L 6; // requete de lecture ==> 5 octets de datas + 1 octet NUM_SLAVE =6 octets
T DIW [AR1,P#4.0];
SPA reqb;
//
req1: NOP 0; //En mode demande d'ECRITURE
L #NBmots;
L 2; //= Nbre de mots demandes x2 (=nombre d'octets)
*I;
L 7; //requete d'ecriture: 1 octet NUM_SLAVE + 6 octets (Fonction, starting address...) + data a envoyer
+I; //
T DIW [AR1,P#4.0];
// N° d'esclave - 1 octet
reqb: L #Num_esclave; // renseigne en INPUT
T DIB [AR1,P#6.0];
NETWORK
TITLE =Contruction des DATAS de la trame Modbus-TCP
//Trame DATA commune LECTURE et ECRITURE
//- Function code - 1 octet
//- Starting address - 2 octets
//- Quantity of Registers - 2 octets
//*ODIL_ID:1960_10*
//
// Function code - 1 octet
//
U #Mode_lecture; //En mode demande de LECTURE
SPBN req4;
L 3; // Fonction Modbus =3 : Read Holding Registers
T DIB [AR1,P#7.0];
SPA reqa;
req4: NOP 0; //En mode demande d'ECRITURE
L 16; // Fonction Modbus =16 (decimale) : Write Multiple Registers
T DIB [AR1,P#7.0];
// Starting Address - 2 octets
reqa: L #Registre_debut; // renseigne en INPUT
T DIW [AR1,P#8.0];
// Quantity of Registers - 2 octets
L #NBmots; // renseigne en INPUT (Nbre de MOTS)
T DIW [AR1,P#10.0];
NETWORK
TITLE =Contruction des DATAS de la trame Modbus-TCP - Suite
//Pour la trame de demande d'ECRITURE, y ajouter:
//- Byte count - 1 octet
//- Register Value - registres a envoyer (N octets recopies de la ZONE ECHANGE
//vers le BUFFER)
//       * Construction des parametres ANY correspondants a ces 2 blocs
//       * Utilisation de la fonction BLKMOV pour transferer les donnees de ces 2
//         blocs
//*ODIL_ID:1960_11*
//
U #Mode_lecture; //En mode demande de LECTURE
SPB req9; //Fin de la trame Modbus
// //Sinon, en Mode ECRITURE
// Byte count - 1 octet
L #NBmots; //renseigne en INPUT du FB
L 2; //= Nbre de mots demandes x2 (=nombre d'octets)
*I;
T DIB [AR1,P#12.0];
//------- Register Value - recopie des donnees a envoyer ---------
//Construction du parametre ANY "ZechBlk" source des donnees - zone SOURCE de BLKMOV
LAR1 P##ZechBlk; // AR1 pointe au debut du parametre ANY
//
//
L W#16#1004; // Byte 0: 10hex - Byte 1: 04==> Type de donnees WORD;
T LW [AR1,P#0.0];
L #NBmots; //= Nbre de mots demandes
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres de mots demandes
L #Zech_NDB;
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB) specifies en entree du FB dans le Param. ANY Bloc_Zech
L #Zech_adr;
T LD [AR1,P#6.0]; //Recopie Octets 6-9 (adresse pointee)specifies en entree du FB dans le Param. ANY Bloc_Zech
//Construction du parametre ANY de la zone des valeurs des registres dans "Buffer" - zone DESTINATION de BLKMOV
LAR1 P##ZregMBBlk; // AR1 pointe au debut du parametre ANY
// correspondant a la zone des registres dans la Tram Modbus du "Buffer"
L W#16#1004; // Byte 0: 10hex - Byte 1: 04 ==> Type de donnees WORD;
T LW [AR1,P#0.0];
L #NBmots; //= Nbre de mots demandes
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres de mots demandes
L DINO; //Recuperation du N° du DBi de cette BF
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB)
LAR2 #BufferAddrDBi; // AR2 pointe au debut de la zone "Buffer"
L P#13.0; //Trame Modbus: debut des registres Modbus, 13 octets apres le debut de la trame
+AR2;
TAR2; //Charge AR2 dans Accu1
T LD [AR1,P#6.0]; //Adresse Absolue des registres Modbus du Bloc "Buffer"
LAR2 #SavAR2; //Restore AR2
//Recopie des donnees Modbus a envoyer, dans le Buffer (zone de registre Modbus)
CALL "BLKMOV" (
SRCBLK := #ZechBlk,
RET_VAL := #ret_val2,
DSTBLK := #ZregMBBlk);
L 0;
L #ret_val2;
<>I; //Erreur si le retour de la fonction est different de 0
SPB e020; //Retour d'erreur de BLKMOV de requete
req9: NOP 0; // FIN de la construction de la trame MODBUS TCP dans le BUFFER
NETWORK
TITLE =Construction de la zone de donnees ANY en entree de AG_SEND
//Rappel sur le format ANY
//Voir en Commentaire du FB
//*ODIL_ID:1960_12*
//
snd0: LAR1 P##BufferBlk; // AR1 pointe au debut du parametre ANY
//Byte 0: 10hex - Byte 1: Type de donnees
L W#16#1002; //Parametre ANY - Byte 1 = 02==> Type Byte;
T LW [AR1,P#0.0];
//Byte 2-3: facteur de repetition
U #Mode_lecture; //en mode LECTURE
SPBN snd1;
L 12; // en mode lecture, le nombre d'octets a envoyer est 12
T LW [AR1,P#2.0]; //Parametre ANY - Byte 2-3: facteur de repetition
T #Send_length; //Parametre Longueur de AG_SEND
SPA snd2;
snd1: NOP 0; //en mode ECRITURE
L #NBmots;
L 2; //NB d'octets correspondant au nombre de mots a ecrire
*I;
L 13; //plus les 13 octets precedents les registres Modbus a envoyer
+I;
T LW [AR1,P#2.0]; //Parametre ANY - Byte 2-3: facteur de repetition
T #Send_length; //Parametre Longueur de AG_SEND
//Byte 4-5: N° de DB
snd2: L DINO; //recuperation du N° de DB d'instance
T LW [AR1,P#4.0]; //Parametre ANY - Byte 4-5: N° du DBi
//Byte 6-9: Zone memoire et adresse
L #BufferAddrDBi;
T LD [AR1,P#6.0]; //Parametre ANY - Pointe sur l'adresse Absolue de Buffer
// FIN de la construction du parametre ANY de AG_SEND
NETWORK
TITLE =Envoie de la requete Modbus - AG_SEND
//Envoie dans le coupleur Ethernet, du contenu du BUFFER (contenant la trame
//Modbus TCP)
//*ODIL_ID:1960_13*
//
UN #encours_send;
SPBN snd3; //a la premiere validation,
L #temps_ecoule; //initialisation du temps de reference du Timeout pour AG_SEND
T #timeout_send;
snd3: SET; //Mise a 1 du RLG
S #encours_send; // validation de AG_SEND
//Lancement de la fonction AG_SEND
CALL "AG_SEND" (
ACT := #encours_send,
ID := #ID_liaisonTCP,
LADDR := #CPAddress,
SEND := #BufferBlk,
LEN := #Send_length,
DONE := #send_done,
ERROR := #send_error,
STATUS := #send_status);
//AG_SEND termine en erreur
U #send_error;
SPB e040; //AG_SEND termine en erreur
//AG_SEND termine correctement
U #send_done;
SPBN snd5;
R #encours_send;
S #encours_rcvt1; //Lancement de la phase de reception de la reponse
L #temps_ecoule; //initialisation du temps de reference du Timeout pour AG_Recv
T #timeout_recv;
SPA rcv0;
// // sinon AG_SEND encore active
// surveillance du Timeout
snd5: L #temps_ecoule; //Visualisation du temps pour AG_SEND
L #timeout_send;
-D; //Accu2-Accu1
L 3000; // 3 secondes
<D;
SPBN e041; //AG_SEND termine en TIMEOUT
SPA end; //Saut en Fin de FB
NETWORK
TITLE =========== RECEPTION et ANALYSE de la reponse MODBUS ==========
//Traitement de la reponse Modbus en 2 trames
//- Reception la premiere trame (debut de la reponse Modbus):
//    * Construction du parametre ANY en entree de AG_RECV
//    * lancement de AG_RECV pour recuperer les 6 premiers octets de la reponse
//      Modbus
//
//- Analyse de la premiere Trame
//    * controle de la coherence des donnees recues
//    * recuperation de l'information de la longueur des donnees restantes
//
//- Reception la seconde trame(fin de la reponse Modbus):
//    * Construction du parametre ANY en entree de AG_RECV
//    * lancement de AG_RECV pour recuperer les derniers octets de la reponse
//      Modbus
//
//- Analyse de la seconde Trame
//    * controle de la coherence des donnees recues
//    * recuperation de la valeur de registres lu (en mode LECTURE uniquement)
//*ODIL_ID:1960_14*
//

NETWORK
TITLE =Construction de la zone de donnees ANY en entree de AG_RECV
//Rappel sur le format ANY - voir en commentaire du FB
//*ODIL_ID:1960_15*
//

NETWORK
TITLE =Partie commune toutes trames en reception
//*ODIL_ID:1960_16*
rcv0: NOP 0;
O #encours_rcvt1;
O #encours_rcvt2; //Partie valable pendant les phases de reception
SPBN rcv4; //Sinon, aller en phase d'analyse Trame 1
LAR1 P##BufferBlk; // AR1 pointe au debut du parametre ANY
//Byte 0: 10hex - Byte 1: Type de donnees
L W#16#1002; //Parametre ANY - Byte 1=02 ==> Type Byte;
T LW [AR1,P#0.0];
//Byte 4-5: N° de DB
L DINO; //recuperation du N° de DB d'instance
T LW [AR1,P#4.0]; //Parametre ANY - Byte 4-5: N° du DBi
NETWORK
TITLE =PREMIERE TRAME - Reception
//- Fin de construction du parametre ANY; specificites 1ere trame
//- Renseignements parametres AG_Recv pour cette trame
//*ODIL_ID:1960_17*
//
U #encours_rcvt1; //Phase de reception TRAME 1
SPBN rcv3; //Sinon aller dans la phase de reception Trame 2
//Fin de construction du parametre ANY; specificites 1ere trame
//---------- S'il y a eu un vidage au cycle precedent
//Byte 2-3: facteur de repetition
U #mvidage_tampon_CP_2; //Le premier octet de la trame 1 a deja ete recu suite a un vidage du coupleur Ethernet
SPBN rcvA; // relance de la reception des octets restants de la trame 1
L W#16#5; //Parametre ANY - 5 ==> reception de 5 octets
T LW [AR1,P#2.0];
//Byte 6-9: Zone memoire et adresse
LAR2 #BufferAddrDBi;
L P#1.0; //decalage de 1 octet
+AR2;
TAR2; //Charge AR2 dans Accu1
T LD [AR1,P#6.0]; //Parametre ANY - Pointe sur l'adresse Absolue de Buffer, sur son octet 1
LAR2 #SavAR2; //Restore AR2
SPA AGR0; // Lancer AG_Recv
//---------- Cas Normal, S'il n'y a PAS eu de vidage au cycle precedent
rcvA: L W#16#6;
T LW [AR1,P#2.0]; //Parametre ANY - 6 ==> reception de 6 octets
//Byte 6-9: Zone memoire et adresse
L #BufferAddrDBi;
T LD [AR1,P#6.0]; //Parametre ANY - Pointe sur l'adresse Absolue de Buffer, en DEBUT de zone
SPA AGR0; // Lancer AG_Recv
NETWORK
TITLE =SECONDE TRAME - Reception
//- Fin de construction du parametre ANY; specificites 2nd trame
//- Renseignements parametres AG_Recv pour cette trame
//*ODIL_ID:1960_18*
//
rcv3: NOP 0;
U #encours_rcvt2; //Phase de reception TRAME 2
SPBN rcv4; //Sinon aller dans la phase d'Analyse Trame 1
//Construction du parametre ANY; specificites 2nd trame
//Byte 2-3: facteur de repetition
L #recv_longrest; //Taille de la trame restante (calculee dans la phase d'ANALYSE de la trame 1)
T LW [AR1,P#2.0]; //Parametre ANY - Facteur de repetition
//Byte 6-9: Zone memoire et adresse
LAR1 #BufferAddrDBi; //Pointe sur l'adresse Absolue de Buffer en debut de zone
L P#6.0;
+AR1;
TAR1 #BufferAddrT2; //Pointe sur l'adresse Absolue de Buffer sur le Byte 6 (adresse debut trame 2)
LAR1 P##BufferBlk; //Recharge l'adresse du parametre ANY
L #BufferAddrT2;
T LD [AR1,P#6.0]; //Parametre ANY - Pointe sur l'adresse Absolue de Buffer sur le Byte 6 (adresse debut trame 2)
// // Lancer AG_Recv
NETWORK
TITLE =Reception de la reponse Modbus - AG_RECV
//Receptions des trames 1 puis trame 2, selon le contenu du parametre ANY
//BufferBLK
//*ODIL_ID:1960_19*
//
AGR0: NOP 0;
O #encours_rcvt1;
O #encours_rcvt2;
SPBN rcv4; //Sinon aller dans la phase d'Analyse Trame 1
CALL "AG_RECV" (
ID := #ID_liaisonTCP,
LADDR := #CPAddress,
RECV := #BufferBlk,
NDR := #recv_ndr,
ERROR := #recv_error,
STATUS := #recv_status,
LEN := #recv_Len);
//-------- AG_Recv termine en erreur
U #recv_error;
SPB e080; //AG_Recv termine en erreur
//-------- AG_Recv termine correctement
U #recv_ndr;
SPBN AGR1;
U #encours_rcvt1; //**** Reception correcte de la TRAME 1
SPBN agrB;
U #mvidage_tampon_CP; // S'il y a eu vidage lors de l'utilisation precedente du FB, AG_RECV lit 1 seul octet (1er octet de la trame 1)
SPBN agrA; //Faire une verif de la longueur recue
R #mvidage_tampon_CP;
S #mvidage_tampon_CP_2; //Relance de AG_RECV avec lecture (des octets restants de la trame 1)
L 1;
L #recv_Len; //Apres vidage, la longueur recue doit etre de 1 octet
==I;
SPBN e082; //Erreur de vidage de la memoire tampon du coupleur Ethernet
SPA end; //Saut en Fin de FB
agrA: R #encours_rcvt1; //**** Fin de reception de la trame 1
S #fin_recept1; //
R #mvidage_tampon_CP_2; //Lancement de la phase d'Analyse de la reponse Trame 1
SPA rcv4; //
agrB: NOP 0; //**** Reception correcte de la TRAME 2
SET; //Mise a 1 du RLG
R #encours_rcvt2;
S #fin_recept2; //Lancement de la phase d'Analyse de la reponse Trame 2
SPA rcv5; //
//-------- sinon AG_Recv encore active
// //surveillance du Timeout
AGR1: L #temps_ecoule; //Visualisation du temps pour AG_RECV
L #timeout_recv;
-D; //Accu2-Accu1
L 5000; // 5 secondes
<D;
SPBN e081; //AG_Recv termine en TIMEOUT
SPA end; //Saut en Fin de FB
NETWORK
TITLE =Analyse premiere Trame
//Analyse des 6 premiers octets recus: il s'agit des 6 premiers octets du Header
//de la trame Modbus
//Header de la Trame Modbus TCP (6 premiers octets):
//- Transaction identifier - 2 octets
//- Protocole indentifier - 2 octets
//- Length - 2 octets
//*ODIL_ID:1960_20*
//
rcv4: U #fin_recept1;
SPBN rcv5; //Sinon aller dans la phase d'Analyse de la Trame 2
LAR1 #BufferAddrDBi; //fait pointer AR1 sur l'adresse de debut de Buffer dans le DBi
//------ Controle du champ "Transaction Identifier" - octets 0 et 1
L #mem_trans_ID; //Valeur envoyee de la requete Modbus
L DIW [AR1,P#0.0]; //Buffer: octets 0 et 1
==I;
T #Diag.AddInf;
SPBN e160; //Erreur - Trame 1 Transaction ID NOK
//------Controle du champs "Protocol Identifier" - octets 2 et 3
L 0; //0=Protocole Modbus
L DIW [AR1,P#2.0]; //Buffer: octets 2 et 3
==I;
T #Diag.AddInf;
SPBN e161; //Erreur - Trame 1 Protocol ID NOK
//------Controle du champ "Length" - octets 4 et 5
// //"Length" doit etre coherente avec le nombre de mots demandes
// // ou avec une retour d'erreur d'exception Modbus
//------ //en mode LECTURE
U #Mode_lecture;
SPBN rcvb;
L #NBmots; //
L 2; //= Nbre de mots demandes x2 (=nombre d'octets)
*I; //
L 3; //
+I; //+3 octets (unit identifier - Fonction code - Byte Count
L DIW [AR1,P#4.0]; //Buffer: octets 4 et 5
==I; //La trame contient les donnees demandees
SPB rcvf;
L 3; //si erreur exception Modbus, donnees restantes = 3octets
==I; //Unit ID - error code - exception code
SPBN rcvd; //Sinon, Erreur
S #except_code_resp; //Reponse d'exception a traiter
SPA rcvf;
rcvd: POP; //=> L DIW [AR1,P#4.0]
T #Diag.AddInf;
SPA e162; //Erreur - Trame 1 champ "Length" NOK
//------ //en Mode ECRITURE
rcvb: L 6; //
L DIW [AR1,P#4.0]; //Reponse normale = 6 octets (unitID - Fonction code - Starting add - Qty regist
==I;
SPB rcvf;
L 3; //si erreur exception Modbus, donnees restantes = 3octets
==I; //Unit ID - error code - exception code
SPBN rcve; //Sinon, Erreur
S #except_code_resp; //Reponse d'exception a traiter
SPA rcvf;
rcve: POP; //= L DIW [AR1,P#4.0]
T #Diag.AddInf;
SPA e162; //Erreur - Trame 1 champ "Length" NOK
//---------- //Fin de la phase d'analyse trame 1
rcvf: NOP 0;
T #recv_longrest; //Taille de la trame restante
SET; //Mise a 1 du RLG
R #fin_recept1;
S #encours_rcvt2; //Lancement de la phase de la reponse Trame 2
SPA end; //Saut en Fin de FB
NETWORK
TITLE =Analyse 2nd Trame
//Contient le Fin du Header de la trame Modbus (dernier octet du header)
//- N° d'esclave (Unit ID) - 1 octet
//
//Suivi des DATAs:
//
//*Reponse normale a une demande de Lecture
//- Function code - 1 octet
//- Byte Count - 1 octet
//- Register value - (Quantitee de registres lus) x2 octets
//
//*Reponse normale a une demande d'ecriture
//- Function code - 1 octet
//- Starting address - 2 octets
//- Quantity of registers - 2 octets
//
//*Reponse d'exception Modbus en ecriture ou en lecture
//- error code - 1 octet
//- Exception code - 1 octet
//*ODIL_ID:1960_21*
//
rcv5: U #fin_recept2;
SPBN end; //Saut en Fin de FB
LAR1 #BufferAddrDBi; //fait pointer AR1 sur l'adresse de debut de Buffer dans le DBi
//--------- Controle du champ "Unit ID" - octet 6
L #Num_esclave;
L DIB [AR1,P#6.0]; //Buffer: octet 6
==I;
SPB at2a; //Control OK, aller au controle suivant
T #Diag.AddInf; //Sinon, Alarme - Trame 2 champ "Unit ID" NOK
L W#16#16;
T #Diag.IhmList;
L 4; //Alarme - Trame 2 champ "Unit ID" NOK
T #Diag.CodeDef;
SET; //Mise a 1 du RLG
S #Diag.Ala; //Mise a 1 du bit d'alarme
// //lire quand meme les donnees restantes dans le buffer
//--------- Reponse d'exception MODBUS
at2a: U #except_code_resp;
SPBN at2b;
//******** Controle du champ Error code - octet 7
U #Mode_lecture; //En Mode LECTURE
SPBN at2c;
L B#16#83; //Code erreur en Lecture
L DIB [AR1,P#7.0]; //Buffer: octet 7
==I;
SPB at2d; //Control OK - recuperation du code d'exception Modbus
T #Diag.AddInf;
SPA e164; //Erreur - Trame 2 reponse exception Modbus, champ "Error code" NOK
at2c: NOP 0; //En Mode ECRITURE
L B#16#90; //Code erreur en Ecriture
L DIB [AR1,P#7.0]; //Buffer: octet 7
==I;
SPB at2d; //Control OK - recuperation du code d'exception Modbus
T #Diag.AddInf;
SPA e164; //Erreur - Trame 2 reponse exception Modbus, champ "Error code" NOK
at2d: NOP 0; //Recuperation du code d'exception Modbus
L DIB [AR1,P#8.0]; //Buffer: octet 8 - Exception code
T #Diag.AddInf;
SPA e170; //Reponse d'exception Modbus
//--------- Controle de la Reponse en MODE LECTURE
at2b: U #Mode_lecture;
SPBN at2e;
//******* Controle du champ "Function code" - octet 7
L 3; // Fonction modbus 3 : "Read Holding Registers"
L DIB [AR1,P#7.0]; //Buffer: octet 7
==I;
SPB at2g; //Controle OK, aller au control suivant
T #Diag.AddInf;
SPA e165; //Erreur - Trame 2 champ "Function code" NOK
//******* Controle du champ "Byte Count" - octet 8
at2g: NOP 0;
L #NBmots;
L 2;
*I; //Le champ doit contenir la taille (en octets) des regitres modbus
L DIB [AR1,P#8.0];
==I;
SPB dat0; //Control OK, recuperation des registres envoyes
T #Diag.AddInf;
SPA e166; //Erreur - Trame 2 champ "Byte Count" NOK - mode Lecture
//--------- Controle de la Reponse en MODE ECRITURE
at2e: L 16; // Fonction Modbus 16hex: "Write Multiple Registers"
L DIB [AR1,P#7.0]; //Buffer: octet 7
==I;
SPB at2h; //Controle OK, aller au control suivant
T #Diag.AddInf;
SPA e165; //Erreur - Trame 2 champ "Function code" NOK
//******* Controle du champ "Starting address" - octets 8 et 9
at2h: NOP 0;
L #Registre_debut;
L DIW [AR1,P#8.0]; //Buffer: octets 8 et 9
==I;
SPB at2i; //Controle OK, aller au control suivant
T #Diag.AddInf;
SPA e167; //Erreur - Trame 2 champ "Starting address" NOK - mode ecriture
//******* Controle du champ "Quantity of registers" - octets 10 et 11
at2i: NOP 0;
L #NBmots;
L DIW [AR1,P#10.0]; //Buffer: octets 10 et 11
==I;
SPB at2j; //Controle OK, fin du traitement OK
T #Diag.AddInf;
SPA e168; //Erreur - Trame 2 champ "Quantity of registers" NOK - mode ecriture
//--------- Fin de traitement OK en ECRITURE
at2j: SET; //Mise a 1 du RLG
S #OK; //fin du traitement OK
R #En_cours;
S #Fin_trt_FB;
L #Diag.OKCmpt;
+ L#1; //+ 1 compteur d'echanges corrects
T #Diag.OKCmpt;
SPA end; //Saut en Fin de FB
NETWORK
TITLE =Recuperation des registres en mode LECTURE par BLKMOV
//Pour la reponse a la demande de LECTURE,
//- recopier les registres recus dans le BUFFER, vers la ZONE ECHANGE "Bloc_Zech"
//       * Construction des parametres ANY correspondants a ces 2 blocs
//       * Utilisation de la fonction BLKMOV pour transferer les donnees d'un
//blocs a l'autre
//*ODIL_ID:1960_22*
//
dat0: NOP 0; //En mode demande de LECTURE
//--------- Construction du parametre ANY "ZechBlk" source des donnees - zone DESTINATION de BLKMOV
LAR1 P##ZechBlk; // AR1 pointe au debut du parametre ANY
//
//
L W#16#1004; // Byte 0: 10hex - Byte 1: 04==> Type de donnees WORD;
T LW [AR1,P#0.0];
L #NBmots; //= Nbre de mots demandes en INPUT du FB
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres de mots demandes
L #Zech_NDB;
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB) specifies en entree du FB dans le Param. ANY Bloc_Zech
L #Zech_adr;
T LD [AR1,P#6.0]; //Recopie Octets 6-9 (adresse pointee)specifies en entree du FB dans le Param. ANY Bloc_Zech
//--------- Construction du parametre ANY de la zone des valeurs des registres dans "Buffer" - zone SOURCE de BLKMOV
LAR1 P##ZregMBBlk; // AR1 pointe au debut du parametre ANY
// correspondant a la zone des registres dans la Trame Modbus du "Buffer"
L W#16#1004; // Byte 0: 10hex - Byte 1: 04 ==> Type de donnees WORD;
T LW [AR1,P#0.0];
L #NBmots; //= Nbre de mots demandes
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres de mots demandes
L DINO; //Recuperation du N° du DBi de cette BF
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB)
LAR2 #BufferAddrDBi; // AR2 pointe au debut de la zone "Buffer"
L P#9.0; //Trame Modbus: debut des registres Modbus, 9 octets apres le debut de la trame
+AR2;
TAR2; //Charge AR2 dans Accu1
T LD [AR1,P#6.0]; //Adresse Absolue des registres Modbus du Bloc "Buffer"
LAR2 #SavAR2; //Restore AR2
//--------- Recopie des donnees Modbus recues dans le BUFFER, vers la Zone d'echange (INPUT "Bloc_Zech")
CALL "BLKMOV" (
SRCBLK := #ZregMBBlk,
RET_VAL := #ret_val2,
DSTBLK := #ZechBlk);
L 0;
L #ret_val2;
==I; //Erreur si le retour de la fonction est different de 0
SPBN e021; //Retour d'erreur de BLKMOV de reponse
//--------- Fin de traitement OK en LECTURE
S #OK; //fin du traitement OK
R #En_cours;
S #Fin_trt_FB;
L #Diag.OKCmpt;
+ L#1; //+ 1 compteur d'echanges corrects
T #Diag.OKCmpt;
SPA end; //Saut en Fin de FB
NETWORK
TITLE =----------- Erreurs et diagnostics -----------
//*ODIL_ID:1960_23*
//---------Ihmlist = 1 hexa - Parametres en INPUT non corrects
//
e001: L #Mode;
T #Diag.AddInf;
L W#16#1;
L 1; //erreur-Parametre "Mode" incorrect
SPA ERVa;
e002: L DIB [AR1,P#1.0]; //Recopie Byte 1 du Parametre ANY (Type de donnees)
T #Diag.AddInf;
L W#16#1;
L 2; //"Bloc_Zech" - Parametre "Type" incorrect
SPA ERVa;
e003: L 0;
T #Diag.AddInf;
L W#16#1;
L 3; //Erreur Taille de "Bloc_Zech" inferieur au Parametre "NBmots" en INPUT
SPA ERVa;
e004: L #ret_val3;
T #Diag.AddInf;
L W#16#1;
L 4; //Erreur d'accessibilite a "Bloc_Zech"
SPA ERVa;
e005: L #NBmots;
T #Diag.AddInf;
L W#16#1;
L 5; //Erreur - Parametre NBmots incorrect (Min 1 - Max 120)
SPA ERVa;
//---------Ihmlist = 2 hexa - defaut SFB et SFC (ex: BlkMove)
e020: L #ret_val2;
T #Diag.AddInf;
L W#16#2;
L 1; //Retour d'erreur de BLKMOV de requete
SPA ERR;
e021: L #ret_val2;
T #Diag.AddInf;
L W#16#2;
L 2; //Retour d'erreur de BLKMOV de reponse
SPA ERR;
//---------Ihmlist = 4 hexa - defaut en sortie AG_Send
e040: L #send_status;
T #Diag.AddInf;
L W#16#4;
L 1; //AG_SEND termine en erreur
SPA ERR;
e041: L #send_status;
T #Diag.AddInf;
L W#16#4;
L 2; //AG_SEND termine en TIMEOUT
SPA ERR;
//---------Ihmlist = 8 hexa - defaut en sortie AG_Recv
e080: L #recv_status;
T #Diag.AddInf;
L W#16#8;
L 1; //AG_Recv termine en erreur
SPA ERR;
e081: L #recv_status;
T #Diag.AddInf;
L W#16#8;
L 2; //AG_Recv termine en TIMEOUT
SPA ERR;
e082: L #recv_Len;
T #Diag.AddInf;
L W#16#8;
L 3; //Erreur de vidage de la memoire tampon du coupleur Ethernet
SPA ERR;
//---------Ihmlist = 16 hexa - contenu de la reponse Modbus
e160: NOP 0;
L W#16#16;
L 1; //Erreur - Trame 1 Transaction ID NOK
SPA ERvi; //Demande de vidage du Tampon du coupleur Ethernet
e161: NOP 0;
L W#16#16;
L 2; //Erreur - Trame 1 Protocol ID NOK
SPA ERvi; //Demande de vidage du Tampon du coupleur Ethernet
e162: NOP 0;
L W#16#16;
L 3; //Erreur - Trame 1 champ "Length" NOK
SPA ERvi; //Demande de vidage du Tampon du coupleur Ethernet
//e163: NOP 0
// L W#16#16
// L 4 //Alarme - Trame 2 champ "Unit ID" NOK
// //Code de defaut programmes dans un autre reseau (repere rcv5: )
e164: NOP 0;
L W#16#16;
L 5; //Erreur - Trame 2 reponse exception Modbus, champ "Error code" NOK
SPA ERvi; //Demande de vidage du Tampon du coupleur Ethernet
e165: NOP 0;
L W#16#16;
L 6; //Erreur - Trame 2 champ "Function code" NOK
SPA ERvi; //Demande de vidage du Tampon du coupleur Ethernet
e166: NOP 0;
L W#16#16;
L 7; //Erreur - Trame 2 champ "Byte Count" NOK - mode Lecture
SPA ERvi; //Demande de vidage du Tampon du coupleur Ethernet
e167: NOP 0;
L W#16#16;
L 8; //Erreur - Trame 2 champ "Starting address" NOK - mode ecriture
SPA ERvi; //Demande de vidage du Tampon du coupleur Ethernet
e168: NOP 0;
L W#16#16;
L 9; //Erreur - Trame 2 champ "Quantity of registers" NOK - mode ecriture
SPA ERvi; //Demande de vidage du Tampon du coupleur Ethernet
e170: NOP 0;
L W#16#16;
L 11; //Reponse d'exception Modbus
SPA ERR;
//--------------
ERR: T #Diag.CodeDef; //Sortie sur Erreurs "Classiques"
POP;
T #Diag.IhmList;
L #Diag.ErrCmpt; //Compteur d'erreur +1
+ L#1;
T #Diag.ErrCmpt;
SET; //Mise a 1 du RLG
S #Def;
S #Diag.Def;
R #En_cours;
S #Fin_trt_FB;
SPA end; //Saut en Fin de FB
ERVa: NOP 0; // Sortie FB sur parametres Input NOK (pas de fin de traitement)
T #Diag.CodeDef;
POP;
T #Diag.IhmList;
SET; //Mise a 1 du RLG
S #Def;
S #Diag.Def;
SPA end; //Saut en Fin de FB
ERvi: NOP 0; //Erreur avec demande de vidage du Tampon du Coupleur Ethernet
T #Diag.CodeDef;
POP;
T #Diag.IhmList;
L #Diag.ErrCmpt; //Compteur d'erreur +1
+ L#1;
T #Diag.ErrCmpt;
SET; //Mise a 1 du RLG
L #temps_ecoule; //Initialisation du Timeout de vidage
T #timeout_vidage;
S #vidage_tampon_CP; //Demande de vidage
SPA vid0;
NETWORK
TITLE =Vidage de la memoire tampon du Coupleur Ethernet
//Lorsque les donnees recues dans le coupleur Ethernet sont incoherentes, il peut
//s'agir d'un decyclage entre les donnees du coupleur, et celle attendues par le
//FB. Dans ce cas, il est necessaire de recycler ces echanges en vidant le buffer
//du coupleur.
//- Construction du parametre ANY en entree de AG_RECV qui pointe sur 259 de
//Buffer
//- Vidage des octets 1 par 1, dans l'Octet 259 de Buffer, par la fonction
//AG_RECV
//*ODIL_ID:1960_24*
//
vid0: U #vidage_tampon_CP; //Si demande de vidage
SPBN end; //sinon, saut en Fin de FB
//-------- Construction du parametre ANY
LAR1 P##BufferBlk; //AR1 pointe sur BufferBlk (ANY en entree de AG_RECV)
L W#16#1002; //Byte 0: 10hex - Byte 1: 02==> Type de donnees BYTE;
T LW [AR1,P#0.0];
L 1; //= Nbre d'Octet demande
T LW [AR1,P#2.0]; //Byte 2-3: facteur de repetition: Nombres d'octets demandes
L DINO; //Recuperation du N° du DBi de ce FB
T LW [AR1,P#4.0]; //Recopie Octets 4-5 (N° de DB)
LAR2 #BufferAddrDBi; // AR2 pointe au debut de la zone "Buffer"
L P#259.0; //Dernier octet de Buffer
+AR2;
TAR2; //Charge AR2 dans Accu1
T LD [AR1,P#6.0]; //Adresse Absolue du dernier octet de "Buffer"
LAR2 #SavAR2; //Restore AR2
CALL "AG_RECV" (
ID := #ID_liaisonTCP,
LADDR := #CPAddress,
RECV := #BufferBlk,
NDR := #recv_ndr,
ERROR := #recv_error,
STATUS := #recv_status,
LEN := #recv_Len);
//Un octet a ete vide
U #recv_ndr;
SPBN vidC;
L #temps_ecoule; //Reinitialisation du Timeout
T #timeout_vidage;
SPA end; //Saut en Fin de FB
// surveillance du Timeout
vidC: L #temps_ecoule;
L #timeout_vidage;
-D; //Accu2-Accu1
L 1000; // 1 seconde
<D;
SPB end; //vidage d'un octet au prochain tour de cycle API
// //Saut en Fin de FB
//--------- Fin de traitement apres VIDAGE du coupleur Ethernet
// //Sinon Fin de vidage
SET; //Mise a 1 du RLG
S #mvidage_tampon_CP; //Memorisation qu'un vidage a ete effectue, utilise dans la prochaine utilisation de ce FB
R #vidage_tampon_CP;
S #Def;
S #Diag.Def;
R #En_cours;
S #Fin_trt_FB;
NETWORK
TITLE =Fin de Bloc
//*ODIL_ID:1960_25*
end: NOP 0;
LAR1 #SavAR1; //Restitution des registres d'adresse
LAR2 #SavAR2;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MODBUS_TCPIP_SLAVE"
TITLE =Modbus TCP/IP Slave sur CP 343-1
//******************************************************************************
//*                    BF_MODBUS TCPIP SLAVE                                   *
//*          Modbus TCP/IP Server avec CP 343-1 (Lean et Classic)              *
//*          Modbus TCP/IP Server with CP 343-1 (Lean and Classic)             *
//******************************************************************************
//(In English Further below)
//
//Description:
//------------
//Ce Bloc Fonctionnel gere la communication Modbus esclave.
//Il prend en charge les fonctions
//   -  3: Read Multiple Registers
//   -  6: Write Single Register
//   - 16: Write Multiple Registers
//a l'exclusion de toute autre fonction.
//
//Pre requis:
//----------
//Un CP 343-1 lean dûment parametre avec NetPro (Liaison TCP, avec un partenaire
//non specifie, en ecoute sur le port 502) doit se trouver dans la configuration
//materielle.
//(Pour plus de details voir la documentation de la BF)
//
//Dependances:
//-----------
//   Ce bloc utilise:
//      - Le FC 1699 "AG_RCV" (FC 6 de la bibliotheque "SIMATIC_NET_CP")
//      - Le FB 1698 "AG_SND" (FC 5 de la bibliotheque "SIMATIC_NET_CP")
//      - Le SFB 4   "TON"
//      - Le SFB 24  "TEST_DB"
//      - Le SFB 20  "BLK_MOV"
//
//
//Mise en oeuvre :
//----------------
//LA BF doit etre mise en oeuvre dans le FB4 "COM" du programme.
//
//1) CPAddress = valeur de l'adresse d'entree du CP343 sous Hwconfig
//      Selectionner le coupleur ->Propriete -> General -> Adresses
//
//2) ID = Valeur ID de la liaison TCP connectee au CP343 sous Netpro
//     Selectionner la cpu de l'api, dans le tableau de la liste des liaisons,
//     selectionner la liaison -> propriete -> General -> pate ID sur la fenetre
//     Parametres de bloc
//3) ModDBNR = N° du DB recevant les trames dans l'API.
//        De base les DB globaux 89 a 80 sont reserves dans la structure
//Programme.
//        1er carte = DB89 "SIP1"
//Les donnees Modbus lues et ecrites, sont echangees dans le DB designe
//par le parametre ModDBNR (entree IN).
//Ce DB contient 1 struct / Trame, les adresses en word de chaque trame doivent
//etre communiquees au service informatique pour pointer les trames dans le DB
//4) ModBaseRe = addresse de debut des Trames dans le DB global en MOT.
//            Par defaut =  0
//
//Le parametre ModBaseReg (entree IN) correspond a un Offset d'adresse a
//appliquer au mot 0 du DB d'echange Modbus, afin de les lier aux adresses des
//echanges Modbus.
//Exemple:
//
//DBW (0 + ModBaseReg) <=> adresse Modbus = 0
//DBW (2 + ModBaseReg) <=> adresse Modbus = 1
//...
//
//Defauts:
//--------
//Le dernier defaut est maintenu tant qu'une transaction correcte n'a pas ete
//effectuee.
//
// 0: Pas de defaut
//
// 1: Une erreur s'est produite lors de l'appel du FC "AG_RECV"
//    AddInfo contient le code d'erreur retourne par le FC
//
// 3: Longueur de trame incorrecte
//
// 5: Fonction Modbus non supportee
//    Une reponse d'exception Modbus 1 (ILLEGAL FUNCTION CODE) est envoyee
//
// 6: Une erreur s'est produite lors de l'appel du SFC "TEST_DB"
//    Addinfo contient le code d'erreur retourne par la SFC
//    Une reponse d'exception Modbus 4 (SLAVE DEVICE FAILURE) est envoyee
//
// 7: L'adresse dans la requete est inferieure a "ModBaseReg"
//    Une reponse d'exception Modbus 2 (ILLEGAL DATA ADDRESS) est envoyee
//
// 8: Le bloc de donnees est trop petit pour servir la requete
//    Une reponse d'exception Modbus 2 (ILLEGAL DATA ADDRESS) est envoyee
//
// 9: Requete erronee (Le champ "Nombre de Registres" est incorrect)
//    Une reponse d'exception Modbus 3 (ILLEGAL DATA VALUE) est envoyee
//
//10: Une erreur s'est produite lors de l'appel du SFC "BLK_MOV"
//    AddInfo contient le code d'erreur retourne par le SFC
//    Une reponse d'exception Modbus 4 (SLAVE DEVICE FAILURE) est envoyee
//
//11: Une erreur s'est produite lors de l'appel du FC "AG_SEND"
//    AddInfo contient le code d'erreur retourne par le FC
//
//12: Pas de requete du maitre depuis plus de 30 secondes
//
//******************** ENGLISH INFORMATION *************************************
//Description:
//------------
//This Bloc processes the Modbus slave communication
//Modbus Functions accepted:
//   -  3: Read Multiple Registers
//   -  6: Write Single Register
//   - 16: Write Multiple Registers
//and no more else
//
//Prerequisite:
//----------
//A CP 343-1 lean correctly setup In NetPro (TCP link, with unspecified partner ,
//local port = 502) must be in place in the hardware configuration
//(For more details see the BF documentation)
//
//Dependence:
//-----------
//   This bloc uses:
//      - FC 1699 "AG_RCV" (FC 6 from the library "SIMATIC_NET_CP")
//      - FC 1698 "AG_SND" (FC 5 from the library "SIMATIC_NET_CP")
//      - SFB 4   "TON"
//      - SFB 24  "TEST_DB"
//      - SFB 20  "BLK_MOV"
//
//Operating :
//-----------
//The BF must to be implemented in the FB4 "Com" of the PLC program.
//
//1) CPAddress = entry address value of CP343 under Hwconfig
// Select the coupler - > object Properties - > General - > addresses
//
//2) ID = Value ID of the connection TCP connected to the CP343 under Netpro.
// Select the PLC cpu, in the board of the list of the connections,
// select the connection - > object properties - > General - > ID on the block
//parameter window
//3) ModDBNR = DB Number receiving frame in the Plc.
//        Of base the global DB 89 to 80 are reserved in the Program structure.
//        1st card CP343 = DB89 " SIP1 "
//The Modbus datas read and wrote, are exchanged in the DB designed by the
//ModDBNR parameter (INPUT)
//This DB contains 1 struct / Frame, the Word addresses of every frame must be
//communicated to
//the factory computer service for point the Frame in the DB.
//
//4) ModBaseRe = addresse of the frame beginning in the global DB , value in WORD.
//The parameter ModBaseReg (INPUT) is a Offset to apply to the word 0 of the
//Modbus Exchange DB, in order to make the link with the Modbus address of the
//dialog.
//
//Exemple:
//
//DBW (0 + ModBaseReg) <=> Modbus address = 0
//DBW (2 + ModBaseReg) <=> Modbus address = 1
//...
//
//Faults:
//--------
//Last fault stay to its state till the next correct communication exchange
//
// 0: No fault
//
// 1: an error occured calling FC "AG_RECV"
//    AddInfo contains error code returned by the FC
//
// 3: Length of the frame is incorrect
//
// 5: Modbus Function is not supported
//     An exception error code 1 ("ILLEGAL FUNCTION CODE") is sent back
//
// 6: an error occured calling SFC "TEST_DB"
//    AddInfo contains error code returned by the SFC
//    An exception error code 4 ("SLAVE DEVICE FAILURE") is sent back
//
// 7: The Modbbus address in the request in Less than "ModBaseReg"
//    An exception error code 2 ("ILLEGAL DATA ADDRESS") is sent back
//
// 8: The exchange DB is too small to answer the request
//    An exception error code 2 ("ILLEGAL DATA ADDRESS") is sent back
//
// 9: Incorrect request (Field "Number of registers" is incorrect)
//    An exception error code 3 ("ILLEGAL DATA VALUE") is sent back
//
//10: an error occured calling SFC "BLK_MOV"
//    AddInfo contains error code returned by the SFC
//    An exception error code 4 ("SLAVE DEVICE FAILURE") is sent back
//
//11: an error occured calling FC "AG_SEND"
//    AddInfo contains error code returned by the FC
//
//12: None request from the master since more than 30 seconds
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 4
//Dernier ID mis en oeuvre / Last ID implemented : 1961_4
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'COM'
NAME : 'MBTCP_SL'
VERSION : 2.1
VAR_INPUT
  CPAddress : INT;	//Ethernet CP address in HW Config/ Adresse du coupleur Ethernet (dans HW Config)
  ID : INT;	//TCP Connection ID (in NetPro) / ID de la liaison TCP (dans NetPro)
  ModDBNR : INT;	//Modbus exchange DB number / Numero du Bloc de donnees Modbus
  ModBaseReg : INT;	//Offset of DBW0 of Modbus DB/ Offset du DBW 0 du DB Modbus
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Fault / Defaut
  Diag : STRUCT	//Diagnosis Structure / Structure de diagnostic
    Def : BOOL;	//Fault / Defaut
    Ala : BOOL;	//Alarm / Alarme
    NumList : INT;	//Reserve for IHMP - not used / reserve IHMP - non utilise
    CodeDef : INT;	//Fault code / Code du defaut
    AddInf : INT;	//Further Informations / Informations complementaires
    RepCnt : DINT;	//Counter of Modbus responses / Compteur de reponses
    ErrCnt : DINT;	//Counter of defaults / Compteur d'erreurs
  END_STRUCT ;
END_VAR
VAR
  TOCOM : TON;
  Buffer : STRUCT
    TransID : WORD;
    ProtoID : WORD;
    Length : WORD;
    UnitID : BYTE;
    FCode : BYTE;
    ModRegAdd : WORD;
    ModRegCnt : WORD;
    Data : ARRAY  [1 .. 124 ] OF WORD;
  END_STRUCT ;
  SndLen : INT;
  NextBlk : BOOL;
  Ex : BOOL;	//Modbus Exception Response
  SndAct : BOOL;
END_VAR
VAR_TEMP
  SavAR1 : DINT;	//Backup of the Address register 1
  SavAR2 : DINT;	//Backup of the Address register 2
  LADDR : WORD;
  BufBlk : ANY;
  SrcBlk : ANY;
  DstBlk : ANY;
  Ret : INT;	//Return value for the SFCs
  ModRegAdd : INT;
  ModRegCnt : INT;
  MaxModRegCnt : INT;	//Max Modbus Register Count (125 for Read Request, 123 for Write Request)
  BufDBNR : INT;	//Instance DB Number that contains the Send/Receive Buffer
  BufDBIndex : INT;	//Index on the Send/Receive Buffer
  BufDBBasePtr : DINT;	//Pointer on the Send/Receive Buffer
  BufDBPtr : DINT;	//Pointer on the Send/Receive Buffer
  DatDBNR : WORD;	//Modbus DB Number that contains the Modbus Registers
  DatDBLen : WORD;	//Size of the Modbus DB
  DatDBPtr : DINT;	//Pointer on the Modbus DB
  BlkMovDstPtr : DINT;
  WP : BOOL;
  RcvNDR : BOOL;	//AG_RECV: New Data Received
  RcvErr : BOOL;	//AG_RECV: Error
  SndDone : BOOL;	//AG_SEND: Done
  SndErr : BOOL;	//AG_SEND: Error
  Status : WORD;	//AG_xxxx: Status
  RcvLen : INT;	//AG_RECV: Len
  Len : INT;
END_VAR
BEGIN
NETWORK
TITLE =Receive
//*ODIL_ID:1961_1*
//---------- Save AR1 & AR2
//
TAR1 #SavAR1;
TAR2 #SavAR2;
//----------
LAR1 AR2;
L P##Buffer;
+AR1;
TAR1 #BufDBBasePtr; //Absolute Buffer Address
//----------
LAR1 P##BufBlk;
L DINO; //Get the instance DB Number
T LW [AR1,P#4.0];
//----------
U #NextBlk;
SPB next;
L DW#16#10020006; //Const, Format, Repet
T LD [AR1,P#0.0];
L #BufDBBasePtr;
SPA RCV;
next: O(; //Control the length of the following bytes
L #Buffer.Length;
L B#16#1;
<D;
);
O(;
POP; //L #Buffer.Length
L B#16#FD; //253 (+ 6 = 259 bytes)
>D;
);
SPB E003; //Error: Invalid Frame
POP; //L #Buffer.Length
OD DW#16#10020000;
T LD [AR1,P#0.0];
L #BufDBBasePtr;
L B#16#30; //Add Offset (P#6.0) for the following bytes
+D;
//----------
RCV: T LD [AR1,P#6.0]; //Buffer Address
L #CPAddress;
T #LADDR;
//----------
CALL "AG_RECV" (
ID := #ID,
LADDR := #LADDR,
RECV := #BufBlk,
NDR := #RcvNDR,
ERROR := #RcvErr,
STATUS := #Status,
LEN := #RcvLen);
//----------
U #RcvErr;
SPB E001;
UN #RcvNDR;
SPB SND;
UN #NextBlk;
= #NextBlk;
SPB next;
NETWORK
TITLE =Decode Function Code
//*ODIL_ID:1961_2*
//----------
//
LAR1 #BufDBBasePtr;
L #Buffer.ModRegAdd;
T #ModRegAdd;
//---------- Read Multiple Registers
L #Buffer.FCode;
L B#16#3; //Function Code 3 (Read Multiple Registers)
<>D;
SPB nF03;
L B#16#7D; //Initialize the Max Count 73h -> 115d
T #MaxModRegCnt; //-> 115 Words (Cant send more than 240 bytes...)
L #Buffer.ModRegCnt;
T #ModRegCnt;
SLW 1;
T DIB [AR1,P#8.0]; //ByteCnt
+ 3; //Response Length: 1 SlaveID + 1 FCode + 1 ByteCnt + DataCnt
+AR1 P#9.0; //Data Offset in the Buffer
TAR1 #BufDBPtr;
LAR1 P##SrcBlk; //Initialize the "BLK_MOV" parameters
LAR2 P##DstBlk;
SPA Ctrl;
//---------- Write Multiple Registers
nF03: POP; //L #Buffer.FCode
L B#16#10; //Function Code 16 (Write Multiple Registers)
<>D;
// SPB E005 //Exception: Ex1 (ILLEGAL FUNCTION CODE)
SPB nF10;
L B#16#7B; //Initialize the Max Count
T #MaxModRegCnt; //-> 123 Words
L #Buffer.ModRegCnt;
T #ModRegCnt;
+AR1 P#13.0; //Data Offset in the Buffer
TAR1 #BufDBPtr;
L B#16#6; //Response Length: 1 SlaveID + 1 Fcode + 2 Address + 2 RegCnt
LAR1 P##DstBlk; //Initialize the "BLK_MOV" parameters
LAR2 P##SrcBlk;
SPA Ctrl;
//---------- Write Single Register
nF10: POP; //L #Buffer.FCode
L B#16#6; //Function Code 6 (Write Single Register)
<>D;
SPB E005; //Exception: Ex1 (ILLEGAL FUNCTION CODE)
L B#16#1;
T #MaxModRegCnt;
T #ModRegCnt;
+AR1 P#10.0; //Data Offset in the Buffer
TAR1 #BufDBPtr;
L B#16#6; //Response Length: 1 SlaveID + 1 Fcode + 2 Address + 2 Data
LAR1 P##DstBlk; //Initialize the "BLK_MOV" parameters
LAR2 P##SrcBlk;
//---------- Control the Register count
Ctrl: T #Len;
TAR2 #BlkMovDstPtr; //SAve & Restore AR2
LAR2 #SavAR2;
//----------
L #ModDBNR;
T #DatDBNR;
//----------
CALL "TEST_DB" (
DB_NUMBER := #DatDBNR,
RET_VAL := #Ret,
DB_LENGTH := #DatDBLen,
WRITE_PROT := #WP);
SPBIN E006; //Error: DB
//----------
O(;
L #ModRegCnt; //Acc = ModRegCnt
L B#16#1;
<I;
);
O(;
POP; //L #ModRegCnt
L #MaxModRegCnt;
>I;
);
SPB E009; //Exception: Ex3 (ILLEGAL DATA VALUE)
L #ModRegAdd; //Modbus Register Address
L #ModBaseReg;
<D;
SPB E007; //Exception: Ex2 (ILLEGAL DATA ADDRESS)
-D; //Acc := ModRegAdd - ModBaseReg
L #ModRegCnt;
+D; //Acc := ModRegAdd - ModBaseReg + ModRegCnt
TAK; //Acc := ModRegAdd - ModBaseReg
SLD 4; //Make bit Ptr
OD DW#16#84000000;
T #DatDBPtr;
POP; //Acc := ModRegAdd - ModBaseReg + ModRegCnt
L #DatDBLen; //Modbus DB Length (Byte)
SRW 1;
>D;
SPB E008; //Exception: Ex2 (ILLEGAL DATA ADDRESS)
//---------- Initialize Src and Dst
L #ModRegCnt;
LAR2 #BlkMovDstPtr;
OD DW#16#10040000;
T LD [AR1,P#0.0];
T LD [AR2,P#0.0];
L #DatDBNR; //DBNR
T LW [AR1,P#4.0];
L DINO;
T LW [AR2,P#4.0];
L #DatDBPtr; //Offset
T LD [AR1,P#6.0];
L #BufDBPtr;
T LD [AR2,P#6.0];
//---------- Restore AR2
LAR2 #SavAR2;
//---------- Copy
CALL "BLKMOV" (
SRCBLK := #SrcBlk,
RET_VAL := #Ret,
DSTBLK := #DstBlk);
SPBIN E010; //Error: Cpy
NETWORK
TITLE =Send
//*ODIL_ID:1961_3*
//----------
//
Snd: L #Len;
T #Buffer.Length;
+ 6;
T #SndLen;
SET;
S #SndAct;
//----------
SND: CALL "AG_SEND" (
ACT := #SndAct,
ID := #ID,
LADDR := #LADDR,
SEND := #Buffer,
LEN := #SndLen,
DONE := #SndDone,
ERROR := #SndErr,
STATUS := #Status);
//----------
U #SndErr;
SPB E011;
UN #SndDone;
SPB End;
L #Diag.RepCnt;
+ L#1;
T #Diag.RepCnt;
U #Ex;
R #Ex;
SPB End;
L B#16#0; //Clear Error
T #Diag.CodeDef;
T #Diag.AddInf;
//----------
End: L #Diag.CodeDef;
L B#16#0;
<>D;
= #Diag.Def;
= #Def;
//----------
U #SndAct;
R #SndAct;
NOT;
= #TOCOM.IN;
CALL #TOCOM (
PT := T#30S);
U #TOCOM.Q;
UN #Diag.Def;
SPB E012;
//---------- Restore AR1 & AR2
LAR1 #SavAR1;
LAR2 #SavAR2;
BEA;
NETWORK
TITLE =Errors
//*ODIL_ID:1961_4*
E001: L B#16#1; //Error: "AG_RECV"
L #Status;
SPA Err;
E003: L B#16#3; //Error: Invalid Message Length
L B#16#0;
SPA Err; // No additionnal information
E005: L B#16#1; //Exception: Ex1 (ILLEGAL FUNCTION CODE)
L B#16#5;
SPA Ex;
E006: L B#16#4; //Error: "TEST_DB"
L B#16#6; //Exception: Ex4 (SLAVE DEVICE FAILURE)
SPA Ex;
E007: L B#16#2; //Exception: Ex2 (ILLEGAL DATA ADDRESS)
L B#16#7; // Check Parameter "ModBaseReg"
SPA Ex;
E008: L B#16#2; //Exception: Ex2 (ILLEGAL DATA ADDRESS)
L B#16#8; // DB Size too small
SPA Ex;
E009: L B#16#3; //Exception: Ex3 (ILLEGAL DATA VALUE)
L B#16#9;
SPA Ex;
E010: L B#16#4; //Error: "BLK_MOV"
L B#16#A; //Exception: Ex4 (SLAVE DEVICE FAILURE)
SPA Ex;
E011: L B#16#B; //Error: "AG_SEND"
L #Status;
SPA Err;
E012: L B#16#C; //Error: No communication
L B#16#0;
//----------
Err: T #Diag.AddInf;
POP;
T #Diag.CodeDef;
L #Diag.ErrCnt;
+ L#1;
T #Diag.ErrCnt;
SET;
R #NextBlk;
SPA End;
//----------
Ex: T #Diag.CodeDef;
POP; //Exception Code
LAR1 #BufDBBasePtr;
T DIB [AR1,P#8.0];
L B#16#4;
<>D;
L B#16#0;
SPB Ex4;
L #Ret;
Ex4: T #Diag.AddInf;
SET;
S DIX [AR1,P#7.7]; //Function Code
S #Ex; //Modbus Exception Response
L B#16#3;
T #Len;
L #Diag.ErrCnt;
+ L#1;
T #Diag.ErrCnt;
SPA Snd;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MOUV2P1"
TITLE =BF_MOUV2P1
//*******************************************************************************
//*                           FB "MOUV2P1"                                      *
//* ASSURE LA COMMANDE DE MOUVEMENT 2 POSITIONS (Avec ou sans Commande Bimanuel)*
//*                                                                             *
//*                                                                             *
//*       EXECUTES THE COMMANDE FOR A MOUVEMENT WITH 2 POSITIONS                *
//*                   (with or without 2-hand control)                          *
//*******************************************************************************
//( In English further below)
//DESCRIPTION:
//************
//   - gestion des ordres de commande suivant les modes:
//       Auto, Manu reglage, Auto Pas a Pas, Auto Retour Origine de Cycle
//        (positionnes sur les bits du mot lien pupitre LIEN_PUP)
//   - gestion de l'ordre de commande suivant l'etat de la fonction
//       (positionnees sur les bits du mot fonction MF)
//   - gestion des voyants particuliers
//   - gestion des voyants communs
//   - mesure du temps d'execution du mouvement et comparaison avec un temps
//       de reference enregistre. Activation d'une alerte et d'un defaut
//
//
//MISE EN OEUVRE :
//*************
//Utilise :
//l' UDT 1988 Lien_Pup ( les information sont generees par la BF_Zone_Mode)
//l'UDT 2042 Mot_Fonc (Information a generer en amont de la BF)
//Gestion des mouvements en Mode Manuel :
//Par defaut la BF fonctionne pour une commande de mouvement dans une zone fermee
//sans risque operateur
//Pour une utilisation avec commande Bimanuelle, l'information BIM contenue dans
//le Mot fonction MF doit etre Maintenue a 1 en amont de la BF pour visualiser la
//position du mouvement sur l'ecran et permettre la selection du sens du
//mouvement
//Pour une utilisation avec auto maintien des ordres, le bit AutM doit être
//maintenu à 1 avec un bit BA1
//
//Les temps de references doivent etre associes au DB $98 de la zone (Z$T)
//($ = Numero de la zone)
//
//L'entree COM doit etre mise en uvre avec l'information de commun electrique
//issue du programme Safety
//Pour les mouvements en zone fermee = info safety de la zone fermee "TNI".Z$FZ_OK
//Pour les mouvements avec commande bimanuelle = Info safety de securite
//operateur
//"TRI".<NomSE>SOP_OK
//Pour les mouvements sur préhenseur robot, suivant analyse, = BA1
//
//LISTE DES DEFAUT :
//***************
//Valeur de codedef :
//1 = Defaut depassement du temps mouvement
//2 = Defaut perte de position
//4 = Alarme de depassement du temps mouvement
//
//************************** ENGLISH INFORMATION  ****************************
//DESCRIPTION :
//*************
// Control of the order of commands depending on the operating modes:
//Auto, Manual control, Auto Step mode, Auto Return to Cycle Origin
//(set by the bool of the UDT link to operator panel LIEN_PUP)
//- Control of the order of commands depending on the status of the function
//(set with the Bool of the UDT function MF )
//- Control of the dedicated lamps
//- Control of the commom lamps
//- Measurement of the execution time for the movement and comparison with the
//recorded reference time. Activation of a warning and an error message.
//
//OPERATING:
//***********
//This BF Use :
//UDT 1988 "LIEN_PUP" (written by BF_ZONE_MODE)
//UDT 2042 "MOT_FONC" (the information must be written before this BF)
//Movement in Manual Mode:
//If you use an Safety Bimanual comand, the BIM Input contained in MF UDT must be
//set to 1 before this BF to see the lamp position of movement to the screen
//and select the movement direction
//If you use the fonction of auto latch of the orders, you must set the input
//AutM
//to 1 with a bit BA1
//
//Time movement Reference:
//Must be use between the global data DB$98 "Z$T" of the area (zone) dependence (
//$ = zone Number)
//COM Input : must be operate with the safety command polarity
//- For a movement in a closed Area = Safety closed area command polarity data in
//"TNI" DB (for example: "TNI".Z$FZ_OK (With $= zone number of the facility)
//- For a movement with Bimanual commad = Safety operator data in "TRI" DB ( For
//example: "TRI".<Sub-unit NAME>SOP_OK
//- For a robot gripper, after analysis = BA1
//FAULT list:
//************
//Codedef values:
//1 = Movement time exceeded fault
//2 = Loss of position fault
//4 = Movement time exceeded alarm
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 50
//Dernier ID mis en oeuvre / Last ID implemented : 2042_50
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'MOUV2P1'
VERSION : 3.1
VAR_INPUT
  Com : BOOL;	//Safe COMmon 24V for BF output / indicateur COMmun des sorties
  Bamv : BOOL;	//Advance movement Push button / BP Avance MouVement
  Brmv : BOOL;	//Return movement Push button / BP Recul MouVement
  AutM : BOOL;	//Self Latch for BF output / AUToMaintien des sorties
  Lien_pup : LIEN_PUP;	//Panels link information / mot des indicateurs LIEN du  PUPitre
  MF : MOT_FONC;	//Movement function information / Mot Fonction du mouvement
END_VAR
VAR_OUTPUT
  Oamv : BOOL;	//Advance Movement Order / Ordre Avance MouVement
  Ormv : BOOL;	//Return Movement Order / Ordre Recul MouVement
  Vamv : BOOL;	//Advance Movement Lamp / Voyant Avance MouVement
  Vrmv : BOOL;	//Return Movement Lamp / Voyant Recul MouVement
  Def : BOOL;	//Fault / DEFaut
  Ala : BOOL;	//Alarm / Alarme
  Diag : STRUCT	//Diagnosis and information /Information et diagnostic
    Def : BOOL;	//Fault Presence / Presence Defaut
    Ala : BOOL;	//Alarm Presence / Presence d'une alarme
    Numliste : INT;	//Reserved for SMP Fault list Number / Numero de liste defaut SMP
    Codedef : INT;	//Fault or Alarm Number / N° de defaut ou dalarme en Decimal
    Ihmvamv : BOOL;	//Advance movemnet Lamp / Voyant Avance MouVement
    Ihmvrmv : BOOL;	//Return movement Lamp / Voyant Recul MouVement
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Mvec : BOOL;	//Movement in progress information /Indicateur Mouvement En Cours
  Dva_p : BOOL;	//Advance movement Lamp request / Demande Voyant Avance Pupitre
  Dvr_p : BOOL;	//Return movement Lamp request / Demande Voyant Recul Pupitre
  Tref : TIME  := T#5M;	//Movement Reference Time / Temps de Reference mouvement
END_VAR
VAR
  Avsl : BOOL;	//Advance SELECTED / AVance SeLectionnee
  Resl : BOOL;	//Return SELECTED / REcul Selectionne
  Mpos : BOOL;	//Position memory / Memoire POSition
  Valm : BOOL;	//Measure validation / VALidation Mesure
  Mdap : BOOL;	//Learning request memory / Memoire Demande APprentissage
  Defdtm : BOOL;	//Movement time overtaking fault / DEFaut Depassement Temps de Mouvement
  Xbamv : BOOL;	//Advance movement push button auxiliary / auXilliaire Bp Avance MouVement
  Xbrmv : BOOL;	//Return movement push button auxiliary / auXiliaire Bp Recul MouVement
  Valcpos : BOOL;	//Position check validation / VALidation Contrôle POSition
  Bpmva0 : BOOL;	//Movement push buttons to '0' / BPs MouVement A 0
  Xaamv : BOOL;	//Advance movement auxiliary / auXiliaire Avance Mouvement
  Xarmv : BOOL;	//Return movement auxiliary / auXiliaire Recul Mouvement
  Xoamv : BOOL;	//Advance Movement Order auxiliary/ auxiliaire Ordre Avance MouVement
  Xormv : BOOL;	//Return Movement Order auxiliary/ auxiliaire Ordre Recul MouVement
  TONFilPos : TON;	//Timer position lost for welding / Tempo Perte de position pour soudure
  TONTmpMvt : TON;	//Timer for Movement time measure / Tempo MEsure Temps de MouVement
  XTpme : TIME;	//Movement time measure auxiliary / Aux Temps de mouvement mesure
  Tpme : TIME;	//Movement time measure memory / Temps de mouvement mesure memorise
  Xdva_p : BOOL;	//Intermediate bit Xdva_p / Bit intermediaire Xdva_p
  Xdvr_p : BOOL;	//Intermediate bit Xdvr_p / Bit intermediaire Xdvr_p
  Fdxdva_p : BOOL;	//Falling edge xdva_p / Front descendant xdva_p
  Fdxdvr_p : BOOL;	//Falling edge xdvr_p / Front descendant xdvr_p
  Enrg : BOOL;	//Time record request / Demande enregistrement temps
  Ptppos : INT  := 100;	//Time for position lost percentage / Pourcentage Temps de Perte position
  Ptref : INT  := 100;	//Reference time percentage / Pourcentage Temps de REFerence
END_VAR
VAR_TEMP
  Auto : BOOL;	//Automatic mode indicator / indicateur mode de marche AUTOmatique
  Manu : BOOL;	//Manual mode indicator / indicateur mode de marche MANUel
  Apap : BOOL;	//Step by step mode in automatic indicator / indicateur marche Auto Pas A Pas
  Aroc : BOOL;	//To home position mode indicator / indicateur marche Auto Retour Origine Cycle
  Aapp : BOOL;	//Learning authorization / Autorisation APPrentissage
  X1tppos : TIME;	//Position lost time 1st intermediate / intermediaire 1 du tps de perte position
  Xtppos : TIME;	//Position lost time percentage / Valeur du pourcentage du Tps de Perte POSition
  X1tref : TIME;	//1st intermediate alert level / intermediaire 1 de calcul du seuil d'alerte
  X1ptref : TIME;	//1st intermediate percentage calculation / inter. 1 de calcul du pourcentage
  X2ptref : TIME;	//2nd intermediate percentage calculation / inter. 2 de calcul du pourcentage
  X3ptref : TIME;	//3rd intermediate percentage calculation / inter. 3 de calcul du pourcentage
  Defpos : BOOL;	//Position lost fault / DEFaut Perte de position
  Ba1i : BOOL;	//True bit / Bit toujours a 1
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Set to 1 the useful information in the BF Block
//*ODIL_ID:2042_1*
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Mode de marche AUTO
//Automatic Mode
//*ODIL_ID:2042_2*
U #Lien_pup.Z_mauto;
UN #Lien_pup.Z_manup;
= #Auto;
NETWORK
TITLE =Mode de marche MANU
//Manual Mode
//*ODIL_ID:2042_3*
U #Lien_pup.Z_manup;
UN #Lien_pup.Z_mauto;
= #Manu;
NETWORK
TITLE =Mode de fonctionnement AUTO   PAS A PAS
//Step by step mode in automatic
//*ODIL_ID:2042_4*
U #Auto;
U #Lien_pup.Z_mpapp;
= #Apap;
NETWORK
TITLE =Mode de fonctionnement Auto retour en origine de cycle
//Home position mode in Automatic
//*ODIL_ID:2042_5*
U #Auto;
U #Lien_pup.Z_mrocp;
= #Aroc;
NETWORK
TITLE =ANTI-BLOCAGE DES BP DE COMMANDE
//Anti-blocking of hard push button
//*ODIL_ID:2042_6*

NETWORK
TITLE =Prise en compte appui BP avance si mouvement selectionne
//Switch-on Advance push button taken into account if movement selected
//*ODIL_ID:2042_7*
U(;
U(;
O #Bpmva0;
O;
UN #MF.BIM;
U #Xbamv;
);
U #Bamv;
O;
U #MF.BIM;
U #Xbamv;
UN #MF.IA;
);
UN #Brmv;
U #MF.SL;
= #Xbamv;
NETWORK
TITLE =Prise en compte appui BP recul si mouvement selectionne
//Switch-on Return push button taken into account if movement selected
//*ODIL_ID:2042_8*
U(;
U(;
O #Bpmva0;
O;
UN #MF.BIM;
U #Xbrmv;
);
U #Brmv;
O;
U #MF.BIM;
U #Xbrmv;
UN #MF.IR;
);
UN #Bamv;
U #MF.SL;
= #Xbrmv;
NETWORK
TITLE =Contrôle relâchement des BP
//Realease buttons control
//*ODIL_ID:2042_9*
UN #Bamv;
UN #Brmv;
= #Bpmva0;
NETWORK
TITLE =Traitement des autorisations de mouvements
//Movements Authorization
//*ODIL_ID:2042_10*

NETWORK
TITLE =auXiliaire Avance MouVement
//Advance movement auxiliary
//*ODIL_ID:2042_11*
U #MF.AA;
U(;
ON #Lien_pup.Z_macy;
O #Xaamv;
);
= #Xaamv;
NETWORK
TITLE =auXiliaire Recul MouVement
//Return movement auxiliary
//*ODIL_ID:2042_12*
U #MF.AR;
U(;
ON #Lien_pup.Z_macy;
O #Xarmv;
);
= #Xarmv;
NETWORK
TITLE =FONCTION MOUVEMENT : SELECTION EN MODE PAS A PAS
//Movement function : step by step mode selecting
//*ODIL_ID:2042_13*

NETWORK
TITLE =Selection : RAZ prise de main par la fonction
//Selection : Reset control by the function
//*ODIL_ID:2042_14*
ON #Apap;
O;
U(;
O #Avsl;
O #Resl;
);
UN #Xbamv;
R #Mvec;
NETWORK
TITLE =Selection de la fonction pour un mouvement d'avance
//Function selection for Advance movement
//*ODIL_ID:2042_15*
U #Apap;
U #MF.SL;
U(;
UN #Mvec;
U #MF.SA;
U #Xaamv;
UN #MF.IA;
O;
U #Mvec;
U #Avsl;
);
UN #Resl;
= #Avsl;
NETWORK
TITLE =Selection de la fonction pour un mvt de recul
//Function selection for Return movement
//*ODIL_ID:2042_16*
U #Apap;
U #MF.SL;
U(;
UN #Mvec;
U #MF.SR;
U #Xarmv;
UN #MF.IR;
O;
U #Mvec;
U #Resl;
);
UN #Avsl;
= #Resl;
NETWORK
TITLE =Selection : indication de la prise de main par la fonction
//Selection : information for control by the function
//*ODIL_ID:2042_17*
O #Avsl;
O #Resl;
S #Mvec;
NETWORK
TITLE =TRAITEMENT DE LA FONCTION MOUVEMENT : ORDRES
//Movement Function Processing : Order
//*ODIL_ID:2042_18*

NETWORK
TITLE =Ordre Avance mouvement
//Advance movement order
//*ODIL_ID:2042_19*
U #Com;
= L 27.0;
U L 27.0;
U(;
U #Auto;
UN #Aroc;
U(;
ON #Apap;
O;
U #Avsl;
U #Xbamv;
);
U #Xaamv;
O;
U #Manu;
U #Xbamv;
);
U(;
ON #MF.IA;
O #AutM;
);
U #MF.SA;
UN #Xormv;
= #Xoamv;
U L 27.0;
U(;
O #Xoamv;
O;
U #AutM;
U #Oamv;
);
UN #Xormv;
= #Oamv;
NETWORK
TITLE =Ordre Recul mouvement
//Return movement order
//*ODIL_ID:2042_20*
U #Com;
= L 27.0;
U L 27.0;
U(;
U #Auto;
U(;
UN #Aroc;
U(;
ON #Apap;
O;
U #Resl;
U #Xbamv;
);
U #Xarmv;
O;
U #Aroc;
U #Xbrmv;
);
O;
U #Manu;
U #Xbrmv;
);
U(;
ON #MF.IR;
O #AutM;
);
U #MF.SR;
UN #Xoamv;
= #Xormv;
U L 27.0;
U(;
O #Xormv;
O;
U #AutM;
U #Ormv;
);
UN #Xoamv;
= #Ormv;
NETWORK
TITLE =TRAITEMENT DE LA FONCTION MOUVEMENT : SIGNALISATION
//Movement Function Processing : Lamp
//*ODIL_ID:2042_21*

NETWORK
TITLE =Voyant particulier de la fonction "Avance mouvement"
//Advance movement Lamp (OUT information)
//*ODIL_ID:2042_22*
O #MF.IA;
O;
U #Auto;
U(;
ON #Apap;
O #Avsl;
);
U #MF.SA;
U #Xaamv;
U #Com;
U #Lien_pup.Icl;
O;
U #Manu;
U #MF.SA;
U(;
O #Com;
O #MF.BIM;
);
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Vamv;
= #Diag.Ihmvamv;
NETWORK
TITLE =Voyant particulier de la fonction "Recul mouvement"
//Return movement Lamp (OUT information)
//*ODIL_ID:2042_23*
O #MF.IR;
O;
U #Auto;
U(;
ON #Apap;
O #Resl;
);
U #MF.SR;
U #Xarmv;
U #Com;
U #Lien_pup.Icl;
O;
U #Manu;
U #MF.SR;
U(;
O #Com;
O #MF.BIM;
);
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Vrmv;
= #Diag.Ihmvrmv;
NETWORK
TITLE =Voyant commun du pupitre "Avance mouvement"
//Panels common Lamp : Advance Movement
//*ODIL_ID:2042_24*
U(;
U #Manu;
U #MF.SL;
U #Vamv;
O;
U #Avsl;
U #Vamv;
O;
U #Resl;
U #Vrmv;
);
UN #Aroc;
= #Xdva_p;
NETWORK
TITLE =Voyant commun du pupitre "Avance mouvement"
//Panels common Lamp : Advance Movement
//*ODIL_ID:2042_25*
U #Xdva_p;
S #Dva_p;
U #Xdva_p;
FN #Fdxdva_p;
R #Dva_p;
NOP 0;
NETWORK
TITLE =Voyant commun du pupitre "Recul  mouvement"
//Pannels common Lamp : Return Movement
//*ODIL_ID:2042_26*
U #Manu;
U #MF.SL;
U #Vrmv;
UN #Aroc;
= #Xdvr_p;
NETWORK
TITLE =Voyant commun du pupitre "Recul  mouvement"
//Pannels common Lamp : Return Movement
//*ODIL_ID:2042_27*
U #Xdvr_p;
S #Dvr_p;
U #Xdvr_p;
FN #Fdxdvr_p;
R #Dvr_p;
NOP 0;
NETWORK
TITLE =CONTROLE DU MAINTIEN EN POSITION
//Locking position control
//*ODIL_ID:2042_28*

NETWORK
TITLE =memorisation "Mouvement en position "
//Movement in position memory
//*ODIL_ID:2042_29*
U(;
O #MF.IA;
O #MF.IR;
);
S #Mpos;
U(;
U #Oamv;
U(;
U #AutM;
U #MF.IR;
ON #AutM;
);
O;
U #Ormv;
U(;
U #AutM;
U #MF.IA;
ON #AutM;
);
);
R #Mpos;
NOP 0;
NETWORK
TITLE =Controle de la perte de position
//Lost position check
//*ODIL_ID:2042_30*
U #Mpos;
UN #MF.IA;
UN #MF.IR;
UN #Lien_pup.Dmaitre;
= #Valcpos;
NETWORK
TITLE =Calcul de la valeur du temps maxi de Perte Position
//Max value of lost position time calculation
//*ODIL_ID:2042_31*
L #Ptppos;
L T#1S500MS;
*D;
T #X1tppos;
NOP 0;
NETWORK
TITLE =Calcul de la valeur du temps maxi de Perte Position
//Max value of Position lost Time calculating (percentage)
//*ODIL_ID:2042_32*
L #X1tppos;
L 100;
/D;
T #Xtppos;
NOP 0;
NETWORK
TITLE =Filtrage de la perte de position pour la soudure
//Lost position filter for Welding
//*ODIL_ID:2042_33*
U #Valcpos;
= L 27.0;
BLD 103;
CALL #TONFilPos (
IN := L 27.0,
PT := #Xtppos,
Q := #Defpos);
NOP 0;
NETWORK
TITLE =MESURE DU TEMPS D'EXECUTION DU MOUVEMENT
//Movement time Measure
//*ODIL_ID:2042_34*

NETWORK
TITLE =Autorisation d'apprentissage du temps d'exec mvt
//Learning authorization for movement time
//*ODIL_ID:2042_35*
U #Lien_pup.Z_idapp;
U #Auto;
= #Aapp;
NETWORK
TITLE =Validation de la mesure du temps
//movement time validation
//*ODIL_ID:2042_36*
U #Oamv;
U(;
U #AutM;
UN #MF.IA;
ON #AutM;
);
O;
U #Ormv;
U(;
U #AutM;
UN #MF.IR;
ON #AutM;
);
= #Valm;
NETWORK
TITLE =Raz temps de reference sur front montant de l'apprentissage
//Time reference reset by learning
//*ODIL_ID:2042_37*
U #Aapp;
U #Valm;
UN #Mdap;
SPBNB _001;
L T#0MS;
T #Tref;
_001: NOP 0;
NETWORK
TITLE =Demande enregistrement du temps mesure comme temps de reference
//Time reference record request (value to time Reference)
//*ODIL_ID:2042_38*
U #Aapp;
U(;
L #XTpme;
L #Tref;
>D;
);
= #Enrg;
NETWORK
TITLE =memorisation de la demande d'apprentissage
//learning request memory
//*ODIL_ID:2042_39*
U #Aapp;
U #Valm;
S #Mdap;
UN #Lien_pup.Z_idapp;
R #Mdap;
NOP 0;
NETWORK
TITLE =Temps de mouvement memorise Tpme
//Le temps du dernier mouvement pilote reste memorise dans la variable STAT Tpme
//
//Movement time measure Memory (Tpme) :
//The last movement time is recorded to Tpme information in STAT Tpme
//*ODIL_ID:2042_40*
U #Valm;
SPBNB _002;
L #XTpme;
T #Tpme;
_002: NOP 0;
NETWORK
TITLE =Mesure du temps du mouvement
//Temps maximum du mouvement PT = 5 min20 sec.
//A augmenter si cela est insuffisant
//
//Time Movement measure :
//Maxi PT movement time value is 5 min and 20 sec.
//This value can be changed in the code if the real movement time is bigger
//*ODIL_ID:2042_41*
U #Valm;
= L 27.0;
BLD 103;
CALL #TONTmpMvt (
IN := L 27.0,
PT := T#5M20S,
ET := #XTpme);
NOP 0;
NETWORK
TITLE =Enregistrement en apprentissage
//Record in learning mode
//*ODIL_ID:2042_42*
U #Valm;
U #Enrg;
SPBNB _003;
L #XTpme;
T #Tref;
_003: NOP 0;
NETWORK
TITLE =Controle seuil d'alerte
//Le temps mesure est superieur au temps de reference plus 0.2s
//
//Alarm limit check :
//Measuring time bigger than reference time with 0.2 second
//in more
//*ODIL_ID:2042_43*
UN #Aapp;
U #Valm;
= L 27.0;
U L 27.0;
SPBNB _004;
L #Tref;
L T#200MS;
+D;
T #X1tref;
_004: NOP 0;
U L 27.0;
U(;
L #XTpme;
L #X1tref;
>D;
);
= #Ala;
= #Diag.Ala;
NETWORK
TITLE =Calcul de la valeur du pourcentage du temps de reference
//Reference time percentage calculating
//*ODIL_ID:2042_44*
UN #Aapp;
U #Valm;
= L 27.0;
U L 27.0;
SPBNB _005;
L #Tref;
L #Ptref;
*D;
T #X1ptref;
_005: NOP 0;
U L 27.0;
SPBNB _006;
L #X1ptref;
L 100;
/D;
T #X2ptref;
_006: NOP 0;
U L 27.0;
SPBNB _007;
L #Tref;
L #X2ptref;
+D;
T #X3ptref;
_007: NOP 0;
U L 27.0;
U(;
L #XTpme;
L #X3ptref;
>D;
);
= #Defdtm;
NETWORK
TITLE =GENERATION DE LA SORTIE DEFAUT
//Fault processing
//*ODIL_ID:2042_45*

NETWORK
TITLE =Activation de la sortie defaut
//Fault set
//*ODIL_ID:2042_46*
U #Auto;
U(;
O #Defdtm;
O #Defpos;
);
S #Def;
U(;
O #MF.IA;
O #MF.IR;
);
U(;
UN #Oamv;
UN #Ormv;
O;
U #AutM;
UN #Defdtm;
UN #Defpos;
);
R #Def;
U #Def;
= #Diag.Def;
NETWORK
TITLE =Interverrouillage def et Ala
//Def and Ala inter-lock
//*ODIL_ID:2042_47*
U #Def;
R #Ala;
R #Diag.Ala;
NETWORK
TITLE =DIAGNOSTIC: N° LISTE DE DEFAUT PROPRE A LA FB POUR IHMP
//Fault list number value ( reserved for future)
//*ODIL_ID:2042_48*
L 0;
T #Diag.Numliste;
NOP 0;
NETWORK
TITLE =INDICATION DU DEFAUT
//Code : N° de defaut ou dalarme en Decimal
//
//         1 : DEFaut Depassement Temps de Mouvement
//         2 : DEFaut Perte de position
//         4 : Alarme de depassement du temps de mouvement
//
//Codedef values
//Decimal value :
//1 = Movement time exceeded fault
//2 = Loos of position fault
//4 = Movement time exceeded alarm
//*ODIL_ID:2042_49*
U #Ba1i;
= L 27.0;
U L 27.0;
U #Ala;
SPBNB _008;
L 4;
T #Diag.Codedef;
_008: NOP 0;
U L 27.0;
U #Defpos;
SPBNB _009;
L 2;
T #Diag.Codedef;
_009: NOP 0;
U L 27.0;
U #Defdtm;
SPBNB _00a;
L 1;
T #Diag.Codedef;
_00a: NOP 0;
NETWORK
TITLE =RAZ CODE DE DEFAUT
//codedef value Reset
//*ODIL_ID:2042_50*
UN #Def;
UN #Ala;
SPBNB _00b;
L 0;
T #Diag.Codedef;
_00b: NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MOUVMP1"
TITLE =BF_MOUVMP1
//*******************************************************************************
//*                            FB "MOUVMP1"                                     *
//*        ASSURE LA COMMANDE DE MOUVEMENT PLUS DE 2 POSITIONS                  *
//*                     (Avec ou sans Commande Bimanuel)                        *
//*                                                                             *
//*       EXECUTES THE COMMANDE OF MOUVEMENT WITH MORE THAN 2 POSITIONS         *
//*                   (with or without 2-hand control)                          *
//*******************************************************************************
//( In English further below)
//DESCRIPTION:
//************
//   - gestion des ordres de commande suivant les modes:
//       Auto, Manu reglage, Auto Pas a Pas, Auto Retour Origine de Cycle
//        (positionnes sur les bits du mot lien pupitre LIEN_PUP)
//   - gestion de l'ordre de commande suivant l'etat de la fonction
//       (positionnees sur les bits du mot fonction MF)
//   - gestion des voyants particuliers
//   - gestion des voyants communs
//   - mesure du temps d'execution du mouvement et comparaison avec un temps
//       de reference enregistre. Activation d'une alerte et d'un defaut
//
//
//MISE EN OEUVRE :
//*************
//Utilise :
//l' UDT 1988 Lien_Pup ( les information sont generees par la BF_Zone_Mode)
//l'UDT 2041 Mot_Fonc_MP (Information a generer en amont de la BF)
//Gestion des mouvements en Mode Manuel :
//Par defaut la BF fonctionne pour une commande de mouvement dans une zone fermee
//sans risque operateur
//Pour une utilisation avec commande Bimanuelle, l'information BIM contenue dans
//le Mot fonction MF doit etre Maintenue a 1 en amont de la BF pour visualiser la
//position du mouvement sur l'ecran et permettre la selection du mouvement
//
//Les temps de references doivent etre associes au DB $98 de la zone (Z$T)
//($ = Numero de la zone)
//
//L'entree COM doit etre mise en uvre avec l'information de commun electrique
//issue du programme Safety
//
//Multi-position :
//Le FB actionne ou non l'ordre de deplacement du mobile vers la position X
//Chaque deplacement vers une position est gere par un FB " MOUVMP1 "
//Pour eviter de commander plusieurs ordres de deplacement en meme temps, il
//existe un Lien entre les FB traitant des deplacements d'un meme mobile (IN/OUT
//LIEN).
//Un deplacement vers une position X est autorise si le mot Lien est a 0. Le FB
//neutralise les autres boites en mettant son numero de position dans le mot Lien.
//Si le deplacement est termine ou impossible, le FB remet 0 dans le mot Lien,
//autorisant ainsi les autres deplacements
//
//LISTE DES DEFAUT :
//***************
//Valeur de codedef :
//1 = Defaut depassement du temps mouvement
//2 = Defaut perte de position
//4 = Alarme de depassement du temps mouvement
//
//************************** ENGLISH INFORMATION  ****************************
//DESCRIPTION :
//*************
//- Control of the order of commands depending on the operating modes:
//Auto, Manual control, Auto Step mode, Auto Return to Cycle Origin
//(set by the bool of the UDT link to operator panel LIEN_PUP)
//- Control of the order of commands depending on the status of the function
//(set with the Bool of the UDT function MF )
//- Control of the dedicated lamps
//- Control of the commom lamps
//- Measurement of the execution time for the movement and comparison with the
//recorded reference time. Activation of a warning and an error message.
//
//OPERATING:
//***********
//This BF Use :
//UDT 1988 "LIEN_PUP" (written by BF_ZONE_MODE)
//UDT 2041 "MOT_FONC_MP" (the information must be written before this BF)
//Movement in Manual Mode:
//If you use an safety two-hand control, the "BIM" Input contained in MF UDT must
//be set to 1 before this BF in order to see the movement lamp position in the
//screen, and select the movement
//Time movement Reference:
//Must be defined in global data DB$98 "Z$T" of the area (zone) dependence($ =
//zone Number)
//COM Input : must be implemented with safety infomation from safety program
//
//Multi-position :
//The FB executes or not the command of sub-assembly movement to reach
//position X
//For each movement between 2 given positions a FB "MOUVMP1" is used.
//The link word between FBs processing movements of the same sub-assembly (IN/OUT
//"LIEN") is used to avoid several movement commands at the same time.
//A movement to a position X is authorized if the Link word is reset to 0. The FB
//blocks the other FB by writing its position number in the Link word.
//If the movement is finished or is impossible, the FB resets the Link word to 0,
//thus authorising the other movements.
//
//FAULT list:
//************
//Codedef values:
//1 = Movement time exceeded fault
//2 = Position lost fault
//4 = Movement time exceeded alarm
//
//****************************_ODIL_ID***************************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 52
//Dernier ID mis en oeuvre / Last ID implemented : 2041_52
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'MOUVMP1'
VERSION : 3.1
VAR_INPUT
  Com : BOOL;	//Safe COMmon 24V for BF output / indicateur COMmun des sorties
  Lien_pup : LIEN_PUP;	//Panels link information / mot des indicateurs LIEN du  PUPitre
  MF : MOT_FONC_MP;	//Movement function information / Mot Fonction du mouvement
  Npos : INT;	//Target position number / Numero de POSition a atteindre
  Bpmv : BOOL;	//Advance movement Push button / BP Avance MouVement
END_VAR
VAR_OUTPUT
  Opmv : BOOL;	//Advance Movement Order / Ordre Avance MouVement
  Vpmv : BOOL;	//Advance Movement Lamp / Voyant Avance MouVement
  Def : BOOL;	//Fault / DEFaut
  Ala : BOOL;	//Alarm / Alarme
  Diag : STRUCT	//Diagnosis and information /Information et diagnostic
    Def : BOOL;	//Fault Presence / Presence Defaut
    Ala : BOOL;	//Alarm Presence / Presence d'une alarme
    Numliste : INT;	//Reserved for SMP Fault list Number / Numero de liste defaut SMP
    Codedef : INT;	//Fault or Alarm Number / N° de defaut ou dalarme en Decimal
    Ihmvpmv : BOOL;	//IHMP target reached information(Lamp)/ info mouvement en position pour IHMP
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Lien : WORD;	//Link between the positions orders / LIEN entre les commandes des positions
  Mvec : BOOL;	//Movement in progress information / indicateur MouVement En Cours
  Dva_p : BOOL;	//Advance movement Lamp request / Demande Voyant Avance Pupitre
  Tref : TIME  := T#5M;	//Movement Reference Time / Temps de Reference mouvement
END_VAR
VAR
  Pmsl : BOOL;	//Movement position selected / Position Mouvement SeLectionnee
  Mpos : BOOL;	//Position memory /Memoire POSition
  Valm : BOOL;	//Measure validation / VALidation Mesure
  Mdap : BOOL;	//Learning request memory / Memoire Demande APprentissage
  Defdtm : BOOL;	//Movement time out fault / DEFaut Depassement Temps de Mouvement
  Defpos : BOOL;	//Position fault / Defaut position
  Valcpos : BOOL;	//Position check validation / VALidation Controle POSition
  Bpmva0 : BOOL;	//Movement push button to '0' / BP MouVement A 0
  TONFilPos : TON;	//Lost position timer for welding / Tempo Perte de position pour soudure
  TONTmpMvt : TON;	//Movement time measure timer  / Tempo MEsure Temps de MouVement
  XTpme : TIME;	//Movement time auxiliary / Aux temps de mouvement
  Tpme : TIME;	//Movement time measure memory / Temps de mouvement mesure memoire
  Xbpmv : BOOL;	//Push button movement auxiliary / auXiliaire BP MouVement
  Xapmv : BOOL;	//Movement positioning auxiliary / auXiliaire Positionement MouVement
  Fdxdva_p : BOOL;	//Falling edge xdva_p / Front descendant xdva_p
  Enrg : BOOL;	//Time record request / Demande enregistrement temps
  Xdva_p : BOOL;	//Intermediate bit Xdva_p / Bit intermediaire Xdva_p
  Ptppos : INT  := 100;	//Position lost time percentage  / Pourcentage Temps de Perte position
  Ptref : INT  := 100;	//Reference time percentage / Pourcentage Temps de REFerence
END_VAR
VAR_TEMP
  Imot : WORD;	//Work bool table L0.0 to L0.15 / Table de bits de travail L0.0 a L0.15
  Auto : BOOL;	//Automatic mode indicator / indicateur mode de marche AUTOmatique
  Manu : BOOL;	//Manual mode indicator / indicateur mode de marche MANUel
  Apap : BOOL;	//Step by step mode in automatic indicator / indicateur marche Auto Pas A Pas
  Aroc : BOOL;	//To home position mode indicator / indicateur marche Auto Retour Origine Cycle
  Aapp : BOOL;	//Learning authorization / Autorisation APPrentissage
  X1tppos : TIME;	//Resultat intermediaire 1 du tps de perte position
  Xtppos : TIME;	//Lost position time 1st intermediate / intermediaire 1 du tps de perte position
  X1tref : TIME;	//1st intermediate alert level / intermediaire 1 de calcul du seuil d'alerte
  X1ptref : TIME;	//1st intermediate percentage calculation / inter. 1 de calcul du pourcentage
  X2ptref : TIME;	//2nd intermediate percentage calculation / inter. 2 de calcul du pourcentage
  X3ptref : TIME;	//3rd intermediate percentage calculation / inter. 3 de calcul du pourcentage
  ORDRES : BOOL;	//Movement order to position / ORDRES mouvement vers position en cours
  Numpos : WORD;	//Position Number / NUMero POSition
  Ba1i : BOOL;	//True bit / Bit toujours a 1
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Set to 1 the useful information in the BF Block
//*ODIL_ID:2041_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Mode de marche AUTO
//Automatic Mode
//*ODIL_ID:2041_2*
//
U #Lien_pup.Z_mauto;
UN #Lien_pup.Z_manup;
= #Auto;
NETWORK
TITLE =Mode de marche MANU
//Manual Mode
//*ODIL_ID:2041_3*
//
UN #Lien_pup.Z_mauto;
U #Lien_pup.Z_manup;
= #Manu;
NETWORK
TITLE =Mode de fonctionnement AUTO   PAS A PAS
//Step by step mode in automatic
//*ODIL_ID:2041_4*
//
U #Auto;
U #Lien_pup.Z_mpapp;
= #Apap;
NETWORK
TITLE =Mode de fonctionnement Auto retour en origine de cycle
//Home position mode in Automatic
//*ODIL_ID:2041_5*
//
U #Auto;
U #Lien_pup.Z_mrocp;
= #Aroc;
NETWORK
TITLE =ANTI-BLOCAGE DES BP DE COMMANDE
//Anti-blocking of hard push button
//*ODIL_ID:2041_6*
//

NETWORK
TITLE =Prise en compte appui BP si mouvement selectionne
//Switch-on push button taken into account if movement selected
//*ODIL_ID:2041_7*
//
U(;
U(;
O #Bpmva0;
O;
UN #MF.BIM;
U #Xbpmv;
);
U #Bpmv;
O;
U #MF.BIM;
U #Xbpmv;
UN #MF.IP;
);
U #MF.SL;
= #Xbpmv;
NETWORK
TITLE =Controle relachement des BP
//Release buttons control
//*ODIL_ID:2041_8*
//
UN #Bpmv;
= #Bpmva0;
NETWORK
TITLE =CONTROLE INACTIVITE DES AUTRES COMMANDES DE POSITIONNEMENT
//Inactivity check for the other positions Orders
//*ODIL_ID:2041_9*
//

NETWORK
TITLE =Calcul du numero de bits du mot LIEN fonction du No de position
//Link word (LIEN) bit number calculation depending on position number
//*ODIL_ID:2041_10*
//
L #Npos;
L 1;
-I;
T #Numpos;
NOP 0;
NETWORK
TITLE =RAZ du mot LIEN si le commun des sorties est a 0
//Link (LIEN) Reset if safe common is 0
//*ODIL_ID:2041_11*
//
UN #Com;
SPBNB _001;
L 0;
T #Lien;
_001: NOP 0;
NETWORK
TITLE =Eclatement du mot LIEN sur n tables de bits
//Lien Transfert to n bool tables
//*ODIL_ID:2041_12*
//
L #Lien;
T #Imot;
NOP 0;
NETWORK
TITLE =RAZ de l'etat de l'ordre de positionnement propre a cette cde
//Numpos => index pour bit Imot a inverser
//
//Order position reset
//Numpos => index for Imot bools to reverse
//*ODIL_ID:2041_13*
//
L #Numpos;
L B#16#1;
SLW;
INVI;
L #Imot;
UW;
T #Imot;
NETWORK
TITLE =Sauvegarde des ordres de positionnement dans le mot lien
//Positions orders back up in LIEN word
//*ODIL_ID:2041_14*
//
L #Imot;
T #Lien;
NOP 0;
NETWORK
TITLE =Sauvegarde des ordres de positionnement dans le mot LIEN
//Positions orders back up in LIEN word
//*ODIL_ID:2041_15*
//
L #Lien;
L 0;
<>I;
= #ORDRES;
NETWORK
TITLE =Traitement des autorisations de mouvements
//Movements Authorizations Processing
//*ODIL_ID:2041_16*
//

NETWORK
TITLE =auXiliaire Autorisation positionnement MouVement
//Movement position auxiliary
//*ODIL_ID:2041_17*
//
U #MF.AP;
U(;
ON #Lien_pup.Z_macy;
O #Xapmv;
);
= #Xapmv;
NETWORK
TITLE =FONCTION MOUVEMENT : SELECTION EN MODE PAS A PAS
//Movement Function: Step by step mode selection
//*ODIL_ID:2041_18*
//

NETWORK
TITLE =Selection : RAZ prise de main par la fonction
//Selection : control by the function information Reset
//*ODIL_ID:2041_19*
//
ON #Apap;
O;
U #Pmsl;
UN #Xbpmv;
R #Mvec;
NETWORK
TITLE =Selection de la fonction pour un mouvement d'avance
//Function selection for Advance movement
//*ODIL_ID:2041_20*
//
U #Apap;
U #MF.SL;
U(;
UN #Mvec;
U #MF.SP;
U #Xapmv;
UN #MF.IP;
UN #ORDRES;
O;
U #Mvec;
U #Pmsl;
);
= #Pmsl;
NETWORK
TITLE =Selection : indication de la prise de main par la fonction
//Selection : control by the function information Set
//*ODIL_ID:2041_21*
//
U #Pmsl;
S #Mvec;
NETWORK
TITLE =TRAITEMENT DE LA FONCTION MOUVEMENT : ORDRES
//Movement Function Processing : Orders
//*ODIL_ID:2041_22*
//

NETWORK
TITLE =Ordre "positionnnement mouvement"
//Movement positioning Order
//*ODIL_ID:2041_23*
//
U #Com;
U(;
U #Auto;
U(;
UN #Aroc;
U(;
ON #Apap;
O;
U #Pmsl;
U #Xbpmv;
);
U #Xapmv;
O;
U #Aroc;
U #Xbpmv;
);
O;
U #Manu;
U #Xbpmv;
);
U #MF.SP;
UN #MF.IP;
UN #ORDRES;
= #Opmv;
NETWORK
TITLE =Positionnement du bit suivant l'ordre de mouvement
//Numpos => index pour bit Imot a inverser
//
//Bool positioning according to movement order
//Numpos => index for Imot bools to reverse
//*ODIL_ID:2041_24*
//
UN #Opmv;
SPB NSet;
L #Numpos;
L B#16#1;
SLW;
L #Imot;
OW;
T #Imot;
NSet: NOP 0;
NETWORK
TITLE =Sauvegarde des bits d'ORDRES dans le mot LIEN
//Orders bools back-up in LIEN word
//*ODIL_ID:2041_25*
//
L #Imot;
T #Lien;
NOP 0;
NETWORK
TITLE =TRAITEMENT DE LA FONCTION MOUVEMENT : SIGNALISATION
//Movement Function Processing : Lamp
//*ODIL_ID:2041_26*
//

NETWORK
TITLE =Voyant particulier de la fonction "Positionnement mouvement"
//Positioning movement lamp (Out information)
//*ODIL_ID:2041_27*
//
O #MF.IP;
O;
U #Auto;
U(;
ON #Apap;
O #Pmsl;
);
U #MF.SP;
U #Xapmv;
U #Com;
U #Lien_pup.Icl;
O;
U #Manu;
U #MF.SP;
U(;
O #Com;
O #MF.BIM;
);
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Vpmv;
= #Diag.Ihmvpmv;
NETWORK
TITLE =Voyant commun du pupitre "Avance mouvement"
//Advance movement lamp auxiliary
//*ODIL_ID:2041_28*
//
U(;
U #Manu;
U #MF.SL;
U #Vpmv;
O;
U #Pmsl;
U #Vpmv;
);
UN #Aroc;
= #Xdva_p;
NETWORK
TITLE =Voyant commun du pupitre "Avance mouvement"
//Advance movement lamp (Output information)
//*ODIL_ID:2041_29*
//
U #Xdva_p;
S #Dva_p;
U #Xdva_p;
FN #Fdxdva_p;
R #Dva_p;
NOP 0;
NETWORK
TITLE =CONTROLE DU MAINTIEN EN POSITION
//Position held check
//*ODIL_ID:2041_30*
//

NETWORK
TITLE =memorisation "Mouvement en position "
//Suppression necessaire du reset par ORDRES car le defaut perte de position ne
//peut jamais etre detecte.
//
//Movement in position memory :
//Delete of reset by ORDERS is necessary because the lost position fault can't be
//detected.
//*ODIL_ID:2041_31*
//
U #MF.IP;
S #Mpos;
U(;
O #Opmv;
O #ORDRES;
);
R #Mpos;
NOP 0;
NETWORK
TITLE =Controle de la perte de position
//Lost position check
//*ODIL_ID:2041_32*
//
U #Mpos;
UN #MF.IP;
UN #Lien_pup.Dmaitre;
= #Valcpos;
NETWORK
TITLE =Calcul de la valeur du temps maxi de Perte Position
//Max value of lost position time calculation
//*ODIL_ID:2041_33*
//
L #Ptppos;
L T#1S500MS;
*D;
T #X1tppos;
NOP 0;
NETWORK
TITLE =Calcul de la valeur du temps maxi de Perte Position
//Max value of Position lost Time calculation (percentage)
//*ODIL_ID:2041_34*
//
L #X1tppos;
L 100;
/D;
T #Xtppos;
NOP 0;
NETWORK
TITLE =Filtrage de la perte de position pour la soudure
//Lost position filter for Welding
//*ODIL_ID:2041_35*
//
U #Valcpos;
= L 33.0;
BLD 103;
CALL #TONFilPos (
IN := L 33.0,
PT := #Xtppos,
Q := #Defpos);
NOP 0;
NETWORK
TITLE =MESURE DU TEMPS D'EXECUTION DU MOUVEMENT
//Movement time Measure
//*ODIL_ID:2041_36*
//

NETWORK
TITLE =Autorisation d'apprentissage du temps d'exec mvt
//Learning authorization for movement time
//*ODIL_ID:2041_37*
//
U #Lien_pup.Z_idapp;
U #Auto;
= #Aapp;
NETWORK
TITLE =Validation de la mesure du temps
//movement time validation
//*ODIL_ID:2041_38*
//
U #Opmv;
= #Valm;
NETWORK
TITLE =Raz temps de reference sur front montant de l'apprentissage
//Time reference reset by learning
//*ODIL_ID:2041_39*
//
U #Aapp;
U #Valm;
UN #Mdap;
SPBNB _002;
L T#0MS;
T #Tref;
_002: NOP 0;
NETWORK
TITLE =Demande d'enregistrement du temps mesure comme temps de referenc
//Time reference recording request (measured time becomes reference)
//*ODIL_ID:2041_40*
//
U #Aapp;
U(;
L #XTpme;
L #Tref;
>D;
);
= #Enrg;
NETWORK
TITLE =memorisation de la demande d'apprentissage
//learning request memory
//*ODIL_ID:2041_41*
//
U #Aapp;
U #Valm;
S #Mdap;
UN #Lien_pup.Z_idapp;
R #Mdap;
NOP 0;
NETWORK
TITLE =Temps de mouvement memorise
//Variable stat Tpme memorise le temps du dernier mouvement effectue
//
//Mouvement time value
//The Tpme variable contain the Last movement time
//*ODIL_ID:2041_42*
//
U #Valm;
SPBNB _003;
L #XTpme;
T #Tpme;
_003: NOP 0;
NETWORK
TITLE =Mesure du temps du mouvement
//Temps maximum du mouvement PT = 5 min20 - 0,2 sec.
//A augmenter si cela est insuffisant
//Time Movement measure :
//Maxi PT movement time value is 5 min and 20 sec.
//This value can be changed in the code if the real movement time is bigger
//*ODIL_ID:2041_43*
//
U #Valm;
= L 33.0;
BLD 103;
CALL #TONTmpMvt (
IN := L 33.0,
PT := T#5M20S,
ET := #XTpme);
NOP 0;
NETWORK
TITLE =Enregistrement en apprentissage
//Record in learning mode
//*ODIL_ID:2041_44*
//
U #Valm;
U #Enrg;
SPBNB _004;
L #XTpme;
T #Tref;
_004: NOP 0;
NETWORK
TITLE =Controle du seuil d'alerte
//Le temps mesure est superieur au temps de reference plus 0.2s
//
//Alarm limit check :
//Measured time higher than reference time (0.2 additional seconds)
//*ODIL_ID:2041_45*
//
UN #Aapp;
U #Valm;
= L 33.0;
U L 33.0;
SPBNB _005;
L #Tref;
L T#200MS;
+D;
T #X1tref;
_005: NOP 0;
U L 33.0;
U(;
L #XTpme;
L #X1tref;
>D;
);
= #Ala;
= #Diag.Ala;
NETWORK
TITLE =Calcul de la valeur du pourcentage du temps de reference
//Et controle du seuil de defaut
//
//Reference time percentage calculating :
//And checking fault threshold
//*ODIL_ID:2041_46*
//
UN #Aapp;
U #Valm;
= L 33.0;
U L 33.0;
SPBNB _006;
L #Tref;
L #Ptref;
*D;
T #X1ptref;
_006: NOP 0;
U L 33.0;
SPBNB _007;
L #X1ptref;
L 100;
/D;
T #X2ptref;
_007: NOP 0;
U L 33.0;
SPBNB _008;
L #Tref;
L #X2ptref;
+D;
T #X3ptref;
_008: NOP 0;
U L 33.0;
U(;
L #XTpme;
L #X3ptref;
>D;
);
= #Defdtm;
NETWORK
TITLE =GENERATION DE LA SORTIE DEFAUT
//Fault processing
//*ODIL_ID:2041_47*
//

NETWORK
TITLE =Activation de la sortie defaut
//Fault set
//*ODIL_ID:2041_48*
//
U #Auto;
U(;
O #Defdtm;
O #Defpos;
);
S #Def;
U(;
O #ORDRES;
O #MF.IP;
);
R #Def;
U #Def;
= #Diag.Def;
NETWORK
TITLE =Interverrouillage def et Ala
//Def and Ala inter-lock
//*ODIL_ID:2041_49*
//
U #Def;
R #Ala;
R #Diag.Ala;
NETWORK
TITLE =DIAGNOSTIC: N° LISTE DE DEFAUT PROPRE A LA FB POUR IHMP
//Spare ( Function not used)
//*ODIL_ID:2041_50*
//
L 0;
T #Diag.Numliste;
NOP 0;
NETWORK
TITLE =INDICATION DU DEFAUT
//Code : N° de defaut ou dalarme en Decimal
//
//         1 : DEFaut Depassement Temps de Mouvement
//         2 : DEFaut Perte de position
//         4 : Alarme de depassement du temps de mouvement
//
//Codedef values
//Decimal value :
//1 = Movement time exceeded fault
//2 = Lost position fault
//4 = Movement time exceeded alarm
//*ODIL_ID:2041_51*
//
U #Ba1i;
= L 33.0;
U L 33.0;
U #Ala;
SPBNB _009;
L 4;
T #Diag.Codedef;
_009: NOP 0;
U L 33.0;
U #Defpos;
SPBNB _00a;
L 2;
T #Diag.Codedef;
_00a: NOP 0;
U L 33.0;
U #Defdtm;
SPBNB _00b;
L 1;
T #Diag.Codedef;
_00b: NOP 0;
NETWORK
TITLE =RAZ CODE DE DEFAUT
//codedef value Reset
//*ODIL_ID:2041_52*
//
UN #Def;
UN #Ala;
SPBNB _00c;
L 0;
T #Diag.Codedef;
_00c: NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MVSE2P1"
TITLE =BF_MVSE2P1
//*******************************************************************************
//*                               FB "MVSE2P1"                                  *
//* ASSURE LA COMMANDE DE MOUVEMENT SIMPLE EFFET 2 POSITIONS EXCLUSIVEMENT      *
//*                     (Avec ou sans Commande Bimanuel)                        *
//
//*                                                                             *
//*       EXECUTES THE COMMANDE FOR A SIMPLE EFFECT MOUVEMENT WITH 2 POSITIONS  *
//*                   (with or without 2-hand control)                          *
//*******************************************************************************
//( In English further below)
//DESCRIPTION:
//************
//   - gestion des ordres de commande suivant les modes:
//       Auto, Manu reglage, Auto Pas a Pas, Auto Retour Origine de Cycle
//        (positionnes sur les bits du mot lien pupitre LIEN_PUP)
//   - gestion de l'ordre de commande suivant l'etat de la fonction
//       (positionnees sur les bits du mot fonction MF)
//   - gestion des voyants particuliers
//   - gestion des voyants communs
//   - mesure du temps d'execution du mouvement et comparaison avec un temps
//       de reference enregistre. Activation d'une alerte et d'un defaut
//
//
//MISE EN OEUVRE :
//*************
//Utilise :
//l' UDT 1988 Lien_Pup ( les information sont generees par la BF_Zone_Mode)
//l'UDT 2042 Mot_Fonc (Information a generer en amont de la BF)
//Gestion des mouvements en Mode Manuel :
//Par defaut la BF fonctionne pour une commande de mouvement dans une zone fermee
//sans risque operateur
//Pour une utilisation avec commande Bimanuelle, l'information BIM contenue dans
//le Mot fonction MF doit etre Maintenue a 1 en amont de la BF pour visualiser la
//position du mouvement sur l'ecran et permettre la selection du sens du
//mouvement
//
//Les temps de references doivent etre associes au DB $98 de la zone (Z$T)
//($ = Numero de la zone)
//
//L'entree COM doit etre mise en uvre avec l'information de commun electrique
//issue du programme Safety
//Pour les mouvements en zone fermee = info safety de la zone fermee "TNI".Z$FZ_OK
//Pour les mouvements avec commande bimanuelle = Info safety de securite
//operateur
//"TRI".<NomSE>SOP_OK
//
//LISTE DES DEFAUT :
//***************
//Valeur de codedef :
//1 = Defaut depassement du temps mouvement
//2 = Defaut perte de position
//4 = Alarme de depassement du temps mouvement
//
//************************** ENGLISH INFORMATION  ****************************
//DESCRIPTION :
//*************
//- Control of the order of commands depending on the operating modes:
//Auto, Manual control, Auto Step mode, Auto Return to Cycle Origin
//(set by the bool of the UDT link to operator panel LIEN_PUP)
//- Control of the order of commands depending on the status of the function
//(set with the Bool of the UDT function MF )
//- Control of the dedicated lamps
//- Control of the commom lamps
//- Measurement of the execution time for the movement and comparison with the
//recorded reference time. Activation of a warning and an error message.
//
//OPERATING:
//***********
//This BF Use :
//UDT 1988 "LIEN_PUP" (written by BF_ZONE_MODE)
//UDT 2042 "MOT_FONC" (the information must be written before this BF)
//Movement in Manual Mode:
//If you use an safety two-hand control, the "BIM" Input contained in MF UDT must
//be set to 1 before this BF in order to see the movement lamp position in the
//screen, and select the movement
//Time movement Reference:
//Must be defined in global data DB$98 "Z$T" of the area (zone) dependence($ =
//zone Number)
//COM Input : must be implemented with safety infomation from safety program
//- For a movement in a closed Area = Safety closed area, use safety OK
//information from "TNI" DB (for example: "TNI".Z$FZ_OK (With $= zone number of
//the facility)
//- For a movement with two-hand control, use Safety operator OK data in "TRI" DB
//( For example: "TRI".<Sub-unit NAME>SOP_OK )
//
//FAULT list:
//************
//Codedef values:
//1 = Movement time exceeded fault
//2 = Position lost fault
//4 = Movement time exceeded alarm
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 49
//Dernier ID mis en oeuvre / Last ID implemented : 2040_49
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'MVSE2P1'
VERSION : 2.3
VAR_INPUT
  Com : BOOL;	//Safe COMmon 24V for BF output / indicateur COMmun des sorties
  Bamv : BOOL;	//Advance movement Push button / BP Avance MouVement
  Brmv : BOOL;	//Return movement Push button / BP Recul MouVement
  Lien_pup : LIEN_PUP;	//Panels link information / mot des indicateurs LIEN du  PUPitre
  MF : MOT_FONC;	//Movement function information / Mot Fonction du mouvement
END_VAR
VAR_OUTPUT
  Omv : BOOL;	//Movement Order / Ordre MouVement
  Vamv : BOOL;	//Advance Movement Lamp / Voyant Avance MouVement
  Vrmv : BOOL;	//Return Movement Lamp / Voyant Recul MouVement
  Def : BOOL;	//Fault / DEFaut
  Ala : BOOL;	//Alarm / Alarme
  Diag : STRUCT	//Diagnosis and information /Information et diagnostic
    Def : BOOL;	//Fault Presence / Presence Defaut
    Ala : BOOL;	//Alarm Presence / Presence d'une alarme
    Numliste : INT;	//Reserved for SMP Fault list Number / Numero de liste defaut SMP
    Codedef : INT;	//Fault or Alarm Number / N° de defaut ou dalarme en Decimal
    Ihmvamv : BOOL;	//Movement advance Lamp / Voyant Avance MouVement
    Ihmvrmv : BOOL;	//Movement return Lamp / Voyant Recul MouVement
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Mvec : BOOL;	//Movement in progress information /Indicateur Mouvement En Cours
  Dva_p : BOOL;	//Advance movement Lamp request / Demande Voyant Avance Pupitre
  Dvr_p : BOOL;	//Return movement Lamp request / Demande Voyant Recul Pupitre
  Tref : TIME  := T#5M;	//Movement Reference Time / Temps de Reference mouvement
END_VAR
VAR
  Avsl : BOOL;	//Advance SELECTED / AVance SeLectionnee
  Resl : BOOL;	//Return SELECTED / REcul Selectionne
  Valm : BOOL;	//Measure validation / VALidation Mesure
  Mdap : BOOL;	//Learning request memory / Memoire Demande APprentissage
  Defdtm : BOOL;	//Movement time out fault / DEFaut Depassement Temps de Mouvement
  Xbamv : BOOL;	//Advance movement push button auxiliary / auXilliaire Bp Avance MouVement
  Xbrmv : BOOL;	//Return movement push button auxiliary / auXiliaire Bp Recul MouVement
  Valcpos : BOOL;	//Position check validation / VALidation Controle POSition
  Bpmva0 : BOOL;	//Movement push buttons to '0' / BPs MouVement A 0
  Xaamv : BOOL;	//Movement advance auxiliary / auXiliaire Avance Mouvement
  Xarmv : BOOL;	//Movement return auxiliary / auXiliaire Recul Mouvement
  TONFilPos : TON;	//Lost position timer for welding / Tempo Perte de position pour soudure
  TONTmpMvt : TON;	//Movement time measure timer / Tempo MEsure Temps de MouVement
  Tpme : TIME;	//Movement time measure / Temps de mouvement mesure
  Ormv : BOOL;	//Movement return Order / Ordre Recul MouVement
  Mpos : BOOL;	//Position memory / Memoire POSition
  Xdva_p : BOOL;	//Intermediate bit Xdva_p / Bit intermediaire Xdva_p
  Xdvr_p : BOOL;	//Intermediate bit Xdvr_p / Bit intermediaire Xdvr_p
  Fdxdva_p : BOOL;	//Falling edge xdva_p / Front descendant xdva_p
  Fdxdvr_p : BOOL;	//Falling edge xdvr_p / Front descendant xdvr_p
  Enrg : BOOL;	//Time record request / Demande enregistrement temps
  Ptppos : INT  := 100;	//Position lost time percentage / Pourcentage Temps de Perte position
  Ptref : INT  := 100;	//Reference time percentage / Pourcentage Temps de REFerence
END_VAR
VAR_TEMP
  Auto : BOOL;	//Automatic mode indicator / indicateur mode de marche AUTOmatique
  Manu : BOOL;	//Manual mode indicator / indicateur mode de marche MANUel
  Apap : BOOL;	//Step by step mode in automatic indicator / indicateur marche Auto Pas A Pas
  Aroc : BOOL;	//To home position mode indicator / indicateur marche Auto Retour Origine Cycle
  Aapp : BOOL;	//Learning authorization / Autorisation APPrentissage
  X1tppos : TIME;	//Lost position time 1st intermediate / intermediaire 1 du tps de perte position
  Xtppos : TIME;	//Lost position time percentage / Valeur du pourcentage du Tps de Perte POSition
  X1tref : TIME;	//1st intermediate alert level / intermediaire 1 de calcul du seuil d'alerte
  X1ptref : TIME;	//1st intermediate percentage calculation / inter. 1 de calcul du pourcentage
  X2ptref : TIME;	//2nd intermediate percentage calculation / inter. 2 de calcul du pourcentage
  X3ptref : TIME;	//3rd intermediate percentage calculation / inter. 3 de calcul du pourcentage
  Defpos : BOOL;	//Lost position fault / DEFaut Perte de position
  Ba1i : BOOL;	//True bit / Bit toujours a 1
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Set to 1 the useful information in the BF Block
//*ODIL_ID:2040_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Mode de marche AUTO
//Automatic Mode
//*ODIL_ID:2040_2*
//
U #Lien_pup.Z_mauto;
UN #Lien_pup.Z_manup;
= #Auto;
NETWORK
TITLE =Mode de marche MANU
//Manual Mode
//*ODIL_ID:2040_3*
//
UN #Lien_pup.Z_mauto;
U #Lien_pup.Z_manup;
= #Manu;
NETWORK
TITLE =Mode de fonctionnement AUTO   PAS A PAS
//Step by step mode in automatic
//*ODIL_ID:2040_4*
//
U #Auto;
U #Lien_pup.Z_mpapp;
= #Apap;
NETWORK
TITLE =Mode de fonctionnement Auto retour en origine de cycle
//Home position mode in Automatic
//*ODIL_ID:2040_5*
//
U #Auto;
U #Lien_pup.Z_mrocp;
= #Aroc;
NETWORK
TITLE =ANTI-BLOCAGE DES BP DE COMMANDE
//Anti-blocking of hard push button
//*ODIL_ID:2040_6*
//

NETWORK
TITLE =Prise en compte appui BP avance si mouvement selectionne
//Switch-on Advance push button taken into account if movement selected
//*ODIL_ID:2040_7*
//
U(;
U(;
O #Bpmva0;
O;
UN #MF.BIM;
U #Xbamv;
);
U #Bamv;
O;
U #MF.BIM;
U #Xbamv;
UN #MF.IA;
);
UN #Brmv;
U #MF.SL;
= #Xbamv;
NETWORK
TITLE =Prise en compte appui BP recul si mouvement selectionne
//Switch-on Return push button taken into account if movement selected
//*ODIL_ID:2040_8*
//
U(;
U(;
O #Bpmva0;
O;
UN #MF.BIM;
U #Xbrmv;
);
U #Brmv;
O;
U #MF.BIM;
U #Xbrmv;
UN #MF.IR;
);
UN #Bamv;
U #MF.SL;
= #Xbrmv;
NETWORK
TITLE =Controle relachement des BP
//Release buttons control
//*ODIL_ID:2040_9*
//
UN #Bamv;
UN #Brmv;
= #Bpmva0;
NETWORK
TITLE =Traitement des autorisations de mouvements
//Movements Authorization
//*ODIL_ID:2040_10*
//

NETWORK
TITLE =auXiliaire Avance MouVement
//Advance movement auxiliary
//*ODIL_ID:2040_11*
//
U #MF.AA;
U(;
ON #Lien_pup.Z_macy;
O #Xaamv;
);
= #Xaamv;
NETWORK
TITLE =auXiliaire Recul MouVement
//Return movement auxiliary
//*ODIL_ID:2040_12*
//
U #MF.AR;
U(;
ON #Lien_pup.Z_macy;
O #Xarmv;
);
= #Xarmv;
NETWORK
TITLE =FONCTION MOUVEMENT : SELECTION EN MODE PAS A PAS
//Movement function : step by step mode selecting
//*ODIL_ID:2040_13*
//

NETWORK
TITLE =Selection : RAZ prise de main par la fonction
//Selection : control by the function information Reset
//*ODIL_ID:2040_14*
//
ON #Apap;
O;
U(;
O #Avsl;
O #Resl;
);
UN #Xbamv;
R #Mvec;
NETWORK
TITLE =Selection de la fonction pour un mouvement d'avance
//Function selection for Advance movement
//*ODIL_ID:2040_15*
//
U #Apap;
U #MF.SL;
U(;
UN #Mvec;
U #MF.SA;
U #Xaamv;
UN #MF.IA;
O;
U #Mvec;
U #Avsl;
);
UN #Resl;
= #Avsl;
NETWORK
TITLE =Selection de la fonction pour un mvt de recul
//Function selection for Return movement
//*ODIL_ID:2040_16*
//
U #Apap;
U #MF.SL;
U(;
UN #Mvec;
U #MF.SR;
U #Xarmv;
UN #MF.IR;
O;
U #Mvec;
U #Resl;
);
UN #Avsl;
= #Resl;
NETWORK
TITLE =Selection : indication de la prise de main par la fonction
//Selection : control by the function information Set
//*ODIL_ID:2040_17*
//
O #Avsl;
O #Resl;
S #Mvec;
NETWORK
TITLE =TRAITEMENT DE LA FONCTION MOUVEMENT : ORDRES
//Movement Function Processing : Order
//*ODIL_ID:2040_18*
//

NETWORK
TITLE =Ordre "Avance mouvement"
//Movement advance order
//*ODIL_ID:2040_19*
//
U #Com;
U(;
U(;
U #Auto;
UN #Aroc;
U(;
ON #Apap;
O;
U #Avsl;
U #Xbamv;
);
U #Xaamv;
O;
U #Manu;
U #Xbamv;
);
U #MF.SA;
O;
U(;
O #MF.IA;
ON #MF.SR;
);
U #Omv;
UN #Ormv;
);
= #Omv;
NETWORK
TITLE =Ordre "Recul mouvement"
//Movement return order
//*ODIL_ID:2040_20*
//
U #Com;
U(;
U(;
U #Auto;
U(;
UN #Aroc;
U(;
ON #Apap;
O;
U #Resl;
U #Xbamv;
);
U #Xarmv;
O;
U #Aroc;
U #Xbrmv;
);
O;
U #Manu;
U #Xbrmv;
);
U #MF.SR;
O;
U(;
O #MF.IR;
ON #MF.SA;
);
UN #Omv;
U #Ormv;
);
= #Ormv;
NETWORK
TITLE =TRAITEMENT DE LA FONCTION MOUVEMENT : SIGNALISATION
//Movement Function Processing : Lamp
//*ODIL_ID:2040_21*
//

NETWORK
TITLE =Voyant particulier de la fonction "Avance mouvement"
//Advance movement Lamp (OUT information)
//*ODIL_ID:2040_22*
//
O #MF.IA;
O;
U #Auto;
U(;
ON #Apap;
O #Avsl;
);
U #MF.SA;
U #Xaamv;
U #Com;
U #Lien_pup.Icl;
O;
U #Manu;
U #MF.SA;
U(;
O #Com;
O #MF.BIM;
);
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Vamv;
= #Diag.Ihmvamv;
NETWORK
TITLE =Voyant particulier de la fonction "Recul mouvement"
//Return movement Lamp (OUT information)
//*ODIL_ID:2040_23*
//
O #MF.IR;
O;
U #Auto;
U(;
ON #Apap;
O #Resl;
);
U #MF.SR;
U #Xarmv;
U #Com;
U #Lien_pup.Icl;
O;
U #Manu;
U #MF.SR;
U(;
O #Com;
O #MF.BIM;
);
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Vrmv;
= #Diag.Ihmvrmv;
NETWORK
TITLE =Voyant commun du pupitre "Avance mouvement"
//Panels common Lamp : Advance Movement
//*ODIL_ID:2040_24*
//
U(;
U #Manu;
U #MF.SL;
U #Vamv;
O;
U #Avsl;
U #Vamv;
O;
U #Resl;
U #Vrmv;
);
UN #Aroc;
= #Xdva_p;
NETWORK
TITLE =Voyant commun du pupitre "Avance mouvement"
//Panels common Lamp : Advance Movement
//*ODIL_ID:2040_25*
//
U #Xdva_p;
S #Dva_p;
U #Xdva_p;
FN #Fdxdva_p;
R #Dva_p;
NOP 0;
NETWORK
TITLE =Voyant commun du pupitre "Recul  mouvement"
//Pannels common Lamp : Return Movement
//*ODIL_ID:2040_26*
//
U #Manu;
U #MF.SL;
U #Vrmv;
UN #Aroc;
= #Xdvr_p;
NETWORK
TITLE =Voyant commun du pupitre "Recul  mouvement"
//Pannels common Lamp : Return Movement
//*ODIL_ID:2040_27*
//
U #Xdvr_p;
S #Dvr_p;
U #Xdvr_p;
FN #Fdxdvr_p;
R #Dvr_p;
NOP 0;
NETWORK
TITLE =CONTROLE DU MAINTIEN EN POSITION
//Position held check
//*ODIL_ID:2040_28*
//

NETWORK
TITLE =Memorisation mouvement en position
//Movement in position memory
//*ODIL_ID:2040_29*
//
U(;
O #MF.IA;
O #MF.IR;
);
S #Mpos;
U(;
U #Omv;
U #MF.IR;
O;
U #Ormv;
U #MF.IA;
);
R #Mpos;
NOP 0;
NETWORK
TITLE =Controle de la perte de position
//Lost position check
//*ODIL_ID:2040_30*
//
U #Mpos;
UN #MF.IA;
UN #MF.IR;
UN #Lien_pup.Dmaitre;
= #Valcpos;
NETWORK
TITLE =Calcul de la valeur du temps maxi de Perte Position
//Max value of lost position time calculation
//*ODIL_ID:2040_31*
//
L #Ptppos;
L T#1S500MS;
*D;
T #X1tppos;
NOP 0;
NETWORK
TITLE =Calcul de la valeur du temps maxi de Perte Position
//Max value of Position lost Time calculating (percentage)
//*ODIL_ID:2040_32*
//
L #X1tppos;
L 100;
/D;
T #Xtppos;
NOP 0;
NETWORK
TITLE =Filtrage de la perte de position pour la soudure
//Lost position filter for Welding
//*ODIL_ID:2040_33*
//
U #Valcpos;
= L 27.0;
BLD 103;
CALL #TONFilPos (
IN := L 27.0,
PT := #Xtppos,
Q := #Defpos);
NOP 0;
NETWORK
TITLE =MESURE DU TEMPS D'EXECUTION DU MOUVEMENT
//Movement time Measure
//*ODIL_ID:2040_34*
//

NETWORK
TITLE =Autorisation d'apprentissage du temps d'exec mvt
//Learning authorization for movement time
//*ODIL_ID:2040_35*
//
U #Lien_pup.Z_idapp;
U #Auto;
= #Aapp;
NETWORK
TITLE =Validation de la mesure du temps
//movement time validation
//*ODIL_ID:2040_36*
//
U #Omv;
UN #MF.IA;
O;
U #Ormv;
UN #MF.IR;
= #Valm;
NETWORK
TITLE =Raz temps de reference sur front montant de l'apprentissage
//Time reference reset on learning
//*ODIL_ID:2040_37*
//
U #Aapp;
U #Valm;
UN #Mdap;
SPBNB _001;
L T#0MS;
T #Tref;
_001: NOP 0;
NETWORK
TITLE =Demande enregistrement du temps mesure comme temps de reference
//Time reference record request (value to time Reference)
//*ODIL_ID:2040_38*
//
U #Aapp;
U(;
L #Tpme;
L #Tref;
>D;
);
= #Enrg;
NETWORK
TITLE =memorisation de la demande d'apprentissage
//learning request memory
//*ODIL_ID:2040_39*
//
U #Aapp;
U #Valm;
S #Mdap;
UN #Lien_pup.Z_idapp;
R #Mdap;
NOP 0;
NETWORK
TITLE =Mesure du temps du mouvement
//Temps maximum du mouvement PT = 5 min20 - 0,2 sec
//A augmenter si cela est insuffisant
//
//Time Movement measure :
//Maxi PT movement time value is 5 min and 20 sec.
//This value can be changed in the code if the real movement time is bigger
//*ODIL_ID:2040_40*
//
U #Valm;
= L 27.0;
BLD 103;
CALL #TONTmpMvt (
IN := L 27.0,
PT := T#5M20S,
ET := #Tpme);
NOP 0;
NETWORK
TITLE =Enregistrement en apprentissage
//Record in learning mode
//*ODIL_ID:2040_41*
//
U #Valm;
U #Enrg;
SPBNB _002;
L #Tpme;
T #Tref;
_002: NOP 0;
NETWORK
TITLE =Controle du seuil d'alerte
//Le temps mesure est superieur au temps de reference plus 0.2s
//
//Alarm limit check :
//Measured time higher than reference time (0.2 additional seconds)
//*ODIL_ID:2040_42*
//
UN #Aapp;
U #Valm;
= L 27.0;
U L 27.0;
SPBNB _003;
L #Tref;
L T#200MS;
+D;
T #X1tref;
_003: NOP 0;
U L 27.0;
U(;
L #Tpme;
L #X1tref;
>D;
);
= #Ala;
= #Diag.Ala;
NETWORK
TITLE =Calcul de la valeur du pourcentage du temps de reference
//Et controle du seuil de defaut
//Reference time percentage calculating :
//And checking fault threshold
//*ODIL_ID:2040_43*
//
UN #Aapp;
U #Valm;
= L 27.0;
U L 27.0;
SPBNB _004;
L #Tref;
L #Ptref;
*D;
T #X1ptref;
_004: NOP 0;
U L 27.0;
SPBNB _005;
L #X1ptref;
L 100;
/D;
T #X2ptref;
_005: NOP 0;
U L 27.0;
SPBNB _006;
L #Tref;
L #X2ptref;
+D;
T #X3ptref;
_006: NOP 0;
U L 27.0;
U(;
L #Tpme;
L #X3ptref;
>D;
);
= #Defdtm;
NETWORK
TITLE =GENERATION DE LA SORTIE DEFAUT
//Fault processing
//*ODIL_ID:2040_44*
//

NETWORK
TITLE =Activation de la sortie defaut
//Fault set
//*ODIL_ID:2040_45*
//
U #Auto;
U(;
O #Defdtm;
O #Defpos;
);
S #Def;
U(;
O #MF.IA;
O #MF.IR;
);
UN #Omv;
R #Def;
U #Def;
= #Diag.Def;
NETWORK
TITLE =Interverrouillage def et Ala
//Def and Ala inter-lock
//*ODIL_ID:2040_46*
//
U #Def;
R #Ala;
R #Diag.Ala;
NETWORK
TITLE =DIAGNOSTIC: N° LISTE DE DEFAUT PROPRE A LA FB POUR IHMP
//*ODIL_ID:2040_47*
L 0;
T #Diag.Numliste;
NOP 0;
NETWORK
TITLE =INDICATION DU DEFAUT
//Code : N° de defaut ou dalarme en Decimal
//
//         1 : DEFaut Depassement Temps de Mouvement
//         2 : DEFaut Perte de position
//         4 : Alarme de depassement du temps de mouvement
//
//Codedef values
//Decimal value :
//1 = Movement time exceeded fault
//2 = Lost position fault
//4 = Movement time exceeded alarm
//*ODIL_ID:2040_48*
//
U #Ba1i;
= L 27.0;
U L 27.0;
U #Ala;
SPBNB _007;
L 4;
T #Diag.Codedef;
_007: NOP 0;
U L 27.0;
U #Defpos;
SPBNB _008;
L 2;
T #Diag.Codedef;
_008: NOP 0;
U L 27.0;
U #Defdtm;
SPBNB _009;
L 1;
T #Diag.Codedef;
_009: NOP 0;
NETWORK
TITLE =RAZ CODE DE DEFAUT
//codedef value Reset
//*ODIL_ID:2040_49*
//
UN #Def;
UN #Ala;
SPBNB _00a;
L 0;
T #Diag.Codedef;
_00a: NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_PnPn_Mesg"
TITLE =BF_PNPN_MESG
//******************************************************************************
//*                                BF_PnPn_Mesg                                *
//*           Echanges Inter-API par messagerie sur le reseau Profinet         *
//*                     via une passerelle Profinet PNPN                       *
//*                                                                            *
//*    Exchanges Inter-PLC using Record Data over Profinet network             *
//*                         via Profinet PNPN gateway                          *
//******************************************************************************
//
//Description:
//------------
//Ce FB permet de realiser des echanges inter-API par messagerie sur le reseau
//Profinet, via une passerelle Profinet PNPN
//
//Ces echanges concernent uniquement les informations hors traitement temps reel
//De type " diversite " (temps d'actualisation des donnees pouvant aller jusqu'a
//2 secondes)
//Sont exclu les informations de securite et d'animation machine
//
//Limite:
//-------
//- maxi 4096 octets, par module " record data" (" RD_Write " ou " RD_Read ")
//parametres sur la passerelle.
//- il est possible d'utiliser jusqu'a 16 modules par passerelle.
//- Ces echanges par messagerie ne sont possibles qu'a partir de la reference
//6ES7158-3AD01-0XA0 de la passerelle (6ES7158-3AD00-0XA0 NON compatible)
//
//Pre requis:
//-----------
//Dans le projet Step7 de chaque API utilisant ce type d'echanges.
//Sous HW Config :
//a) integrer la passerelle PNPN dans le reseau Profinet
//b) ajouter les modules RD Read (lecture de donnees) et RD Write (ecriture des
//donnees) par slot
//
//Dependances:
//------------
//Ce bloc utilise:
//      - Le SFB52 "RDREC" (lecture d'un enregistrement dans un composant))
//      - Le SFB53 "WRREC" (ecriture d'un enregistrement dans un composant)
//      - Le SFB 4 "TON" (temporisation)
//
//Mise en oeuvre :
//----------------
//- Pour chaque module "RD Read" parametre pour la passerelle PN/PN -->
//Ajouter une instance de la BF, en mode Lecture (parametre "mode" = 1)
//
//- Pour chaque module "RD Write" parametre pour la passerelle PN/PN -->
//Ajouter une instance de la BF en mode Ecriture (parametre "mode" = 2)
//
//- Les donnees en lecture ou ecriture sont documentees dans le DB1852 " PN_MESG "
//- L'entree RD_Addr : est documentee avec l'adresse du module "RD Read" ou "RD
//Write" parametree dans HW Config (a lire directement dans HW Config)
//Rappel : un module "RD Read" doit IMPERATIVEMENT etre parametre avec la meme
//adresse de debut pour l'Adresse E (I) (entree) et l'Adresse S (Q) (sortie)
//
//Defauts:
//--------
//Les valeurs de CodeDef, Addinf et Addinf2, sont remises a 0, a la retombee de la
//Sortie Def (suite a valid=0)
//
//         Hex Dec
//CodeDef = 1 | 1  valeur du parametre "Mode" (IN) incorrect
//             AddInf= Valeur documentee sur l'entree "Mode"
//
//         Hex Dec
//CodeDef = 8 | 8 Defaut en mode Ecriture
//             AddInf=  DF80B100 - Valeur du parametre "Length" superieur a 4096
//                                 octets
//             AddInf= C0893A00 - Parametre Z_Data : DB non charge dans l'API
//             AddInf= C0892200 - Parametre Z_Data : DB existant mais trop petit
//             AddInf= C080B100 - Parametre Z_Data : longueur de Z_Data trop
//                                courte par rapport aux donnees a ecrire
//             AddInf = autres valeurs = voir STATUS du SFB53
//
//         Hex Dec
//CodeDef =10 | 16 Passerelle non prete
//             AddInf= 0 - Defaut Profinet pour la passerelle, cote reseau de cet
//                         API
//                         *nom d'IO device NOK
//                         *ou, reseau Profinet debranche de la passerelle, ou en
//                          amont
//                       - Parametre RD_Addr (IN) mal renseigne
//
//             AddInf= 2 - Defaut Profinet pour la passerelle, cote reseau de
//                         l'API partenaire.
//                         * nom d'IO device NOK
//                         * ou, reseau debranche de la passerelle, ou en amont
//
//             AddInf= autres valeurs = voir Mot de Status de la passerelle
//
//         Hex Dec
//CodeDef = 40 |64 TimeOUT : le partenaire n'a pas lu les donnees ecrites
//              AddInf= valeur = Voir  Mot de Status de la passerelle
//              - API partenaire en STOP
//              - lecture non realisee par l'API partenaire
//
//         Hex  Dec
//CodeDef= 200 | 512 Defaut en mode lecture
//             AddInf= C08A3A00 - Parametre Z_Data : DB non charge dans l'API
//             AddInf= C08A2300 - Parametre Z_Data : DB existant mais trop petit
//             AddInf= C080B100 - Parametre Z_Data : longueur de Z_Data trop
//                                courte par rapport aux donnees a recevoir
//            AddInf= autres valeurs == STATUS du SFB52
//
//         Hex   Dec
//CodeDef= 400 | 1024  TimeOUT durant le traitement du SFB RDREC
//            AddInf= STATUS du SFB52
//
//         Hex    Dec
//CodeDef= 800 | 2048  TimeOut : le partenaire de l'echange n'a rien ecrit
//                 Cause frequente
//                - Stop API chez le partenaire
//                - ecriture non validee dans l'API partenaire
//
//
//-----------------------------ENGLISH INFORMATION-----------------------------
//Description:
//------------
//This FB allows to realize exchanges Inter-PLC using Record Data over Profinet
//network via Profinet PNPN gateway
//
//These exchanges concern only the information out of real-time treatment
//Example "diversity part" type (time of data updating can lenght up to 2
//secondes).
//The information of safety and order of the facility are excluded
//
//Limit:
//-------
//- maxi of 4096 bytes , by module " record data" (" RD_Write " or " RD_Read ")
//used in the gateway.
//- It is possible to use up to 16 modules by gateway.
//- These exchanges by messaging system are possible only from the reference
//6ES7158-3AD01-0XA0 of the gateway (6ES7158-3AD00-0XA0 not compatible)
//
//Prerequisite:
//----------
//In the Step7 project for each PLC using this type of exchanges.
//Under HW Config:
//a) add the PNPN gateway in the Profinet network
//b) add RD Read device (reading of data) and RD Write (writing of data)on the
//slot of the gateway
//
//
//Dependences:
//------------
//  This block uses:
//      - The SFB52 " RDREC " (reading of a recording in a device)
//      - The SFB53 " WRREC " (writing of a recording in a device)
//      - The SFB 4 "TON" (Timer)
//
//Implementation:
//----------------
//- For each " RD Read "module of the PN / PN gateway - >
//Add an instance of the BF, in reading mode (parameter "mode" = 1)
//- For each " RD Write module of the PN / PN gateway - >
//Add an instance of the BF, in Writing mode (parameter "mode" = 2)
//
//- The read or wrote datas are from the DB1852 " PN_MESG "
//- The RD_Addr input: must by parameterized with the address of the"RD Read" or
//"RD Write" device used in HW Config (to be read directly in HW Config)
//Reminder: a " RD Read " module must be parameterized with the same starting
//address for the Address E (I) (Input) and the address S (Q) (output)
//
//Faults:
//-------
//The values of CodeDef, Addinf and Addinf2, are reset, at the fallout of
//"Def" output (when "valid" goes to 0)
//
//         Hex Dec
//CodeDef = 1 | 1 value of the parameter "Mode" (IN) fault
//             AddInf = Value "Mode" input
//
//         Hex Dec
//CodeDef = 8 ¦ 8 Writing mode fault
//             AddInf = DF80B100 - Value of the" Length" higher than 4096 bytes
//             AddInf = C0893A00 - Z_Data: DB unloads in the plc
//             AddInf = C0892200 - Z_Data: DB existing but too small
//             AddInf = C080B100 - Z_Data: length too short in regard to the data
//                                 to write
//             AddInf = Other values = see STATUS of the SFB53
//
//         Hex Dec
//CodeDef =10 | 16 Gateway not ready
//             AddInf= 0 - Gateway Profinet fault in the network of this PLC
//                                * IO device Name NOK
//                                * Or, network unplugged on the gateway or on
//                                    upstream device
//                       - RD_Addr (IN) not documented
//             AddInf= 2 - Gateway Profinet fault in the network of the other PLC
//                                * IO device Name NOK
//                                * Or, network unplugged on the gateway or on
//                                   upstream device
//              AddInf= Other values = see STATUS of the Gateway
//
//         Hex Dec
//CodeDef = 40 |64 TimeOUT fault: Partner hasn't read the writing datas
//                AddInf= values = see STATUS of the Gateway
//
//          Hex  Dec
//CodeDef = 200 |512 Reading mode fault
//             AddInf = C08A3A00 - Z_Data: DB unloads in the plc
//             AddInf = C08A2300 - Z_Data: DB existing but too small
//             AddInf = C080B100 - Z_Data: length too short in regard to the data
//                                 to receive
//             AddInf = Other values = see STATUS of the SFB52
//
//         Hex   Dec
//CodeDef= 400 | 1024  TimeOUT Fault During the treatment of SFB RDREC
//AddInf= STATUS of SFB52
//
//         Hex    Dec
//CodeDef= 800 | 2048  TimeOut Fault : The partner of the exchange wrote nothing.
//                 Frequent causes
//                - PLC partner in stop
//                - Writing not validated in the PLC partner
//
//-----------------------------_ODIL_ID_-----------------------------
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 22
//Dernier ID mis en oeuvre / Last ID implemented : 1852_22
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : Renault
FAMILY : 'Profinet'
NAME : 'PnPnMesg'
VERSION : 1.1
VAR_INPUT
  Valid : BOOL;	//Validation of the dialog /Validation du dialogue
  Delay_Valid : TIME;	//Time Delay of the "Valid" / Delai de prise en compte de "Valid" (ex: T#2S)
  RD_Addr : INT;	//Address of RD_Write OR RD_Read Modules/Adresse des modules RD_Write ou RD_Read
  Mode : INT;	//Using Mode / Mode d'utilisation : MODE=1=>RD_Read / MODE=2=>RD_Write
  Length : INT;	//Nbre of byte to exchange/Nombre d'octets a echanger (max 4096)
  Timeout : TIME;	//Duration of TimeOUT/Duree du TimeOUT(ex: T#5S)
END_VAR
VAR_OUTPUT
  OK : BOOL;	//END of the exchange is correct / Fin de dialogue CORRECT
  En_cours : BOOL;	//Exchange in progress / Dialogue en Cours
  Def : BOOL;	//END of the exchange in error (see Diag) / Fin de dialogue en Defaut (voir Diag)
  Diag : STRUCT	//Diagnostic structure / Structure de diagnostic
    Def : BOOL;	//Default / Defaut
    Ala : BOOL;	//Alarm / Alarme
    NumListe : INT;	//List Nbr of the default for IHMP /Numero de liste defaut pour IHMP
    CodeDef : INT;	//Error code / Code du defaut
    AddInf : DWORD;	//Further Informations / Informations complementaires
    AddInf2 : DWORD;	//Further Informations / Informations complementaires
    OKCmpt : DINT;	//Counter of correct dialogs / Compteur de dialogues corrects
    ErrCmpt : DINT;	//Counter of defaults / Compteur d'erreurs
    HistCodeDef : INT;	//Historic Error code last default / Historique du Code erreur du dernier defaut
    HistAddInf : DWORD;	//Historic Further Informations /Historique  Informations complementaires
    HistAddInf2 : DWORD;	//Historic Further Informations /Historique  Informations complementaires
    IHMAd1 : WORD;	//for IHMP : Most significant Word of Addinf/Poids fort Addinf
    IHMAd2 : WORD;	//for IHMP : Less significant Word of Addinf/Poids faible Addinf
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Z_Data : ANY;	//Data Zone / Zone de donnees lue ou ecrite (ex: P#DB90.DBx100.0 WORD 100)
END_VAR
VAR
  Tempo_Delay_valid : TON;	//Temporisation de mesure du delais de la validation
  Tempo_timeout : TON;	//Temporisation de mesure du Timeout
  SFB_Write : WRREC;	//Ecriture dans PNPN
  SFB_READ : RDREC;	//Lecture dans PNPN
  Ctr_INPUT_OK : BOOL;	//Etape : controle OK des parametres d'entree
  Mode_READ : BOOL;	//FB en Mode 1 (Zone RD_Read)
  Valided : BOOL;	//Validation of the dialog after delay /Validation du dialogue apres delais
  val_tempo : BOOL;	//Validation de la temporisation de mesure du Timeout
  time_ecoule : TIME;	//Mesure du Temps ecoule depuis la validation de la BF
  time_valid : TIME;
  surv_Timeout : BOOL;
  fin_raz : BOOL;
  fin_init : BOOL;
  counter_n : BYTE;	//Memorisation valeur de cycle_counter
  counter_n_1 : BYTE;
  DF_data_NOK : BOOL;
  en_cours_SFB52 : BOOL;
  en_cours_SFB53 : BOOL;
  fin_ecr_OK : BOOL;
  reserve_bit_3 : BOOL;
  reserve_bit_2 : BOOL;
  reserve_bit_1 : BOOL;
  reserve_bit : BOOL;
  reserve_DW_2 : DWORD;
  reserve_DW_1 : DWORD;
  reserve_DW : DWORD;
  def_TimeOUT : BOOL;
END_VAR
VAR_TEMP
  SavAR1 : DINT;	//Backup of the Address register 1
  SavAR2 : DINT;	//Backup of the Address register 2
  val_z_data : ANY;
  E_RD_Read : STRUCT
    record_index : WORD;
    cycle_counter : BYTE;
    reserve_byte : BYTE;
  END_STRUCT ;
  A_RD_Read : STRUCT
    ack_counter : BYTE;
  END_STRUCT ;
  E_RD_Write : STRUCT
    x0 : BOOL;
    x1 : BOOL;
    x2 : BOOL;
    x3 : BOOL;
    x4 : BOOL;
    x5 : BOOL;
    x6 : BOOL;
    x7 : BOOL;
    level_counter : BYTE;
  END_STRUCT ;
  Temp_bit_3 : BOOL;
  Temp_bit_2 : BOOL;
  Temp_bit_1 : BOOL;
  Temp_bit : BOOL;
  temp_DW_3 : DWORD;
  temp_DW_2 : DWORD;
  temp_DW_1 : DWORD;
  temp_DW : DWORD;
END_VAR
BEGIN
NETWORK
TITLE =
//Prise en compte temporisee de la validation uniquement en mode Write
//*ODIL_ID:1852_1*
L 0;
L #Delay_Valid;
==D; // Temporisation si Delay_valid <> 0
SPB d1;
L 2;
L #Mode; // Temporisation uniquement en mode ecriture
<>I;
SPB d1;
CALL #Tempo_Delay_valid (
IN := #Valid,
PT := #Delay_Valid,
Q := #Valided);
SPA v0;
d1: U #Valid;
= #Valided;
NETWORK
TITLE =Gestion validation du FB
//*ODIL_ID:1852_2*
v0: U #Valided;
SPB val0;
UN #fin_raz; //front FB devalidee ==> RAZ
SPB raz0;
BEA; //FB devalidee ==> Fin de bloc
val0: O #Def;
O #OK;
SPBN val1;
BEA; //si #valid ET (#Def ou #OK) ==> Fin de bloc
val1: U #fin_init;
SPBN ini0; //si front de #valid ==> phase d'initialisation
SPA ar0; //sinon, BF validee ==> debut du traitement
NETWORK
TITLE =Zone de RAZ des variables
//Sur front descendant de VALID
//*ODIL_ID:1852_3*
raz0: NOP 0;
L 0; //RAZ de INT et DINT
T #Diag.NumListe;
T #Diag.CodeDef;
T #Diag.AddInf;
T #Diag.AddInf2;
T #Diag.IHMAd1;
T #Diag.IHMAd2;
SET; //Mise a 1 du RLG
R #Diag.Def; //RAZ de BOOLEEN
R #Diag.Ala;
R #Def;
R #OK;
R #En_cours;
R #fin_init;
R #en_cours_SFB53;
R #en_cours_SFB52;
R #def_TimeOUT;
R #Mode_READ;
S #fin_raz; //fin des RAZ
BEA; //Fin de bloc
NETWORK
TITLE =Zone d'initialisation et Control des parametres
//Initialisation des variables sur front montant de la validation
//*ODIL_ID:1852_4*
ini0: U #fin_init;
SPB ar0;
L 0;
L #Timeout;
<>D;
= #surv_Timeout; //surveillance ou non du timeout
CALL #Tempo_timeout (// RAZ de la tempo
IN := FALSE,
ET := #time_ecoule);
SET;
R #fin_raz;
S #En_cours;
NETWORK
TITLE =Controle parametre MODE (IN)
//MODE: 1=RD_Read; 2=RD_Write
//*ODIL_ID:1852_5*
L 1;
L #Mode;
==I;
SPBN ctr1;
S #Mode_READ; //Mode 1 ==> lecture dans l'IO Device
SPA ctr2;
ctr1: L 2;
==I; //Mode 2 ==> ecriture dans l'IO Device
SPBN e005; //Erreur valeur du parametre Mode (IN) incorrect
ctr2: SET;
S #fin_init; //Fin Initialisation et Controle des parametres
NETWORK
TITLE =-------- Debut du traitement - Sauvegarde AR1 et AR2 -----------
//Sauvegarde des registres d'adresse, avant utilisation dans ce FB
//*ODIL_ID:1852_6*
ar0: TAR1 #SavAR1;
TAR2 #SavAR2;
NETWORK
TITLE =Tempo de surveillance du timeout
//"Temp_ecoule" utilise par la suite pour gerer les TimeOUT
//*ODIL_ID:1852_7*
U #surv_Timeout;
SPBN lb01;
CALL #Tempo_timeout (// Lecture de la tempo
IN := TRUE,
PT := #Timeout,
ET := #time_ecoule);
NETWORK
TITLE =
//Gestion du Timeout de cette BF
//*ODIL_ID:1852_8*
U #Tempo_timeout.Q; //Timeout ecoule
SPBN lb01; //Pas de TimeOUT
S #def_TimeOUT; //Defaut Timeout
UN(;
O #en_cours_SFB53;
O #en_cours_SFB52;
); //Aucune SFB de lancee
SPB io0; //Lecture dans IO device pour preciser le defaut TimeOUT
SPA zd0; //Lecture du Status du SFB lance
NETWORK
TITLE =Validation des SFB52 ou SFB53
//Mode Ecriture : IO Device ready ?
//Mode Lecture : y a t'il des donnees a lire ?
//*ODIL_ID:1852_9*
lb01: UN #en_cours_SFB53;
UN #en_cours_SFB52;
SPBN zd0;
NETWORK
TITLE =Doit-on LIRE ? ou Peut-on ecrire ? dans l'IO device ?
//Utilisation des adresses des modules RD_Read et RD_Write:
//
//module RD WRITE
//EB x - provider_status
//  Bit 0 = 1 Communication with other bus end is established and module "RD
//READ" has been configured on the other bus end.
//  Bit 1 = 1 Query the "level_counter": Maximum value of 8 data records was not
//reached
//  Bit 7 = 1 Enable the data record transfer in the PN/PN coupler (= group
//enable; comprises the information from Bit 0
//and Bit 1)
//
//EB x+1 - level_counter - Indicates the fill level of the buffer (maximum of 8
//data records)
//             =================
//module RD READ
//EW x - record_index - Indicates the data record number of the data record that
//can be read on the receiver end
//EB x+2 - cycle_counter - Each change in the value (incremental) means that a
//new data record can be read on the receiver side.
//AB x - ack_counter - cycle_counter = ack_counter means that the receiver has
//acknowledged reading the data record; the data record is then deleted from the
//buffer
//*ODIL_ID:1852_10*

NETWORK
TITLE =
//Methode 1
//*ODIL_ID:1852_11*
io0: U #Mode_READ;
SPBN add1; //--- Mode =1 ==> RD_Read
L #RD_Addr;
SLD 3; //decalage 3 bits a gauche --> transformation en format adresse
LAR1;
L PEW [AR1,P#0.0]; // L PEW[RD_I_Addr] (EW x du module RD Read)
L PEB [AR1,P#2.0]; // L PEB[RD_I_Addr +2] (EB x+2 du module RD Read)
LAR1 P##E_RD_Read;
T LB [AR1,P#2.0]; //Transfert PEB[RD_I_Addr +2] --> E_RD_Read.cycle_counter
TAK; // L PEW[RD_I_Addr]
T LW [AR1,P#0.0]; //Transfert PEW[RD_I_Addr] --> E_RD_Read.record_index
//------------
U #def_TimeOUT;
SPB e023; //TimeOUT : pas de nouvelles valeurs a lire (le partenaire n'a rien ecrit)
L 0;
L #E_RD_Read.record_index;
<>I;
SPBN end; //Ne pas prendre en compte le N° de cycle lorsque l'index = 0
L #counter_n_1; //valeur du compteur des dernieres donnees deja lues
L #E_RD_Read.cycle_counter;
<>I; //N° de cycle a evolue
SPBN end; //pas de nouvelles valeurs a lire
T #counter_n; //Memorisation valeur du compteur
// L #E_RD_Read.record_index
L 100; //Index fixe a 100
T #SFB_READ.INDEX; //Parametre IN du SFB52
SPA zd0;
//========= Mode =2 ==> RD_Write; lecture de EBx et de EBx+1
//==================================================================
add1: NOP 0;
L #RD_Addr;
SLD 3; //decalage 3 bits a gauche --> transformation en format adresse
LAR1;
L PEW [AR1,P#0.0]; // L PEW[RD_I_Addr]
LAR1 P##E_RD_Write; //E_RD_Write : struct du mot PEW[RD_I_Addr]
T LW [AR1,P#0.0]; //Transfert PEW[RD_I_Addr] --> E_RD_Write
//------------
U #def_TimeOUT;
SPB e013; //TimeOUT : un contrat est deja poste (le partenaire n'a pas lu les donnees ecrites)
U #E_RD_Write.x7; // EBx x7--> Enable the data record transfer in the PN/PN coupler
SPBN e011; //IO Device NOT Ready
L 1;
L #E_RD_Write.level_counter;
<=I; //Accu2<=Accu1
SPB end; // 1 contrat deja poste
U #fin_ecr_OK;
SPBN zd0; //Aucun contrat en cours ==> Lancement SFB53
R #En_cours; //Le partenaire vient d'acquitter le contrat en cours
S #OK;
R #fin_ecr_OK;
L #Diag.OKCmpt; //Incrementation Compteur OK
L 1;
+D;
T #Diag.OKCmpt;
SPA end;
NETWORK
TITLE =----- Zone gestion SFB52 ou SFB53 -----
//IO Device Ready, ou SFB52 ou SFB53 deja lancee
//*ODIL_ID:1852_12*
zd0: NOP 0;
NETWORK
TITLE =Renseignement parametres communs SFB52 et SFB53
//*ODIL_ID:1852_13*

NETWORK
TITLE =MOVE Z_Data --> Val_z_data
//Renseignement du parametre RECORD (INOUT) de SFB52 ou SFB53
//Recopie de la valeur du parametre ANY Z_Data, dans un ANY de la zone TEMP. A
//faire a chaque cycle de cette BF, car use of TEMP
//*ODIL_ID:1852_14*
LAR1 AR2; //AR2 contient l'Adresse ABSOLUE dans le DBi, du debut de la zone de donnees de ce FB
L P##Z_Data; //Charge dans Accu1 l'adresse RELATIVE de ce Bloc ANY
+AR1; //AR1 contient l'adresse ABSOLUE de Z_Data dans le DBi
L DID [AR1,P#0.0]; //recopie des 4 premiers octets de Z_Data
T LD 8; //adresse Local 8 = @ de debut de "Val_z_data"
L DID [AR1,P#4.0]; //recopie des 4 octets suivants de Z_Data
T LD 12;
L DIW [AR1,P#8.0]; //recopie des 2 derniers octets de Z_Data
T LW 16;
NETWORK
TITLE =Orientation zones programme
//*ODIL_ID:1852_15*
U #Mode_READ;
SPB sfR0;
NETWORK
TITLE =
//Appel SFB53 WRREC : Ecriture d'un enregistrement dans un IO Device
//"Write a process data record"
//*ODIL_ID:1852_16*

NETWORK
TITLE =
//Renseignement des parametres IN de SFB53 - lancement du SFB
//*ODIL_ID:1852_17*
U #en_cours_SFB53;
SPB sfw1;
L #RD_Addr;
T #SFB_Write.ID; //adresse RD_Read ou RD_Write
L 100; //Valeur d'index fixee arbitrairement a 100
T #SFB_Write.INDEX;
L #Length; //Longueur maximale en octets de l'enregistrement transfere
T #SFB_Write.LEN;
SET; //Mise a 1 du RLG
S #SFB_Write.REQ; // Lancement de la fonction
S #en_cours_SFB53; //Memorisation
sfw1: CALL #SFB_Write (//Instance du SFB53 "WRREC"
RECORD := #val_z_data);
R #SFB_Write.REQ; // Front Lancement de la fonction
//SFB terminee en erreur
U #SFB_Write.ERROR;
SPB e010; //SFB 53 "WRREC" terminee en erreur
//SFB en cours de traitement
U #SFB_Write.DONE;
SPB wval;
U #def_TimeOUT;
SPB e012; //Timeout durant traitement SFB WRREC
SPA end;
//SFB se termine correctement
wval: S #fin_ecr_OK;
R #en_cours_SFB53;
SPA end;
NETWORK
TITLE =
//Appel SFB52 RDREC : Lecture d'un enregistrement dans un IO Device
//"Read a process data record"
//*ODIL_ID:1852_18*
sfR0: NOP 0;
NETWORK
TITLE =
//Renseignement des parametres IN de SFB52 - lancement du SFB
//*ODIL_ID:1852_19*
U #en_cours_SFB52;
SPB sfr1; // Ne faire que lors du lancement de cette SFB (REQ)
L #RD_Addr;
T #SFB_READ.ID; //adresse RD_Read ou RD_Write
L #Length; //Longueur maximale en octets de l'enregistrement a lire
T #SFB_READ.MLEN;
SET; //Mise a 1 du RLG
S #SFB_READ.REQ; // Lancement de la fonction
S #en_cours_SFB52; //Memorisation
sfr1: CALL #SFB_READ (//Instance du SFB52 "RDREC"
RECORD := #val_z_data);
R #SFB_READ.REQ; //Front Lancement de la fonction
//SFB terminee en erreur
U #SFB_READ.ERROR;
SPB e020; //SFB52 "RDREC" terminee en erreur
//SFB en cours de traitement
U #SFB_READ.VALID;
SPB rval;
U #def_TimeOUT;
SPB e022; //Timeout durant traitement SFB RDREC
SPA end;
//SFB se termine correctement
rval: R #En_cours;
S #OK;
L #Diag.OKCmpt; //Incrementation Compteur OK
L 1;
+D;
T #Diag.OKCmpt;
NETWORK
TITLE =Acquittement lecture
//AB x - ack_counter - cycle_counter = ack_counter means that the receiver has
//acknowledged reading the data record; the data record is then deleted from the
//buffer
//*ODIL_ID:1852_20*
L #RD_Addr;
SLD 3; //decalage 3 bits a gauche --> transformation en format adresse
LAR1;
L #counter_n;
T PAB [AR1,P#0.0]; // T PAB[RD_I_Addr]
T #counter_n_1; //Save cycle acquitte
SPA end;
NETWORK
TITLE =----------- Erreurs et diagnostics -----------
//*ODIL_ID:1852_21*
e005: NOP 0; //Erreur valeur du parametre Mode (IN) incorrect
TAK; //L #Mode
T #Diag.AddInf;
L 0;
T #Diag.AddInf2;
L 1;
T #Diag.CodeDef;
SPA erND;
// ----------- MODE = 2 ----------------
e010: NOP 0; //SFB53 "WRREC" terminee en erreur
L #SFB_Write.STATUS;
T #Diag.AddInf;
L 0;
T #Diag.AddInf2;
L 8;
T #Diag.CodeDef;
SPA erND;
e011: NOP 0; //IO Device NOT Ready
UW W#16#FF00; // "AND" recuperation de Ex de RD_Write (Provider status)
SRW 8; //Shift Right de 8 bits
T #Diag.AddInf;
L #E_RD_Write.level_counter; //recopie de Ex+1 de RD_Write (level counter)
T #Diag.AddInf2;
L 16;
T #Diag.CodeDef;
SPA erND;
e012: NOP 0; //Timeout durant traitement SFB WRREC
L #SFB_Write.STATUS;
T #Diag.AddInf;
L #SFB_Write.INDEX;
T #Diag.AddInf2;
L 32;
T #Diag.CodeDef;
SPA erND;
e013: NOP 0; //TimeOUT : un contrat est deja poste (le partenaire n'a pas lu les donnees ecrites)
UW W#16#FF00; // "AND" recuperation de Ex de RD_Write (Provider status)
SRW 8; //Shift Right de 8 bits
T #Diag.AddInf;
L #E_RD_Write.level_counter; //recopie de Ex+1 de RD_Write (level counter)
T #Diag.AddInf2;
L 64;
T #Diag.CodeDef;
SPA erND;
// ----------- MODE = 1 ----------------
e020: NOP 0; //SFB52 "RDREC" terminee en erreur
L #SFB_READ.STATUS;
T #Diag.AddInf;
L #SFB_READ.INDEX;
T #Diag.AddInf2;
L 512;
T #Diag.CodeDef;
SPA erND;
e022: NOP 0; //Timeout durant traitement SFB RDREC
L #SFB_READ.STATUS;
T #Diag.AddInf;
L #SFB_READ.INDEX;
T #Diag.AddInf2;
L 1024;
T #Diag.CodeDef;
SPA erND;
e023: NOP 0; //TimeOUT : pas de nouvelles valeurs a lire (le partenaire n'a rien ecrit)
UW W#16#FFFF; // "AND" recuperation de EWx de RD_Read (Record_Index)
T #Diag.AddInf;
L #E_RD_Read.cycle_counter; //recopie de EBx+2 de RD_Read (cycle counter)
T #Diag.AddInf2;
L 2048;
T #Diag.CodeDef;
SPA erND;
erND: SET;
L 0;
T #Diag.NumListe; //NumListe non utilise
S #Def;
S #Diag.Def;
R #En_cours;
L #Diag.ErrCmpt; //Incrementation Compteur erreurs
L 1;
+D;
T #Diag.ErrCmpt;
L #Diag.CodeDef; //Historique du dernier defaut
T #Diag.HistCodeDef;
L #Diag.AddInf;
T #Diag.HistAddInf;
//Affichage Addinf dans IHMP : en 2 mots simples
T #Diag.IHMAd2;
SRD 16; //Shift Right of 16 Bits
T #Diag.IHMAd1;
L #Diag.AddInf2;
T #Diag.HistAddInf2;
NETWORK
TITLE =Fin de Bloc
//*ODIL_ID:1852_22*
end: NOP 0;
LAR1 #SavAR1; //Restitution des registres d'adresse
LAR2 #SavAR2;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_RUP_FLU"
//**********************************************************************
//*                           FB RUP_FLU                               *
//*                           ***********                              *
//*            SERT A METTRE EN EVIDENCE LA PERTE DE TEMPS             *
//*               ENTRE 2 POSTES DE PRODUCTION EN FLUX                 *
//*            USED TO IDENTIFY TIME LOST BETWEEN TWO WORKSTATIONS     *
//**********************************************************************
//(In English further below)
//DESCRIPTION:
//************
//LE FB "RUP_FLU" POSSEDE, AU CHOIX, 2 MODES DE FONCTIONNEMENT (SELECTION PAR
//L'ENTREE "MODE")
//-MODE 1 : CONTROLE DE SATURATION (LE POSTE AMONT ATTEND LE POSTE AVAL)
//          .SIGNALEMENT DE L'ARRET INDUIT
//          .SIGNALEMENT DE LA RUPTURE DE FLUX AU BOUT D'UN TEMPS INDIQUE
//-MODE 2 : CONTROLE DU DESAMORCAGE (LE POSTE AVAL ATTEND LE POSTE AMONT)
//          .SIGNALEMENT DE L'ARRET INDUIT;
//          .SIGNALEMENT DE LA RUPTURE DE FLUX AU BOUT D'UN TEMPS INDIQUE
//CONTRAINTES:
//
//************
//-LA BASE DE TEMPS DISPONIBLE DANS LE FB EST LE 1/100s
//ALORS QUE CELLE DES SEUILS
//ET RESULTATS EST LE 1/10s
//-LES TEMPS MESURES (COMME LES TEMPS ATTRIBUES)NE PEUVENT EXCEDER 54mn SOIT
//32400/10s
//-LE FB PEUT CONTROLER SOIT UNE SATURATION,SOIT UN DESAMORCAGE,MAIS PAS LES 2
//SIMULTANEMENT
//
//**************************** ENGLISH INFORMATION *****************************
//DESCRIPTION:
//************
//This functional box performs the checks according to 2 modes ("mode" input):
//- Mode input = 1: saturation check (Downstream Workstation is waiting
//for upstream one)
//                . Indicates induces stoppage
//                . indicates flow rupture after defined time
//- Mode input = 2: interruption check (Upstream Workstation is waiting for
//downstream one)
//                . Indicates induces stoppage
//                . indicates flow rupture after defined time
//
//CONTRAINTS:
//
//************
//-The internal time base of the function block is in milliseconds, whereas the
//external time base is expressed in 1/10th of a second (Basis of SMPLOC)
//-The measured time values, such as the limit values, may not exceed 54 minutes
//(32400/10s, signed word of 16 bits)
//-The function block is not capable of controlling several cycle times at the
//same timeT
//
//************************* _ODIL_ID_ *********************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 8
//Dernier ID mis en oeuvre / Last ID implemented : 2020_8
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'RUP_FLU'
VERSION : 1.3
VAR_INPUT
  P_pm : BOOL;	//Upstream workstation presence / Presence au Poste aMont
  Ft_pm : BOOL;	//Upstream Workstation End of Work / Fin de Travail du Poste aMont
  Cdch_pm : BOOL;	//Upstream Workstation Unloading Condition / Cond. de DeCHargement du Poste aMont
  P_pv : BOOL;	//Downstream Workstation Presence / Presence au Poste aVal
  Cch_pv : BOOL;	//Downstream Workstation  Unloading Condition / Cond. de CHargement du Poste aVal
  Mode : INT;	//Operating mode / MODE de fonctionnement
  Ta_arf : DINT;	//Allocated time before flow rupture 1/10s / Tps Attribue Avt Rupt. Flux en 1/10s
END_VAR
VAR_OUTPUT
  Arr_ind : BOOL;	//Induces stoppage indication / signalisation de Arret Induit
  Rup_flu : BOOL;	//Flow Rupture Indication / signalisation de la Rupture de Flux
END_VAR
VAR
  B1fmec : BOOL;	//Bit 1 pour le Front Montant de l'Evene. Controle
  B2fmec : BOOL;	//Bit 2 pour le Front Montant de l'Evene. Controle
  Val_mes : BOOL;	//Validation de la Mesure
  Tp_rf : DINT;	//Temps de rupture de flux en 1/100s
  MEMDTE : DINT;
  CALCDEC : DINT;
  FRM_DUR : BOOL;
  MEMDEC : DINT;
END_VAR
VAR_TEMP
  CALC : TIME;	//conversion nouveau temps de BCD en decimal
END_VAR
BEGIN
NETWORK
TITLE =
//(*BIT 1 POUR LE FRONT MONTANT DU PASSAGE DE PIECE*)
//*ODIL_ID:2020_1*
//
U #P_pm;
U #Cdch_pm;
UN #P_pv;
U #Cch_pv;
UN #B2fmec;
= #B1fmec;
NETWORK
TITLE =
//(*BIT 2 POUR LE FRONT MONTANT DU PASSAGE DE PIECE*)
//*ODIL_ID:2020_2*
//
U #P_pm;
U #Cdch_pm;
UN #P_pv;
U #Cch_pv;
= #B2fmec;
NETWORK
TITLE =(*RAZ DU RESULTAT PRECEDENT ET RELANCE NOUVELLE MESURE*)
//*ODIL_ID:2020_3*
U #B1fmec;
R #Rup_flu;
S #Val_mes;
NETWORK
TITLE =(*CALCUL DU TEMPS DE RUPTURE DE FLUX*)
//*ODIL_ID:2020_4*
CALL "TIME_TCK" (
RET_VAL := #CALC);
NETWORK
TITLE =
//*ODIL_ID:2020_5*
U #Val_mes;
FP #FRM_DUR;
SPBN _004;
L 0; //sur front entree de validation
T #Tp_rf; // remise a 0 duree totale
L #CALC;
T #MEMDTE; // memorisation temps actuel
NETWORK
TITLE =
//*ODIL_ID:2020_6*
_004: U #Val_mes;
U(;
L #CALC;
L #MEMDEC;
>D;
);
SPBN _008; // traitement si diff est inferieur
L #CALC; // Calcul du temps entre 2 tours de cycle API
L #MEMDEC;
-D; // Ajout du temps calcule a la duree
L #Tp_rf; // Temps rupture de flux
+D;
T #Tp_rf;
_008: L #CALC; // Calcul du temps entre 2 tours de cycle API
T #MEMDEC; // Si negatif
NETWORK
TITLE =(*FIN DU TRAITEMENT COMMUN*)
//(* ******************************************************************** *)
//(*             TRAITEMENT POUR UN CONTROLE DE SATURATION                *)
//(* ******************************************************************** *)
//
//(*CONTROLE SI CONTROLE DE SATURATION DEMANDE*)
//*ODIL_ID:2020_7*
//
L 1;
L #Mode; // (*CONTROLE SI CONTROLE DE SATURATION DEMANDE*)
<>I;
SPB MOD2;
U #P_pm;
U #Cdch_pm;
U(;
U #P_pv;
ON #Cch_pv;
);
= #Arr_ind; // (*SIGNALEMENT DE L'ARRET INDUIT*)
// MEMORISATION DE LA RUPTURE DE FLUX
U #P_pm;
U #Ft_pm;
U(;
U #P_pv;
ON #Cch_pv;
);
U(;
L #Tp_rf;
L 100;
/D;
L #Ta_arf;
>D;
);
S #Rup_flu; // (*MEMORISATION DE LA RUPTURE DE FLUX*)
R #Val_mes;
BEA; // FIN TRAITEMENT
NETWORK
TITLE =
//*ODIL_ID:2020_8*
MOD2: L 2;
L #Mode;
<>I; // TEST CONTROLE DESAMORCAGE
SPB END;
U(;
UN #P_pm;
ON #Cdch_pm;
);
UN #P_pv;
U #Cch_pv;
= #Arr_ind; // SIGNALEMENT ARRET INDUIT
// MEMORISATION DE LA RUPTURE DE FLUX
U(;
UN #P_pm;
ON #Cdch_pm;
);
UN #P_pv;
U(;
L #Tp_rf;
L 100;
/D;
L #Ta_arf; // Temps rupture ramene au 10eme
>D;
);
S #Rup_flu; // MEMOIRE RUPTURE DE FLUX
R #Val_mes;
END: NOP 0; // FIN TRAITEMEMENT
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_TCY_SUIV"
TITLE =BF_TCY_SUIV
//**********************************************************************
//*                          FB "TCY_SUIV"                             *
//*    SERT A MESURE LES TEMPS DE CYCLE D'UN MOYEN DE PRODUCTION       *
//*          Used to measure production facility cycle time            *
//**********************************************************************
//(In english further below)
//DESCRIPTION:
//************
//LE FB "TCY_SUIV" REMPLIE PLUSIEURS FONCTIONS
//-MESURE DU TEMPS DE CYCLE PROPRE DU MOYEN, HORS TEMPS D'ATTENTE DUS A
//L'ENVIRONNEMENT
//-MESURE DU TEMPS DE CYCLE TOTAL DU MOYEN, COMPRENANT LES TEMPS D'ATTENTE DUS A
//L'ENVIRONNEMENT
//-SIGNALEMENT DU DEPASSEMENT DE TEMPS DE CYCLE APRES UN TEMPS INDIQUE
//-SIGNALEMENT D'UNE PANNE POSSIBLE SI LE DEPASSEMENT DE TEMPS DE CYCLE EST
//SUPERIEUR A UN TEMPS INDIQUE
//
//CONTRAINTES:
//************
//-LA BASE DE TEMPS INTERNE DE LA FB EST LE ms ALORS QUE CELLE EXTERNE EST LE
//1/10s (BASE DE SMPLOC)
//-LES TEMPS MESURES, COMME LES VALEURS DE SEULS, NE PEUVENT EXCEDER 54mn
//(32400/10s, MOT DE 16 BITS SIGNE)
//-LA FB NE PEUT CONTROLER PLUSIEURS TEMPS DE CYCLE SIMULTANEMENT
//
//CODE DE DEFAUT:
//***************
//Diagnostic Code Défaut Codedef valeur en DEC
//1 : Dépassement T1 si validation mesure tcy propre
//2 : Dépassement T2 si validation mesure tcy propre
//
//************************ English information ********************************
//DESCRIPTION:
//************
//The "TCY_SUIV" FB has several functions:
//-Measurement of facility cycle time belonging, without waiting time due
//to the environment
//-Measurement of facility total cycle time, including the waiting time due to
//the
//environment
//-Indication of a cycle time that has exceeded a defined time period
//-Indication of a possible production failure due to the cycle time exceeding
//the
//defined time period
//
//CONDITIONS:
//************
//-The internal time base of the function block is in milliseconds, whereas the
//external time base is expressed in 1/10th of a second (Basis of SMPLOC)
//-The measured time values, such as the limit values, may not exceed 54 minutes
//(32400/10s, signed word of 16 bits)
//-The function block is not capable of controlling several cycle times at the
//same timeT
//
//FAULT CODE :
//***********
//Values of Diagnosis Code Fault "Codedef" (In DEC)
//1 : Exceeding T1 if measurement validation tcy
//2 : Exceeding T2 if measurement validation tcy
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 4
//Dernier ID mis en oeuvre / Last ID implemented : 2019_4
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'TCY_SUIV'
VERSION : 1.4
VAR_INPUT
  E_appape : BOOL;	//Failure and Exploitation own stop / Arret Propre Panne et Exploitation
  E_aiapf : BOOL;	//Induced stop and Functional own stop /Arret Induit et Arret Propre Fonctionnel
  E_topcyc : BOOL;	//Cycle start / Top Cycle
  E_numcyc : INT;	//Cycle number (diversity) / Numero de Cycle
  E_seu_t1 : INT;	//T1 treshold (1/10s) / Seuil de T1 base 1/10s
  E_seu_t2 : INT;	//T2 Treshold (1/10s) / Seuil de T2 base 1/10s
END_VAR
VAR_OUTPUT
  S_tcp : INT;	//Own cycle time (1/10s) / Temps de Cycle Propre base 1/10s
  S_tct : INT;	//Total cycle time (1/10s) / Temps de Cycle Total base 1/10s
  S_numcyc : INT;	//Cycle number (diversity) / Numero de Cycle
  S_dtc : BOOL;	//T1 overrun (if measured) / Depassement T1 si validation mesure tcy propre
  S_fint2 : BOOL;	//T2 overrun (if measured) / Depassement T2 si validation mesure tcy propre
  Diag : STRUCT	//HMI and diagnosis information /Sortie diagnostique defaut et lien IHM
    Def : BOOL;	//Fault / Presence Defaut
    Ala : BOOL;	//Alarm / Presence d'une alarme
    Numliste : INT;	//SMP fault list number / Numero de liste defaut SMP
    Codedef : INT;	//Fault or Alarm number / N° de defaut ou dalarme en Decimal
    IhmS_tcp : INT;	//Own cycle time (1/10s) / Temps de Cycle Propre base 1/10s
    IhmS_tct : INT;	//Total cycle time (1/10s) / Temps de Cycle Total base 1/10s
    IhmS_numcyc : INT;	//Cycle number (diversity) / Numero de Cycle
  END_STRUCT ;
END_VAR
VAR
  L_tcp : TIME;	//Temps de Cycle Propre en 1/100s
  L_tct : TIME;	//Temps de Cycle Total en 1/100s
  L_numcyc : INT;	//Numero de Cycle
  L_en_tt : BOOL;	//validation mesure temps total
  xTopCyc : BOOL;	//Aux Front montant top cycle
  LastSysTick : TIME;	//Memorisation du Temps systeme de la CPU
END_VAR
VAR_TEMP
  SysTick : TIME;	//Temp systeme lue par SFC64
  DeltaSysTick : TIME;	//Temps ecoule entre deux appels (En ms)
END_VAR
BEGIN
NETWORK
TITLE =Calcul du temps écoulé entre deux appels du bloc (En ms)
//*ODIL_ID:2019_1*
CALL "TIME_TCK" (
RET_VAL := #SysTick);
L #LastSysTick;
L #SysTick;
T #LastSysTick;
TAK;
-D;
UD DW#16#7FFFFFFF;
T #DeltaSysTick;
NETWORK
TITLE =Affichage des mesures et Initialisations
//(Sur front montant de TopCyc)
//*ODIL_ID:2019_2*
//
U #E_topcyc;
FP #xTopCyc;
SPBN NTop;
UN #L_en_tt;
SPB Ini;
//---------- temps propre
L #L_tcp; //en ms
L 100;
/D;
T #S_tcp;
T #Diag.IhmS_tcp;
//---------- Temps total
L #L_tct; //en ms
L 100;
/D;
T #S_tct;
T #Diag.IhmS_tct;
//---------- Numéro de cycle
L #S_numcyc;
XOW W#16#8000;
UW W#16#8000;
L #L_numcyc;
+I;
T #S_numcyc;
T #Diag.IhmS_numcyc;
//---------- Initialisations
Ini: SET;
= #L_en_tt;
L B#16#0;
T #L_tcp;
T #L_tct;
T #DeltaSysTick;
//----------
L #E_numcyc;
T #L_numcyc;
NTop: NOP 0;
NETWORK
TITLE =Incrémentations
//*ODIL_ID:2019_3*
U #L_en_tt;
SPBN NCnt;
L #L_tct;
L #DeltaSysTick;
+D;
T #L_tct;
U #E_aiapf; //Suspension comptage propre
SPB NCnt;
L #L_tcp;
L #DeltaSysTick;
+D;
T #L_tcp;
//----------
NCnt: L #E_seu_t2; //Dixièmes de seconde
L B#16#64; //100
*D;
L #L_tcp; //Temps Propre
<=D;
UN #E_aiapf;
= #S_fint2;
//----------
L #E_seu_t1; //Dixièmes de seconde
L B#16#64; //100
*D;
L #L_tcp; //Temps propre
<=D;
UN #E_aiapf;
UN #S_fint2;
= #S_dtc;
//----------
L #L_tct;
L T#54M;
>D;
O #S_fint2;
O #E_appape;
R #L_en_tt;
NETWORK
TITLE =Défauts
//*ODIL_ID:2019_4*
//----------
//
U #S_dtc;
L B#16#1;
SPB Def;
U #S_fint2;
L B#16#2;
SPB Def;
L B#16#0;
Def: T #Diag.Codedef;
L B#16#0;
<>D;
= #Diag.Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_TF_TP"
TITLE =BF_TF_TP
//**************************************************************************
//*                            BF TF_TP                                    *
//*                            ********                                    *
//*             Transfert de table de memoires pieces                      *
//*             Transfer of Part memory (word) table                       *
//**************************************************************************
// ( In English further below)
//
//DESCRIPTION:  LE BF "TF_TP" PERMET D'EFFECTUER SI  "VAL" EST ACTIVEE:
//************
//             -LA RECOPIE D'UN NOMBRE DE BITS DE "MEMOIRE PIECE" CONSECUTIF
//              (STRUCT "ORIGINE" ===> STRUCT "DESTINATION")
//              SI LA STRUCT  "ORIGINE"  EST CHARGE ET LA STRUCT "DESTINATION"
//              LIBRE.
//             -LA REMISE A ZERO DE LA STRUCT "ORIGINE" APRES LA RECOPIE DANS
//              LA  STRUCT "DESTINATION".
//
//           PERMET QUELQUE SOIT L'ETAT DE LA "VALIDATION":
//             -LA RAZ STRUCT "ORIGINE" SI LE BIT "MpP" (1er BIT DE LA STRUCT)
//               EST A 0 (DANS LE BUT DE FACILITER LE RECYCLAGE).
//             -LA RAZ DE LA STRUCT DESTINATION SUR FRONT MONTANT DE RAZ_DEST
//             -LA RECOPIE DES ENTREES PILOT DANS DIAG SANS CONTROLE DU BIT "MPP"
//
//Mise en Oeuvre:
//**************
//- Les informations a transferer de "Orig" vers "Dest" doivent etres declarees
//dans un seul et meme DB.
//- La taille de la table des mémoires pièce doit être égale à 20 Mots pour chaque
//
//sous ensemble
//- 1 table par sous ensemble au format struct
//- le premier mot de la table doit obligatoirement etre au format de 16 bools
//- le 1er bool (adresse 0.0) de la struct doit obligatoirement etre l'image de la
//
//présence pièce (Mpp)
//- le nom de la structure = nom du sous ensemble
//- Le nb de bool a transferer d'une mémoire a une autre est a documenter sur
//l'entree "Nbit1" de la BF pour le 1er mot de la struct et "Nbit2" de la BF pour
//le 2eme mot de la struct.
//- Il est impossible de documenter des valeurs dans la table si le
//1er bool n'est pas à 1 ( Reset automatique de la memoire).
//Donc, vous devez declarer l'information Mpp en premier pour documenter
//les valeurs des autres informations pour la creation de la premiere memoire de
//l'ilot.
//- l'entree "raz_dest" permet de reseter la mémoire de destination sur la
//derniere utilisation de la BF dans le programme ( dernier sous ensemble)
//
//-Il ne faut pas rajouter ou supprimer des variables dans cette BF
//car nous utilisons des valeurs absolues de variables temporaires et les Adresse
//des variables dans le BF. en cas d'evolution les nouvelles variables doivent
//obligatoirement etre d'eclarees a la suite pour tout type E/S,Stat et Temp.
//
//Codes d'erreur:
//***************
//Diag.CodeDef:
//1 = Destination <> 0 (pas vide)et bit 0 source a 1(transfert STRUCT piece
//    demande)
//2 = Nombre de nbit1 ou nbit2 < 1 ou > 16
//4 = Erreur de Parametrage Orig
//          Origine n'est pas dans un DB
//          Origine n'est pas egale a 20 WORD
//8 = Erreur de Parametrage Dest
//          Destination n'est pas dans un DB
//          Destination n'est pas egale a 20 WORD
//16 = Origine et Destination ne sont pas dans le meme DB
//************************** ENGLISH INFORMATION  ****************************
//DESCRIPTION :
//*************
//THE FB Block "BF_TF_TP " handles the following operations :
//       WHEN THE VALIDATION "VAL" IS ACTIVATED:
//             - THE COPY OF CONSECUTIVE NUMBER OF BOOLS OF " MEMORY PART "
//              (STRUCT "ORIG" to STRUCT "DEST"),
//              IF THE STRUCT "ORIG" IS LOADED AND THE STRUCT "DEST" IS FREE.
//             - THE RESET OF THE STRUCT "ORIG" AFTER THE COPY IN
//                THE STRUCT "DEST".
//
//       WHATEVER VALIDATION STATUS IS :
//             - The RESET OF STRUCT "ORIG" IF THE bool " MPP "(1st bool OF THE
//              STRUCT) IS FALSE (TO EASE RECYCLING).
//             - The RESET OF THE STRUCT "DEST" ON RISING EDGE OF "RAZ_DEST"
//             - The COPY OF THE Input "PILOT" TO THE OUTPUT "DIAG"
//               WITHOUT CONTROL OF the BOOL" MPP "
//OPERATING:
//***********
//- The data to be transferred from "Orig" to "Dest" must be declared in the same
//DB.
//- The size of the table must be equal to 20 Words for each sub-assembly
//- One table for each sub-assembly in Struct type:
//  - The first word of the table in the struct must be created with 16 bools
//  - The First bool (0.0 address) of the struct must be the part presence memory
//  (Mpp)
//  - Struct name = sub-assembly symbolic name
//- The number of bool that can be transferred must be documented in the FB input
//
//"NBit1" for the first word and in the "NBit2" input for the second word
//- It's impossible to modify any value of the table if the first bool
//is not set (Table Automatic Reset)
//So for the first sub-assembly you must set to 1 Mpp or Mps at first before
//modifying the others bool values.
//- "raz_dest" input is used for reset the last destination memory of the last
//sub-assembly
//
//- The existing variables in this BF must not be moved or deleted in header,
//because we use the absolute values of the variables and the variable addresses
//in the FB.
//In case of changes the new variables MUST be declared consecutively for
//all I/O, Stat and Temp types.
//
//Alarm list:
//************
//1 = Destination <> 0 (not empty) and origin bit 0 is set (STRUCT Table transfer
//    is requested
//2 = Bit number of nbit1 or nbit2 is < 1 or > 16
//4 = Parameter fault on Orig
//          Origin is not in a DB
//          Origin is not equal to 20 WORDS
//8 = Parameter fault on Dest
//          Destination is not in a DB
//          Destination is not equal to 20 WORDS
//16 = Origin and Destination are not in the same DB
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 56
//Dernier ID mis en oeuvre / Last ID implemented : 2037_56
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'BF_TF_TP'
VERSION : 2.1
VAR_INPUT
  Val : BOOL;	//Transfer confirmation info / Condition de validation du transfert
  nBit1 : INT;	//Number of bools to be transferred Word 1 / NB de bools a transferer Mot1
  nBit2 : INT;	//Number of bools to be transferred Word 2 / NB de bools a transferer Mot2
  Orig : ANY;	//Origin Struct to be transferred / Struct origine a transferer
  Dest : ANY;	//Destination Structure (receives data) / Struct recevant les donnees
  Raz_dest : BOOL;	//Destination struct Reset / Mise a zero de la struct Destination
  Pilot : STRUCT	//HMI input / Entrees IHM
    Ihmmp1 : BOOL;	//Hmi part memory bool 1 Word 1 / Ihm Memoire piece bool 1 MOt 1
    Ihmmp2 : BOOL;	//Hmi part memory bool 2 Word 1 / Ihm Memoire piece bool 2 MOt 1
    Ihmmp3 : BOOL;	//Hmi part memory bool 3 Word 1 / Ihm Memoire piece bool 3 MOt 1
    Ihmmp4 : BOOL;	//Hmi part memory bool 4 Word 1 / Ihm Memoire piece bool 4 MOt 1
    Ihmmp5 : BOOL;	//Hmi part memory bool 5 Word 1 / Ihm Memoire piece bool 5 MOt 1
    Ihmmp6 : BOOL;	//Hmi part memory bool 6 Word 1 / Ihm Memoire piece bool 6 MOt 1
    Ihmmp7 : BOOL;	//Hmi part memory bool 7 Word 1 / Ihm Memoire piece bool 7 MOt 1
    Ihmmp8 : BOOL;	//Hmi part memory bool 8 Word 1 / Ihm Memoire piece bool 8 MOt 1
    Ihmmp9 : BOOL;	//Hmi part memory bool 9 Word 1 / Ihm Memoire piece bool 9 MOt 1
    Ihmmp10 : BOOL;	//Hmi part memory bool 10 Word 1 / Ihm Memoire piece bool 10 MOt 1
    Ihmmp11 : BOOL;	//Hmi part memory bool 11 Word 1 / Ihm Memoire piece bool 11 MOt 1
    Ihmmp12 : BOOL;	//Hmi part memory bool 12 Word 1 / Ihm Memoire piece bool 12 MOt 1
    Ihmmp13 : BOOL;	//Hmi part memory bool 13 Word 1 / Ihm Memoire piece bool 13 MOt 1
    Ihmmp14 : BOOL;	//Hmi part memory bool 14 Word 1 / Ihm Memoire piece bool 14 MOt 1
    Ihmmp15 : BOOL;	//Hmi part memory bool 15 Word 1 / Ihm Memoire piece bool 15 MOt 1
    Ihmmp16 : BOOL;	//Hmi part memory bool 16 Word 1 / Ihm Memoire piece bool 16 MOt 1
    Ihmm2 : WORD;	//Hmi part memory Word 2 / Ihm Memoire piece MOt 2
    Ihmm3 : WORD;	//Hmi part memory Word 3 / Ihm Memoire piece MOt 3
    Ihmm4 : WORD;	//Hmi part memory Word 4 / Ihm Memoire piece MOt 4
    Ihmm5 : WORD;	//Hmi part memory Word 5 / Ihm Memoire piece MOt 5
    Ihmm6 : WORD;	//Hmi part memory Word 6 / Ihm Memoire piece MOt 6
    Ihmm7 : WORD;	//Hmi part memory Word 7 / Ihm Memoire piece MOt 7
    Ihmm8 : WORD;	//Hmi part memory Word 8 / Ihm Memoire piece MOt 8
    Ihmm9 : WORD;	//Hmi part memory Word 9 / Ihm Memoire piece MOt 9
    Ihmm10 : WORD;	//Hmi part memory Word 10 / Ihm Memoire piece MOt 10
    Ihmm11 : WORD;	//Hmi part memory Word 11 / Ihm Memoire piece MOt 11
    Ihmm12 : WORD;	//Hmi part memory Word 12 / Ihm Memoire piece MOt 12
    Ihmm13 : WORD;	//Hmi part memory Word 13 / Ihm Memoire piece MOt 13
    Ihmm14 : WORD;	//Hmi part memory Word 14 / Ihm Memoire piece MOt 14
    Ihmm15 : WORD;	//Hmi part memory Word 15 / Ihm Memoire piece MOt 15
    Ihmm16 : WORD;	//Hmi part memory Word 16 / Ihm Memoire piece MOt 16
    Ihmm17 : WORD;	//Hmi part memory Word 17 / Ihm Memoire piece MOt 17
    Ihmm18 : WORD;	//Hmi part memory Word 18 / Ihm Memoire piece MOt 18
    Ihmm19 : WORD;	//Hmi part memory Word 19 / Ihm Memoire piece MOt 19
    Ihmm20 : WORD;	//Hmi part memory Word 20 / Ihm Memoire piece MOt 20
    Ihmbmp : BOOL;	//Hmi Word 1 transfer validation push button / Bp Ihm valid transfert MOT 1
    Ihmbm2 : BOOL;	//Hmi Word 2 transfer validation push button / Bp Ihm valid transfert MOT 2
    Ihmbm3 : BOOL;	//Hmi Word 3 transfer validation push button / Bp Ihm valid transfert MOT 3
    Ihmbm4 : BOOL;	//Hmi Word 4 transfer validation push button / Bp Ihm valid transfert MOT 4
    Ihmbm5 : BOOL;	//Hmi Word 5 transfer validation push button / Bp Ihm valid transfert MOT 5
    Ihmbm6 : BOOL;	//Hmi Word 6 transfer validation push button / Bp Ihm valid transfert MOT 6
    Ihmbm7 : BOOL;	//Hmi Word 7 transfer validation push button / Bp Ihm valid transfert MOT 7
    Ihmbm8 : BOOL;	//Hmi Word 8 transfer validation push button / Bp Ihm valid transfert MOT 8
    Ihmbm9 : BOOL;	//Hmi Word 9 transfer validation push button / Bp Ihm valid transfert MOT 9
    Ihmbm10 : BOOL;	//Hmi Word 10 transfer validation push button / Bp Ihm valid transfert MOT 10
    Ihmbm11 : BOOL;	//Hmi Word 11 transfer validation push button / Bp Ihm valid transfert MOT 11
    Ihmbm12 : BOOL;	//Hmi Word 12 transfer validation push button / Bp Ihm valid transfert MOT 12
    Ihmbm13 : BOOL;	//Hmi Word 13 transfer validation push button / Bp Ihm valid transfert MOT 13
    Ihmbm14 : BOOL;	//Hmi Word 14 transfer validation push button / Bp Ihm valid transfert MOT 14
    Ihmbm15 : BOOL;	//Hmi Word 15 transfer validation push button / Bp Ihm valid transfert MOT 15
    Ihmbm16 : BOOL;	//Hmi Word 16 transfer validation push button / Bp Ihm valid transfert MOT 16
    Ihmbm17 : BOOL;	//Hmi Word 17 transfer validation push button / Bp Ihm valid transfert MOT 17
    Ihmbm18 : BOOL;	//Hmi Word 18 transfer validation push button / Bp Ihm valid transfert MOT 18
    Ihmbm19 : BOOL;	//Hmi Word 19 transfer validation push button / Bp Ihm valid transfert MOT 19
    Ihmbm20 : BOOL;	//Hmi Word 20 transfer validation push button / Bp Ihm valid transfert MOT 20
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Ok : BOOL;	//Transfer OK / Transfert OK
  Ala : BOOL;	//Alarm /Alarme
  Diag : STRUCT	//Diagnosis and information /Information et diagnostic
    Def : BOOL;	//Fault presence / Presence Defaut
    Ala : BOOL;	//Alarme presence / Presence Alarme
    NumListe : INT;	//Reserved for SMP Fault list Number / Numero de liste defaut SMP
    Codedef : INT;	//Fault or Alarm Number / N° de defaut ou dalarme en Decimal
    Ihmm1 : WORD;	//Hmi Word 1 value / Ihm  valeur mot 1
    Ihmm2 : WORD;	//Hmi Word 2 value / Ihm  valeur mot 2
    Ihmm3 : WORD;	//Hmi Word 3 value / Ihm  valeur mot 3
    Ihmm4 : WORD;	//Hmi Word 4 value / Ihm  valeur mot 4
    Ihmm5 : WORD;	//Hmi Word 5 value / Ihm  valeur mot 5
    Ihmm6 : WORD;	//Hmi Word 6 value / Ihm  valeur mot 6
    Ihmm7 : WORD;	//Hmi Word 7 value / Ihm  valeur mot 7
    Ihmm8 : WORD;	//Hmi Word 8 value / Ihm  valeur mot 8
    Ihmm9 : WORD;	//Hmi Word 9 value / Ihm  valeur mot 9
    Ihmm10 : WORD;	//Hmi Word 10 value / Ihm  valeur mot 10
    Ihmm11 : WORD;	//Hmi Word 11 value / Ihm  valeur mot 11
    Ihmm12 : WORD;	//Hmi Word 12 value / Ihm  valeur mot 12
    Ihmm13 : WORD;	//Hmi Word 13 value / Ihm  valeur mot 13
    Ihmm14 : WORD;	//Hmi Word 14 value / Ihm  valeur mot 14
    Ihmm15 : WORD;	//Hmi Word 15 value / Ihm  valeur mot 15
    Ihmm16 : WORD;	//Hmi Word 16 value / Ihm  valeur mot 16
    Ihmm17 : WORD;	//Hmi Word 17 value / Ihm  valeur mot 17
    Ihmm18 : WORD;	//Hmi Word 18 value / Ihm  valeur mot 18
    Ihmm19 : WORD;	//Hmi Word 19 value / Ihm  valeur mot 19
    Ihmm20 : WORD;	//Hmi Word 20 value / Ihm  valeur mot 20
    Ihmmp1 : BOOL;	//Hmi Bool 1 Word 1 value / Ihm  valeur bool 1 MOT 1
    Ihmmp2 : BOOL;	//Hmi Bool 2 Word 1 value / Ihm  valeur bool 2 MOT 1
    Ihmmp3 : BOOL;	//Hmi Bool 3 Word 1 value / Ihm  valeur bool 3 MOT 1
    Ihmmp4 : BOOL;	//Hmi Bool 4 Word 1 value / Ihm  valeur bool 4 MOT 1
    Ihmmp5 : BOOL;	//Hmi Bool 5 Word 1 value / Ihm  valeur bool 5 MOT 1
    Ihmmp6 : BOOL;	//Hmi Bool 6 Word 1 value / Ihm  valeur bool 6 MOT 1
    Ihmmp7 : BOOL;	//Hmi Bool 7 Word 1 value / Ihm  valeur bool 7 MOT 1
    Ihmmp8 : BOOL;	//Hmi Bool 8 Word 1 value / Ihm  valeur bool 8 MOT 1
    Ihmmp9 : BOOL;	//Hmi Bool 9 Word 1 value / Ihm  valeur bool 9 MOT 1
    Ihmmp10 : BOOL;	//Hmi Bool 10 Word 1 value / Ihm  valeur bool 10 MOT 1
    Ihmmp11 : BOOL;	//Hmi Bool 11 Word 1 value / Ihm  valeur bool 11 MOT 1
    Ihmmp12 : BOOL;	//Hmi Bool 12 Word 1 value / Ihm  valeur bool 12 MOT 1
    Ihmmp13 : BOOL;	//Hmi Bool 13 Word 1 value / Ihm  valeur bool 13 MOT 1
    Ihmmp14 : BOOL;	//Hmi Bool 14 Word 1 value / Ihm  valeur bool 14 MOT 1
    Ihmmp15 : BOOL;	//Hmi Bool 15 Word 1 value / Ihm  valeur bool 15 MOT 1
    Ihmmp16 : BOOL;	//Hmi Bool 16 Word 1 value / Ihm  valeur bool 16 MOT 1
    Ihmvmpok : BOOL;	//Hmi FB output OK information / Ihm sortie Ok de la BF
  END_STRUCT ;
END_VAR
VAR
  Auxraz_dest : BOOL;	//Auxiliaire front montant Raz_dest
  OrigX0 : BOOL;	//1 er bit de la Struct origine
  Auxihmbm20 : BOOL;	//Auxiliaire front montant IHMBM20
  Auxihmbm19 : BOOL;	//Auxiliaire front montant IHMBM19
  Auxihmbm18 : BOOL;	//Auxiliaire front montant IHMBM18
  Auxihmbm17 : BOOL;	//Auxiliaire front montant IHMBM17
  Auxihmbm16 : BOOL;	//Auxiliaire front montant IHMBM16
  Auxihmbm15 : BOOL;	//Auxiliaire front montant IHMBM15
  Auxihmbm14 : BOOL;	//Auxiliaire front montant IHMBM14
  Auxihmbm13 : BOOL;	//Auxiliaire front montant IHMBM13
  Auxihmbm12 : BOOL;	//Auxiliaire front montant IHMBM12
  Auxihmbm11 : BOOL;	//Auxiliaire front montant IHMBM11
  Auxihmbm10 : BOOL;	//Auxiliaire front montant IHMBM10
  Auxihmbm9 : BOOL;	//Auxiliaire front montant IHMBM9
  Auxihmbm8 : BOOL;	//Auxiliaire front montant IHMBM8
  Auxihmbm7 : BOOL;	//Auxiliaire front montant IHMBM7
  Auxihmbm6 : BOOL;	//Auxiliaire front montant IHMBM6
  Auxihmbm5 : BOOL;	//Auxiliaire front montant IHMBM5
  Auxihmbm4 : BOOL;	//Auxiliaire front montant IHMBM4
  Auxihmbm3 : BOOL;	//Auxiliaire front montant IHMBM3
  Auxihmbm2 : BOOL;	//Auxiliaire front montant IHMBM2
  Auxihmbmp : BOOL;	//Auxiliaire front montant IHMBMP
END_VAR
VAR_TEMP
  SavAR1 : DWORD;	//Sauvegarde du registre AR1
  SavAR2 : DWORD;	//Sauvegarde du registre AR1
  Size : WORD;	//Format des donnees
  OrigIndex : DINT;	//Origine index
  DestIndex : DINT;	//Destination index
  DBNR : INT;	//Numero de DB
  Cnt1 : INT;	//Compteur 1
  Fmihmbmp : BOOL;	//front montant Bp IHM
  Fmihmbm20 : BOOL;	//front montant Bp20 IHM
  Fmihmbm19 : BOOL;	//front montant Bp19 IHM
  Fmihmbm18 : BOOL;	//front montant Bp18 IHM
  Fmihmbm17 : BOOL;	//front montant Bp17 IHM
  Fmihmbm16 : BOOL;	//front montant Bp16 IHM
  Fmihmbm15 : BOOL;	//front montant Bp15 IHM
  Fmihmbm14 : BOOL;	//front montant Bp14 IHM
  Fmihmbm13 : BOOL;	//front montant Bp13 IHM
  Fmihmbm12 : BOOL;	//front montant Bp12 IHM
  Fmihmbm11 : BOOL;	//front montant Bp11 IHM
  Fmihmbm10 : BOOL;	//front montant Bp10 IHM
  Fmihmbm9 : BOOL;	//front montant Bp9 IHM
  Fmihmbm8 : BOOL;	//front montant Bp8 IHM
  Fmihmbm7 : BOOL;	//front montant Bp7 IHM
  Fmihmbm6 : BOOL;	//front montant Bp6 IHM
  Fmihmbm5 : BOOL;	//front montant Bp5 IHM
  Fmihmbm4 : BOOL;	//front montant Bp4 IHM
  Fmihmbm3 : BOOL;	//front montant Bp3 IHM
  Fmihmbm2 : BOOL;	//front montant Bp2 IHM
  Fmraz_dest : BOOL;	//front montant Raz_dest
END_VAR
BEGIN
NETWORK
TITLE =
////---------- Initialisation process
////---------- Mise en forme Origine
////---------- Mise en forme Destination
////---------- Raz table Dest sur Front montant raz_dest
////---------- Controle du nombre de bit a transferer
//
/////Process///
//------------Transfer  1er mot de (Origine => destination) en fonction de Nbit1
//------------Transfer  2eme mot de (Origine => destination)en fonction de Nbit2
//------------Transfer  du reste de la table (3eme a "n" mots Orig => Dest)
//
////---------- RAZ ORIGINE SUR PERTE DU BIT ORIGX0
////---------- Forcage variable a partir IHMP ou WINCCFLEX
////---------- Gestion des erreurs
////---------- Set du 1er bit d'ORIG si defaut parametre
////---------- Fin du programme
//*ODIL_ID:2037_1*
//

NETWORK
TITLE =Initialisation process
//Sauvegarde registre AR1 et AR2, initialisation Code de defaut
//*ODIL_ID:2037_2*
//---------- Sauvegarde AR1 et AR2 + initialisation Code de defaut
//
TAR1 #SavAR1; //Transfert du registre AR1 dans SAVAR1
TAR2 #SavAR2; //Transfert du registre AR2 dans SAVAR2
L B#16#0; //Initialisation diag.code
T #Diag.Codedef; //RAZ diag.code
NETWORK
TITLE =Front montant Ihmbmp
//Front montant Ihmbmp
//*ODIL_ID:2037_3*
//---------- Front montant Ihmbmp
//
U #Pilot.Ihmbmp;
UN #Auxihmbmp;
= #Fmihmbmp;
U #Pilot.Ihmbmp;
= #Auxihmbmp;
NETWORK
TITLE =Front montant Ihmbm2
//Front montant Ihmbm2
//*ODIL_ID:2037_4*
//---------- Front montant Ihmbm2
//
U #Pilot.Ihmbm2;
UN #Auxihmbm2;
= #Fmihmbm2;
U #Pilot.Ihmbm2;
= #Auxihmbm2;
NETWORK
TITLE =Front montant Ihmbm3
//Front montant Ihmbm3
//*ODIL_ID:2037_5*
//---------- Front montant Ihmbm3
//
U #Pilot.Ihmbm3;
UN #Auxihmbm3;
= #Fmihmbm3;
U #Pilot.Ihmbm3;
= #Auxihmbm3;
NETWORK
TITLE =Front montant Ihmbm4
//Front montant Ihmbm4
//*ODIL_ID:2037_6*
//---------- Front montant Ihmbm4
//
U #Pilot.Ihmbm4;
UN #Auxihmbm4;
= #Fmihmbm4;
U #Pilot.Ihmbm4;
= #Auxihmbm4;
NETWORK
TITLE =Front montant Ihmbm5
//Front montant Ihmbm5
//*ODIL_ID:2037_7*
//---------- Front montant Ihmbm5
//
U #Pilot.Ihmbm5;
UN #Auxihmbm5;
= #Fmihmbm5;
U #Pilot.Ihmbm5;
= #Auxihmbm5;
NETWORK
TITLE =Front montant Ihmbm6
//Front montant Ihmbm6
//*ODIL_ID:2037_8*
//---------- Front montant Ihmbm6
//
U #Pilot.Ihmbm6;
UN #Auxihmbm6;
= #Fmihmbm6;
U #Pilot.Ihmbm6;
= #Auxihmbm6;
NETWORK
TITLE =Front montant Ihmbm7
//Front montant Ihmbm7
//*ODIL_ID:2037_9*
//---------- Front montant Ihmbm7
//
U #Pilot.Ihmbm7;
UN #Auxihmbm7;
= #Fmihmbm7;
U #Pilot.Ihmbm7;
= #Auxihmbm7;
NETWORK
TITLE =Front montant Ihmbm8
//Front montant Ihmbm8
//*ODIL_ID:2037_10*
//---------- Front montant Ihmbm8
//
U #Pilot.Ihmbm8;
UN #Auxihmbm8;
= #Fmihmbm8;
U #Pilot.Ihmbm8;
= #Auxihmbm8;
NETWORK
TITLE =Front montant Ihmbm9
//Front montant Ihmbm9
//*ODIL_ID:2037_11*
//---------- Front montant Ihmbm9
//
U #Pilot.Ihmbm9;
UN #Auxihmbm9;
= #Fmihmbm9;
U #Pilot.Ihmbm9;
= #Auxihmbm9;
NETWORK
TITLE =Front montant Ihmbm10
//Front montant Ihmbm10
//*ODIL_ID:2037_12*
//---------- Front montant Ihmbm10
//
U #Pilot.Ihmbm10;
UN #Auxihmbm10;
= #Fmihmbm10;
U #Pilot.Ihmbm10;
= #Auxihmbm10;
NETWORK
TITLE =Front montant Ihmbm11
//Front montant Ihmbm11
//*ODIL_ID:2037_13*
//---------- Front montant Ihmbm11
//
U #Pilot.Ihmbm11;
UN #Auxihmbm11;
= #Fmihmbm11;
U #Pilot.Ihmbm11;
= #Auxihmbm11;
NETWORK
TITLE =Front montant Ihmbm12
//Front montant Ihmbm12
//*ODIL_ID:2037_14*
//---------- Front montant Ihmbm12
//
U #Pilot.Ihmbm12;
UN #Auxihmbm12;
= #Fmihmbm12;
U #Pilot.Ihmbm12;
= #Auxihmbm12;
NETWORK
TITLE =Front montant Ihmbm13
//Front montant Ihmbm13
//*ODIL_ID:2037_15*
//---------- Front montant Ihmbm13
//
U #Pilot.Ihmbm13;
UN #Auxihmbm13;
= #Fmihmbm13;
U #Pilot.Ihmbm13;
= #Auxihmbm13;
NETWORK
TITLE =Front montant Ihmbm14
//Front montant Ihmbm14
//*ODIL_ID:2037_16*
//---------- Front montant Ihmbm14
//
U #Pilot.Ihmbm14;
UN #Auxihmbm14;
= #Fmihmbm14;
U #Pilot.Ihmbm14;
= #Auxihmbm14;
NETWORK
TITLE =Front montant Ihmbm15
//Front montant Ihmbm15
//*ODIL_ID:2037_17*
//---------- Front montant Ihmbm15
//
U #Pilot.Ihmbm15;
UN #Auxihmbm15;
= #Fmihmbm15;
U #Pilot.Ihmbm15;
= #Auxihmbm15;
NETWORK
TITLE =Front montant Ihmbm16
//Front montant Ihmbm16
//*ODIL_ID:2037_18*
//---------- Front montant Ihmbm16
//
U #Pilot.Ihmbm16;
UN #Auxihmbm16;
= #Fmihmbm16;
U #Pilot.Ihmbm16;
= #Auxihmbm16;
NETWORK
TITLE =Front montant Ihmbm17
//Front montant Ihmbm17
//*ODIL_ID:2037_19*
//---------- Front montant Ihmbm17
//
U #Pilot.Ihmbm17;
UN #Auxihmbm17;
= #Fmihmbm17;
U #Pilot.Ihmbm17;
= #Auxihmbm17;
NETWORK
TITLE =Front montant Ihmbm18
//Front montant Ihmbm18
//*ODIL_ID:2037_20*
//---------- Front montant Ihmbm18
//
U #Pilot.Ihmbm18;
UN #Auxihmbm18;
= #Fmihmbm18;
U #Pilot.Ihmbm18;
= #Auxihmbm18;
NETWORK
TITLE =Front montant Ihmbm19
//Front montant Ihmbm19
//*ODIL_ID:2037_21*
//---------- Front montant Ihmbm19
//
U #Pilot.Ihmbm19;
UN #Auxihmbm19;
= #Fmihmbm19;
U #Pilot.Ihmbm19;
= #Auxihmbm19;
NETWORK
TITLE =Front montant Ihmbm20
//Front montant Ihmbm20
//*ODIL_ID:2037_22*
//---------- Front montant Ihmbm20
//
U #Pilot.Ihmbm20;
UN #Auxihmbm20;
= #Fmihmbm20;
U #Pilot.Ihmbm20;
= #Auxihmbm20;
NETWORK
TITLE =Front montant raz_dest
//Front montant Raz_dest
//*ODIL_ID:2037_23*
//---------- Front montant Raz_dest
//
U #Raz_dest;
UN #Auxraz_dest;
= #Fmraz_dest;
U #Raz_dest;
= #Auxraz_dest;
NETWORK
TITLE =Mise en forme Origine "ANY"
//Mise en forme Origine "ANY"
//*ODIL_ID:2037_24*
//----------  Recuperation des informations necessaire au process
//
//BF Multi Instance   OFFSET
LAR1 AR2;
L P##Dest;
+AR1;
L DID [AR1,P#6.0]; //Pointer sur zone de memoire "ANY"
T #DestIndex; //Chargement Destination Index
//BF Multi Instance OFFSET
LAR1 AR2;
L P##Orig;
+AR1;
L DIW [AR1,P#4.0]; //Chargement du Numero de DB
T #DBNR; //memorisation du numero de DB
L DID [AR1,P#6.0]; //Chargement de la zone de memoire
T #OrigIndex; //origine Index
//---------- Mise en forme Origine "ANY"
L DIB [AR1,P#6.0]; //Chargement du type de donnees
L B#16#84;
<>D; //la source est-elle de type DB ?( db=84)
SPB Df04; //Diag.code=4: Erreur format Origine
L DIW [AR1,P#2.0]; //Chargement du nombre de Bytes de la Table
SRW 1; //Division par 2 pour obtenir le resultat en BYTE
T #Size; //On obtient dans SIZE le nombre de WORD
L B#16#14; //Verification que la table fait 20 WORD(14 en HEXA)
==D;
SPBN Df04; //Diag.code=4: Erreur format Origine
NETWORK
TITLE =Mise en forme Destination  "ANY"
//Mise en forme Destination  "ANY"
//*ODIL_ID:2037_25*
//---------- Mise en forme Destination  "ANY"
//
//BF Multi Instance   OFFSET
LAR1 AR2;
L P##Dest;
+AR1;
L DIB [AR1,P#6.0]; //Chargement du type de donnees
L B#16#84;
<>D; //la source est-elle de type DB ?( db=84)
SPB Df08; //Diag.code=8: Zone de destination incorrecte
L DIW [AR1,P#2.0]; //Chargement du nombre de Bytes de la Table)
SRW 1; //Division par 2 pour obtenir le resultat en BYTE
L #Size; //Chargement de la taille de la table d'Orig
<>D; //Test si orig et Dest ont la meme taille
SPB Df08; //Si la taille n'es pas egale alors, Diag.code=8
L DIW [AR1,P#4.0]; //Chargement du Numero de DB
L #DBNR; //Chargement du numero de DB de origine
<>D; //Controle si Orig et Dest appartiennent pas au meme DB
SPB Df16; //Diag.code=16 (DB Orig different DB Dest)
NETWORK
TITLE =Raz table Dest sur Front montant raz_dest
//Raz table Dest sur Front montant raz_dest
//*ODIL_ID:2037_26*
//---------- Raz table Dest sur Front montant raz_dest
//
AUF DB [#DBNR]; //Ouvrir DB Orig And Dest DB
U #Fmraz_dest; //RAZ de dest sur front montant de Raz_dest
SPBN SV2; //Si pas de demande de RAZ Jump
LAR1 #DestIndex; //Chargement DestIndex dans AR1
L #Size; //Chargement de la taille de la table
RazD: L W#16#0; //Boucle pour RAZ table Dest
T DBW [AR1,P#0.0]; //Pointer sur 1 er mot de la Struct Dest
+AR1 P#2.0; //Incrementation du pointer d'un WORD
POP; //Permutation des ACCU 1 et 2
LOOP RazD; //Boucle pour Raz de toute la Table Dest
SPZ PILO; //Saut lorsque Size =0
NETWORK
TITLE =RAZ ORIGINE SUR PERTE DU BIT ORIGX0
//RAZ ORIGINE SUR PERTE DU BIT ORIGX0
//*ODIL_ID:2037_27*
//---------- RAZ ORIGINE SUR PERTE DU BIT ORIGX0
//
SV2: LAR1 #OrigIndex; //Chargement OrigIndex dans AR1
L DBB [AR1,P#0.0]; //Chargement du 1 er BYTE de Orig
UW W#16#1; //Test du 1 er Bit de la STRUCT Origine "OrigX0"
UN ==0; //Test si 1 er bit est egale a 0
= #OrigX0; //SET OrigX0 si 1 er bit =1
SPB SV3; //Si x0 de Orig est egale a "0" jump a "Raz" Origine
LAR1 #OrigIndex; //Chargement OrigIndex dans AR1
L #Size;
RzO: L B#16#0; //Boucle pour RAZ Orig
T DBW [AR1,P#0.0]; //Charger la Valeur 0 dans Word OrigIndex
+AR1 P#2.0; //Incrementation Orig d'un WORD
POP; //Permutation entre ACCU 1 et ACCU 2
LOOP RzO;
NETWORK
TITLE =Controle du nombre de bit a transferer
// Controle du nombre de bit a transferer
//*ODIL_ID:2037_28*
//---------- Controle du nombre de bit a transferer
//
SV3: L #nBit1; //Test nBit1 >= 1
L 1;
<D;
SPB Df02; //Diag.code=2: Erreur parametrage Nbit1
POP;
L B#16#10; //Test nBit1 =< 16 (10 en HEXA)
>D;
SPB Df02; //Diag.code=2: Erreur parametrage Nbit1
L #nBit2; //Tst nBit2 >= 1
L B#16#1;
<D;
SPB Df02; //Diag.code=2: Erreur parametrage Nbit2
POP;
L B#16#10; //Test nBit1 =< 16 (10 en HEXA)
>D;
SPB Df02; //Diag.code=2: Erreur parametrage Nbit2
NETWORK
TITLE =Process TF_TP
//Transfer  1er mot de (Origine => destination) en fonction de Nbit1
//*ODIL_ID:2037_29*
//Transfer  1er mot de (Origine => destination) en fonction de Nbit1
//
U #Val; //Entree de la BF de Validation pour le transfert
U #OrigX0; //1 er bit d'Orig a 1
SPBN PILO; //Si pas de Validation Jump a "PILO"
LAR1 #DestIndex; //Chargement de Dest
L DBW [AR1,P#0.0]; //Chargement du 1 er WORD de Dest
L B#16#0;
<>D; //Controle du premier mot de Dest si =0
SPB Df01; //Codedef=1: Dest <> 0
LAR1 #OrigIndex; //Chargement AR1 sur OrigIndex
L 16;
L #nBit1; //nbre de bit a transferer
-I; //ACCU 2 - ACCU 1
L W#16#FFFF; //Masque pour garder que le premier bit
SRW; //calcul du nombre de bit a transferer
L DBW [AR1,P#0.0]; //Chargement du 1 er Word d'Orig
TAW; //Inversion poids Fort/poids faible
UW; //Masque pour garder que les Bits qui nous interesse
TAW; //Inversion poids Fort/poids faible
LAR2 #DestIndex; //Chargement AR2 sur DestIndex
T DBW [AR2,P#0.0]; //Dest
L B#16#0;
T DBW [AR1,P#0.0]; //RAZ 1 er Origine
NETWORK
TITLE =Process TF_TP
//Transfer  2eme mot  (origine => destination) en fonction de Nbit2
//*ODIL_ID:2037_30*
//Transfer  2eme mot  (origine => destination) en fonction de Nbit2
//
LAR2 #SavAR2; //Restitution AR2
L 16;
L #nBit2; //nbre de bit a transferer
-I; //ACCU 2 - ACCU 1
L W#16#FFFF; //Masque pour garder que le premier bit
SRW; //calcul du nombre de bit a transferer
L DBW [AR1,P#2.0]; //Chargement du 2 eme Word d'Orig
TAW; //Inversion poids Fort/poids faible
UW; //Masque pour garder que les Bits qui nous interesse
TAW; //Inversion poids Fort/poids faible
LAR2 #DestIndex; //Chargement AR2 sur DestIndex
T DBW [AR2,P#2.0]; //Dest
L B#16#0;
T DBW [AR1,P#2.0]; //RAZ 2 eme Origine
NETWORK
TITLE =Process TF_TP
//Transfer  du reste de la table (du 3 eme mot a "n" mots  Origine => Dest)
//*ODIL_ID:2037_31*
//Transfer  du reste de la table (du 3 eme mot a "n" mots  Origine => Dest)
//
L #Size; //nbr de mots restants a transferer
+ -2; //Decrementation de la variable SIZE de 2 WORD
LAR2 #DestIndex; //Chargement AR2 sur DestIndex
Lcpy: T #Cnt1; //Boucle pour transfert Orig n+2 => Dest n+2
L DBW [AR1,P#4.0]; //Orig
T DBW [AR2,P#4.0]; //Dest
L B#16#0; //Raz mot Origine n-1
T DBW [AR1,P#4.0]; //Orig
+AR1 P#2.0; //Orig n+1
+AR2 P#2.0; //Dest n+1
L #Cnt1; //Incrementation du compteur
LOOP Lcpy;
SPA PILO; //saut inconditionelle au repere PILO
NETWORK
TITLE =Gestion des erreurs
//Gestion des erreurs
//*ODIL_ID:2037_32*
//---------- Gestion des erreurs
//
Df01: L B#16#1; // 1 - Destination 1 er mot <> 0 (pas vide)
SPA Def;
Df02: L B#16#2; // 2 - Nombre de bit < 1 ou > 16
SPA Def;
Df04: L B#16#4; // 4 - Origine: Erreur de parametrage
SPA Def;
Df08: L B#16#8; // 8 - Destination: Erreur de parametrage
SPA Def;
Df16: L B#16#10; // 16 - Dest et Orig ne sont pas dans le meme DB
SPA Def;
Def: T #Diag.Codedef; //Defauts
NETWORK
TITLE =
//Repositionnement a 1 du 1 er bit du 1 er mot de la table d'origine
//*ODIL_ID:2037_33*
//---------- Set du 1er bit d'ORIG si defaut parametre
//
AUF DB [#DBNR]; //Ouverture numero de DB
L B#16#4;
L #Diag.Codedef;
==D;
SPBN PILO; //Si defaut parametre table ORIG Jump PILO
LAR1 #OrigIndex;
L DBB [AR1,P#0.0]; //Test du 1 er Bit de la STRUCT Origine "OrigX0"
UW W#16#1; //MAsque pour garder le premier bit du mot
U ==0; //Test si 1 er bit est egale a 0
L B#16#0;
<>D;
SPB PILO; //Si premier bit est egale a 1 jump a PILO
LAR1 #OrigIndex; //Chargement AR1
L DBB [AR1,P#0.0]; //Chargement premier byte de Origindex
OW W#16#1; //Masque pour SET du premier BIT
T DBB [AR1,P#0.0]; //Chargement du premier Byte
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX
//Forcage variable a partir IHMP ou WINCCFLEX
//*ODIL_ID:2037_34*
//---------- Forcage variable a partir IHMP ou WINCCFLEX
//
PILO: LAR1 #SavAR2; //---------- Init AR1 sur Pilot
L P##Pilot;
+AR1;
LAR2 #DestIndex; //---------- Init AR2 sur Dest
U #Fmihmbmp; //Conditions de forcage
SPB M1;
U #Fmihmbm2; //Conditions de forcage
SPB M2;
U #Fmihmbm3; //Conditions de forcage
SPB M3;
U #Fmihmbm4; //Conditions de forcage
SPB M4;
U #Fmihmbm5; //Conditions de forcage
SPB M5;
U #Fmihmbm6; //Conditions de forcage
SPB M6;
U #Fmihmbm7; //Conditions de forcage
SPB M7;
U #Fmihmbm8; //Conditions de forcage
SPB M8;
U #Fmihmbm9; //Conditions de forcage
SPB M9;
U #Fmihmbm10; //Conditions de forcage
SPB M10;
U #Fmihmbm11; //Conditions de forcage
SPB M11;
U #Fmihmbm12; //Conditions de forcage
SPB M12;
U #Fmihmbm13; //Conditions de forcage
SPB M13;
U #Fmihmbm14; //Conditions de forcage
SPB M14;
U #Fmihmbm15; //Conditions de forcage
SPB M15;
U #Fmihmbm16; //Conditions de forcage
SPB M16;
U #Fmihmbm17; //Conditions de forcage
SPB M17;
U #Fmihmbm18; //Conditions de forcage
SPB M18;
U #Fmihmbm19; //Conditions de forcage
SPB M19;
U #Fmihmbm20; //Conditions de forcage
SPB M20;
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 1
//Forcage variable a partir IHMP ou WINCCFLEX Mot 1
//*ODIL_ID:2037_35*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 1
//
M1: L DIW [AR1,P#0.0]; //Pilot
T DBW [AR2,P#0.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 2
//Forcage variable a partir IHMP ou WINCCFLEX Mot 2
//*ODIL_ID:2037_36*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 2
//
M2: L DIW [AR1,P#2.0]; //Pilot
T DBW [AR2,P#2.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 3
//Forcage variable a partir IHMP ou WINCCFLEX Mot 3
//*ODIL_ID:2037_37*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 3
//
M3: L DIW [AR1,P#4.0]; //Pilot
T DBW [AR2,P#4.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 4
//Forcage variable a partir IHMP ou WINCCFLEX Mot 4
//*ODIL_ID:2037_38*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 4
//
M4: L DIW [AR1,P#6.0]; //Pilot
T DBW [AR2,P#6.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 5
//Forcage variable a partir IHMP ou WINCCFLEX Mot 5
//*ODIL_ID:2037_39*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 5
//
M5: L DIW [AR1,P#8.0]; //Pilot
T DBW [AR2,P#8.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 6
//Forcage variable a partir IHMP ou WINCCFLEX Mot 6
//*ODIL_ID:2037_40*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 6
//
M6: L DIW [AR1,P#10.0]; //Pilot
T DBW [AR2,P#10.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 7
//Forcage variable a partir IHMP ou WINCCFLEX Mot 7
//*ODIL_ID:2037_41*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 7
//
M7: L DIW [AR1,P#12.0]; //Pilot
T DBW [AR2,P#12.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 8
//Forcage variable a partir IHMP ou WINCCFLEX Mot 8
//*ODIL_ID:2037_42*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 8
//
M8: L DIW [AR1,P#14.0]; //Pilot
T DBW [AR2,P#14.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 9
//Forcage variable a partir IHMP ou WINCCFLEX Mot 9
//*ODIL_ID:2037_43*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 9
//
M9: L DIW [AR1,P#16.0]; //Pilot
T DBW [AR2,P#16.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 10
//Forcage variable a partir IHMP ou WINCCFLEX Mot 10
//*ODIL_ID:2037_44*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 10
//
M10: L DIW [AR1,P#18.0]; //Pilot
T DBW [AR2,P#18.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 11
//Forcage variable a partir IHMP ou WINCCFLEX Mot 11
//*ODIL_ID:2037_45*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 11
//
M11: L DIW [AR1,P#20.0]; //Pilot
T DBW [AR2,P#20.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 12
//Forcage variable a partir IHMP ou WINCCFLEX Mot 12
//*ODIL_ID:2037_46*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 12
//
M12: L DIW [AR1,P#22.0]; //Pilot
T DBW [AR2,P#22.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 13
//Forcage variable a partir IHMP ou WINCCFLEX Mot 13
//*ODIL_ID:2037_47*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 13
//
M13: L DIW [AR1,P#24.0]; //Pilot
T DBW [AR2,P#24.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 14
//Forcage variable a partir IHMP ou WINCCFLEX Mot 14
//*ODIL_ID:2037_48*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 14
//
M14: L DIW [AR1,P#26.0]; //Pilot
T DBW [AR2,P#26.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 15
//Forcage variable a partir IHMP ou WINCCFLEX Mot 15
//*ODIL_ID:2037_49*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 15
//
M15: L DIW [AR1,P#28.0]; //Pilot
T DBW [AR2,P#28.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 16
//Forcage variable a partir IHMP ou WINCCFLEX Mot 16
//*ODIL_ID:2037_50*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 16
//
M16: L DIW [AR1,P#30.0]; //Pilot
T DBW [AR2,P#30.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 17
//Forcage variable a partir IHMP ou WINCCFLEX Mot 17
//*ODIL_ID:2037_51*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 17
//
M17: L DIW [AR1,P#32.0]; //Pilot
T DBW [AR2,P#32.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 18
//Forcage variable a partir IHMP ou WINCCFLEX Mot 18
//*ODIL_ID:2037_52*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 18
//
M18: L DIW [AR1,P#34.0]; //Pilot
T DBW [AR2,P#34.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 19
//Forcage variable a partir IHMP ou WINCCFLEX Mot 19
//*ODIL_ID:2037_53*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 19
//
M19: L DIW [AR1,P#36.0]; //Pilot
T DBW [AR2,P#36.0]; //Dest
SPA DIAG;
NETWORK
TITLE =Forcage variable a partir IHMP ou WINCCFLEX Mot 20
//Forcage variable a partir IHMP ou WINCCFLEX Mot 20
//*ODIL_ID:2037_54*
//---------- Forcage variable a partir IHMP ou WINCCFLEX  Mot 20
//
M20: L DIW [AR1,P#38.0]; //Pilot
T DBW [AR2,P#38.0]; //Dest
SPA DIAG;
NETWORK
TITLE =
//*ODIL_ID:2037_55*
//MODIF POUR RECOPIE DU MOT 1 DANS STRUCT DE 16 BOOLS
//
DIAG: LAR1 #SavAR2; //---------- Init AR1 sur Diag
L P##Diag;
+AR1;
LAR2 #DestIndex; //---------- Init AR2 sur Dest
L #Size;
LDia: L DBW [AR2,P#0.0]; //Dest
T DIW [AR1,P#6.0]; //Diag
+AR1 P#2.0; //Incrementation de AR1 d'un WORD
+AR2 P#2.0; //Incrementation de AR2 d'un WORD
POP; //Permutation ACCU 1 et 2
LOOP LDia;
LAR1 #SavAR2; //---------- Init AR1 sur Diag
L P##Diag;
+AR1;
L DIW [AR1,P#6.0]; //Diag MOT 1 (ATTENTION VALEUR ABSOLUE)
T DIW [AR1,P#46.0]; //Diag Struct de 16 bools (recopie du MOT 1)
NETWORK
TITLE =Fin du programme
//Fin du programme
//*ODIL_ID:2037_56*
//---------- Fin du programme
//
LAR2 #SavAR2; //Restitution du registre AR2
L #Diag.Codedef; // si diag.code <> 0 activation de la sortie Diag.Ala
L B#16#0;
<>I;
= #Diag.Ala; //SET Diag.ala si defaut
= #Ala; //SET Ala si defaut
UN #Diag.Ala;
U #Val;
U #OrigX0;
= #Ok; //SET OK si pas de defaut et val et origx0
S #Diag.Ihmvmpok; //SET Diag.OK si val et origx0
LAR1 #DestIndex; //Chargement Destindex dans AR1
L DBB [AR1,P#0.0]; //Chargement du 1 er BIT de DEST
UW W#16#1; //Test du 1 er bit de la struct destination
U ==0; //Premier BIT de DEST est egale a 0 ??
R #Diag.Ihmvmpok; //Si 1 er BIT est a 0 RESET Diag.Ihmvmpok
LAR1 #SavAR1; //Restitution du registre AR1
BEA; //Fin du programme
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_WELDING_BOX"
TITLE =BF_WELDING_BOX
//**********************************************************************
//*                           BF_WELDING_BOX                           *
//*                        WELDING BOX CONTROL                         *
//*     GESTION DES COFFRETS DE SELECTION DES PARAMETRES SOUDURE       *
//**********************************************************************
//(in english further below)
//DESCRIPTION :
//*************
//Le FB1868 "BF_WELDING_BOX" assure le pilotage des coffrets de sélection des
//paramètres sur les séquenceurs de soudure (coffrets appelé Welding Box). Ce BF
//peut gérer deux coffrets welding box installés sur un poste de travail.
//
//MISE EN OEUVRE :
//****************
//Nom de la BF : P0WBX, où P0 est le nom du poste et X est le numéro de la BF sur
//le poste : exemple A0WB1.
//L'entrée CODE_WB est à renseigner avec la variable du même nom, contenu dans le
//DB Talo si l'îlot travail sur un principe de code process. Dans les îlots hors
//Siptol ou sans principe de code process, on utilisera le mot diversité du poste
//(exemple : S1A0DIV)
//Les sorties "WBx.Bitx" sont à renseigner avec les sorties Profinet associées
//aux coffrets Welding Box.
//
//DEFAUT :
//********
//Si la valeur en entrée de la BF n'est pas cohérente, un défaut est généré. La
//sortie défaut est à renseigner avec une variable statique sous la forme
//SZXP0DWBX : avec ZX = numéro de zone, P0 = poste de travail (A0, B0,...), WBX
//où
//X est le numéro de la BF dans la section 1,2,... soit par exemple (S1A0DWB1).
//
//
//********************************ENGLISH INFORMATION ****************************
//DESCRIPTION :
//*************
//The FB1868 is used for Welding Box control. This FB can control two Welding Box
//installed on a stage.
//
//OPERATING :
//***********
//FB name rule : P0WBX, P0 is the stage name and X is the number of FB on the
//stage : for exemple A0WB1.
//"CODE_WB" Input as to be fill in with a value. In case of Siptol use, this
//value
//can be found in Talo DB, in stage Structure. When Siptol is not present, fill
//in
//this input with diversity value (generate with IPP data).
//"WBx.Bitx" output have to be fill in with Profinet output data.
//
//FAULT :
//*******
//A fault is set if input value is not correct.
//Def output has to be fill in with Stat data like : SZXP0DWBX
//Where ZX = zone number, P0 = stage name (A0, B0,...), WBX = X is the FB number
//1,2,... for exemple : S1A0DWB1.
//NB Reseaux BF 1er Version / Network Number in 1ft version : 4
//Dernier ID mis en oeuvre / Last ID implemented : 1868_4
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'WELD_BOX'
VERSION : 1.0
VAR_INPUT
  CODE_WB : INT;	//CODE DIVERSITY / CODE DIVERSITE
END_VAR
VAR_OUTPUT
  WB1_BIT1 : BOOL;	//WELDING BOX 1 BIT 1 / COFFRET PARAMETRE SOUDURE 1 BIT 1
  WB1_BIT2 : BOOL;	//WELDING BOX 1 BIT 2 / COFFRET PARAMETRE SOUDURE 1 BIT 2
  WB1_BIT3 : BOOL;	//WELDING BOX 1 BIT 3 / COFFRET PARAMETRE SOUDURE 1 BIT 3
  WB1_BIT4 : BOOL;	//WELDING BOX 1 BIT 4 / COFFRET PARAMETRE SOUDURE 1 BIT 4
  WB2_BIT1 : BOOL;	//WELDING BOX 2 BIT 1 / COFFRET PARAMETRE SOUDURE 2 BIT 1
  WB2_BIT2 : BOOL;	//WELDING BOX 2 BIT 2 / COFFRET PARAMETRE SOUDURE 2 BIT 2
  WB2_BIT3 : BOOL;	//WELDING BOX 2 BIT 3 / COFFRET PARAMETRE SOUDURE 2 BIT 3
  WB2_BIT4 : BOOL;	//WELDING BOX 2 BIT 4 / COFFRET PARAMETRE SOUDURE 2 BIT 4
  DEF : BOOL;	//CODE_WB SETTING FAULT / DEFAUT DE PARAMETRAGE CODE_WB
END_VAR
VAR_TEMP
  CALCUL : STRUCT	//TEMPORARY STRUCTURE FOR CONVERT / STRUCTURE TEMPORAIRE POUR CONVERSION MOT>BIT
    SPARE_0 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_1 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_2 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_3 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_4 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_5 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_6 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_7 : BOOL;	//DUST BIN / BIT POUBELLE
    X_BIT0 : BOOL;	//AUXILLIARY BIT_1
    X_BIT1 : BOOL;	//AUXILLIARY BIT_2
    X_BIT2 : BOOL;	//AUXILLIARY BIT_3
    X_BIT3 : BOOL;	//AUXILLIARY BIT_4
    SPARE_8 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_9 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_10 : BOOL;	//DUST BIN / BIT POUBELLE
    SPARE_11 : BOOL;	//DUST BIN / BIT POUBELLE
  END_STRUCT ;
  BA1I : BOOL;	//INTERNAL BIT ALWAYS ON / BIT A UN INTERNE
END_VAR
BEGIN
NETWORK
TITLE =GENERATE BIT ALWAYS ON FOR INTERNAL USE
//GENERATION D UN BIT TOUJOURS A UN POUR UTILISATION INTERNE A LA BF
//*ODIL_ID:1868_1*
//
O #BA1I;
ON #BA1I;
= #BA1I;
NETWORK
TITLE =TRANSFERT INPUT VALUE TO STRUCT CALCUL IN TEMP AREA
//TRANSFERT DU MOT D ENTREE VERS LA STRUCTURE CALCUL EN ZONE TEMP
//*ODIL_ID:1868_2*
//
L #CODE_WB;
T LW 0;
NETWORK
TITLE =COPY TEMP DATA TO BF OUTPUT
//RECOPIE BIT A BIT DES DONNEES DE LA STRUCTURE CALCUL EN ZONE TEMP VERS LES
//SORTIES DE LA BF
//*ODIL_ID:1868_3*
//
U #BA1I;
UN #DEF;
= L 3.0;
U L 3.0;
U #CALCUL.X_BIT0;
= #WB1_BIT1;
= #WB2_BIT1;
U L 3.0;
U #CALCUL.X_BIT1;
= #WB1_BIT2;
= #WB2_BIT2;
U L 3.0;
U #CALCUL.X_BIT2;
= #WB1_BIT3;
= #WB2_BIT3;
U L 3.0;
U #CALCUL.X_BIT3;
= #WB1_BIT4;
= #WB2_BIT4;
NETWORK
TITLE =FAULT DISPLAY IF VALUE IS NOT CORRECT
//CREATION D UN DEFAUT POUR LES VALEURS D ENTREE NON CONFORME
//*ODIL_ID:1868_4*
//
O(;
L #CODE_WB;
L 0;
<I;
);
O(;
L #CODE_WB;
L 15;
>I;
);
= #DEF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_CABRS"
TITLE =BF_CABRS
//--------------------------------------------------------------------------------
//- BF_CABRS
//- BarCode Reader
//- Lecteur de Code a Barre
//--------------------------------------------------------------------------------
//
//Description / Description:
//--------------------------
//This function Block is used to read BarCodes
//A communication module (6ES7 138-4DF01-0AB0) must be configured in the HW
//configuration (1SI ASCII 32 Bytes).
//
//Ce Bloc Fonctionnel permet de lire des codes a barre.
//Un module de communication (6ES7 138-4DF01-0AB0) dument parametre doit se
//trouver dans la configuration materielle (1SI ASCII 32 Bytes).
//
//Programming / Programmation:
//----------------------------
//This function Block must be called from the OB 1, once per scanning system.
//Outputs of the function block are only valid when NDR is set to one.
//
//Ce bloc fonctionnel doit être appele depuis l'OB 1, une fois par système
//d'acquisition.
//Les sorties du bloc fonctionnel ne sont valides que lorsque NDR est positionné
//à un.
//
//Error code / Code d'erreur:
//---------------------------
//Three types of Error codes can be returned.
//Trois types de code d'erreur peuvent etre retournes.
//
//
//From the SFC 14 (DPRD_DAT):
//8090 - Wrong Parameter (ADDR) / Parametre incorrect (ADDR)
//80B1 - Error in the HW Configuration / Erreur dans la configuration materielle
//80A0 - Access Error / Erreur d'acces au Module
//
//From the module / Depuis le module
//02XX - Parameterization error / Erreur de paramétrage
//080D - Line break / Cable debranche
//0810 - Parity Error / Erreur de Parite
//0811 - Frame Error / Erreur de Trame
//0850 - Too much data received / Trop de donnees recues (224 Bytes Max)
//Error codes are explained in the 1SI Module documentation
//Les codes d'erreur sont expliques dans la documentation du module 1SI
//
//From the FB
//FF01 - Too few char received / trop peu de caractères recus
//FF02 - First char was not STX / le premier octet n'etait pas STX
//FF03 - Last char was not ETX / le dernier octet n'etait pas ETX
//FF04 - Wrong DATA parameter / Paramètre DATA incorrect (Char or Byte Array)
//FF05 - Wrong DATA parameter / Paramètre DATA incorrect (Must be in a DB)
//FF06 - DATA too small or Code too long / DATA trop petit ou code trop long
//
//******************************* _ODIL_ID_***********************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 9
//Dernier ID mis en oeuvre / Last ID implemented : 1897_9
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'SCUBE'
NAME : 'CAB_RS'
VERSION : 1.1
VAR_INPUT
  Addr : INT;	//Module Address in the HW Config / Adresse du module dans la Config Mat
  Data : ANY;	//Location of the Barcode / Emplacement du Code à Barre
  Sep : CHAR  := '#';	//Separator Scanner ID - Barrcode / separateur ID Lecteur - Code
END_VAR
VAR_OUTPUT
  NDR : BOOL;	//New Data Received / Nouvelles Donnees Recues
  Def : BOOL;	//Fault / Defaut
  ReaderID : BYTE;	//Reader ID if separator found / ID Lecteur si séparateur Trouvé
  Len : INT;	//Data Length / Longueur des données reçues
  Diag : STRUCT	//Diagnosis Structure / Structure de Diagnostic
    Def : BOOL;	//Fault / Defaut
    CodeDef : INT;	//Fault Code / Code de defaut
  END_STRUCT ;
END_VAR
VAR
  Coord : BYTE;	//Coordination Byte (Copy of IN[0]) / Octet de Coordination (Copie de IN[0])
  CodLen : INT;	//Length of the received Code / Longueur du Code recu
  DatLen : INT;	//DATA: Length of the buffer  / DATA: Longueur du buffer
  DatDBNR : INT;	//DATA: DB Number / DATA: Numero du bloc de donnees
  DatPtr : DWORD;	//DATA: Address / DATA: Adresse
  RemLen : INT;	//Remaining frame length / Longueur de telegramme restante
  FirstPac : BOOL;	//First Packet / Premier Paquet
  RID : BOOL;	//With Reader ID / Avec ID de lecteur
  Flush : BOOL;	//Flush the Module buffer / Vidage du Buffer du module
END_VAR
VAR_TEMP
  IN : ARRAY  [0 .. 31 ] OF //Module Input area / Zone d'entree du Module
BYTE;
  LADDR : WORD;	//Module Address / Adresse du module
  Ret : INT;	//Return value of the SFC 14 / Valeur de retour du SFC 14
  BackAR2 : DINT;	//Backup AR2 / Sauvegarde de AR2
  DBNR : INT;	//DATA: DB Number / DATA: Numero du bloc de donnees
  LoopCnt : INT;	//Loop Counter / Compteur de boucle
  InCoord : BYTE;	//Input Coordination Byte  / Octet de coordination en entree
  OutCoord : BYTE;	//Output Coordination Byte / Octet de coordination en sortie
  NLastPac : BOOL;	//Not the LastPacket / Pas le Dernier Paquet
END_VAR
BEGIN
NETWORK
TITLE =
//*ODIL_ID:1897_1*
CLR;
= #NDR;
//---------- Read Input Area (32 Bytes)
L #Addr; //INT
T #LADDR; //WORD
CALL "DPRD_DAT" (//SFC 14
LADDR := #LADDR,
RET_VAL := #Ret,
RECORD := #IN);
SPBIN E000; //Goto E000 in case of Error
NETWORK
TITLE =
//See the module documentation for further details
//
//IN[0]    - IN[1]    - IN[2]    - IN[3]
//RJJJECCC - Status              -
//X000X000 - 00000000 - 00000001 - XXXXXXXX
//
//R - Reserved
//J - Job
//E - Error
//C - Sync Counter
//*ODIL_ID:1897_2*
//
L #Coord;
L #IN[0]; //Coordination Byte
UW W#16#77; //Mask Job & Counter 0JJJ0CCC
T #InCoord;
SPZ S00; //IN[0] = 0 -> S00
==D; //Comp Coord & IN[0]
SPB END;
T #Coord;
T #OutCoord;
U #FirstPac; //First Packet
SPB S01; //-> S01 (First Packet - Init - Max 29 bytes)
SPA S02; //-> S02 (Following packets - Max 31 bytes)
NETWORK
TITLE =Wait for Data (IN[0] = 0)
//*ODIL_ID:1897_3*
S00: LAR1 P##IN;
L LW [AR1,P#1.0]; //L Status (IN[1] & IN[2])
PUSH;
XOW W#16#1; //New Data Received
O ==0; //Status = 16#1
POP;
XOW W#16#B01; //New Data Received & Warning
O ==0; //Status = 16#B01
SPBN END;
S #FirstPac; //First Packet
L B#16#20; //Request data from the module
T #OutCoord;
L B#16#0;
T #Coord;
SPA Upd; //Update Output
NETWORK
TITLE =Wait For First Packet
//*ODIL_ID:1897_4*
S01: L #InCoord;
XOW W#16#21;
SPZ S01x; //First Packet
//----------
L #InCoord;
XOW W#16#20;
SPZ E002; //Error
//----------
SPA END;
S01x: R #FirstPac;
LAR1 P##IN;
L LW [AR1,P#1.0]; //Data length
T #RemLen; //Remaining Data
L B#16#4;
<=D;
L W#16#FF01; //Too few char received
SPB E001; //Error
//----------
L LB [AR1,P#3.0]; //First char
XOW W#16#2; //Expected STX
L W#16#FF02; //First char was not STX
SPN E001;
//----------
L LB [AR1,P#5.0]; //Separator
L #Sep;
==D;
= #RID; //No Scanner ID
SPB ICID;
L B#16#FF; //No ScanID
T #ReaderID;
L #RemLen; //Rcv len
SPA TCod;
ICID: L LB [AR1,P#4.0]; //Reader ID
T #ReaderID;
L #RemLen; //Rcv len
+ -2; //ScanID and Separator are not copied
TCod: + -2;
T #CodLen; //STX and ETX are not copied
//---------- Decode ANY descriptor (DATA)
//---------- Init Dest
LAR1 AR2; //Multi instance
L P##Data;
+AR1;
L DIW [AR1,P#0.0]; //ANY: 16#10 - DataType (2 -> Byte)
XOW W#16#1002;
O ==0;
L DIW [AR1,P#0.0]; //ANY: 16#10 - DataType (3 -> Char)
XOW W#16#1003;
O ==0;
L W#16#FF04; //Wrong DATA Parameter: BYTE or CHAR expected
SPBN E001;
L DIB [AR1,P#6.0];
XOW W#16#84;
L W#16#FF05; //Wrong DATA Parameter: DB expected
SPN E001;
L #CodLen;
L DIW [AR1,P#2.0];
T #DatLen; //ANY: Repetition factor
>D;
L W#16#FF06; //Buffer too Small or Scanned Code too long...
SPB E001;
R #Flush; //-> Copy the data
L DIW [AR1,P#4.0]; //ANY: DB Number
T #DatDBNR;
L DID [AR1,P#6.0]; //ANY: Area - Offset
T #DatPtr;
//---------- Init Source
LAR1 P##IN;
U #RID;
SPB WRID;
+AR1 P#4.0; //First byte of the Barcode (Remove STX)
L B#16#1C; //28 Max
SPA Cpy;
WRID: +AR1 P#6.0; //First byte of the Barcode (Remove STS, ScanID and Separator)
L B#16#1A; //26 Max
SPA Cpy; //Copy
NETWORK
TITLE =Wait for Next Packet(s)
//*ODIL_ID:1897_5*
S02: U #Flush; //Do not Copy
SPB Upd;
LAR1 P##IN;
+AR1 P#1.0; //First Byte in IN
L B#16#1F; //31 Max
NETWORK
TITLE =Copy
//ACCCU 1 contains the size of the IN Area
//AR1 contains the address of the IN Area
//*ODIL_ID:1897_6*
//
Cpy: T #LoopCnt; // L #RemLen //Including ETX
L #RemLen;
TAK;
-D; //Rem Len - INSize (26, 28, or 31)
U >0;
= #NLastPac;
SPP IL;
L #RemLen;
UN #RID;
SPB T;
+ -2;
T: + -2;
T #LoopCnt;
L B#16#0;
IL: T #RemLen;
TAR2 #BackAR2; //Backup AR2
L #DatDBNR; //Open DB
T #DBNR;
AUF DB [#DBNR];
L #DatPtr;
LAR2; //AR2: DatPtr
L #LoopCnt;
LOOP: L LB [AR1,P#0.0]; //L IN[AR2]
T DBB [AR2,P#0.0]; //T DBB[AR1]
+AR1 P#1.0;
+AR2 P#1.0;
POP; //ACCU1 = LoopCnt
LOOP LOOP;
TAR2;
LAR2 #BackAR2; //Restore AR2//ACCU1 = AR1
T #DatPtr; //Ready for the next copy
U #NLastPac;
SPB Cpyx;
//---------- Last Packet
L LB [AR1,P#0.0]; //Last
XOW W#16#3; //Expected ETX
L W#16#FF03;
SPN E001;
= #NDR; //New Data Received
L B#16#0;
T #Diag.CodeDef;
//---------- Prepare the Fill
L #DatPtr;
LAR1;
L #DatLen; //Buffer Length
L #CodLen;
T #Len;
-D;
SPZ Cpyx;
Fill: L B#16#20; //Space
T DBB [AR1,P#0.0];
+AR1 P#1.0;
POP; //ACCU1 = LoopCnt
LOOP Fill;
Cpyx: SPA Upd;
NETWORK
TITLE =Errors
//---------- SFC 14 Error
//*ODIL_ID:1897_7*
//
E000: L #Ret;
T #Diag.CodeDef;
SPA END;
//---------- Parameterization Error - Expected STX - Expected ETX
E001: S #Flush; //Do not copy the input data
T #Diag.CodeDef;
SPA Upd;
//---------- Module Error
E002: LAR1 P##IN;
L LW [AR1,P#1.0];
T #Diag.CodeDef;
L B#16#0;
T #OutCoord;
SPA Upd;
NETWORK
TITLE =Output
//*ODIL_ID:1897_8*
Upd: L #LADDR; //Module address (Byte)
SLD 3; //Make bit Ptr (Multiply by 8)
LAR1;
L #OutCoord;
T PAB [AR1,P#0.0];
NETWORK
TITLE =End
//*ODIL_ID:1897_9*
END: L #Diag.CodeDef;
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_S120_S"
TITLE =BF_S120 : Commande d'un axe S120 en mode Positionnement
//***************************************************************************
//*                           FB "S120_S"                                  *
//*   ASSURE le PILOTAGE des POSITIONNEUR de Manutention Standard    *
//*      INSURE the ORDER of the SERVO DRIVE of Standard Handling       *
//***************************************************************************
//
//( In English further below)
//DESCRIPTION:
//************
//   LA FB
//   - gere les differents type de moteurs  :
//        Type_Motor = 1 moteur synchrone(brusless)
//        Type_Motor = 2 moteur asynchrone avec frein
//        Type_Motor = 3 autre moteur
//
//    - gere differents modes de pilotages :
//        MODE_Pilot =1 : pilotage par bloc ( les cotes sont dans le variateur)
//        MODE_Pilot =2 : pilotage par API ( les cotes sont dans l'automate)
//
//     - gere differents modes de prise de reference:
//        MODE_ref =1 : prise de reference du codeur absolu avec sauvegarde
//        MODE_ref =2 : prise de reference codeur sans sauvegarde ( incrementale)
//
//MISE EN OEUVRE :
//***************
//Pour plus de details voir la documentation Word GE03.J0.013
//
// - configuration logiciel minimum :
//STEP 7 V5.4 SP2
//S7 Distributed SAFETY V5.4 SP3
//SIMATIC DRIVE ES BASIC V5.4 SP2
//STARTER V4.1.2
//
//Pour plus de renseignement voir votre charger d'affaire automatisme
//
//PARAMETRAGE :
//********************
//
//- MODE_Ref  : Ce parametre correspond au mode de referencement du codeur
//       = 1 : pour referencer un codeur absolu
//       = 2 : prise origine codeur incremental a l'arret
//- MODE_Pilot: Ce parametre correspond au mode de pilotage du variateur
//       =1 : pilotage du deplacement par numero de bloc ( les
//                 cotes sont contenus dans le variateur) . 64 blocs maximun
//       =2 : pilotage du deplacement par automate ( les cotes et vitesse
//                    sont envoyees au variateur par l'automate). Les cotes sont
//                    dans l'automate
//- Type_Motor: Ce parametre correspond au type de moteur utilise
//               =1 : moteur brusless frein 24V
//               =2 : moteur asynchrone 400V (permet le contrôle du relais de
//                    frein)
//               =3 : autre type de moteur
//- T_Stop    : Utiliser pour Type_moteur =2
//            Ce parametre permet de couper l'asservissement de l'axe si l'axe
//est
//            a l'arret au bout du temps T_Stop. Si un ordre de deplacement est
//
//            demande par pilotage.Start ou pilotage.jog alors l'axe se remet
//sous
//            asservissement. Cela permet d'eviter un echauffement du moteur.
//            Exemple : T#10S
//
//CODES des DEFAUTS:
//***********
//   Valeur associee a la sortie diag.codedef :
//2 =  Defaut point de reference non definie
//4  = Defaut surcourse logiciel negative
//8 =  Defaut surcourse logiciel positive
//16 = Defaut surcourse materiel negative
//32 = Defaut surcourse materiel positive
//64 = Defaut variateur
//128= Alarme commande numero de bloc inexistant
//256= Alarme limitation de vitesse a 0
//512= Alarme temperature moteur/variateur
//1024= Defaut relais de frein
//2048= Defaut temperature resistance de freinage
//4096= Defaut parametrage FB ou profinet
//
//
//
//************************** ENGLISH INFORMATION  ****************************
//
//DESCRIPTION :
//**************
//    The FB :
//     - Manages the different motor types :
//        Type_Motor = 1 synchronous motor (brusless)
//        Type_Motor = 2 asynchrone motor with brake
//        Type_Motor = 3 others moteurs
//
//     - Manages the different order modes :
//        MODE_Pilot =1 : order by blocs ( positions are in the drive )
//        MODE_Pilot =2 : order by PLC ( the positions are in the PLC)
//
//     - Manages the different referencies modes:
//        MODE_ref =1 : referency of absolute encoder with saving
//        MODE_ref =2 : referency of incremental encoder with saving
//
//    Drive (Variator)
//- Manage a second axis with TOR command in option.
//- G120D drive box allows to link 2 sensors of positions
//- It to has 4 orders of possible movements following the mechanical stresses of
//the installation.
//
//OPERATING :
//************
//For more details see the Word Documentation GE03.J0.013
//- Minimum software configuration:
//STEP 7 V5.4 SP2
//S7 Distributed SAFETY V5.4 SP3
//SIMATIC DRIVE ES BASIC V5.4 SP2
//STARTER V4.1.2
//
//For more information contact your Automatism Business charging (CAMI RENAULT)
//
//FAULT CODE :
//*************
//Values of Diag.codedef output diag.codedef of FB:
//
//2 =  Set point reference not difined
//4  = negative software limit fault
//8 =  positive software limit fault
//16 = negative hardware limit fault
//32 = positive hardwarelimit fault
//64 = Drive fault
//128= Non-existent block order Alarm
//256= override overtaking alarm
//512= motor/drive temperature Alarm
//1024= Brake relay fault
//2048= Defaut temperature braking resitance fault de freinage
//4096= Profinet or setting communication Fault
//
//******************************* _ODIL_ID_ *********************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 78
//Dernier ID mis en oeuvre / Last ID implemented : 1892_78
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'VAR'
VERSION : 2.6
VAR_INPUT
  S120_IO_add : INT;	//IO drive Start addresse / Debut Adresse IO dans HWconfig
  S120_Diag_add : DINT;	//Diagnostic addresse (HW config)/adresse de diagnostique (HWconfig)
  S120_DriveObjectID : INT;	//Number starter drive object/numero de l'entrainement dans starter
  In_Fonct : STRUCT	//Input word /Mot d'entree de la fonction
    CRFR : BOOL;	//brake relay Ctrl (asynchronous motor)/Ctrl relais de frein (moteur asynchrone)
    CTRF : BOOL;	//temperature brake resistor Ctrl /Ctrl  temperature de la resistance de freinage
  END_STRUCT ;
  SecuActif : BOOL;	//Safety information / Information de securite
  MODE_ref : INT;	//referency encoder mode /Mode de referencement du codeur
  MODE_Pilot : INT;	//Type control mode /Mode de pilotage
  Type_Motor : INT;	//Motor type /Type de Moteur raccorde au variateur
  Pilotage : STRUCT	//Epos Order structure/stucture de pilotage du positionneur
    STOP_Marche : BOOL;	//Stop enable drive /(Arret Commande marche du variateur
    STOP_Move : BOOL;	//Stop Move axis /Annulation du deplacement en cours
    Inter_Move : BOOL;	//Movement interruption /Interruption du deplacement
    Prise_Ref : BOOL;	//Start order referency coder/ Commande prise de reference du codeur
    JOG_AV : BOOL;	//Order JOG plus /Commande Jog avant de l'axe
    JOG_AR : BOOL;	//Order jog minus/Commande Jog moins de l'axe
    START : BOOL;	//Order Start of the movement/Commande depart du deplacement
    FFR : BOOL;	//Brake oder forcing / commande forcage frein
    Limit_Vitesse : INT;	//Override movement /Limitation de vitesse de deplacement
    MovePos : DINT;	//MDI position /Position de deplacement en mode MDI
    MoveSpeed : DINT;	//MIDI speed /Vitesse de deplacement en mode MDI
    MoveAcc : INT;	//MDI acceleration / Acceleration de deplacement en mode MDI
    MoveDec : INT;	//MDI deceleration /Deceleration  de deplacement en mode MDI
    MoveMode : WORD;	//MDI moving mode /Mode de deplacement absolu ou relatif en MDI
    Num_Bloc : INT;	//Block number in block mode /Numero de bloc de deplacement en mode Bloc
    Mode_Poursuite : BOOL;	//tracking mode activation /activation du Mode poursuite
    DesactLimitSoft : BOOL;	//Limite software desactivated/ surcourse logiciel desactive
  END_STRUCT ;
  Iadf : BOOL;	//Fault Reset /Acquitement defauts
  Tps_Stop : TIME  := T#20S;	//Time to Delay the drive stop / Tempo d'arret du variateur
END_VAR
VAR_OUTPUT
  F_AR : BOOL;	//Drive safety power cut with Resetting Info/Info. de coupure safety  avec rearm.
  Def : BOOL;	//Fault SMPLOC / Defaut SMPLOC
  Ala : BOOL;	//Alarm / Alarme
  Diag : STRUCT	//Diagnostic structure/Structure de diagnostic
    Def : BOOL;	//General fault bool for IHMP /Bit de defaut general pour IHMP
    Ala : BOOL;	//Alarm bool for IHMP / Bit d'alarme pour IHMP
    Numliste : INT  := 57;	//IHMP list number = 57 / N° de liste IHMP = 57
    Codedef : INT;	//Fault code /Code de defaut pour IHMP
    Drive_error_number : INT;	//Drive fault number /Numero de defaut variateur (r2131)
    RD_PZD : STRUCT	//telegram 111 reading / lecture du telegramme 111
      ZSW1 : STRUCT	//Drive Status word 1/mot d'etat 1 du variateur
        NoDeviation_setp_act : BOOL;	//No deviation with set position /Ecart de trainage dans tolerance (1=oui, 0=non)
        PLC_control : BOOL;	//Control asked by PLC / Pilotage demande par l'API
        In_Position : BOOL;	//In position / Position cible atteinte
        Ref_Point_Set : BOOL;	//Referency point set defined / Point de reference defini
        Ack_bloc_Pos : BOOL;	//Acknowledgement the travel bloc/Acquittement bloc de deplacement
        Standstill : BOOL;	//Drive in standstill/Entrainement a l'arret
        Drive_Accel : BOOL;	//Drive in acceleration / Entrainement en acceleration
        Drive_Decel : BOOL;	//Drive in deceleration / Entrainement en deceleration
        Ready_to_Enable : BOOL;	//Drive ready to enable / Axe pret pour enclenchement
        Drive_Ready : BOOL;	//Drive ready to operation / Axe pret a fonctionner
        Drive_Enable : BOOL;	//Operation enable /Fonctionnement debloque
        Fault : BOOL;	//Axis  Fault / Defaut axe
        No_Off2 : BOOL;	//No off 2 active(Natural deceleration/Pas arret 2 actif (ralentissement_naturel)
        No_Off3 : BOOL;	//No off 3 active (Quick stop) /Pas arret 3 actif (arret_rapide)
        ON_inhibit_active : BOOL;	//Inibition (interlock blocking) active / Blocage d'enclenchement actif
        Warning : BOOL;	//Warning /Alarme_Presente
      END_STRUCT ;
      POS_ZSW1 : STRUCT	//Epos status word 1 / positionnement mot d'etat 1
        Negative_Came_act : BOOL;	//Negative came active (1=yes,0=no)/surcourse d'arret moins activee(1=oui,0=non)
        Positive_Came_act : BOOL;	//Positive came active (1=yes,0=no)/surcourse d'arret plus activee (1=oui, 0=non)
        Bico_Output_bit0 : BOOL;	//biconector output bit 0 / Sortie binecteur bit 0
        Bico_Output_bit1 : BOOL;	//biconector output bit 1 / Sortie binecteur bit 1
        Fly_Ref_active : BOOL;	//Fly referency active / Referencement au vol active
        Bico_Output_bit2 : BOOL;	//biconector output bit 2 /Sortie binecteur bit 2
        Bico_Output_bit4 : BOOL;	//biconector output bit 4 /Sortie binecteur bit 4
        MDIPos_act : BOOL;	//MDI Position active / Mode de position MDI actif
        Num_Bloc_act : BYTE;	//Number bloc active / Numero de Bloc actif
      END_STRUCT ;
      POS_ZSW2 : STRUCT	//Epos status word 2 / positionnement mot d'etat 2
        Pos_inf_came_1 : BOOL;	//Info position came 1
        Pos_inf_came_2 : BOOL;	//Info position came 2
        Out1_BlockPos : BOOL;	//Output 1 position block  / Sortie direct 1 via bloc de deplacement
        Out2_BlockPos : BOOL;	//Output 2 position block / Sortie direct 2 via bloc de deplacement
        FixStop_reached : BOOL;	//Fixstop reached / Butee atteinte
        FixStop_TorqueReached : BOOL;	//Fixstop/Torque reached / Butee/couple de serrage atteinte
        TravelFixStop_active : BOOL;	//Travel FixStop  actived / Accostage butee active
        MoveOrder_active : BOOL;	//Move order active / Ordre de deplacement active
        TrackingMode_act : BOOL;	//Tracking mode active (1=yes,0=no) / Mode poursuite actif (1=oui,0=non)
        VelocityLimit_act : BOOL;	//Velocity limitation active / Limitation de vitesse actif
        Consigne_stopped : BOOL;	//Consigne Stopped / Consigne arrete
        Setpos_Outside_window : BOOL;	//Set position (axis) outside the window / Axe en dehors de la fenetre
        Move_forward : BOOL;	//Axis in forward movement Axe se deplace en avant
        Move_backward : BOOL;	//Axis in backforward movement / Axe se deplace en arriere
        SoftLimitMinus_active : BOOL;	//Software limite minus active / Limite butee logiciel negative atteinte
        SoftLimitPlus_active : BOOL;	//Software limite plus minus active / Limite butee logiciel positif atteinte
      END_STRUCT ;
      ZSW2 : STRUCT	//Drive Status word 2 /mot d'etat 2 du variateur
        TravelFixStop_active : BOOL;	//Travel FixStop active / Accostage de butee actif
        reserve9 : BOOL;	//Spare / reserve
        Pulse_enable : BOOL;	//Pulse enable / Impulsion debloquees
        Motor_ChangeOver : BOOL;	//Motor change over/ changement de moteur active
        Res12 : BOOL;	//Spare / reserve
        Res13 : BOOL;	//Spare / reserve
        Res14 : BOOL;	//Spare / reserve
        Res15 : BOOL;	//Spare / reserve
        DDS_Bit_0_Act : BOOL;	//Drive data set Bool 0 active / Jeu de Parametre Bit 0 actif
        DDS_Bit_1_act : BOOL;	//Drive data set Bool 1 active /Jeu de Parametre Bit 1 actif
        DDS_Bit_2_act : BOOL;	//Drive data set Bool 2 active /Jeu de Parametre Bit 2 actif
        DDS_Bit_3_act : BOOL;	//Drive data set Bool 3 active /Jeu de Parametre Bit 3 actif
        DDS_Bit_4_act : BOOL;	//Drive data set Bool 4 active /Jeu de Parametre Bit 4 actif
        AlarmClass_Bit0 : BOOL;	//Alarm class bit 0 / Classe d'alarme bit 0
        AlarmClass_Bit1 : BOOL;	//Alarm class bit 1 / Classe d'alarme bit 1
        Parking_axis_act : BOOL;	//Parking axis active / Axe en stationnement actif
      END_STRUCT ;
      MELDW : STRUCT	//Application status word /mot d'etat  application
        DeviationSpeed_setp : BOOL;	//Deviation speed / Ecart consigne-mesure vitesse dans tolerance
        reserve9 : BOOL;	//Spare /reserve
        reserve10 : BOOL;	//Spare /reserve
        Controler_enable : BOOL;	//Controller enable / Deblocage du regulateur
        Drive_ready : BOOL;	//Drive ready / Entrainement pret
        Pulse_enable : BOOL;	//Pulse enable / Impulsions debloquees
        BrakeHold_Open : BOOL;	//brake hold Opened/Frein de maintient dessere
        res15 : BOOL;	//Spare /reserve
        Ramp_completed : BOOL;	//Acel/Decel Ramp competed / Acceleration/deceleration  terminee
        TorqueInf_to_p2194 : BOOL;	//Torque inferior to threshold torque value/Couple inf. au Seuil couple 2 p2194
        SpeedInf_to_p2161 : BOOL;	//Speed inferior to threshold speed value/Vitesse inf. au seuil vitesse 3 p2161
        SpeedInf_to_p2155 : BOOL;	//Speed inferior to threshold speed value/Vitesse inf. au seuil vitesse 2 p2155
        Reserve4 : BOOL;	//Generateur_Rampe_Inactif
        Reserve5 : BOOL;	//Spare /reserve
        AlarmTemp_Motor : BOOL;	//Motor temperature Alarm / Alarme surchauffe du moteur
        AlarmTemp_PowerMod : BOOL;	//Power module temperature Alarm / Alarme surcharge thermique partie puissance
      END_STRUCT ;
      Xist_A : DINT;	//Drive position axis /position reelle axe
      Nist_A : DINT;	//Actual drive Speed / Vitesse reel de l'axe
      FAULT_CODE : WORD;	//Fault Code /code de defaut
      WARM_CODE : WORD;	//Alarm code / code alarme
      reserve : WORD;	//Spare / reserve
    END_STRUCT ;
    WR_PZD : STRUCT	//telegram 111 writting /Ecriture du telegramme 111
      STW1 : STRUCT	//Status Word1 / Mot d'etat 1
        Jog_1 : BOOL;	//Pos : Jog 1 (negative direction ) / Jog 1 (sens negatif)
        Jog_2 : BOOL;	//Pos : Jog 2 (Positive direction ) / Jog 2 (sens positif )
        PLC_Control : BOOL;	//Control by PLC / Pilotage par API
        Reference_Start : BOOL;	//Pos : referencing start / depart prise de reference
        Res12 : BOOL;	//Sapre / Reserve
        Ext_bloc_change : BOOL;	//Pos : External block change / changement de bloc externe
        Brake_order : BOOL;	//brake oder /Commande frein
        Safe_test : BOOL;	//Test Safety / test de la fonction securite
        On_off1 : BOOL;	//Start_Stop 1 (Start=1)/ Marche_arret 1 ( signal a 1 marche)
        No_Off2 : BOOL;	//No stop 2 / Pas d'Arret 2
        No_Off3 : BOOL;	//No stop 3 / Pas d'Arret 3
        Operation_enable : BOOL;	//Operation enable / Debloquer le fonctionnement
        Reject_task : BOOL;	//Pos : reject task of movement / annuler requete de deplacement ( signal =1 )
        Intermediate_Stop : BOOL;	//Pos : intermediate stop / arret intermediaire ( signal a 1 marche)
        Activate_travel : BOOL;	//Pos : activate the travel /activer contrat de deplacement
        Ack_Fault : BOOL;	//Reset Fault/ Acquittement defaut
      END_STRUCT ;
      POS_STW1 : STRUCT	//Select_BLOC
        MDI_TypePos : BOOL;	//MDI :positionning Type /Type de positionnement (1 absolu, 0 relatif)
        MDI_Dir_Positive : BOOL;	//MDI : positive direction selection / selection direction positive
        MDI_Dir_Negative : BOOL;	//MDI : negative direction selection / selection direction negative
        Res11 : BOOL;	//Spare / reseve
        MDI_ModeValidation : BOOL;	//MDI : transfert type selection /selection mode de validation( 0 sur front
        Res13 : BOOL;	//Spare / reserve
        MDI_Setting_Config : BOOL;	//MDI : setting up selection / configuration selection
        ModeMDI_selection : BOOL;	//MDI : MDI selection / selection du mode MDI
        Selec_Num_Bloc : BYTE;	//MDI : Block number selection / Selection du Num de bloc
      END_STRUCT ;
      POS_STW2 : STRUCT
        Selec_Type_Ref : BOOL;	//Referencing type selection / Selection du type de referencement
        Start_direction_Ref : BOOL;	//Search for direction: start direction /Sens de depart Prise de reference
        Sensor_Ref : BOOL;	//Search for direction: selecting measuring/Prise de ref : selection du detecteur
        Falling_edge_Ref : BOOL;	//Search for direction: edge/Prise de ref : selection du traitement du front
        Res12 : BOOL;	//Spare/Reserve
        Res13 : BOOL;	//Spare/Reserve
        Active_SoftwareLimit : BOOL;	//Software limit switch activation / Activation des butees logicielles
        Active_SwitchLimit : BOOL;	//Hardware limit switch activation / Activation des surcourses electriques
        Selec_TrackMode : BOOL;	//Select tracking mode / Selection du mode de poursuite
        Set_ReferencePoint : BOOL;	//set reference point / Definir point de reference
        Search_ReferenceCam : BOOL;	//Search for reference by came /Prise de reference par came
        Res3 : BOOL;	//Spare/Reserve
        Res4 : BOOL;	//Spare/Reserve
        Jog_Incremental : BOOL;	//Jog incremental
        Res6 : BOOL;	//Spare/Reserve
        Res7 : BOOL;	//Spare/Reserve
      END_STRUCT ;
      STW2 : STRUCT	//Mot d'etat 2
        Res8 : BOOL;	//Spare/Reserve
        Res9 : BOOL;	//Spare/Reserve
        Res0 : BOOL;	//Spare/Reserve
        ChangeOver_Motor : BOOL;	//Motor change over /Changement de moteur
        Res12 : BOOL;	//Spare/Reserve
        Res13 : BOOL;	//Spare/Reserve
        Res14 : BOOL;	//Spare/Reserve
        Res15 : BOOL;	//Spare/Reserve
        Selec_DDS_Bit0 : BOOL;	//Drive data set selection / Selection du jeu de parametres  DDS bit0
        Selec_DDS_Bit1 : BOOL;	//Drive data set selection / Selection du jeu de parametres  DDS bit1
        Selec_DDS_Bit2 : BOOL;	//Drive data set selection / Selection du jeu de parametres  DDS bit2
        Selec_DDS_Bit3 : BOOL;	//Drive data set selection / Selection du jeu de parametres  DDS bit3
        Selec_DDS_Bit4 : BOOL;	//Drive data set selection / Selection du jeu de parametres  DDS bit4
        Res5 : BOOL;	//Spare/Reserve
        Res6 : BOOL;	//Spare/Reserve
        Selec_Parking_Axis : BOOL;	//Parking axis selection / Selection axe en stationnement
      END_STRUCT ;
      OVERRIDE : WORD;	//Velocity override/ limitation de vitesse
      MDI_TARGPOS : DWORD;	//MDI : target Position set point / MDI position
      MDI_VELOCITY : DWORD;	//MDI : velocity set point / MDI vitesse
      MDI_ACC : WORD;	//MDI : acceleration override / MDI acceleration
      MDI_DEC : WORD;	//MDI : deceleration override / MDI deceleration
      User : WORD;	//User spare/ reserve utilisateur
    END_STRUCT ;
    IhmDefRef : BOOL;	//Drive Fault coder no referency / Defaut axe non reference
    IhmDefSLmoins : BOOL;	//Software negative limit Fault/ Defaut surcourse logiciel negative
    IhmDefSLplus : BOOL;	//Software positive  limite Fault / Defaut surcourse logiciel positive
    IhmDefSMmoins : BOOL;	//hardware negative limit Fault/Defaut surcouse materielle negative
    IhmDefSMplus : BOOL;	//Hardware positive limit Fault /Defaut surcouse materielle positive
    IhmDefVar : BOOL;	//Drive Fault /Defaut variateur
    IhmDefBloc : BOOL;	//Block number non-existent Fault / Defaut numero de bloc inexistant
    IhmDefFrein : BOOL;	//Brake motor Fault /Defaut frein moteur
    IhmDefResistor : BOOL;	//Brake resistance Fault /Defaut resistance de freinage
    IhmDefCom : BOOL;	//Profinet Communication Fault/ Defaut communication Profinet
    IhmAlaOverride : BOOL;	//alarm Override at 0 /Alarme limite de vitesse a 0
    IhmAlaTempVar : BOOL;	//Motor temperature Alarm / Alarme temperature Moteur
  END_STRUCT ;
  Axe_Enable : BOOL;	//Drive enable/ Axe asservi
  In_Pos : BOOL;	//Drive in Position /axe en position
  In_Ref : BOOL;	//Set point reference defined / point de reference definie
  Pos_Axe : DINT;	//Drive position Feedback /retour position de l'axe
  F_CRFR : BOOL;	//brake motor feedback (safety program/pilotage frein moteur (programme safety)
END_VAR
VAR
  Adr_IO_Word : WORD;	//IO addresse in WORD format /IO adresse au format WORD
  Mem_bloc_exe : INT;	//Memory of the exucuted block number /Memoire du numero de bloc execute
  Mem_Ref : BOOL;	//Memory Referency in execute /Memoire une prise de reference en cours
  Mem_InMov : BOOL;	//Memory Axis in movement / Memoire axe en mouvement
  Frm_trsf : BOOL;	//Rising edge of block number transfert / Front montant transfert numero de bloc
  Frm_Start : BOOL;	//Rising edge start movement/ Front montant debut deplacement
  Frm_Inpos : BOOL;	//Rising edge axis in position/Front montant axe en position
  Frm_ResetInpos : BOOL;	//Rising edge reset memory in position/Front montant reset memroire en position
  Frd_acqBloc : BOOL;	//Falling edge acknowledgement block/Front descendant acquittement bloc
  Frm_RefAbs : BOOL;	//Rising edge absolute codeur referency/Front montant reference codeur absolu
  Frm_DynamiSafety : BOOL;	//Rising edge dynamisation safety test /Front montant dynamisation (test safety)
  Frm_DefBloc : BOOL;	//Rising edge block number fault /Front montant defaut numero de bloc
  Frm_InMov : BOOL;	//Rising edge axis in movement/Front montant axe en deplacement
  ECRP2507 : WRREC;	//Writting the drive parameter P2507 / FB Ecriture du parametre variateur P2507
  ECR_P2507 : STRUCT	//Writting parameter Format P2507/Format d'ecriture du parametre P2507
    Request_reference : BYTE  := B#16#1;	//Reference de requete
    Request_ID : BYTE  := B#16#2;	//Lecture parametre = 1; ecriture parametre = 2
    Drive_object_ID : BYTE  := B#16#2;	//Numero de l'objet (Servo ou CU ou etc...) exemple ID=2=servo rouge
    No_of_parameters : BYTE  := B#16#1;	//Nombre de parametres a ecrire (1..39) limite par la longueur du Telegramme DPV1
    Parameter_P2507 : STRUCT
      Attribute : BYTE  := B#16#10;	//valeur = 10; description = 20; texte = 30
      No_of_elements : BYTE  := B#16#1;	//nombre d'elements (1..117) limite par la longueur du Telegramme DPV1
      Parameter_number : WORD  := W#16#9CB;	//parameter P2507; 2507 dec = 9CB hex
      Subindex : WORD;	//index 0
    END_STRUCT ;
    Valeur_P2507 : STRUCT	//Valeur du parametre 01
      Format : BYTE  := B#16#3;	//Format du parametre P2507 = Integer16 (voir la list des parametres)
      No_of_values : BYTE  := B#16#1;	//Nombre de valeurs = nombre d'elements
      Value : INT  := 2;	//Valeur du parametre P2507
    END_STRUCT ;
  END_STRUCT ;
  ECRPP977 : WRREC;	//Writting the drive parameter P977 / FB Ecriture du parametre variateur P977
  ECR_P977 : STRUCT	//Writting parameter Format P977/Format d'ecriture du parametre P977
    Request_reference : BYTE  := B#16#1;	//Reference de requete
    Request_ID : BYTE  := B#16#2;	//Lecture parametre = 1; ecriture parametre = 2
    Drive_object_ID : BYTE  := B#16#1;	//Numero de l'objet (Servo ou CU ou etc...) exemple ID=2=servo rouge
    No_of_parameters : BYTE  := B#16#1;	//Nombre de parametres a ecrire (1..39) limite par la longueur du Telegramme DPV1
    Parameter_P971 : STRUCT
      Attribute : BYTE  := B#16#10;	//valeur = 10; description = 20; texte = 30
      No_of_elements : BYTE  := B#16#1;	//nombre d'elements (1..117) limite par la longueur du Telegramme DPV1
      Parameter_number : WORD  := W#16#3D1;	//parameter P977; 977 dec = 3D1 hex
      Subindex : WORD;	//index 0
    END_STRUCT ;
    Valeur_P977 : STRUCT	//Valeur du parametre 01
      Format : BYTE  := B#16#6;	//Format du parametre P977 = unsigned16 (voir la list des parametres)
      No_of_values : BYTE  := B#16#1;	//Nombre de valeurs = nombre d'elements
      Value : INT  := 1;	//Valeur du parametre P977
    END_STRUCT ;
  END_STRUCT ;
  T_P2507 : TON;	//Writting parameter P2507 delay / Temps attente ecriture du P2507
  T_RFR : TON;	//Brake relay timer / Tempo Relais frein
  Seq_RefCodeurAbs : STRUCT	//Step of absolute coder referency /Sequence du referencement du codeur absolu
    Etape0 : BOOL;	//Step 0 writting parameter P2507 / Etape 0 : emission de la requete P2507
    Etape1 : BOOL;	//Step 1 writting paramter P977 /Etape 1 : ecriture du parametre P977
    Etape2 : BOOL;
    Etape3 : BOOL;
    Etape4 : BOOL;
    Etape5 : BOOL;
  END_STRUCT ;
  Frm_Axe_Enable : BOOL;	//Rising edge axe enable/ Front montant axe enable
  MFrm_Inpos : BOOL;	//Memory rising edge axe in pos state off/ Memoire front montant axe en position
  M_CrInpos : BOOL;	//Memory condition reset in pos/ Memoire condition reset in pos
  T_StopAxe : TON;	//Timer Stop power axis /tempo coupure puissance axe
  Tps_MiniStop : TIME  := T#500MS;	//mininum time to stop / temps minimum
  DStop : BOOL;	//Asking stop power axis / demande coupure puissance
  DRestart : BOOL;	//Asking Restart after a stoppower / demande un redemarrage de l'axe
  ImpTestsafety : TP;	//Safety test pulse / impulsion test safety
  Simu : BOOL;	//Bit for virtual simulation/ bit pour le logiciel de simulation SIMAC
END_VAR
VAR_TEMP
  Mode_Bloc : BOOL;	//Drive in Block mode /variateur en Mode bloc
  Mode_MDI : BOOL;	//Drive in MDI mode/variateur en Mode MDI
  Mode_MDIactif : BOOL;
  NumBloc_OK : BOOL;	//Number bloc ok /Numero de bloc ok
  FinTrsfBloc : BOOL;	//End of Number Block transfert / Fin de transfert du numero de bloc
  Retval_SFC14 : INT;	//return value SFC14 / Retval_SFC14
  Retval_SFC15 : INT;	//return value SFC15 / Retval_SFC15
  Retval_SFC21 : INT;	//return value SFC21 / Retval_SFC21
  Def_Lect_S120 : BOOL;	//Telegram S120 Reading Fault /Defaut lecture telegramme S120
  Def_Ecrit_S120 : BOOL;	//Telegram S120 writting Fault /Defaut ecriture telegramme S120
  Def_LimitOverride : BOOL;	//Defaut depassement des limites de l'override
  Correction_Vitesse : DINT;	//Formating override / Mise au format de la limitation de vitesse
  Add_SFB53 : DWORD;	//Modification of addresse Format SFB53/Modification du format de l'adresse SFB53
  Status_SFB53 : DWORD;	//Status of SFB53/ Etat de la SFB53
  Error_SFB53 : BOOL;	//Error of SFB53 /Erreur du traitement de la fonction SFB53
  Busy_SFB53 : BOOL;	//SFB53 is busy / SFB53 en cours de traitement
  Done_SFB53 : BOOL;	//SFB53 is done/Traitement effectue par la SFB53
  Brake_order : BOOL;	//Brake order/ Commande de frein
  reset : INT;	//reset value of data/ valeur de remise a 0 des donnees
  Tps_FinalStop : TIME;	//Time to stop axis after the standstill / temps pour coupure puissance de l'axe
  AJog_AV : BOOL;	//authorisation Jog+/autorisation jog +
  AJog_AR : BOOL;	//authorisation Jog-/autorisation jog -
END_VAR
BEGIN
NETWORK
TITLE =Conversion adresse IO S120 en Integer vers Word
//IO addresse S120 from interger in WORD format
//*ODIL_ID:1892_1*
//
L #S120_IO_add;
T #Adr_IO_Word;
NOP 0;
NETWORK
TITLE =Lecture du telegramme d'entree du S120 pour la simulation
//reading the telegram 111 of the Drive for simulation
//*ODIL_ID:1892_2*
//
U #Simu;
SPBN SIME;
//===============================================================================
L #S120_IO_add; // IO adresse du S120
SLD 3;
LAR1;
//===============================================================================
L EW [AR1,P#0.0];
T DIW [AR2,P#56.0]; // -> ZSW1
//===============================================================================
L EW [AR1,P#2.0];
T DIW [AR2,P#58.0]; // -> POS_ZSW1
L EW [AR1,P#4.0];
T DIW [AR2,P#60.0]; // -> POS_ZSW2
L EW [AR1,P#6.0];
T DIW [AR2,P#62.0]; // ZSW2
L EW [AR1,P#8.0];
T DIW [AR2,P#64.0]; //MELDW
L ED [AR1,P#10.0];
T #Diag.RD_PZD.Xist_A; //Xist_A
L ED [AR1,P#14.0];
T #Diag.RD_PZD.Nist_A; //Nist_A
L EW [AR1,P#18.0];
T #Diag.RD_PZD.FAULT_CODE; //FAULT_CODE
L EW [AR1,P#20.0];
T #Diag.RD_PZD.WARM_CODE; //WARM_CODE
L EW [AR1,P#22.0];
T #Diag.RD_PZD.reserve; //WARM_CODE
L 0;
T #Retval_SFC14;
SPA JMPE;
SIME: NOP 0;
NETWORK
TITLE =lecture du telegramme 111 du variateur
//reading the telegram 111 of the Drive
//*ODIL_ID:1892_3*
//
CALL "DPRD_DAT" (
LADDR := #Adr_IO_Word,
RET_VAL := #Retval_SFC14,
RECORD := #Diag.RD_PZD);
NOP 0;
NETWORK
TITLE =retour saut pour le telegramme d'entree pour la simulation
//jump for the input telegram for virtual environement
//*ODIL_ID:1892_4*
//
JMPE: NOP 0;
NETWORK
TITLE =Defaut lecture fonction SFC14
//function SFC14 reading Fault
//*ODIL_ID:1892_5*
//
L #Retval_SFC14;
L 0;
<>I;
= #Def_Lect_S120;
NETWORK
TITLE =Remise a 0 des donnees lue du variateur
//Reset of the value read by drive
//*ODIL_ID:1892_6*
//
U(;
U #Def_Lect_S120;
SPBNB _001;
L 0;
T #reset;
SET;
SAVE;
CLR;
_001: U BIE;
);
SPBNB _002;
CALL "FILL" (
BVAL := #reset,
RET_VAL := #Retval_SFC21,
BLK := #Diag.RD_PZD);
_002: NOP 0;
NETWORK
TITLE =activation Pilotage par API
//PLC controle activate
//*ODIL_ID:1892_7*
//
ON #Diag.WR_PZD.STW1.PLC_Control;
O #Diag.WR_PZD.STW1.PLC_Control;
= #Diag.WR_PZD.STW1.PLC_Control;
NETWORK
TITLE =commande arret 2 / arret 3 du variateur
//Drive OFF2 /OFF3  order
//*ODIL_ID:1892_8*
//
U #Diag.RD_PZD.ZSW1.PLC_control;
= #Diag.WR_PZD.STW1.No_Off2;
= #Diag.WR_PZD.STW1.No_Off3;
NETWORK
TITLE =Marche 1  variateur :
//DRIVE : ON OFF1
//*ODIL_ID:1892_9*
//
U(;
U(;
UN #Diag.RD_PZD.ZSW1.Ready_to_Enable;
UN #Diag.WR_PZD.STW1.On_off1;
U #Diag.RD_PZD.ZSW1.Drive_Ready;
O #Diag.RD_PZD.ZSW1.Ready_to_Enable;
);
UN #Diag.RD_PZD.ZSW1.Fault;
O;
U #Diag.RD_PZD.POS_ZSW2.SoftLimitPlus_active;
U #Pilotage.JOG_AR;
O;
U #Diag.RD_PZD.POS_ZSW2.SoftLimitMinus_active;
U #Pilotage.JOG_AV;
);
U #Diag.RD_PZD.ZSW1.PLC_control;
U #In_Fonct.CTRF;
U #SecuActif;
U(;
U #Pilotage.STOP_Marche;
UN #DStop;
U #Diag.RD_PZD.ZSW1.Standstill;
ON #Diag.RD_PZD.ZSW1.Standstill;
);
UN #Pilotage.Mode_Poursuite;
= #Diag.WR_PZD.STW1.On_off1;
NETWORK
TITLE =deblocage du fonctionnement du variateur
//Drive operation enable
//*ODIL_ID:1892_10*
//
U #Diag.RD_PZD.ZSW1.Drive_Ready;
= #Diag.WR_PZD.STW1.Operation_enable;
NETWORK
TITLE =Variateur en mode Poursuite
//Drive in track mode
//*ODIL_ID:1892_11*
//
ON #SecuActif;
O;
U #Pilotage.Mode_Poursuite;
UN #Axe_Enable;
= #Diag.WR_PZD.POS_STW2.Selec_TrackMode;
NETWORK
TITLE =Forcage frein (ne pas utiliser pour un axe vertical)
//Brake order (Don't use for vertical axis)
//*ODIL_ID:1892_12*
//
U(;
O #Pilotage.Mode_Poursuite;
O #Pilotage.FFR;
);
UN #Axe_Enable;
UN #Def;
= #Diag.WR_PZD.STW1.Brake_order;
NETWORK
TITLE =Activation des surcources Logicielles & Materielles
//Software and hardware limites activated
//*ODIL_ID:1892_13*
//
U #Diag.RD_PZD.ZSW1.PLC_control;
= L 31.0;
U L 31.0;
U #Diag.RD_PZD.ZSW1.Drive_Enable;
= #Diag.WR_PZD.POS_STW2.Active_SwitchLimit;
U L 31.0;
UN #Pilotage.DesactLimitSoft;
= #Diag.WR_PZD.POS_STW2.Active_SoftwareLimit;
NETWORK
TITLE =Information Variateur asservi
//Drive ready and enable
//*ODIL_ID:1892_14*
//
U(;
O #Diag.RD_PZD.ZSW1.Ready_to_Enable;
O;
U #Diag.RD_PZD.POS_ZSW2.SoftLimitPlus_active;
U #Pilotage.JOG_AR;
O;
U #Diag.RD_PZD.POS_ZSW2.SoftLimitMinus_active;
U #Pilotage.JOG_AV;
);
U #Diag.RD_PZD.ZSW1.Drive_Ready;
U #Diag.RD_PZD.ZSW1.Drive_Enable;
U(;
ON #Diag.RD_PZD.ZSW1.Fault;
O;
U #Diag.RD_PZD.POS_ZSW2.SoftLimitPlus_active;
U #Pilotage.JOG_AR;
O;
U #Diag.RD_PZD.POS_ZSW2.SoftLimitMinus_active;
U #Pilotage.JOG_AV;
);
U #Diag.RD_PZD.ZSW1.No_Off2;
U #Diag.RD_PZD.ZSW1.No_Off3;
U #Diag.RD_PZD.ZSW1.PLC_control;
UN #Diag.IhmDefFrein;
= #Axe_Enable;
NETWORK
TITLE =Mise au format limite de vitesse 0 a 100%
//Modification of override format  0 a 100%
//*ODIL_ID:1892_15*
//
U(;
U(;
U(;
L #Pilotage.Limit_Vitesse;
L 0;
>I;
);
U(;
L #Pilotage.Limit_Vitesse;
L 100;
<=I;
);
SPBNB _003;
L #Pilotage.Limit_Vitesse;
L 16384;
*D;
T #Correction_Vitesse;
UN OV;
SAVE;
CLR;
_003: U BIE;
);
SPBNB _004;
L #Correction_Vitesse;
L 100;
/D;
T #Diag.WR_PZD.OVERRIDE;
UN OV;
SAVE;
CLR;
_004: U BIE;
);
NOT;
= #Def_LimitOverride;
NETWORK
TITLE =**************************PILOTAGE MANUEL
//**************Manual control
//*ODIL_ID:1892_16*
//

NETWORK
TITLE =AUTORISATION JOG +: Jog avant
//Autorisation JOG + order
//*ODIL_ID:1892_17*
//
U #Axe_Enable;
UN #Pilotage.JOG_AR;
UN #Diag.WR_PZD.STW1.Jog_1;
UN #Diag.IhmDefSMplus;
UN #Diag.IhmDefSLplus;
= #AJog_AV;
NETWORK
TITLE =PILOTAGE JOG + : Jog avant
//Attention: le parametre P109 Vitesse jog 2 doit Etre positif = jog +
//JOG + order :
//Warning : P109 parameter must be positive
//*ODIL_ID:1892_18*
//
U(;
O #Diag.RD_PZD.ZSW1.Standstill;
O #Diag.WR_PZD.STW1.Jog_2;
);
U #Pilotage.JOG_AV;
UN #Mem_Ref;
= #Diag.WR_PZD.STW1.Jog_2;
NETWORK
TITLE =AUTORISATION JOG -: Jog arriere
//authorisation Jog -
//*ODIL_ID:1892_19*
//
U #Axe_Enable;
UN #Pilotage.JOG_AV;
UN #Diag.WR_PZD.STW1.Jog_2;
UN #Diag.IhmDefSMmoins;
UN #Diag.IhmDefSLmoins;
= #AJog_AR;
NETWORK
TITLE =PILOTAGE JOG - : Jog arriere
//JOG - Order
//Attention : le parametre P108 Vitesse JOG 1 plus doit Etre negatif= JOG -
//Warning : the P108 parameter must be negative
//*ODIL_ID:1892_20*
//
U(;
O #Diag.RD_PZD.ZSW1.Standstill;
O #Diag.WR_PZD.STW1.Jog_1;
);
U #Pilotage.JOG_AR;
UN #Mem_Ref;
= #Diag.WR_PZD.STW1.Jog_1;
NETWORK
TITLE =*********************PRISE ORIGINE
//*************Codeur referency
//*ODIL_ID:1892_21*
//

NETWORK
TITLE =
//*ODIL_ID:1892_22*
//
L #S120_DriveObjectID;
T #ECR_P2507.Drive_object_ID;
T #ECR_P977.Drive_object_ID;
NETWORK
TITLE =Prise Origne Mode 1: codeur absolu
//Coder referency Mode 1: Absolute Coder
//*ODIL_ID:1892_23*
//
U(;
L #MODE_ref;
L 1;
==I;
);
U #Pilotage.Prise_Ref;
U #Diag.RD_PZD.ZSW1.Standstill;
UN #Mem_Ref;
FP #Frm_RefAbs;
S #Seq_RefCodeurAbs.Etape0;
R #Seq_RefCodeurAbs.Etape1;
R #Seq_RefCodeurAbs.Etape2;
S #Mem_Ref;
NETWORK
TITLE =Prise Origne Mode 2: codeur incremental a l'arret
//Coder referency Mode 1 : incremental coder in standstill
//*ODIL_ID:1892_24*
//
U(;
L #MODE_ref;
L 2;
==I;
);
U #Pilotage.Prise_Ref;
U #Diag.RD_PZD.ZSW1.Standstill;
UN #Diag.RD_PZD.ZSW1.Fault;
= #Diag.WR_PZD.POS_STW2.Set_ReferencePoint;
NETWORK
TITLE =conversion de Adresse de Diagnostic du variateur
//Conversion of the drive diagnostic addresse
//*ODIL_ID:1892_25*
//
L #S120_Diag_add;
T #Add_SFB53;
NOP 0;
NETWORK
TITLE =Emission de la requete Ecriture P2507
//Sending the writtinp parameter P2507
//referencement du codeur absolus
//*ODIL_ID:1892_26*
//
U(;
U #Seq_RefCodeurAbs.Etape0;
UN #ECRP2507.BUSY;
= L 31.0;
BLD 103;
U #Seq_RefCodeurAbs.Etape0;
SPBNB _005;
CALL #ECRP2507 (
REQ := L 31.0,
ID := #Add_SFB53,
INDEX := 47,
LEN := 14,
DONE := #Done_SFB53,
BUSY := #Busy_SFB53,
ERROR := #Error_SFB53,
STATUS := #Status_SFB53,
RECORD := #ECR_P2507);
_005: U BIE;
);
U #ECRP2507.DONE;
S #Seq_RefCodeurAbs.Etape1;
R #Seq_RefCodeurAbs.Etape0;
NETWORK
TITLE =Emission de la requete Ecriture P977
//Sending the writting parameter P977
//*ODIL_ID:1892_27*
//
U(;
U #Seq_RefCodeurAbs.Etape1;
U #T_P2507.Q;
UN #ECRPP977.BUSY;
= L 31.0;
BLD 103;
U #Seq_RefCodeurAbs.Etape1;
SPBNB _006;
CALL #ECRPP977 (
REQ := L 31.0,
ID := #Add_SFB53,
INDEX := 47,
LEN := 14,
DONE := #Done_SFB53,
BUSY := #Busy_SFB53,
ERROR := #Error_SFB53,
STATUS := #Status_SFB53,
RECORD := #ECR_P977);
_006: U BIE;
);
U #ECRPP977.DONE;
R #Seq_RefCodeurAbs.Etape1;
R #Mem_Ref;
NETWORK
TITLE =Temps d'attente entre l'ecriture et la sauvegarde du P2507
//Waittint time after the writting P2507
//*ODIL_ID:1892_28*
//
U #Seq_RefCodeurAbs.Etape1;
= L 31.0;
BLD 103;
CALL #T_P2507 (
IN := L 31.0,
PT := T#100MS);
NOP 0;
NETWORK
TITLE =*******************MODE BLOC A BLOC
//****** Block to block mode
//*ODIL_ID:1892_29*
//

NETWORK
TITLE =Transfert du numero de bloc
//Transfert of the block number
//*ODIL_ID:1892_30*
//
U #Pilotage.START;
U #NumBloc_OK;
FP #Frm_trsf;
L #Pilotage.Num_Bloc;
T #Diag.WR_PZD.POS_STW1.Selec_Num_Bloc; // transfert du numero de bloc vers le variateur
S #FinTrsfBloc; // Memoire Fin transfert du bloc
NETWORK
TITLE =M0DE BLOC: Mode de fonctionnement Bloc a bloc
//Block mode : running mode Block to block
//*ODIL_ID:1892_31*
//
U(;
L #MODE_Pilot;
L 1;
==I;
);
UN #Diag.WR_PZD.STW1.Jog_1;
UN #Pilotage.JOG_AR;
UN #Diag.WR_PZD.STW1.Jog_2;
UN #Pilotage.JOG_AV;
UN #Pilotage.Prise_Ref;
UN #Diag.WR_PZD.POS_STW1.ModeMDI_selection;
UN #Diag.RD_PZD.POS_ZSW1.MDIPos_act;
= #Mode_Bloc;
NETWORK
TITLE =MODE BLOC : Controle du numero de bloc
//BLOCK MODE : checking the block number
//*ODIL_ID:1892_32*
//
U #Mode_Bloc;
U(;
L #Pilotage.Num_Bloc;
L 1;
>=I;
);
U(;
L #Pilotage.Num_Bloc;
L 64;
<=I;
);
U #Pilotage.START;
= #NumBloc_OK;
NETWORK
TITLE =M0DE MDI : Mode de fonctionnement MDI
//M0DE MDI : running mode MDI
//*ODIL_ID:1892_33*
//
U(;
L #MODE_Pilot;
L 2;
==I;
);
UN #Mode_Bloc;
UN #Pilotage.JOG_AR;
UN #Pilotage.Prise_Ref;
UN #Pilotage.JOG_AV;
= L 31.0;
U L 31.0;
BLD 102;
= #Mode_MDI;
U L 31.0;
U #Axe_Enable;
= #Diag.WR_PZD.POS_STW1.ModeMDI_selection;
NETWORK
TITLE =MODE MDI : Type de positionnement absolu =1 relatif=0
//EPOS Type absolute=1 relative=0
//*ODIL_ID:1892_34*
//
U #Mode_MDI;
U(;
L #Pilotage.MoveMode;
L B#16#0;
==I;
);
= #Diag.WR_PZD.POS_STW1.MDI_TypePos;
NETWORK
TITLE =MODE MDI: transfert des donnees de positionnement
//MDIpos : position target
//MDIAcc : acceleration du deplacement
//MDIdec : decceleration du deplacment
//MDIvel : vitesse du deplacement
//--------------------------------------------------------
//MDI MODE : transfer of EPOS data
//MDIpos : position
//MDIAcc : acceleration
//MDIdec : decceleration
//MDIvel : speed
//*ODIL_ID:1892_35*
//
U(;
U(;
U #Mode_MDI;
SPBNB _007;
L 0;
T #Diag.WR_PZD.POS_STW1.Selec_Num_Bloc;
SET;
SAVE;
CLR;
_007: U BIE;
);
SPBNB _008;
L #Pilotage.MovePos;
T #Diag.WR_PZD.MDI_TARGPOS;
SET;
SAVE;
CLR;
_008: U BIE;
);
SPBNB _009;
L #Pilotage.MoveSpeed;
T #Diag.WR_PZD.MDI_VELOCITY;
SET;
SAVE;
CLR;
_009: U BIE;
= #Mode_MDIactif;
NETWORK
TITLE =MODE MDI: Ecriture MDI Acceleration
//MDIacc : valeur comprise entre 0 et 100%
//Mise a l'echelle de la valeur MDIacc 100 = FFFF
//----------------------------------------------------------------------
//MDI MODE : Writting of MDI acceleration
//MDIacc: put scale value of MDIacc 100=FFFF
//*ODIL_ID:1892_36*
//
U(;
U(;
U #Mode_MDI;
U(;
L #Pilotage.MoveAcc;
L 1;
>I;
);
U(;
L #Pilotage.MoveAcc;
L 100;
<=I;
);
SPBNB _00a;
L #Pilotage.MoveAcc;
L 16384;
*D;
T #Correction_Vitesse;
UN OV;
SAVE;
CLR;
_00a: U BIE;
);
SPBNB _00b;
L #Correction_Vitesse;
L 100;
/D;
T #Diag.WR_PZD.MDI_ACC;
UN OV;
SAVE;
CLR;
_00b: U BIE;
);
NOT;
SPBNB _00d;
L 0;
T #Diag.WR_PZD.MDI_ACC;
_00d: NOP 0;
NETWORK
TITLE =MODE MDI: Ecriture MDI deceleration
//MDIdec : valeur comprise entre 0 et 100%
//Mise a l'echelle de la valeur MDIacc 100 = FFFF
//----------------------------------------------------------------------
//MDI MODE : Writting of MDI deceleration
//MDIacc: put scale value of MDIdec 100=FFFF
//*ODIL_ID:1892_37*
//
U(;
U(;
U #Mode_MDI;
U(;
L #Pilotage.MoveDec;
L 1;
>I;
);
U(;
L #Pilotage.MoveDec;
L 100;
<=I;
);
SPBNB _00e;
L #Pilotage.MoveDec;
L 16384;
*D;
T #Correction_Vitesse;
UN OV;
SAVE;
CLR;
_00e: U BIE;
);
SPBNB _00f;
L #Correction_Vitesse;
L 100;
/D;
T #Diag.WR_PZD.MDI_DEC;
UN OV;
SAVE;
CLR;
_00f: U BIE;
);
NOT;
SPBNB _010;
L 0;
T #Diag.WR_PZD.MDI_DEC;
_010: NOP 0;
NETWORK
TITLE =*****************START AXE
//*ODIL_ID:1892_38*
//

NETWORK
TITLE =commande deplacement axe
//2/07/2013 suppression #Frm_Start
//          ajout verrouillage activate_travel
//Set Start axis movement
//*ODIL_ID:1892_39*
//
U(;
O #Pilotage.START;
O #DRestart;
);
UN #Def;
U #Axe_Enable;
U(;
U #Mode_Bloc;
U(;
L #Diag.WR_PZD.POS_STW1.Selec_Num_Bloc;
L #Mem_bloc_exe;
==I;
);
O #Mode_MDIactif;
);
U #Pilotage.STOP_Move;
U #Pilotage.Inter_Move;
UN #Diag.WR_PZD.STW1.Activate_travel;
UN #Diag.RD_PZD.ZSW1.Ack_bloc_Pos;
S #Diag.WR_PZD.STW1.Activate_travel;
NETWORK
TITLE =Arret bloc de deplacement
//Reject task of movement
//*ODIL_ID:1892_40*
//
U #SecuActif;
U #Pilotage.STOP_Move;
UN #Diag.IhmAlaOverride;
= #Diag.WR_PZD.STW1.Reject_task;
NETWORK
TITLE =Suspension bloc de deplacement
//intermediate stop of movement
//*ODIL_ID:1892_41*
//
U #Pilotage.Inter_Move;
= #Diag.WR_PZD.STW1.Intermediate_Stop;
NETWORK
TITLE =Mouvement en cours
//Axis in movement
//*ODIL_ID:1892_42*
//
U(;
O #Mode_Bloc;
O #Mode_MDI;
);
U #Diag.WR_PZD.STW1.Activate_travel;
S #Mem_InMov;
U(;
U(;
U #Mem_InMov;
U #In_Pos;
ON #Diag.WR_PZD.STW1.Reject_task;
);
FP #Frm_InMov;
O #Def;
);
R #Mem_InMov;
NOP 0;
NETWORK
TITLE =Reset Start bloc de deplacement
//reset start movement
//2/07/2013 ajout #Pilotage.STOP_Move pour raser la variable pour le semi auto
//*ODIL_ID:1892_43*
//
O #Diag.RD_PZD.ZSW1.Ack_bloc_Pos;
ON #Diag.WR_PZD.STW1.Reject_task;
ON #SecuActif;
O #Diag.IhmDefBloc;
R #Diag.WR_PZD.STW1.Activate_travel;
R #DRestart;
NETWORK
TITLE =Memorisation numero de bloc
//Memorisation numero of block
//*ODIL_ID:1892_44*
//
U #Mode_Bloc;
SPBNB _00c;
L #Diag.WR_PZD.POS_STW1.Selec_Num_Bloc;
T #Mem_bloc_exe;
_00c: NOP 0;
NETWORK
TITLE =Memoire axe en position a l'arret
//Axis in position memory at Stop
//*ODIL_ID:1892_45*
//
U #Axe_Enable;
U #In_Pos;
FN #Frm_Axe_Enable;
S #MFrm_Inpos;
U(;
O #Diag.RD_PZD.ZSW1.Ack_bloc_Pos;
O #M_CrInpos;
);
R #MFrm_Inpos;
NOP 0;
NETWORK
TITLE =Set Position atteinte
//Drive In position
//*ODIL_ID:1892_46*
//
U(;
U #Mem_InMov;
U #Diag.RD_PZD.ZSW1.In_Position;
FP #Frm_Inpos;
O(;
U #Diag.RD_PZD.ZSW1.Ack_bloc_Pos;
FN #Frd_acqBloc;
U #Diag.RD_PZD.ZSW1.In_Position;
);
);
S #In_Pos;
U(;
U(;
O #Diag.WR_PZD.STW1.Activate_travel;
O #Diag.WR_PZD.STW1.Jog_1;
O #Diag.WR_PZD.STW1.Jog_2;
);
FP #Frm_ResetInpos;
= #M_CrInpos;
U #M_CrInpos;
O;
U(;
ON #Axe_Enable;
ON #Diag.WR_PZD.STW1.Reject_task;
);
UN #Diag.RD_PZD.ZSW1.In_Position;
UN #MFrm_Inpos;
O #Mem_Ref;
O #Diag.WR_PZD.POS_STW2.Set_ReferencePoint;
O #Def;
);
R #In_Pos;
NOP 0;
NETWORK
TITLE =Temps economie Energie
//Timer Saving energy
//*ODIL_ID:1892_47*
//
U(;
U(;
L #Type_Motor;
L 2;
==I;
);
U(;
L #Tps_MiniStop;
L #Tps_Stop;
<I;
);
SPBNB _011;
L #Tps_Stop;
L #Tps_MiniStop;
+I;
T #Tps_FinalStop;
UN OV;
SAVE;
CLR;
_011: U BIE;
);
NOT;
SPBNB _012;
L #Tps_MiniStop;
T #Tps_FinalStop;
_012: NOP 0;
NETWORK
TITLE =Tempo Economie d'energie variateur
//Delay drive saving energy
//*ODIL_ID:1892_48*
//
U(;
L #Type_Motor;
L 1;
<>I;
);
U #Diag.RD_PZD.ZSW1.In_Position;
U(;
O #Mode_Bloc;
O #Mode_MDI;
);
UN #Pilotage.JOG_AV;
UN #Pilotage.Prise_Ref;
UN #DRestart;
UN #Pilotage.JOG_AR;
= L 31.0;
BLD 103;
CALL #T_StopAxe (
IN := L 31.0,
PT := #Tps_FinalStop,
Q := #DStop);
NOP 0;
NETWORK
TITLE =demarrage deplacement apres une economie d'energie
//restart after saving delay
//*ODIL_ID:1892_49*
//
U #DStop;
U #Pilotage.START;
S #DRestart;
NETWORK
TITLE =test des securite du variateur
//set safety test information
//*ODIL_ID:1892_50*
//
U(;
L #Diag.RD_PZD.WARM_CODE;
L 1697;
==I;
);
U #Diag.RD_PZD.ZSW1.Standstill;
U #Diag.RD_PZD.ZSW1.ON_inhibit_active;
= L 31.0;
BLD 103;
CALL #ImpTestsafety (
IN := L 31.0,
PT := T#3S,
Q := #Diag.WR_PZD.STW1.Safe_test);
NOP 0;
NETWORK
TITLE =Commande de Frein
//Brake command
//*ODIL_ID:1892_51*
//
U #Diag.RD_PZD.MELDW.BrakeHold_Open;
UN #Diag.IhmDefFrein;
= #Brake_order;
NETWORK
TITLE =Controle coherence commande et etat RFR
//Coherence Order and status of RFR (Brake relay) Check
//*ODIL_ID:1892_52*
//
U(;
U #Brake_order;
U #In_Fonct.CRFR;
O;
UN #Brake_order;
UN #In_Fonct.CRFR;
);
U(;
L #Type_Motor;
L 2;
==I;
);
= L 31.0;
BLD 103;
CALL #T_RFR (
IN := L 31.0,
PT := T#500MS);
NOP 0;
NETWORK
TITLE =Position actuelle de l'axe
//Drive position feedback and set point reference defined
//*ODIL_ID:1892_53*
//
U #Diag.RD_PZD.ZSW1.Ref_Point_Set;
= #In_Ref; // set point reference defined
L #Diag.RD_PZD.Xist_A;
T #Pos_Axe; // position de l'axe
NETWORK
TITLE =Annulation defaut
//Fault Reset
//*ODIL_ID:1892_54*
//
U #Iadf;
U(;
O #Diag.RD_PZD.ZSW1.Fault;
O #Diag.RD_PZD.ZSW1.Warning;
);
= #Diag.WR_PZD.STW1.Ack_Fault;
NETWORK
TITLE =Ecriture du telegramme d'entree du S120
//writting of S120 entry telegram
//*ODIL_ID:1892_55*
//
U #Simu;
SPBN SIMS;
//===============================================================================
L #S120_IO_add; // IO adresse du S120
SLD 3;
LAR1;
//===============================================================================
L DIW [AR2,P#80.0];
T AW [AR1,P#0.0]; // -> STW1
//===============================================================================
L DIW [AR2,P#82.0];
T AW [AR1,P#2.0]; // -> POS_STW1
L DIW [AR2,P#84.0];
T AW [AR1,P#4.0]; // -> POS_STW2
L DIW [AR2,P#86.0];
T AW [AR1,P#6.0]; // STW2
L #Diag.WR_PZD.OVERRIDE;
T AW [AR1,P#8.0]; //OVERRIDE
L #Diag.WR_PZD.MDI_TARGPOS;
T AD [AR1,P#10.0]; //MDI POS TARGET
L #Diag.WR_PZD.MDI_VELOCITY;
T AD [AR1,P#14.0]; //MDI VITESSE
L #Diag.WR_PZD.MDI_ACC;
T AW [AR1,P#18.0]; //MDI Acceleration
L #Diag.WR_PZD.MDI_DEC;
T AW [AR1,P#20.0]; //MDI Deceleration
L #Diag.WR_PZD.User;
T AW [AR1,P#22.0]; //Reserve Utilisateur
L 0;
T #Retval_SFC15;
SPA JMPS;
SIMS: NOP 0;
NETWORK
TITLE =Ecriture telegramme 111 de sortie du S120
//111 Telegram writting of S120 output
//*ODIL_ID:1892_56*
//
CALL "DPWR_DAT" (
LADDR := #Adr_IO_Word,
RECORD := #Diag.WR_PZD,
RET_VAL := #Retval_SFC15);
NOP 0;
NETWORK
TITLE =retour saut pour le telegramme de sortie pour la simulation
//jump for the output telegram for virtual environement
//*ODIL_ID:1892_57*
//
JMPS: NOP 0;
NETWORK
TITLE =Defaut ecriture telegramme 111 SFC15
//fault telegramm writing
//*ODIL_ID:1892_58*
//
L #Retval_SFC15;
L 0;
<>I;
= #Def_Ecrit_S120;
NETWORK
TITLE ============Diagnostique
//=========== Diagnosis
//*ODIL_ID:1892_59*
//

NETWORK
TITLE =Presence d'alarme
//alarm present
//*ODIL_ID:1892_60*
//
O #Diag.RD_PZD.ZSW1.Warning;
O #Diag.RD_PZD.POS_ZSW2.SoftLimitPlus_active;
O #Diag.RD_PZD.POS_ZSW2.SoftLimitMinus_active;
= #Ala;
= #Diag.Ala;
NETWORK
TITLE =Presence Defaut
//fault present
//*ODIL_ID:1892_61*
//

NETWORK
TITLE =Defaut Com Profinet
//Profinet Fault
//*ODIL_ID:1892_62*
//
O #Def_Lect_S120;
O #Def_Ecrit_S120;
= L 31.0;
U L 31.0;
BLD 102;
S #Diag.IhmDefCom;
U L 31.0;
SPBNB _013;
L 4096;
T #Diag.Codedef;
_013: NOP 0;
NETWORK
TITLE =Defaut temperature resistance de freinage
//Brake resistor temperature fault
//*ODIL_ID:1892_63*
//
UN #In_Fonct.CTRF;
= L 31.0;
U L 31.0;
BLD 102;
S #Diag.IhmDefResistor;
U L 31.0;
SPBNB _014;
L 2048;
T #Diag.Codedef;
_014: NOP 0;
NETWORK
TITLE =Defaut RFR
//Brake relay Fault
//*ODIL_ID:1892_64*
//
U #T_RFR.Q;
= L 31.0;
U L 31.0;
BLD 102;
S #Diag.IhmDefFrein;
U L 31.0;
SPBNB _015;
L 1024;
T #Diag.Codedef;
_015: NOP 0;
NETWORK
TITLE =alarme temperature moteur/variateur
//drive/motor temperture alarm
//*ODIL_ID:1892_65*
//
UN #Diag.IhmDefCom;
U(;
ON #Diag.RD_PZD.MELDW.AlarmTemp_Motor;
ON #Diag.RD_PZD.MELDW.AlarmTemp_PowerMod;
);
= L 31.0;
U L 31.0;
BLD 102;
= #Diag.IhmAlaTempVar;
U L 31.0;
SPBNB _016;
L 512;
T #Diag.Codedef;
_016: NOP 0;
NETWORK
TITLE =Alarme depassement des limites de l'override
//alarm override overtaking
//*ODIL_ID:1892_66*
//
O(;
L #Diag.WR_PZD.OVERRIDE;
L 0;
==I;
);
O #Def_LimitOverride;
= L 31.0;
U L 31.0;
BLD 102;
S #Diag.IhmAlaOverride;
U L 31.0;
SPBNB _017;
L 256;
T #Diag.Codedef;
_017: NOP 0;
NETWORK
TITLE =En mode bloc : commande bloc inexistante
//Block Mode: Non-existent block
//*ODIL_ID:1892_67*
//
U(;
L #Diag.RD_PZD.WARM_CODE;
L 7462;
==I;
);
FP #Frm_DefBloc;
= L 31.0;
U L 31.0;
BLD 102;
= #Diag.IhmDefBloc;
U L 31.0;
SPBNB _018;
L 128;
T #Diag.Codedef;
_018: NOP 0;
NETWORK
TITLE =Presence defaut variateur
//Drive Fault
//*ODIL_ID:1892_68*
//
U #Diag.RD_PZD.ZSW1.Fault;
UN #Diag.IhmDefCom;
U(;
L #Diag.RD_PZD.FAULT_CODE;
L 0;
<>I;
);
= L 31.0;
U L 31.0;
BLD 102;
= #Diag.IhmDefVar;
U L 31.0;
SPBNB _019;
L 64;
T #Diag.Codedef;
_019: NOP 0;
NETWORK
TITLE =Defaut surcourse materiel positive
//hardware positive limit fault
//*ODIL_ID:1892_69*
//
L #Diag.RD_PZD.WARM_CODE;
L 7492;
==I;
= L 31.0;
U L 31.0;
BLD 102;
= #Diag.IhmDefSMplus;
U L 31.0;
SPBNB _01a;
L 32;
T #Diag.Codedef;
_01a: NOP 0;
NETWORK
TITLE =Defaut surcourse materiel negative
//hardware negative limit fault
//*ODIL_ID:1892_70*
//
L #Diag.RD_PZD.WARM_CODE;
L 7491;
==I;
= L 31.0;
U L 31.0;
BLD 102;
= #Diag.IhmDefSMmoins;
U L 31.0;
SPBNB _01b;
L 16;
T #Diag.Codedef;
_01b: NOP 0;
NETWORK
TITLE =Defaut surcourse logiciel positif active
//Software positive limit fault
//*ODIL_ID:1892_71*
//
O(;
L #Diag.RD_PZD.WARM_CODE;
L 7480;
==I;
);
O(;
L #Diag.RD_PZD.FAULT_CODE;
L 7482;
==I;
);
= L 31.0;
U L 31.0;
BLD 102;
S #Diag.IhmDefSLplus;
U L 31.0;
SPBNB _01c;
L 8;
T #Diag.Codedef;
_01c: NOP 0;
NETWORK
TITLE =Defaut surcourse logiciel negative
//Software negative limit fault
//*ODIL_ID:1892_72*
//
O(;
L #Diag.RD_PZD.WARM_CODE;
L 7479;
==I;
);
O(;
L #Diag.RD_PZD.FAULT_CODE;
L 7481;
==I;
);
= L 31.0;
U L 31.0;
BLD 102;
S #Diag.IhmDefSLmoins;
U L 31.0;
SPBNB _01d;
L 4;
T #Diag.Codedef;
_01d: NOP 0;
NETWORK
TITLE =Point de reference non defini
//Set point reference not defined
//*ODIL_ID:1892_73*
//
U #Diag.RD_PZD.ZSW1.Drive_Ready;
UN #Diag.RD_PZD.ZSW1.Ref_Point_Set;
= L 31.0;
U L 31.0;
BLD 102;
= #Diag.IhmDefRef;
U L 31.0;
SPBNB _01e;
L 2;
T #Diag.Codedef;
_01e: NOP 0;
NETWORK
TITLE =diag defaut
//Fault
//*ODIL_ID:1892_74*
//
L #Diag.Codedef;
L 0;
<>I;
= #Def;
= #Diag.Def;
NETWORK
TITLE =RAZ DES MOTS DE DIAGNOSTIC
//Diagnotic information Reset
//*ODIL_ID:1892_75*
//
UN #Def;
SPBN NoDe;
SET;
R #Diag.IhmDefCom;
R #Diag.IhmDefResistor;
R #Diag.IhmDefFrein;
R #Diag.IhmAlaOverride;
R #Diag.IhmDefSLplus;
R #Diag.IhmDefSLmoins;
NoDe: NOP 0;
NETWORK
TITLE =Annulation defaut
//Reset Fault
//*ODIL_ID:1892_76*
//
U #Iadf;
SPBNB _01f;
L 0;
T #Diag.Codedef;
_01f: NOP 0;
NETWORK
TITLE =IHM : Code defaut du variatur
//HMI : Drive Fault code
//V2-2
//*ODIL_ID:1892_77*
//
L #Diag.RD_PZD.FAULT_CODE;
T #Diag.Drive_error_number;
NETWORK
TITLE =Ecriture sortie F_AR
//Writing F-AR outputs
//*ODIL_ID:1892_78*
//
UN #Diag.RD_PZD.ZSW1.Fault;
UN #Diag.IhmDefResistor;
UN #Diag.IhmDefCom;
UN #Diag.IhmDefFrein;
= #F_AR;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MULTIPOS"
//*****************************************************************************
//*                           FB "BF_MULTIPOS"                                *
//*   ASSURE LA COMMANDE D'UN MOUVEMENT MANUTENTION HORIZONTAL ET VERTICALE   *
//*                 JUSQU'A 16 POSITIONS AVEC MOYEN DE MESURE                 *
//*                        (EXEMPLE :  TRANSBORDEUR OU ELEVATEUR)             *
//*                                                                           *
//*        INSURFE THE ORDER OF A HORIZONTAL OR VERTICALE MOVEMENT UNTIL      *
//*                               16 POSITIONS                                *
//*                           (FOR EXAMPLE: TRANSFER)                         *
//*****************************************************************************
//( IN ENGLISH FURTHER BELOW)
//
//DESCRIPTION:
//************
//   CET FB ASSURE LE PILOTAGE D'UN MOUVEMENT DE MANUTENTION HORIZONTAL ET
//VERTICALE JUSQU'A 16 POSITIONS.
//
//LE FONCTIONNEMENT EN "ELEVATEUR" EST A VALIDER AU TRAVERS DU BIT "ELEVAT"
//
//   - PILOTAGE DU MOUVEMENT (SENS ET VITESSE)
//   - CONTROLE DES SECURITES DU MOUVEMENT
//     .SURCOURSES
//     .CONTROLE 24V
//     .CONTROLES SPECIFIQUES A L ELEVATEUR ( SI ACTIVES )
//   - MODE DE MARCHE
//     . MARCHE MANU
//     . MARCHE AUTO
//   - GESTION :
//     * INFORMATION CONTROLE DE POSITION
//     * VOYANT CONTROLE POSITION
//   - DIAGNOSTIC :
//     - ALARME DEPASSEMENT TEMPS MOUVEMENT
//
//MISE EN OEUVRE:
//***************
//POUR PLUS DE DETAILS VOIR GUIDE DE MISE EN OEUVRE, RAPPEL INFORMATIONS
//IMPORTANTES :
//A) ENTREES :
//- COM : DOIT CORRESPONDRE AU COMMUN DE SECURITE ASSOCIE A LA FONCTION
//- MF /ME :  DOCUMENTER LES DETECTEURS ET LES AUTORISTIONS ET CONDITION DE
//SECURITE
//- MPOS: VALEUR DU MOYEN DE MESURE (EN MM)
//-SLEEPOS: ETAT DE COMMANDE ET DE VEILLE DU MOYEN DE MESURE
//- BAMV: DOCUMENTER LE BP COMMANDE MANUEL MOUVEMENT AVANCE
//- BAMV: DOCUMENTER LE BP COMMANDE MANUEL MOUVEMENT RECUL
//- PILOT: SELECTION DE DEPLACEMENT DEPUIS IHM
//- TREF : DOCUMENTER LES VALEUR DE TREF DANS LE DB GLOGAL ZXT DBX98(X = NUM ZONE)
//- LIM_POS_SP: LIMITE DE POSITION DANS LE SENS PLUS
//- LIM_POS_SM: LIMITE DE POSITION DANS LE SENS MOINS
//- ANTICIP_PV: COTE EN MM D'ANTICIPATION DE PASSAGE EN PV
//- ANTICIP_AR: COTE EN MM D'ANTICIPATION DE PASSAGE EN ARRET
//- TOLERANCE:  TOLERANCE SUPERIEURE EN MM SUR LA POSITION D'ARRET
//
//B) SORTIES :
//- OAMV: ORDRE AVANCE MOUVEMENT ( MONTEE POUR UN ELEVATEUR )
//- ORMV: ORDRE RECUL MOUVEMENT  ( DESCENTE POUR UN ELEVATEUR )
//- BIT1VIT: BIT1 VITESSE
//- BIT2VIT: BIT2 VITESSE
//- ICP: INFORMATION CONTROL POSITION
//- DEF ET ALARM : VERIFIER LES NOM DES VARIABLE SMP MISE EN OEUVRE
//
//CODES DES DEFAUTS:
//******************
//    1: DEFAUT PERTE CONTROLE POSITION
//    2: DEFAUT PERTE POSITION SANS COMMANDE
//    3: DEFAUT SECURITE ACCROCHAGE
//    4: DEFAUT GESTION DES AUTORISATIONS DE MOUVEMENT
//    5: DEFAUT SECURITE CHAINE INTERVENTION
//    8: DEFAUT SUR-COURSE AVANCE MOUVEMENT
//   16: DEFAUT SUR-COURSE RECUL MOUVEMENT
//   32: DEFAUT 24V EMBARQUE
//   64: DEFAUT POSITION INCONNUE
//  128: ALARME TEMPS MOUVEMNT
//  256: DEFAUT LIMITE BUTEE SENS +
//  512: DEFAUT LIMITE BUTEE SENS -
// 1024: DEFAUT SYSTEME DE MESURE
// 2048: SURVITESSE
// 4096: RUPTURE COURROIE(S)
// 8192: DEFaut reglage
//16384: DEFaut parametrage
//
//
//************************** ENGLISH INFORMATION  ****************************
//DESCRIPTION :
//**************
// - MANAGMENT UNTIL 16 POSITIONS HORIZONTAL MOVEMENT
//
// - MOVEMENT ORDER (DIRECTION AND SPEED )
// - SAFETY CONTROL OF MOVEMENT
//  . OVERTRAVEL
//  . 24V EMBEDDED
// - RUNNING MODE
//  . MANUAL MODE
//  . AUTOMATIC MODE
// - MANAGEMENT :
//  * INFORMATION CONTROL POSITION
//  * CONTROL POSITION LAMP
// -DIAGNOSTIC :
//  .TIMEOUT MOVEMENT ALARM
//
//IMPLEMENTATION:
//***************
//FOR MORE INFORMATIONS SEE THE DOCUMENTATION OF IMPLEMENTATION, REMINDER OF
//IMPORTANT INFORMATION:
//A) IMPUTS:
//- COM : MUST BE THE SAFETY COMMON ASSOCIATED TO THE LIFT FUNCTION
//- MF/ME :  IMPLEMENT THE SENSOR AND THE AUTHORIZATION AND SAFETY CONDITION
//- MPOS : VALUE FROM THE MEASURING SYSTEM
//- BAMV: IMPLEMENT THE P.B FORWARD MANUAL ORDER
//- BAMV: IMPLEMENT THE P.B BACKWARD MANUAL ORDER
//- PILOT  NUMBER MOVEMENT SELECTION FROM THE HMI
//- TREF : IMPLEMENT THE TREF VALUE IN THE GLOBAL DB ZXT DB X98(X = ZONE NUMBER)
//- LIM_POS_SP: POSITION LIMIT IN THE FORWARD DIRECTION
//- LIM_POS_SM: POSITION LIMIT IN THE BACKWARD DIRECTION
//- ANTICIP_PV: ANTICIPATION SWITCHING AT LOW SPEED
//- ANTICIP_AR: ANTICIPATION SWITCHING AT STOP
//- TOLERANCE: WINDOW IN POSITION
//B) OUTPUTS:
//- OAMV: FORWARD MOVEMENT ORDER
//- ORMV: BACKWARD MOVEMENT ORDER
//- BIT1VIT: SPEED BIT 1
//- BIT2VIT: SPEED BIT 2
//- ICP: POSITION CONTROL INFORMATION
//- DEF ET ALARM : CHECK THE SMP VARIABLE NAME IMPLEMENTED
//
//FAULT CODE :
//*************
//VALUES OF DIAG.CODEDEF OUTPUT
//
//    1: POSITION LOST FAULT
//    2: POSITION LOST FAULT WITHOUT ORDER
//    3: SAFETY HANGING FAULT
//    4: AUTHORIZATION MOVEMENT FAULT
//    5: SAFETY CHAIN FAULT
//    8: FORWARD OVER TRAVEL FAULT
//   16: BACKWARD OVER TRAVEL FAULT
//   32: EMBEDDED 24V FAULT
//   64: UNKNOW POSITION FAULT
//  128: TIMEOUT MOVEMENT FAULT
//  256: FORWARD SOFTWARE LIMIT POSITION
//  512: BACKWARD SOFTWARE LIMIT POSITION
// 1024: POSITION HARDWARE FAULT
// 2048: OVERSPEED FAULT
// 4096: SAFETY BELT FAULT
// 8192: SETUP POSITION FAULT
//16384: FB SETUP FAULT
//
//******************** _ODIL_ID_ ***************************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 83
//Dermier ID mis en oeuvre / Last ID implemented : *ODIL_ID:1833_83*
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : AS
FAMILY : 'LIB'
NAME : 'MANUT'
VERSION : 1.2
VAR_INPUT
  COM : BOOL;	//Control of the supply common of actuators / COMMUN SECURITE ACTIONNEURS
  ME : STRUCT	//Entry Word : Contains actuators of movement / Mot etat
    FCSURA : BOOL;	//overtravel in the forword direction  / fin de course av mouvement
    FCSURR : BOOL;	//overtravel in the backward direction / fin de course re mouvement
    ICP : BOOL;	//sensor position control / capteur controle position
    RFR : BOOL;	//feedback brake relay /retour relais de frein
    IDSM : BOOL;	//information encoder fault/information defaut systeme de mesure
    DCSVL : BOOL;	//Over speed control sensor Fault /Defaut Controle Survitesse
    DCRC : BOOL;	//Belt 1 or 2 broken control sensor/Detecteur Controle Rupture Courroie 1 et/ou 2
    DSCHI : BOOL;	//Safety chain control sensor/Detecteur Securite Chaine Intervention
    DSAC : BOOL;	//Hanging on safety sensor 1 or 2/Detecteur Securite Accrochage 1 ou 2
  END_STRUCT ;
  MF : STRUCT	//Function Word : Contains Data of the mobile / MOT FONCTION DU MOUVEMENT
    CT24VE : BOOL;	//24V Embedded supply voltage/ controle 24v embarque
    SECMV : BOOL;	//Safe movement / securite mouvement
    SLMV : BOOL;	//movement selection / selection mouvement(marche manuelle)
    ADMV : ARRAY  [1 .. 16 ] OF //travel permit / autorisation deplacement mouvement
BOOL;
    COTMV : ARRAY  [1 .. 16 ] OF //target position / cote a atteindre des mouvements
DINT;
    CSVL : BOOL;	//Lift over speed control /Controle Survitesse Levage (Entree Controleur)
    SLEEP_POS : BOOL;	//Standby State of the measuring means / Etat de veille du moyen de mesure
    INTER_MOVE : BOOL;	//Stop movement during travel / interruption du deplacement en cours
    SECMO : BOOL;	//Motor Safety/Securite Moteur
    DMAV : BOOL;	//Lift Empty mode request/Demande Marche a Vide Levage
    SCSVL : BOOL;	//Selection without Lift speed control/Selection Sans Controle Survitesse
  END_STRUCT ;
  Lien_pup : LIEN_PUP;	//Panels link information / Lien Pupitre
  Mpos : DINT;	//Value of the measuring encoder/ Valeur du moyen de mesure (en mm)
  Bamv : BOOL;	//Forward Movement push button / B.P avance mouvement
  Brmv : BOOL;	//Backward Movement push button / B.P RECUL MOUVEMENT
  Pilot : STRUCT	//HMI control / Pilotage IHM
    NUM_MVT : INT;	//selection de deplacement mouvement depuis l ihm
  END_STRUCT ;
  Tref : TIME;	//Reference word for the cycle time/Temps de reference du mouvement
  LIM_POS_SP : DINT;	//forward soft limit position / Limite de position dans le sens plus
  LIM_POS_SM : DINT;	//Backward soft limit position  / Limite de position dans le sens moins
  ANTICIP_PV : DINT;	//Anticipation switching at low speed /Cote en mm d'anticipation de passage en PV
  ANTICIP_AR : DINT;	//Anticipation switching at stop / Cote en mm d'anticipation de passage en arret
  TOLERANCE : DINT;	//stopping tolerance / Tolerance superieure en mm sur la position d'arret
  ELEVAT : BOOL;	//Specific function of transfer activ/Activ. fonctions specifiques a un elevateur
END_VAR
VAR_OUTPUT
  OAMV : BOOL;	//Forward Movement Order / ORDRE AVANCE MOUVEMENT
  ORMV : BOOL;	//Backward Movement Order / ORDRE RECUL MOUVEMENT
  BIT1VIT : BOOL;	//Speed Bit 1 / bit vitesse 1
  BIT2VIT : BOOL;	//Speed Bit 2 / bit vitesse 2
  VAMV : BOOL;	//Forward Movement Control Light / VOYANT AVANCE MOUVEMENT
  VRMV : BOOL;	//Backward Movement Control Light / VOYANT RECUL MOUVEMENT
  ICP : ARRAY  [1 .. 16 ] OF //Position Control Information / INFO CTRL POSITION
BOOL;
  DEF : BOOL;	//General fault / DEFAUT GENERAL (SUIVI)
  ALA : BOOL;	//General Warning / ALARME
  DIAG : STRUCT	//HMI outputs for IHMP or Winccflexible / DIAGNOSTIQUE
    DEF : BOOL;	//Fault presence for IHMP / DEFAUT GENERAL
    Ala : BOOL;	//Warning presence for IHMP / Alarme
    Numliste : INT;	//List number for IHMP / Numero de liste defaut SMP
    CODEDEF : INT;	//Fault Code : set to 1= Plant fault / N° DE DEFAUT OU D'ALARME EN DECIMAL
    IhmVAMV : BOOL;	//Forward Movement Light / IHM : VOYANT AVANCE MOUVEMENT
    IhmVRMV : BOOL;	//Backward Movement Light / IHM : VOYANT RECUL MOUVEMENT
    IhmMPOS : BOOL;	//Movement in Position Memory /IHM : MEMOIRE MOUVEMENT EN POSITION
    IhmOAV : BOOL;	//Advance Order / Ordre avance
    IhmOAR : BOOL;	//Return Order / Ordre recul
    IhmBIT1VIT : BOOL;	//1st speed selection bool / 1° Bit de selection vitesse
    IhmBIT2VIT : BOOL;	//2nd speed selection bool / 2° Bit de selection vitesse
    IhmVPOS : DINT;	//value of current position / valeur de la position courrante
    IhmCOTMV : DINT;	//target position / cote a atteindre des mouvements
    IhmCICP : BOOL;	//sensor position control / capteur controle position
  END_STRUCT ;
END_VAR
VAR
  semi_auto : BOOL;	//Semi-automatic mode (In Manual) / Mode semi-auto (en manu)
  jog : BOOL;	//Jog Mode / Mode jog
  mfm : BOOL;	//End of movement memory / Memoire fin de mouvement
  smv : BOOL;	//Mouvement safety / securite mouvement
  dmd_mvt_plus : BOOL;	//positive Movement request / Demande de mvt plus
  dmd_mvt_moins : BOOL;	//Negative movement request / Demande de mvt moins
  dmd_pv : BOOL;	//Low speed request / Demande de petite vitesse
  dmd_pv_auto_av : BOOL;	//Advance in low speed request / Demande de petite vitesse sens avance
  dmd_pv_auto_re : BOOL;	//Return in low speed request /  Demande de petite vitesse sens recul
  fn_bpmv : BOOL;	//Falling edge of manual control / Front descendant des commandes manuelle
  fn_x_bamv : BOOL;	//Falling edge of advance control / Front descendant de la commande avance
  fn_inter_move : BOOL;	//Falling edge of interup movement / Front descendant de l interruption mouvement
  fp_auto : BOOL;	//Rising edge of automatic mode / Front montant mode auto
  fp_autor : BOOL;	//Rising edge of Mouvement authorization/Front montant d'autorisation mouvement
  fp_vtele : BOOL;	//Rising edge of telemeter standby out/Front montant sortie de veille du telemtre
  fp_semiauto : BOOL;	//Rising edge semi automatic mode / Front montant mode semi auto
  fp_mfm : BOOL;	//Rising edge end of movement memory / Front montant memoire fin de mouvement
  x_fp_dmd_mvt_plus : BOOL;	//Rising edge Auxi.of positive Movement request/Auxi. de front Mont. dmd mvt plus
  x_fp_dmd_mvt_moins : BOOL;	//Rising edge Auxi.of negative Movement request/Auxi. de front Mont.dmd mvt moins
  x_fn_cmd_manuelle : BOOL;	//Fail.edg Auxi.of maual control /Auxi. de front desc. cmd manuelle
  x_fn_inter_move : BOOL;	//Fail.edg Auxi.of interup movement/Front descendant de l interruption mouvement
  x_fp_auto : BOOL;	//In automatic mode auxi.sensing /Auxilaire de detection de passage en auto
  x_fp_mfm : BOOL;	//End of movement Auxi of sensing/ Auxi. de detection fin de mouvement
  x_fn_vtele : BOOL;	//Telemeter on Auxi/ Auxilaire detection passage en mode actif pour le telemtre
  x_fp_semiauto : BOOL;	//Rising edge Auxi.Semi automatic mode / Auxi.front montant semi auto
  x_fn_xbamv : BOOL;	//Failling edge Auxi. adv. movement/ Auxi.front descendant com. avance mouvement
  x_fp_mav : BOOL;	//Specific Empty mode Auxi sensing/Auxi de detect. specifique marche a vide
  x_dfppos : BOOL;	//Loose of position without control Fault/Auxi.defaut perte pos sans commande
  x_bamv : BOOL;	//Advance pusch button auxi. / Auxilaire bp avance mouvement
  x_brmv : BOOL;	//Return pusch button Auxi / Auxilaire bp recul mouvement
  x_bpmva0 : BOOL;	//Mouvement at zero puc=sch button / Bp mouvement a 0
  pos_ok : BOOL;	//Position in tolerance/ Position dans les tolerances
  mdf24ve : BOOL;	//24V on-board memory fault / Memoire defaut 24volt embarque
  mdfsurca : BOOL;	//advance over travel memory fault /memoire defaut surcourse avance
  mdfsurcr : BOOL;	//return over travel memory fault /memoire defaut surcourse recul
  mdfposinco : BOOL;	//Stop position unknew memory fault/ memoire defaut position d'arret inconnue
  mdftmvt : BOOL;	//time of movement memory Fault/ memoire defaut temps mouvement
  mdfppos : BOOL;	//Loose of position without cont. mem/memoire defaut perte position sans commande
  mdfpos : BOOL;	//Sensor of position fault /  memoire defaut capteur controle position
  mdflimsp : BOOL;	//software stoper positiv way Fault/ memoire defaut butee soft atteinte sens plus
  mdflimsm : BOOL;	//software stoper negativ way Fault/memoire defaut butee soft atteinte sens moins
  mdfreglage : BOOL;	//Dimension setting fault / memoire defaut reglage cote
  mdfparam : BOOL;	//msetting fault / emoire defaut parametrage
  mdfautor : BOOL;	//Authorization management fault / memoire defaut gestion des autorisations
  mdfsm : BOOL;	//Measurement device Fault / memoire defaut systeme de mesure
  mdfsvl : BOOL;	//Overspeed fault /Defaut Survitesse
  mdfruc : BOOL;	//break belt fault/Defaut rupture Courroie
  mdfschi : BOOL;	//safety chain control fault/Defaut Securite Chaine Intervention
  mdfsac : BOOL;	//safety hanging fault/Defaut Securite Accrochage
  s_poscon : BOOL;	//Running on knew position / Activation demarrage sur position connue
  Secml : BOOL;	//mecanical safety lifting/Securite Mecanique Levage
  sch : BOOL;	//safety chain/Securite ChaIne
  Cclok : BOOL;	//lift Sensor control OK /Controle Capteurs Levage OK
  Seccl : BOOL;	//safety sensor lifting/Securite Capteurs Levage
  mem_mav : BOOL;	//Memory empty mode operation /Memoire Marche a Vide Levage
  mem_cotedefparam : WORD;	//First Dimension Num in fault/Mem numcote ayant en premier creer def.parametrage
  mem_lim_basse : DINT;	//Lower position limit / Limite inferieure de position
  mem_arret_lim_basse : DINT;	//low limit stop / Precoupure arret limite basse
  mem_lim_haute : DINT;	//upper position limit / Limite superieure de position
  mem_arret_lim_haute : DINT;	//Up limit stop / Precoupure arret limite haute
  mem_consigne : DINT;	//Last set value memory / Memoire de la dernier consigne passee
  mem_comp : WORD;	//value comparison/Mem.comparaison du changement de valeur du mot des autor. mouv
  mem_cote_sup : DINT;	//Upper value of Dimension / Memoire de la valeur de la cote la plus eleve
  mem_cote_inf : DINT;	//Lower value of Dimension / Memoire de la valeur de la cote la plus basse
  position_courante : DINT;	//Actual position in m-meter/ Position courante de l axe en mm
  consigne : DINT;	//Set Value to done in m-meter /Consigne de position a atteindre pour l axe en mm
  TEMPO_POSITION : TON;	//FilterTimer for table stabilization/ Tempo de filtrage pour stabilisation table
  TEMPO_PERTE_POS : TON;	//Filter Timer for loose position / Temporisation de filtrage pour perte position
  TEMPO_POSINCO : TON;	//Incoherent position Timer / Temporisation position incoherente
  TEMPO_TMVT : TON;	//Movement time check Timer / Temporisation controle temps mouvement
  TEMPO_ICP : TON;	//ICP sensor Timer / Temporisation controle capteur ICP
  TEMPO_DFCSV : TON;	//timer overspeed control fault/TEMPO Defaut Controle Survitesse
  TEMPO_MAV : TON;	//timer empty mode operation / Temporisation Mode Marche a vide
END_VAR
VAR_TEMP
  AUTO : BOOL;	//Automatic Mode / Mode auto
  MANU : BOOL;	//Manual Mode / Mode manu
  VAL_PILOTAGE : BOOL;	//Control movement validation / VALIDATION PILOTAGE MOUVEMENT
  XRUN : BOOL;	//Run auxiliary / AUXILIARE RUN
  CMAV : BOOL;	//Advance manual set value / CONSIGNE MANUELLE AVANCE
  CMRE : BOOL;	//Return manual set value / CONSIGNE MANUELLE RECUL
  DMAV : BOOL;	//Advance request / DEMANDE AVANCE
  DMRE : BOOL;	//Return Request / DEMANDE RECUL
  ICP_MAX : BOOL;	//Cam max Dimension value /  CAME COTE MAX
  ICP_MIN : BOOL;	//Cam Min Dimension value / CAME COTE MIN
  BUTEE_AV : BOOL;	//Software Stop in advance / BUTEE SOFT SENS AVANCE
  BUTEE_RE : BOOL;	//saftware stop in return / BUTEE SOFT SENS RECUL
  POSINC : BOOL;	//Unknown Position / POSITION INCONNUE
  DEFPARAM : BOOL;	//Setting parameer fault/ DEFAUT PARAMETRAGE
  DEFREGLAGE : BOOL;	//Adjustment fault / DEFAUT REGLAGE
  TCONSIGNE : DINT;	//Set Value temporary / TEMPORAIRE POUR CONSIGNE
  TCOMP : WORD;	//comparison temporary /  TEMPORAIRE POUR COMPARAISON
  TIICP : WORD;	//ICP Word / MOT IMAGE DE iICP
  LIM_SP : DINT;	//upper limit /LIMITE SUPERIEURE
  LIM_SM : DINT;	//lower limit / LIMITE INFERIEURE
  TOLERANC : DINT;	//Tolerance / TOLERANCE EN POSITION
  TPOS_COURANTE : DINT;	//Actual position temporary/ TEMPORAIRE IMAGE POSITION COURANTE
  TINF : DINT;	//lower tolerance temporary / TEMPORAIRE TOLERANCE INFERIEURE
  TSUP : DINT;	//upper tolerance temporary / TEMPORAIRE TOLERANCE SUPERIEURE
  TMDFPOS : BOOL;	//End of positon memory temporary / TEMPORAIRE IMAGE DE MDFPOS
  TICP : BOOL;	//ICP sensor temporary / TEMPORAIRE IMAGE DU CAPTEUR ICP
  XDINT : DINT;	//Dint variable auxiliary / AUXILAIRE VARIABLE DINT
  LIM_BASSE : DINT;	//lower limit / LIMITE BASSE
  LIM_HAUTE : DINT;	//upper limit / LIMITE HAUTE
  POSITION_ATTEINTE : BOOL;	//In position / POSITION DANS LA TOLERANCE EN ARRET STABLE
  iICP : STRUCT	//Position Control Information / INFO CTRL POSITION
    POS : ARRAY  [1 .. 16 ] OF BOOL;
  END_STRUCT ;
  Ba1i : BOOL;	//Boolean ever at 1 / BIT TJS A 1
  Ba0i : BOOL;	//Boolean ever at 0 / BIT TJS A 0
  CPT : INT;	//Loop counter / COMPTEUR DE BOUCLE
  SAVEAR2 : DWORD;	//Save AR2 / SAUVEGARDE DE l AR2
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Initialisation des bits a 1 et a 0 pour traitement interne
//Reset du defaut de parametrage
//Sauvegarde du registre d'adresse 2 pour utilisation ulterieure
//
//Set to 1 the useful information in the BF Block
//
//*ODIL_ID:1833_1*
//
SET;
S #Ba1i;
R #Ba0i;
R #DEFPARAM;
TAR2 #SAVEAR2;
// Initialisation des cotes inf et superieur
L L#2147483647;
T #mem_cote_inf;
L 0;
T #mem_cote_sup;
// Recuperation de la valeur de ADMV dans un mot pour comparaison ulterieure
LAR1 #SAVEAR2;
L P##MF;
+AR1;
L W [AR1,P#2.0];
T #TCOMP;
U #Lien_pup.Z_iadf;
R #mdfparam;
R #mdfreglage;
NETWORK
TITLE =Elaboration des fronts montants
//Development of rising edges
//*ODIL_ID:1833_2*
//
U #Ba1i;
= L 60.0;
U L 60.0;
UN #MF.SLEEP_POS;
FP #x_fn_vtele;
= #fp_vtele;
U(;
U L 60.0;
U #x_bamv;
FP #x_fp_semiauto;
);
U #semi_auto;
= #fp_semiauto;
U L 60.0;
U #mfm;
FP #x_fp_mfm;
= #fp_mfm;
NETWORK
TITLE =Elaboration des fronts descendants
//Development of falling edges
//*ODIL_ID:1833_3*
//
U #Ba1i;
= L 60.0;
U L 60.0;
U #x_bamv;
FN #x_fn_xbamv;
= #fn_x_bamv;
U L 60.0;
U(;
O #x_bamv;
O #x_brmv;
);
FN #x_fn_cmd_manuelle;
= #fn_bpmv;
U L 60.0;
U #MF.INTER_MOVE;
FN #x_fn_inter_move;
= #fn_inter_move;
NETWORK
TITLE =Elaboration du front montant de l autorisation de mouvement
//Development of the rising edge of the movement authority
//*ODIL_ID:1833_4*
//
O(;
L #mem_comp;
L #TCOMP;
<>I;
);
O #fp_auto;
O #fp_vtele;
O(;
U #TEMPO_MAV.Q;
FP #x_fp_mav;
);
O #fp_mfm;
O #fn_inter_move;
= #fp_autor;
NETWORK
TITLE =Mise a jour de la mem de comparaison pour evaluation des fronts
//Update the comparison memory for evaluation edges
//*ODIL_ID:1833_5*
//
L #TCOMP;
T #mem_comp;
NOP 0;
NETWORK
TITLE =Controle de parametrage des cotes et des tolerances
//On verifie que toutes les cotes parametrees sont bien dans l intervalle de
//deplacement prevue par les bornes du sens plus et du sens moins
//On verifie que l ensemble des tolerances sont conformes entre elles
//
//Setting check of dimension and tolerance :
//We verified that all dimensions are parameterized in the range of
//displacement prescribed by the bounds of sense and meaning less
//It checks that all of them are consistent tolerances
//
//*ODIL_ID:1833_6*
//
//
// ********* INIT BOUCLE
LAR1 #SAVEAR2; // Prise en compte de l adresse de depart de la multi-instance eventuelle
L P##MF; // Pointeur sur l adresse de MF
+AR1;
L P#4.0; // Decalage de l offset de COTMV dans la structure MF
+AR1;
L 15;
//********** BOUCLE
SUIB: T #CPT;
L DID [AR1,P#0.0]; // Lecture de la valeur de Postab.cotePos[x] x de 1 a 16
L 0;
==D; // Si la cote est = 0, on passe a la suivnte
SPB PREP;
<D; // Verification si la cote est inferieure a 0
SPB DEFR;
// Sinon
TAK; // Dans ACCU1 valeur de Postab.cotePos[x] x de 1 a 16
L #LIM_POS_SP;
>=D; // Verification de la cote n'est pas superieure a la lim sens plus
SPB DEFR;
// Sinon
TAK; // Dans ACCU1 valeur de Postab.cotePos[x] x de 1 a 16
L #LIM_POS_SM;
<=D; // Verification de la cote par rapport a la borne moins
SPB DEFR;
// Sinon
//********* Determination de la cote la plus basse et de la cote la plus haute dans les 16 une fois les controles effectues
L #mem_cote_inf; // MEM_COTE_INF est initialise a 400M pour être sur que la premiere cote valide soit a coup sûr inferieure
L DID [AR1,P#0.0]; // valeur de Postab.cotePos[x] x de 1 a 16
<D;
SPB EVA2;
T #mem_cote_inf;
EVA2: L #mem_cote_sup;
>D;
SPBN FEVA;
TAK; // Dans ACCU1 valeur de Postab.cotePos[x] x de 1 a 16
T #mem_cote_sup;
FEVA: SPA PREP; // Pas de defaut,on a verifier si le cote etait la plus basse et/ou la plus haute, Saut pour preparer le prochain test
//******** SI DEFAUT
SET;
S #DEFPARAM;
SPA CPT;
DEFR: SET;
S #DEFREGLAGE;
CPT: L 16;
L #CPT; // Soustraction de la valeur du cpt a 16 pour connaitre le numero de cote testee
-I;
U #DEFREGLAGE;
SPBN SAU1;
T #mem_cotedefparam; // memorisation du numero de la cote ayant provoque le defaut de parametrage
SAU1: SPA FINB; // Si defaut pas la peine d'effectuer le reste de la boucle de controle
//******** TEST BOUCLE
PREP: L #CPT; // Controle si fin de boucle
L 0; // Verification de l etat de la boucle
<=I;
SPB FINB;
// Si ce n'est pas la fin de la boucle
L P#4.0; // Chargement de l accu1 avec une adresse fixe de 4.0 ( Decalage d'un double mot, 4 octets )
+AR1; // Addition avec AR1 existant
L #CPT;
DEC 1; // Decrementation du compteur de boucle
SPA SUIB; // Saut inconditionnel pour boucle suivante
//******** FIN BOUCLE
FINB: L #ANTICIP_AR;
L #TOLERANCE;
-D; // Verification que l anticipation d'arret est superieur a la tolerance basse de la fenetre
O <0;
L #ANTICIP_PV;
L #ANTICIP_AR;
-D; // Verification que l anticipation de passsage en pv sens plus est superieure a l anticipation d'arret sens plus
O <0;
S #DEFPARAM;
// Test si DEFPARAM OU DEFREGLAGE est a true
U #DEFPARAM;
S #mdfparam;
SPB FTL;
U #DEFREGLAGE;
S #mdfreglage;
SPB FTL;
L 0;
T #mem_cotedefparam;
NETWORK
TITLE =Conversion de la valeur du codeur au format reel
//Converting the value of the encoder to point number format
//*ODIL_ID:1833_7*
//
UN #MF.SLEEP_POS;
UN #Lien_pup.Dmaitre;
SPBNB _001;
L #Mpos;
T #position_courante;
_001: NOP 0;
NETWORK
TITLE =Controle de l unicite de l autorisation de mouvement
//check only 1 authorization is activated
//*ODIL_ID:1833_8*
//
X #MF.ADMV[1];
X #MF.ADMV[2];
X #MF.ADMV[3];
X #MF.ADMV[4];
X #MF.ADMV[5];
X #MF.ADMV[6];
X #MF.ADMV[7];
X #MF.ADMV[8];
X #MF.ADMV[9];
X #MF.ADMV[10];
X #MF.ADMV[11];
X #MF.ADMV[12];
X #MF.ADMV[13];
X #MF.ADMV[14];
X #MF.ADMV[15];
X #MF.ADMV[16];
= #VAL_PILOTAGE;
NETWORK
TITLE =Defaut gestion des autorisations de mouvement
//authorization movement fault
//*ODIL_ID:1833_9*
//
U #Lien_pup.Z_iadf;
R #mdfautor;
LAR1 #SAVEAR2;
L P##MF;
+AR1;
L P#2.0;
+AR1;
L W [AR1,P#0.0];
L 0;
<>I;
UN #VAL_PILOTAGE;
S #mdfautor;
NETWORK
TITLE =MISE EN FORME DES INFORMATIONS DU MOT "LIEN PUPITRE"
//AUTOMATIC MODE ON
//*ODIL_ID:1833_10*
//
U #Lien_pup.Z_mauto;
UN #Lien_pup.Z_manup;
= L 60.0;
U L 60.0;
BLD 102;
= #AUTO;
U L 60.0;
UN #DEF;
U #MF.SECMV;
FP #x_fp_auto;
= #fp_auto;
NETWORK
TITLE =MISE EN FORME DES INFORMATIONS DU MOT "LIEN PUPITRE"
//MODE OPERATING MANUAL
//*ODIL_ID:1833_11*
//
U #Lien_pup.Z_manup;
UN #Lien_pup.Z_mauto;
= #MANU;
NETWORK
TITLE =SEMI-AUTOMATIQUE
//SEMI-AUTOMATIQUE
//*ODIL_ID:1833_12*
//
U #MANU;
U(;
L #Pilot.NUM_MVT;
L 1;
>=I;
);
U(;
L #Pilot.NUM_MVT;
L 16;
<=I;
);
UN #DEF;
= #semi_auto;
NETWORK
TITLE =JOG
//JOG
//*ODIL_ID:1833_13*
//
U #MANU;
U(;
L #Pilot.NUM_MVT;
L 255;
==I;
);
= #jog;
NETWORK
TITLE =
//Le transfert d'un nouvelle cote a atteindre ne se fait que si l autorisation
//est unique, donc validee par "validaation_pilotage"
//Ce reseau passe en revue les 16 bits d'autorisation mouvement et transfert
//la cote correspondante dans le mot de consigne
//
//ENGLISH:
//The transfer of a new dimension has not reached that if the authorization
//is unique, therefore validated by "validaation_pilotage" and automatique mode.
//This network will review the 16-bit licensing movement and transfer
//the corresponding dimension in the word set
//
//*ODIL_ID:1833_14*
//
L #consigne;
T #TCONSIGNE;
LAR1 #SAVEAR2; // Prise en compte du decalage multi instance car MF est en zone DBI du bloc appelant
L P##MF; // Pointeur sur la structure d'entree MF
+AR1;
+AR1 P#2.0; // Adresse de debut de ADMV dans la structure MF
L P##MF; // Pointeur sur la structure d'entree MF
+AR2; // Prise en compte du decalage multi instance car MF est en zone DBI du bloc appelant
+AR2 P#4.0; // Adresse de debut de COTEMV dans la structure MF
U #VAL_PILOTAGE;
UN #mem_mav;
U #AUTO;
SPBN FIND;
L 15;
SUID: T #CPT;
U DIX [AR1,P#0.0];
SPBN FCO1;
L DID [AR2,P#0.0];
T #TCONSIGNE;
//************* CONTROLE FIN BOUCLE
FCO1: L #CPT; // Controle si fin de boucle
L 0; // Verification de l etat de la boucle
<=I;
SPB FIND;
//************* PREPARATION BOUCLE SUIVANTE
// Si ce n'est pas la fin de la boucle
+AR1 P#0.1; // Incrementation du pointeur d'ecriture d'un bit
+AR2 P#4.0; // Incrementation du pointeur de lecture d'un double mot
L #CPT;
DEC 1; // Decrementation du compteur de boucle
SPA SUID; // Saut inconditionnel pour boucle suivante
//************* FIN DE BOUCLE
FIND: LAR2 #SAVEAR2;
L #TCONSIGNE;
T #consigne;
NETWORK
TITLE =Copie de la consigne en fonction du mouvement semi-auto
//Copy of the target based on the semi-auto movement
//*ODIL_ID:1833_15*
//
U #fp_semiauto;
SPBN FSAU;
LAR1 #SAVEAR2; // Prise en compte de la multi-instance dans l AR2
L P##MF; // Adresse de la structure
+AR1; // Ajout de l adresse de MF a AR1
L P#4.0; // Decalage de 4 octets pour trouver la 1ere consigne dans la strcucture MF
+AR1; // Ajout a AR1
L #Pilot.NUM_MVT; // Fontion du numero de MVT on selection la bonne consigne
L 1; // NUM_MVT-1 x 32(4octets) pour
-I;
L 32;
*I;
+AR1;
L D [AR1,P#0.0]; // lecture de la consigne selectionnee
T #consigne; // Transfert dans consigne
FSAU: LAR2 #SAVEAR2;
NETWORK
TITLE =ANTI-BLOCAGE DES B.P DE COMMANDE MARCHE MANUELLE
//PRISE EN COMPTE DU BP AVANCE SI MOUVEMENT SELECTIONNE
//
//ENGLISH:
//CONSIDERATION OF MOTION IF SELECTED ADVANCED PUSHBUTTON
//*ODIL_ID:1833_16*
//
U(;
O #x_bpmva0;
O #x_bamv;
);
U #Bamv;
UN #Brmv;
U #MF.SLMV;
U(;
O #semi_auto;
O #jog;
);
= #x_bamv;
NETWORK
TITLE =PRISE EN COMPTE DU BP RECUL SI MOUVEMENT SELECTIONNE
//CONSIDERATION OF MOTION IF SELECTED BACK PUSHBUTTON
//*ODIL_ID:1833_17*
//
U(;
O #x_bpmva0;
O #x_brmv;
);
UN #Bamv;
U #Brmv;
U #MF.SLMV;
U #jog;
= #x_brmv;
NETWORK
TITLE =CONTROLE RELACHEMENT DES BOUTONS POUSSOIRS
//PUSHBUTTON CONTROL RELEASE
//*ODIL_ID:1833_18*
//
UN #Bamv;
UN #Brmv;
= #x_bpmva0;
NETWORK
TITLE =********************GESTION DES ETATS et DEFAUTS****************
//************************** Status and Faults ****************
//*ODIL_ID:1833_19*
//

NETWORK
TITLE =Mise a jour des 16 cames de positions
//TEST1 :
//On teste pour chacune des cotes parametrees en entree de la BF, que celle
//ci est dans l intervalle de deplacement soit >=MF.LIM_POS_SM ET <=
//MF.LIM_POS_SP,
//si cela est vrai, on continue avec le test2 sinon, on saute pour mettre a zero
//le bit de came.
//
//TEST2 :
//on calcul les limites basse et haute pour la cote consideree puis on
//compare la
//cote consideree a ce limite pour savoir si celle-ci ci est situee entre les
//deux
//valeurs ou egale a l une d'elle. Si cela est vrai, le bit de came est a 1 sinon
//celui ci est a zero
//
//******************* Update of the 16 position cam *************************
//ENGLISH:
//TEST1 :
//Are tested for each rating with parameterized entry of BF, that
//is in the range of displacement is> = MF.LIM_POS_SM AND <=
//MF.LIM_POS_SP,
//if this is true, we continue with the test2 otherwise it jumps to put a zero
//bit cam.
//
//TEST2 :
//we calculate the lower and upper limits for the dimension then regarded
//compares the rating has regarded this limit whether it is located between
//two values or equal to one of them. If this is true, the bit is a 1 if cam
//it is a zero
//*ODIL_ID:1833_20*
//*************
// Chargement en temporaire des parametres de controle pour derouler la boucle
L #LIM_POS_SP;
T #LIM_SP;
L #LIM_POS_SM;
T #LIM_SM;
L #TOLERANCE;
T #TOLERANC;
L #position_courante;
T #TPOS_COURANTE;
//************* INIT BOUCLE
// Initialisation du pointeur de lecture des cotes parametrees en entree de la BF
LAR1 #SAVEAR2; // Prise en compte du decalage multi instance car MF est en zone DBI du bloc appelant
L P##MF; // Pointeur sur la structure d'entree MF
+AR1;
+AR1 P#4.0; // Adresse de debut de COTMV dans la structure MF
// Initialisation du pointeur d'ecriture des bits de came de 1 a 16
LAR2 P##iICP; // iICP est en zone temp donc pas besoin de prendre en compte l AR2
L 15; // Initialisation du compteur de boucle a 15
//************* BOUCLE
SUIC: T #CPT;
//************* TEST 1
// Lecture de la COTMV[x] avec x de 1 a 16 et comparaison avec la limite inferieure de l axe
L D [AR1,P#0.0];
L #LIM_SM;
>D;
SPBN RAZ; // Si faux Raz du bit de cote
// comparaison avec la limite superieure de l axe
TAK; // Remet la COTMV[x] avec x de 1 a 16 dans l accu1
L #LIM_SP;
<D;
SPBN RAZ; // Si faux Raz du bit de cote
// Calcul des tolerances basse et haute
TAK; // Remet la COTMV[x] avec x de 1 a 16 dans l accu1
L #TOLERANC;
-D;
T #LIM_BASSE;
L D [AR1,P#0.0];
L #TOLERANC;
+D;
T #LIM_HAUTE;
//************* TEST 2
// La position courante est elle dans l intervalle de tolerance pour la cote testee
L #TPOS_COURANTE;
L #LIM_BASSE;
>=D;
SPBN RAZ;
TAK;
L #LIM_HAUTE;
<=D;
SPBN RAZ;
SET; // Oui la cote est valide et dans la tolerance testee
SPA CTRL;
RAZ: CLR; // La cote n'est soit pas valide ou pas dans la tolerance
//************* RESULTAT DU TOUR DE BOUCLE
CTRL: = L [AR2,P#0.0]; // Affectation du resulat dans le bit iICP.POS[x] de 1 a 16
//************* CONTROLE FIN BOUCLE
L #CPT; // Controle si fin de boucle
L 0; // Verification de l etat de la boucle
<=I;
SPB FINC;
//************* PREPARATION BOUCLE SUIVANTE
// Si ce n'est pas la fin de la boucle
+AR1 P#4.0; // Incrementation du pointeur de lecture d'un double mot
+AR2 P#0.1; // Incrementation du pointeur d'ecriture d'un bit
L #CPT;
DEC 1; // Decrementation du compteur de boucle
SPA SUIC; // Saut inconditionnel pour boucle suivante
//************* FIN DE BOUCLE
FINC: LAR2 #SAVEAR2;
//*************
// Recuperation de la valeur de iICP dans un mot pour comparaison ulterieure
LAR1 P##iICP;
L W [AR1,P#0.0];
T #TIICP;
NETWORK
TITLE =Came virtuelle correspondant a la cote la plus basse
//Virtual cam corresponding to the lowest score
//*ODIL_ID:1833_21*
//
U #Ba1i;
= L 60.0;
U(;
U L 60.0;
SPBNB _002;
L #mem_cote_inf;
L #TOLERANCE;
-D;
T #TINF;
UN OV;
SAVE;
CLR;
_002: U BIE;
);
SPBNB _003;
L #mem_cote_inf;
L #TOLERANCE;
+D;
T #TSUP;
_003: NOP 0;
U L 60.0;
U(;
L #position_courante;
L #TINF;
>=D;
);
U(;
L #position_courante;
L #TSUP;
<=D;
);
UN #mdfpos;
= #ICP_MIN;
NETWORK
TITLE =Came virtuelle correspondant a la cote la plus haute
//Cam virtual corresponding to the highest quotation
//*ODIL_ID:1833_22*
//
U #Ba1i;
= L 60.0;
U(;
U L 60.0;
SPBNB _004;
L #mem_cote_sup;
L #TOLERANCE;
-D;
T #TINF;
UN OV;
SAVE;
CLR;
_004: U BIE;
);
SPBNB _005;
L #mem_cote_sup;
L #TOLERANCE;
+D;
T #TSUP;
_005: NOP 0;
U L 60.0;
U(;
L #position_courante;
L #TINF;
>=D;
);
U(;
L #position_courante;
L #TSUP;
<=D;
);
UN #mdfpos;
= #ICP_MAX;
NETWORK
TITLE =Transfert consigne pour marche a vide
//Load AIM for empty mode operation
//*ODIL_ID:1833_23*
//
//   Gestion marche a vide / Empty mode management
L #consigne;
U #mem_mav;
U #AUTO;
UN #VAL_PILOTAGE;
SPBN FMM;
U #ICP_MIN;
SPBN MAX;
L #mem_cote_sup;
SPA FMM;
MAX: U #ICP_MAX;
SPBN FMM;
L #mem_cote_inf;
FMM: T #consigne;
NETWORK
TITLE =Memoire Marche a vide Levage
//memory empty mode operation
//*ODIL_ID:1833_24*
//
U #MF.DMAV;
S #mem_mav;
U(;
U(;
ON #AUTO;
ON #MF.DMAV;
O #Lien_pup.Mafj;
);
U #ICP_MIN;
O;
U #Lien_pup.Z_macy;
U(;
O #ICP_MIN;
O #ICP_MAX;
);
);
UN #OAMV;
UN #ORMV;
R #mem_mav;
NOP 0;
NETWORK
TITLE =TEMPORISATION ATTENTE MARCHE A VIDE
//Empty mode waitting timer
//*ODIL_ID:1833_25*
//
U #mem_mav;
U(;
O #ICP_MAX;
O #ICP_MIN;
);
UN #OAMV;
UN #ORMV;
= L 60.0;
BLD 103;
CALL #TEMPO_MAV (
IN := L 60.0,
PT := T#1S);
NOP 0;
NETWORK
TITLE =CONTROLE DU MAINTIEN EN POSITION
//CONTROL LOCKING
//*ODIL_ID:1833_26*
//
U(;
O #AUTO;
O #MANU;
);
U(;
O #iICP.POS[1];
O #iICP.POS[2];
O #iICP.POS[3];
O #iICP.POS[4];
O #iICP.POS[5];
O #iICP.POS[6];
O #iICP.POS[7];
O #iICP.POS[8];
O #iICP.POS[9];
O #iICP.POS[10];
O #iICP.POS[11];
O #iICP.POS[12];
O #iICP.POS[13];
O #iICP.POS[14];
O #iICP.POS[15];
O #iICP.POS[16];
);
S #mfm;
U(;
O #OAMV;
O #ORMV;
O;
UN #MF.SLEEP_POS;
U(;
L #position_courante;
L 0;
==D;
);
);
R #mfm;
NOP 0;
NETWORK
TITLE =Defaut Survitesse
//Overspeed fault
//*ODIL_ID:1833_27*
//
U(;
U(;
O #OAMV;
O #ORMV;
);
UN #dmd_pv;
U #ME.DCSVL;
O #mdfsvl;
);
UN #Lien_pup.Z_iadf;
UN #Lien_pup.Dmaitre;
UN #MF.SCSVL;
= #mdfsvl;
NETWORK
TITLE =Defaut Rupture Courroie
//break belt fault
//*ODIL_ID:1833_28*
//
U(;
ON #ME.DCRC;
O #mdfruc;
);
UN #Lien_pup.Z_iadf;
UN #Lien_pup.Dmaitre;
= #mdfruc;
NETWORK
TITLE =Defaut Securite Chaine Intervention
//safety chain control fault
//*ODIL_ID:1833_29*
//
U(;
ON #ME.DSCHI;
O #mdfschi;
);
UN #Lien_pup.Z_iadf;
UN #Lien_pup.Dmaitre;
= #mdfschi;
NETWORK
TITLE =Defaut Securite Accrochage
//safety hanging fault
//*ODIL_ID:1833_30*
//
U(;
ON #ME.DSAC;
O #mdfsac;
);
UN #Lien_pup.Z_iadf;
UN #Lien_pup.Dmaitre;
= #mdfsac;
NETWORK
TITLE =Defaut perte position sans commandes
//Default position without loss orders
//*ODIL_ID:1833_31*
//
U #AUTO;
U(;
L #TIICP;
L 0;
==I;
);
UN #mdfsm;
U #mfm;
= L 60.0;
BLD 103;
CALL #TEMPO_PERTE_POS (
IN := L 60.0,
PT := T#5S,
Q := #x_dfppos);
NOP 0;
NETWORK
TITLE =Defaut perte position sans commandes
//fault : position without loss orders
//*ODIL_ID:1833_32*
//
O #x_dfppos;
O;
U #mdfppos;
UN #Lien_pup.Z_iadf;
= #mdfppos;
NETWORK
TITLE =MEMOIRE DEFAUT 24V EMBARQUE
//24 volt embeded fault
//*ODIL_ID:1833_33*
//
U #MF.CT24VE;
U #Lien_pup.Z_iadf;
R #mdf24ve;
UN #MF.CT24VE;
UN #Lien_pup.Dmaitre;
S #mdf24ve;
NOP 0;
NETWORK
TITLE =FILTRAGE INFO CONTROLE POSITION
//CHECK POSITION FILTER
//*ODIL_ID:1833_34*
//
U(;
O #AUTO;
O;
U #MANU;
U #semi_auto;
);
U(;
O #OAMV;
O #ORMV;
);
U #ME.ICP;
U(;
L #TIICP;
L 0;
==I;
);
= L 60.0;
BLD 103;
CALL #TEMPO_ICP (
IN := L 60.0,
PT := T#500MS);
NOP 0;
NETWORK
TITLE =DEFAUT PERTE CONTROLE POSITION
//LOSS POSITION FAULT
//*ODIL_ID:1833_35*
//
U(;
U #mfm;
U #ME.ICP;
O;
UN #mfm;
UN #ME.ICP;
);
U #Lien_pup.Z_iadf;
UN #OAMV;
UN #ORMV;
R #mdfpos;
U(;
O #AUTO;
O;
U #MANU;
U #semi_auto;
);
U(;
U #mfm;
UN #ME.ICP;
O;
U #TEMPO_ICP.Q;
U #Ba0i;
);
UN #mdf24ve;
UN #Lien_pup.Dmaitre;
S #mdfpos;
NOP 0;
NETWORK
TITLE =Defaut surcourse avant
//forward overtravel fault
//*ODIL_ID:1833_36*
//
U #ME.FCSURA;
U #Lien_pup.Z_iadf;
R #mdfsurca;
UN #ME.FCSURA;
S #mdfsurca;
NOP 0;
NETWORK
TITLE =Defaut surcourse arriere
//backward overtravel faul
//*ODIL_ID:1833_37*
//
U #ME.FCSURR;
U #Lien_pup.Z_iadf;
R #mdfsurcr;
UN #ME.FCSURR;
S #mdfsurcr;
NOP 0;
NETWORK
TITLE =Butee soft 1 sens avance
//forward software limit fault
//*ODIL_ID:1833_38*
//
U(;
L #LIM_POS_SP;
L #TOLERANCE;
+D;
T #XDINT;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L #position_courante;
L #XDINT;
>D;
);
= #BUTEE_AV;
NETWORK
TITLE =Butee soft 2 sens recul
//backward software limit fault
//*ODIL_ID:1833_39*
//
U(;
L #LIM_POS_SM;
L #TOLERANCE;
-D;
T #XDINT;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L #position_courante;
L #XDINT;
<D;
);
= #BUTEE_RE;
NETWORK
TITLE =Memoire defaut butee soft sens plus
//forward software limit fault memory
//*ODIL_ID:1833_40*
//
O #BUTEE_AV;
O;
U #mdflimsp;
UN #Lien_pup.Z_iadf;
= #mdflimsp;
NETWORK
TITLE =Memoire defaut butee soft sens moins
//backward software limit fault memory
//*ODIL_ID:1833_41*
O #BUTEE_RE;
O;
U #mdflimsm;
UN #Lien_pup.Z_iadf;
= #mdflimsm;
NETWORK
TITLE =Gestion position inconnue
//unknown position management
//*ODIL_ID:1833_42*
//
UN #dmd_mvt_moins;
UN #dmd_mvt_plus;
UN #semi_auto;
UN #mfm;
UN #BUTEE_AV;
UN #BUTEE_RE;
UN #mdf24ve;
UN #mdflimsp;
UN #mdfpos;
UN #mdfppos;
UN #mdfsurca;
UN #mdfsurcr;
= #POSINC;
NETWORK
TITLE =Gestion position inconnue
//unknown position management
//*ODIL_ID:1833_43*
//
U(;
U #AUTO;
U #POSINC;
O;
U #mdfposinco;
UN #Lien_pup.Z_iadf;
);
= L 60.0;
BLD 103;
CALL #TEMPO_POSINCO (
IN := L 60.0,
PT := T#1M,
Q := #mdfposinco);
NOP 0;
NETWORK
TITLE =defaut temps mouvement
//timeout movement fault
//*ODIL_ID:1833_44*
//
U(;
O #OAMV;
O #ORMV;
);
= L 60.0;
BLD 103;
CALL #TEMPO_TMVT (
IN := L 60.0,
PT := #Tref);
NOP 0;
NETWORK
TITLE =defaut temps mouvement
//timeout movement fault
//*ODIL_ID:1833_45*
//
O #TEMPO_TMVT.Q;
O;
U #mdftmvt;
UN #Lien_pup.Z_iadf;
= #mdftmvt;
NETWORK
TITLE =Defaut systeme de mesure
//*ODIL_ID:1833_46*
ON #ME.IDSM;
O;
U #mdfsm;
UN #Lien_pup.Z_iadf;
= #mdfsm;
NETWORK
TITLE =Securite Chaine
//safety chain
//*ODIL_ID:1833_47*
//
U #ME.DCRC;
U #ME.DSCHI;
U #ME.DSAC;
UN #mdfruc;
UN #mdfschi;
UN #mdfsac;
ON #ELEVAT;
= #sch;
NETWORK
TITLE =Securite Mecanique Levage
//mecanical safety lifting
//*ODIL_ID:1833_48*
//
U #sch;
U(;
U #ME.FCSURA;
U #ME.FCSURR;
O #MANU;
);
= #Secml;
NETWORK
TITLE =Controle Capteurs Levage OK
//lift Sensor control OK
//*ODIL_ID:1833_49*
//
UN #mdf24ve;
UN #mdfpos;
UN #mdfsm;
= #Cclok;
NETWORK
TITLE =Securite Capteurs Levage / transbodeur
//safety sensor lifting
//*ODIL_ID:1833_50*
//
U(;
UN #mdfsvl;
UN #MF.SCSVL;
O #MF.SCSVL;
);
U(;
U #ELEVAT;
U #Cclok;
ON #ELEVAT;
);
= #Seccl;
NETWORK
TITLE =Securite mouvement
//safety lifting
//*ODIL_ID:1833_51*
//
U(;
U #ELEVAT;
U #Secml;
ON #ELEVAT;
);
U #MF.SECMV;
U #MF.SECMO;
U(;
U #AUTO;
U(;
U #ELEVAT;
U #Seccl;
ON #ELEVAT;
);
O #MANU;
);
= #smv;
NETWORK
TITLE =******************PROCESS**********************
//*ODIL_ID:1833_52*

NETWORK
TITLE =Consigne manuelle marche sens +
//manual command forward direction
//*ODIL_ID:1833_53*
//
U #x_bamv;
U #jog;
U(;
ON #DEF;
O;
U #DEF;
U(;
O #mdfsurcr;
O #BUTEE_RE;
O #mdfpos;
O #mdf24ve;
O #mdfsm;
O #mdfsvl;
);
);
UN #BUTEE_AV;
= #CMAV;
NETWORK
TITLE =Consigne manuelle marche sens -
//manual command backward direction
//*ODIL_ID:1833_54*
//
U #x_brmv;
U #jog;
U(;
ON #DEF;
O;
U #DEF;
U(;
O #mdfsurca;
O #BUTEE_AV;
O #mdfpos;
O #mdf24ve;
O #mdfsm;
O #mdfsvl;
);
);
UN #BUTEE_RE;
= #CMRE;
NETWORK
TITLE =Synthese intermediare XRUN
//Equation d'armement des demandes mouvements en auto :
//Si la selection de l axe est ok et que la validation MVT est ok, si on a un
//depart cycle et pas d'autre commande manu ou auto active alors on autorise une
//nouvelle demande de mouvement
//
//ENGLISH :
//If the selection of the axis is ok and validation MVT is ok, if you have a
//starting cycle and no other control or auto manu then it allows active
//new movement request
//*ODIL_ID:1833_55*
//
UN #dmd_mvt_plus;
UN #dmd_mvt_moins;
U(;
U(;
U #s_poscon;
U #mfm;
ON #s_poscon;
);
UN #x_brmv;
UN #x_bamv;
U(;
U #VAL_PILOTAGE;
UN #mem_mav;
O #mem_mav;
);
O #semi_auto;
);
= #XRUN;
NETWORK
TITLE =Demandes de mouvements auto et semi_auto
//automatic and semi-auto operation
//*ODIL_ID:1833_56*
//
U(;
O #fp_autor;
O #fp_semiauto;
);
U #XRUN;
U(;
L #consigne;
L #LIM_POS_SM;
>=D;
);
U(;
L #consigne;
L #LIM_POS_SP;
<=D;
);
= L 60.0;
U L 60.0;
U(;
L #consigne;
L #position_courante;
>=D;
);
S #dmd_mvt_plus;
U L 60.0;
U(;
L #consigne;
L #position_courante;
<=D;
);
S #dmd_mvt_moins;
NETWORK
TITLE =Memorisation de la tolerance basse a atteindre
//En cas de demande de mouvement en mode semi-auto ou auto, on memorise la
//position demandee avec sa tolereance haute et basse. Cela permet de
//controler hors mouvement la position correcte du transbordeur
//
//ENGLISH:
//In case of application of movement in semi-auto or auto, we memorized the
//Requested position tolereance with its high and low. This allows
//controlling movement out of the correct position of the movement
//*ODIL_ID:1833_57*
//
U #dmd_mvt_plus;
FP #x_fp_dmd_mvt_plus;
O(;
U #dmd_mvt_moins;
FP #x_fp_dmd_mvt_moins;
);
= L 60.0;
U(;
U L 60.0;
SPBNB _006;
L #consigne;
L #TOLERANCE;
-D;
T #mem_lim_basse;
UN OV;
SAVE;
CLR;
_006: U BIE;
);
SPBNB _007;
L #consigne;
L #ANTICIP_AR;
-D;
T #mem_arret_lim_basse;
_007: NOP 0;
U(;
U L 60.0;
SPBNB _008;
L #consigne;
L #TOLERANCE;
+D;
T #mem_lim_haute;
UN OV;
SAVE;
CLR;
_008: U BIE;
);
SPBNB _009;
L #consigne;
L #ANTICIP_AR;
+D;
T #mem_arret_lim_haute;
_009: NOP 0;
U L 60.0;
SPBNB _00a;
L #consigne;
T #mem_consigne;
_00a: NOP 0;
NETWORK
TITLE =Gestion de la petite vitesse dans le sens avance
//Management of low speed in forward direction
//*ODIL_ID:1833_58*
//
U(;
L #mem_consigne;
L #ANTICIP_PV;
-D;
T #XDINT;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L #position_courante;
L #XDINT;
>=D;
);
U #dmd_mvt_plus;
= #dmd_pv_auto_av;
NETWORK
TITLE =Gestion de la petite vitesse dans le sens avance
//Management of low speed in backward direction
//*ODIL_ID:1833_59*
//
U(;
L #mem_consigne;
L #ANTICIP_PV;
+D;
T #XDINT;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L #position_courante;
L #XDINT;
<=D;
);
U #dmd_mvt_moins;
= #dmd_pv_auto_re;
NETWORK
TITLE =Demande de passage en petite vitesse
//low speed memory
//*ODIL_ID:1833_60*
//
O #dmd_pv_auto_av;
O #dmd_pv_auto_re;
S #dmd_pv;
NETWORK
TITLE =Raz des demandes de mouvements auto
//reset automatic movement
//*ODIL_ID:1833_61*
//
FTL: U(;
L #position_courante;
L #mem_arret_lim_basse;
>=D;
);
U #dmd_mvt_plus;
O;
U(;
L #position_courante;
L #mem_arret_lim_haute;
<=D;
);
U #dmd_mvt_moins;
O #fn_bpmv;
O;
U #semi_auto;
U #fn_x_bamv;
O #MF.SLEEP_POS;
O #MF.INTER_MOVE;
O #DEF;
R #dmd_mvt_plus;
R #dmd_mvt_moins;
R #dmd_pv;
NETWORK
TITLE =Position a la cote et dans le tolerance sans mouvement en cours
//Position at dimension and in tolerance without movement in progress
//*ODIL_ID:1833_62*
//
U(;
UN #dmd_mvt_plus;
UN #dmd_mvt_moins;
U(;
L #position_courante;
L #mem_lim_basse;
>=D;
);
U(;
L #position_courante;
L #mem_lim_haute;
<=D;
);
O #mfm;
);
U #ME.RFR;
= #pos_ok;
NETWORK
TITLE =Temporisation du signal position atteinte (Filtrage)
//TIMER TARGET POSITION FILTER
//*ODIL_ID:1833_63*
//
U #pos_ok;
= L 60.0;
BLD 103;
CALL #TEMPO_POSITION (
IN := L 60.0,
PT := T#500MS,
Q := #POSITION_ATTEINTE);
NOP 0;
NETWORK
TITLE =Demande d'avance auto
//FORWARD MOVEMENT
//*ODIL_ID:1833_64*
//
U #dmd_mvt_plus;
UN #DEF;
= #DMAV;
NETWORK
TITLE =Demande de recul auto
//BACKWARD MOVEMENT
//*ODIL_ID:1833_65*
//
U #dmd_mvt_moins;
UN #DEF;
= #DMRE;
NETWORK
TITLE =*****************GESTION DES SORTIES********************
//OUTPUT MANAGEMENT
//*ODIL_ID:1833_66*
//

NETWORK
TITLE =ORDRE AVANCE MOUVEMENT
//FORWARD MOVEMENT ORDER
//*ODIL_ID:1833_67*
//
U #COM;
UN #mdfparam;
UN #mdfsurca;
U #MF.SECMV;
U(;
U #AUTO;
U #smv;
U #DMAV;
U(;
ON #Lien_pup.Z_macy;
O #OAMV;
);
O;
U #MANU;
U(;
O #CMAV;
O;
U #semi_auto;
U #x_bamv;
U #DMAV;
);
);
UN #ORMV;
= #OAMV;
= #DIAG.IhmOAV;
NETWORK
TITLE =ORDRE RECUL MOUVEMENT
//BACKWARD MOVEMENT ORDER
//*ODIL_ID:1833_68*
//
U #COM;
UN #mdfparam;
UN #mdfsurcr;
U #MF.SECMV;
U(;
U #AUTO;
U #smv;
U #DMRE;
U(;
ON #Lien_pup.Z_macy;
O #ORMV;
);
O;
U #MANU;
U(;
O #CMRE;
O;
U #semi_auto;
U #x_bamv;
U #DMRE;
);
);
UN #OAMV;
= #ORMV;
= #DIAG.IhmOAR;
NETWORK
TITLE =PILOTAGE BIT VITESSE 1
//SPEED BIT 1 ORDER
//*ODIL_ID:1833_69*
//
U(;
O #ORMV;
O #OAMV;
);
U #AUTO;
UN #dmd_pv;
UN #jog;
= #BIT1VIT;
= #DIAG.IhmBIT1VIT;
NETWORK
TITLE =PILOTAGE BIT VITESSE 2
//SPEED BIT 2 ORDER
//*ODIL_ID:1833_70*
//
U(;
O #ORMV;
O #OAMV;
);
U(;
O #AUTO;
O;
U #MANU;
U #semi_auto;
);
UN #dmd_pv;
UN #jog;
= #BIT2VIT;
= #DIAG.IhmBIT2VIT;
NETWORK
TITLE =VOYANT AVANCE MOUVEMENT
//FORWARD MOVEMENT LIGHTER
//*ODIL_ID:1833_71*
//
U #ICP_MAX;
UN #MF.SLEEP_POS;
O;
U #COM;
U #MF.SECMV;
U(;
U #AUTO;
U #dmd_mvt_plus;
O;
U #MANU;
U(;
UN #MF.SLEEP_POS;
U #semi_auto;
O #jog;
);
);
U #Lien_pup.Icl;
UN #x_brmv;
UN #mdfsurca;
O #Lien_pup.Itlp;
= #VAMV;
= #DIAG.IhmVAMV;
NETWORK
TITLE =VOYANT RECUL MOUVEMENT
//BACKWARD MOVEMENT LIGHTER
//*ODIL_ID:1833_72*
//
U #ICP_MIN;
UN #MF.SLEEP_POS;
O;
U #COM;
U #MF.SECMV;
U(;
U #AUTO;
U #dmd_mvt_moins;
O;
U #MANU;
U(;
UN #MF.SLEEP_POS;
U #semi_auto;
O #jog;
);
);
U #Lien_pup.Icl;
UN #x_bamv;
UN #mdfsurcr;
O #Lien_pup.Itlp;
= #VRMV;
= #DIAG.IhmVRMV;
NETWORK
TITLE =ACTIVATION DE LA SORTIE DEFAUT GENERAL
//GENERAL FAULT OUTPUT ACTIVATION
//*ODIL_ID:1833_73*
//
O #mdfpos;
O #mdfppos;
O #mdflimsp;
O #mdflimsm;
O #mdfsurca;
O #mdfsurcr;
O #mdf24ve;
O #mdfposinco;
O #mdfparam;
O #mdfreglage;
O #mdfautor;
O #mdfsm;
O #mdfsvl;
O #mdfruc;
O #mdfsac;
O #mdfschi;
= #DEF;
= #DIAG.DEF;
NETWORK
TITLE =Sortie Alarme
//ALARM OUTPUT
//*ODIL_ID:1833_74*
//
U #mdftmvt;
UN #DEF;
= #ALA;
= #DIAG.Ala;
NETWORK
TITLE =DIAGNOSTIC: N° LISTE DE DEFAUT PROPRE A LA FB POUR IHMP
//DIAGNOSIS : FAULT LISTE NUMBER
//*ODIL_ID:1833_75*
//
L 0;
T #DIAG.Numliste;
NOP 0;
NETWORK
TITLE =CODAGE DES DEFAUTS
//CODE : NUMERO DE DEFAUT OU D'ALARME EN DECIMAL
//
//X1.0            1: DEFAUT PERTE CONTROLE POSITION
//X1.1            2: DEFAUT PERTE POSITION SANS COMMANDE
//X1.1 * X1.0     3: DEFAUT SECURITE ACCROCHAGE
//X1.2            4: DEFAUT GESTION DES AUTORISATIONS DE MOUVEMENT
//X1.2 * X1.0     5: DEFAUT SECURITE CHAINE INTERVENTION
//X1.3            8: DEFAUT SUR-COURSE AVANCE MOUVEMENT
//X1.4           16: DEFAUT SUR-COURSE RECUL MOUVEMENT
//X1.5           32: DEFAUT 24V EMBARQUE
//X1.6           64: DEFAUT POSITION INCONNUE
//X1.7          128: ALARME TEMPS MOUVEMNT
//X0.0          256: DEFAUT LIMITE BUTEE SENS +
//X0.1          512: DEFAUT LIMITE BUTEE SENS -
//X0.2         1024: DEFAUT SYSTEME DE MESURE
//X0.3         2028: SURVITESSE
//X0.4         4096: RUPTURE COURROIE(S)
//X0.5         8192: DEFaut reglage
//X0.6        16384: DEFaut parametrage
//
//*ODIL_ID:1833_76*
//
U #Ba1i;
= L 60.0;
U L 60.0;
U #mdfpos;
SPBNB _00b;
L 1;
T #DIAG.CODEDEF;
_00b: NOP 0;
U L 60.0;
U #mdfppos;
SPBNB _00c;
L 2;
T #DIAG.CODEDEF;
_00c: NOP 0;
U L 60.0;
U #mdfsac;
SPBNB _00d;
L 3;
T #DIAG.CODEDEF;
_00d: NOP 0;
U L 60.0;
U #mdfautor;
SPBNB _00e;
L 4;
T #DIAG.CODEDEF;
_00e: NOP 0;
U L 60.0;
U #mdfschi;
SPBNB _00f;
L 5;
T #DIAG.CODEDEF;
_00f: NOP 0;
U L 60.0;
U #mdfsurca;
SPBNB _010;
L 8;
T #DIAG.CODEDEF;
_010: NOP 0;
U L 60.0;
U #mdfsurcr;
SPBNB _011;
L 16;
T #DIAG.CODEDEF;
_011: NOP 0;
U L 60.0;
U #mdf24ve;
SPBNB _012;
L 32;
T #DIAG.CODEDEF;
_012: NOP 0;
U L 60.0;
U #mdfposinco;
SPBNB _013;
L 64;
T #DIAG.CODEDEF;
_013: NOP 0;
U L 60.0;
U #mdftmvt;
SPBNB _014;
L 128;
T #DIAG.CODEDEF;
_014: NOP 0;
U L 60.0;
U #mdflimsp;
SPBNB _015;
L 256;
T #DIAG.CODEDEF;
_015: NOP 0;
U L 60.0;
U #mdflimsm;
SPBNB _016;
L 512;
T #DIAG.CODEDEF;
_016: NOP 0;
U L 60.0;
U #mdfsm;
SPBNB _017;
L 1024;
T #DIAG.CODEDEF;
_017: NOP 0;
U L 60.0;
U #mdfsvl;
SPBNB _018;
L 2048;
T #DIAG.CODEDEF;
_018: NOP 0;
U L 60.0;
U #mdfruc;
SPBNB _019;
L 4096;
T #DIAG.CODEDEF;
_019: NOP 0;
U L 60.0;
U #mdfreglage;
SPBNB _01a;
L 8192;
T #DIAG.CODEDEF;
_01a: NOP 0;
U L 60.0;
U #mdfparam;
SPBNB _01b;
L 16384;
T #DIAG.CODEDEF;
_01b: NOP 0;
NETWORK
TITLE =RAZ CODE DE DEFAUT
//RESET FAULT CODE
//*ODIL_ID:1833_77*
//
UN #DEF;
SPBNB _01c;
L 0;
T #DIAG.CODEDEF;
_01c: NOP 0;
NETWORK
TITLE =Etat : Derniere position demandee atteinte IHM
//LAST POSITION CALL FOR HMI
//*ODIL_ID:1833_78*
//
U #mfm;
UN #mdfppos;
UN #mdfpos;
= #DIAG.IhmMPOS;
NETWORK
TITLE =Recopie de la cote a atteindre
//AIM POSITION
//*ODIL_ID:1833_79*
//
L #mem_consigne;
T #DIAG.IhmCOTMV;
NOP 0;
NETWORK
TITLE =Position courante pour l IHM
//Current position
//*ODIL_ID:1833_80*
//
L #position_courante;
T #DIAG.IhmVPOS;
NOP 0;
NETWORK
TITLE =
//sensor position control / capteur controle position
//*ODIL_ID:1833_81*
//
U #ME.ICP;
= #DIAG.IhmCICP;
NETWORK
TITLE =Mise a jour de la structure ICP en sortie de la BF
//UDAPTE OF ICP
//Creation d'image des bits ME.ICP et mdfpos en TEMP pour traitement avant
//modification de AR2
//*ODIL_ID:1833_82*
//
U #ME.ICP;
= #TICP;
U #mdfpos;
= #TMDFPOS;
LAR1 P##iICP; // Chargement de l adresse de iICP dans l AR1
L P##ICP; // Chargement de l adresse de ICP dans l ACCU1
+AR2; // Ajout de l ACCU1 a AR2
L W [AR1,P#0.0]; // Lecture de iICP
U #POSITION_ATTEINTE; // SI la position est atteinte
U #TICP; // ET SI on a le capteur ICP
UN #TMDFPOS; // ET SI PAS de defaut capteur controle position
SPBN SUI; // ALORS
UW W#16#FFFF; // ET SUR MOT COMPLET POUR MAINTIEN DES CAMES
SPA FCOP; // saut inconditionnel a la copie
SUI: UW W#16#0; // ET SUR MOT COMPLET POUR RAZ DES CAMES
FCOP: T W [AR2,P#0.0]; // TRANSFERT du resultat du ET sur MOT dans la structure ICP en sortie de BF
LAR2 #SAVEAR2; // Restitution de AR2
// Mise a 0 des bits de cames en cas de mise en veille du telemetre
LAR1 AR2; // AR2 dans AR1 pour prise en compte de la multi-instance
L P##ICP; // Adresse de la structure ICP dans l ACCU1
+AR1; // Ajout de l accu1 a AR1
U #MF.SLEEP_POS; // SI le telemetre est mis en veille
SPBN RSTI; // ALORS
L 0;
T W [AR1,P#0.0]; // Chargement de 0 dans la structure ICP
RSTI: NOP 0;
NETWORK
TITLE =
//DEFAUT PARAMETRAGE ET REGLAGE BF
//*ODIL_ID:1833_83*
//
UN #mdfparam;
UN #mdfreglage;
SAVE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MB_BUTEE1"
TITLE =BF_MB_BUTEE1
//**********************************************************************
//*                           FB MB_BUTEE1                             *
//*                  GESTION D UNE BUTEE D UN MEUBLE                   *
//*                     CONTROLS A RACK STOPPER                        *
//**********************************************************************
//(In English further below)
//
//DESCRIPTION:
//************
//LA FB ASSURE:
//-LA GENERATION DES MEMOIRES SUPPORT
//-LA GENERATION DES INFOS SUPPORT
//-LA GENERATION DES INFOS OUVERTURE/FERMETURE BUTEE
//-LE PILOTAGE DES EV DE LA BUTEE
//-LE CONTROLE DE CONCORDANCE MEMOIRE / DETECTEUR
//-LE CONTROLE D'EXECUTION DU MOUVEMENT COMMANDE
//-LE CONTROLE DE L'EVACUATION DU SUPPORT
//-LE CONTROLE DES DETECTEURS DE LA BUTEE
//
//POUR LA DESCRIPTION DETAILLEE Du BF : VOIR la documentation du Bloc
//
//
//MISE EN OEUVRE:
//****************
//- Pour des raisons de disponibilite des meubles a accumulation les butees ne
//sont pas gerees par les modes de marche de la zone concernee.
//- Pour des raisons de securite les butees de travail des meubles a chargement
//ou
//dechargement automatique ne pourront fonctionner que zone fermee.
//
//- COM  : COMMUN SAfety et CONTROLE ROTATION CHAINE MEUBLE
//
//- MSEA : MEMOIRE SUPPORT EVACUE AMONT contenue dans La structure Info support
//
//          de la butee Ammont IIS (DB97) si butee d'attente.
//          Si la buttee n'est pas une Butee d'attente = 1 (BA1)
//
//- MSP  : Structure Mot support de la Butee contenue dans IIS
//
//- BVVP : BUTEE AVAL VIDE PRETE. Si pas de  butee aval = 1 (BA1)
//
//- POS_MSE : Position de l'information MSE (Memoire support evacuee ) dans la
//            struct IIS de la butee.
//
//- Variable Statique:
//  TDES: VALEUR TEMPO DEFAUT EVACUATION SUPPORT;
//        Variable pre-positionnee a 20s,
//        possibilite de forcage externe suivant besoin
//
//CODE DEFAUT :
//************
//Valeur de Diag.codedef :
//
//- 1  : Decyclage butee ou defaut detecteur support present
//       (mem presence=0,detecteur=1)
//- 2  : Decyclage butee ou defaut detecteur support present
//       (mem presence=1detecteur=0)
//- 4  : Decyclage butee (mem evacuation=1,butee fermee)
//- 8  : Defaut mouvement(pas d'info de position de la butee)
//- 16 : Defaut a l'ouverture de la butee (coincee en position de fermeture)
//- 32 : Defaut a la fermeture de la butee (coincee en position d ouverture)
//- 64 : Defaut evacuation support (support coince sur la butee)
//- 128 : Defaut evacuation support (pas recul de contrôle de l'evacuation)
//- 512 : Defaut parametrage Pos_MSE
//
//************************  ENGLISH INFORMATION  *************************
//
//DESCRIPTION:
//************
//THE FB CREATES:
//    - SUPPORT MEMORY
//    - SUPPORT INFORMATION
//    - STOPPER CLOSING/OPENING INFORMATION
//THE FB CONTROLS:
//    - THE STOPPER SOLENOID VALVES
//THE FB CHECKS:
//    - MEMORY AND SENSORS CONSISTENCY
//    - THE CONTROLLED MOVEMENT EXECUTION
//    - SUPPORT UNLOADING
//    - STOPPER SENSORS
//
//MORE INFORMATION :  See the block documentation
//
//
//OPERATING :
//***********
//- Due to accumulation Rack availability considerations, the stoppers are not
//managed by the operating modes of the zone concerned.
//- For safety reasons, automatic loading or unloading rack work stoppers can
//only
//operate in closed zones.
//
//- COM  :  Rack chain rotation check and Safety common 24V
//
//- MSEA :  Upstream unloaded support memory, Contained in IIS Support structure
//
//          (DB97) of upstream stopper if waiting stopper.
//             if stopper is not a waitting stopper = 1 (BA1)
//
//- MSP  :  Word support structure of stopper in IIS
//
//- BVVP :  Ready empty downstream stopper. If no downstream stopper = 1 (BA1)
//
//- POS_MSE: Bool position of MSE ( Evacuated support memory)  in IIS struct of
//           Stopper
//
//- STAT Variable:
//         TDES: Support unloading fault timer;
//                Variable is preset at 20sec,
//                It is possible to force it externally depending on facility
//
//FAULT CODE :
//***********
//Diag.codedef values :
//- 1 : Stopper out of cycle or support present detector fault
//     (presence memory =0, detector=1)
//- 2 : Stopper out of cycle or support present detector fault
//     (presence memory =1, detector=0)
//- 4 : Stopper out of cycle (evacuation memory =1,stopper closed)
//- 8 : Movement fault (no stopper position data)
//- 16: Fault when the stopper opens (blocked in closed position)
//- 32: Fault when the stopper closes (blocked in open position)
//- 64: Support evacuation fault (support blocked on the stopper)
//- 128: Support evacuation fault (evacuation check not received)
//- 512: POS_MSE Parameter setting fault
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 28
//Dernier ID mis en oeuvre / Last ID implemented : 2002_28
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'BUTEE1'
VERSION : 1.3
VAR_INPUT
  Com : BOOL;	//Rack chain rotation check common 24V/Commun Controle rotation chaine meuble
  Caob : BOOL;	//Stopper opening authorization condition/Condition autorisation ouverture butee
  Dsp : BOOL;	//Present support sensor/Detecteur support present
  Dfb : BOOL;	//Stopper closing sensor/Detecteur fermeture butee
  Dob : BOOL;	//Stopper opening sensor/Detecteur ouverture butee
  Msea : BOOL;	//Upstream unloaded support memory/Memoire support evacue amont
  Cev : BOOL;	//Unloading check/Controle evacuation
  Bvvp : BOOL;	//Downstream ready empty stopper/Butee aval vide prete
  MSP : ANY;	//Present support memory/Memoire support present
  POS_MSE : INT;	//Unloading support memory/Memoire support en evacuation
END_VAR
VAR_OUTPUT
  Eob : BOOL;	//Stopper opening valve/EV ouverture butee
  efb : BOOL;	//Stopper closing valve/EV fermeture butee
  Isp : BOOL;	//Present support information/Info support present
  Isa : BOOL;	//Absent support information/Info support absent
  Bvp : BOOL;	//Ready empty stopper/Butee vide prete
  Def : BOOL;	//Stopper failure/Defaut butee
  Diag : STRUCT	//Stopper failure diagnosis word/Mot diagnostic de defaut butee
    Def : BOOL;	//Fault/Defaut
    NumListe : WORD;	//List number/Numero liste
    CodeDef : WORD;	//Fault code/code du defaut
    Ihmdfb : BOOL;	//Stopper closing sensor/detecteur fermeture butee
    Ihmdob : BOOL;	//Stopper opening sensor/detecteur ouverture butee
    Ihmmsp : BOOL;	//Present support memory/Memoire support present
    Ihmmse : BOOL;	//Unloading support memory/Memoire support en evacuation
  END_STRUCT ;
END_VAR
VAR
  MSE_1 : BOOL;	//Unloaded support memory/MEMOIRE SUPPORT EVACUE
  MSP_2 : BOOL;	//Present support memory/MEMOIRE SUPPORT PRESENT
  Tdes : TIME  := T#20S;	//Support unloading fault timer/Temporisation defaut evacuation support (20s/def)
  Iob : BOOL;	//Stopper opening information/Info ouverture butee
  Ifb : BOOL;	//Stopper closing information/Info fermeture butee
  Dsup1 : BOOL;	//Support Out of cycle 1/Decyclage 1 support
  Idsup1 : BOOL;	//Support Out of cycle 1 information/Info decyclage 1 support
  Dsup2 : BOOL;	//Support Out of cycle 2/Decyclage 2 support
  Idsup2 : BOOL;	//Support Out of cycle 2 information/Info decyclage 2 support
  Dsup3 : BOOL;	//Support Out of cycle 3/Decyclage 3 support
  Idsup3 : BOOL;	//Support Out of cycle 3 information/Info decyclage 3 support
  Dmouv : BOOL;	//Stopper movement fault/Defaut de mouvement butee
  Idmouv : BOOL;	//Stopper movement fault information/Info defaut de mouvement butee
  Dmouvo : BOOL;	//Stopper opening movement fault/Defaut de mouvement butee a l'ouverture
  Idmouvo : BOOL;	//Stopper opening movement fault inf/Info defaut de mouvement butee a l'ouverture
  Dmouvf : BOOL;	//Stopper closing movement fault/Defaut de mouvement butee a la fermeture
  Idmouvf : BOOL;	//Stopper closing mov. fault info/Info defaut de mouvement butee a la fermeture
  Des1 : BOOL;	//Support unloading fault 1/Defaut 1 evacuation support
  Ides1 : BOOL;	//Support unloading fault 1 info/Info defaut 1 evacuation support
  Des2 : BOOL;	//Support unloading fault 2/Defaut 2 evacuation support
  Ides2 : BOOL;	//Support unloading fault 2 info/Info defaut 2 evacuation support
  Pres1 : TIME;	//Temp 1 preset value/Valeur de preselection temp 1
  Pres2 : TIME;	//Temp 2 preset value/Valeur de preselection temp 2
  Pres3 : TIME;	//Temp 3 preset value/Valeur de preselection temp 3
  Pres4 : TIME;	//Temp 4 preset value/Valeur de preselection temp 4
  Pres5 : TIME;	//Temp 5 preset value/Valeur de preselection temp 5
  Pres7 : TIME;	//Temp 7 preset value/Valeur de preselection temp 7
  Pres6 : TIME;	//Temp 6 preset value/Valeur de preselection temp 6
  Xdef : BOOL;	//Stopper major fault auxiliary/Auxiliaire defaut general butee
  Idesa : TON;	//Support unloading fault timer/TEMPO. DEFAUT EVACUATION SUPPORT
  idesb : TON;	//Support unloading fault 2 timer/TEMPO. DEFAUT 2 EVACUATION SUPPORT
  mouv : TON;	//Stopper movement fault timer/TEMPO. DEFAUT MOUVEMENT BUTEE
  mouvo : TON;	//Stopper opening movement fault timer/TEMPO. DEFAUT MOUVEMENT OUVERTURE BUTEE
  mouvf : TON;	//Stopper closing movement fault timer/TEMPO. DEFAUTS MOUVEMENT FERMETURE  BUTEE
  idsupa : TON;	//Support out of cycle 1 timer/TEMPO. defaut decyclage 1 support
  idsupb : TON;	//Support out of cycle 2 timer/TEMPO. defaut decyclage 2 support
END_VAR
VAR_TEMP
  Ba1i : BOOL;	//Bit always at 1/Bit toujours a 1
  Numdb : WORD;	//DB number/numero DB
  Deb : DWORD;	//Table start pointer/pointeur debut de table
  dfpara : BOOL;	//Pos_MSE parameter fault/Defaut parametre Pos_MSE
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Setting local bits
//*ODIL_ID:2002_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Recuperation de la table d'entree
//Input table processing
//*ODIL_ID:2002_2*
// numero de DB
//
L DBW [AR2,P#6.0]; // Chargement numero DB
T #Numdb;
// Recherche debut de table
L DBD [AR2,P#8.0]; // chargement pointeur debut de table
L DW#16#FFFFFF;
UD;
T #Deb;
NETWORK
TITLE =MEMOIRE SUPPORT PRESENT
//Present support memory
//*ODIL_ID:2002_3*
//
AUF DB [#Numdb]; // Ouverture DB
LAR1 #Deb;
U #Dsp;
U #Dfb;
U #Msea;
S DBX [AR1,P#0.0]; // chargement MSP en position 0
U #MSE_1;
U #Dob;
UN #Dsp;
R DBX [AR1,P#0.0]; // chargement MSP en position 0
U DBX [AR1,P#0.0];
= #MSP_2; // MEMOIRE SUPPORT PRESENT
= #Diag.Ihmmsp;
NETWORK
TITLE =MEMOIRE SUPPORT EVACUE
//Unloaded support memory
//*ODIL_ID:2002_4*
// Test borne position MSE
//
U(;
L #POS_MSE;
L 15;
>I;
);
O(;
L #POS_MSE;
L 1;
<I;
);
SPB PARA;
// Memoire support evacue
TAR1;
L #POS_MSE;
+D;
LAR1;
U #Dob;
U #MSP_2;
S DBX [AR1,P#0.0]; // chargement MSP en position 0
U #Cev;
R DBX [AR1,P#0.0]; // chargement MSP en position 0
U DBX [AR1,P#0.0];
= #MSE_1; // MEMOIRE SUPPORT EVACUE
= #Diag.Ihmmse;
NETWORK
TITLE =INFOS SUPPORT PRESENT
//Present support information
//*ODIL_ID:2002_5*
//
U #MSP_2;
U #Dsp;
UN #MSE_1;
= #Isp;
NETWORK
TITLE =INFOS SUPPORT ABSENT
//INFOS SUPPORT
//
//Absent support information
//*ODIL_ID:2002_6*
//
UN #MSP_2;
UN #Dsp;
= #Isa;
NETWORK
TITLE =INFOS POSITION BUTEE : OUVERTURE/FERMETURE
//OUVERTURE
//
//STOPPER POSITION INFORMATION: OPENING/CLOSING
//Opening
//*ODIL_ID:2002_7*
//
U #Dob;
UN #Dfb;
= #Iob;
NETWORK
TITLE =INFOS POSITION BUTEE : OUVERTURE/FERMETURE
//FERMETURE
//
//STOPPER POSITION INFORMATION: OPENING/CLOSING
//Closing
//*ODIL_ID:2002_8*
//
UN #Dob;
U #Dfb;
= #Ifb;
NETWORK
TITLE =ACTIONNEURS: EV OUVERTURE BUTEE
//ACTUATORS: Stopper opening solenoid valve
//*ODIL_ID:2002_9*
//
U #Com;
U #Isp;
U #Caob;
UN #Dob;
U #Bvvp;
UN #Cev;
= #Eob;
NETWORK
TITLE =ACTIONNEURS: EV FERMETURE BUTEE
//ACTUATORS: Stopper closing solenoid valve
//*ODIL_ID:2002_10*
//
U #Com;
U #Isa;
UN #Dfb;
UN #MSE_1;
= #efb;
NETWORK
TITLE =BUTEE VIDE PRETE
//Ready empty stopper
//*ODIL_ID:2002_11*
//
U #Isa;
UN #MSE_1;
U #Ifb;
= #Bvp;
NETWORK
TITLE =defaut decyclage 1 support
//Support out of cycle fault 1
//*ODIL_ID:2002_12*
//
UN #MSP_2;
UN #MSE_1;
U #Dsp;
= L 9.0;
BLD 103;
CALL #idsupa (
IN := L 9.0,
PT := T#5S,
Q := #Idsup1,
ET := #Pres1);
NOP 0;
NETWORK
TITLE =defaut decyclage 2 support
//Support out of cycle fault 2
//*ODIL_ID:2002_13*
//
U #MSP_2;
U #Ifb;
UN #Dsp;
= L 9.0;
BLD 103;
CALL #idsupb (
IN := L 9.0,
PT := T#5S,
Q := #Idsup2,
ET := #Pres2);
NOP 0;
NETWORK
TITLE =DEFAUT BUTEE :
//DECYCLAGE BUTEE OU DEFAUT DETECTEUR PRESENCE SUPPORT
//
//STOPPER FAULT:
//Stopper out of cycle or support presence sensor fault
//*ODIL_ID:2002_14*
//
U #MSE_1;
U #Ifb;
= #Dsup3;
NETWORK
TITLE =DEFAUTS MOUVEMENT BUTEE
//Stopper movement faults
//*ODIL_ID:2002_15*
//
UN #Iob;
UN #Ifb;
U #Com;
= L 9.0;
BLD 103;
CALL #mouv (
IN := L 9.0,
PT := T#5S,
Q := #Idmouv,
ET := #Pres3);
NOP 0;
NETWORK
TITLE =DEFAUTS MOUVEMENT BUTEE
//Stopper movement faults
//*ODIL_ID:2002_16*
//
U #Eob;
U #Ifb;
= L 9.0;
BLD 103;
CALL #mouvo (
IN := L 9.0,
PT := T#5S,
Q := #Idmouvo,
ET := #Pres4);
NOP 0;
NETWORK
TITLE =DEFAUTS MOUVEMENT BUTEE
//Stopper movement faults
//*ODIL_ID:2002_17*
//
U #efb;
U #Iob;
= L 9.0;
BLD 103;
CALL #mouvf (
IN := L 9.0,
PT := T#5S,
Q := #Idmouvf,
ET := #Pres5);
NOP 0;
NETWORK
TITLE =DEFAUT BUTEE : DEFAUT EVACUATION SUPPORT
//Stopper faults: Support unloading fault
//*ODIL_ID:2002_18*
//
U #Com;
U #MSE_1;
U #Iob;
U #Dsp;
= L 9.0;
BLD 103;
CALL #Idesa (
IN := L 9.0,
PT := T#5S,
Q := #Ides1,
ET := #Pres6);
NOP 0;
NETWORK
TITLE =INFO DEFAUT 2 EVACUATION SUPPORT
//Support unloading fault 2 information
//*ODIL_ID:2002_19*
//
U #Com;
U #MSE_1;
U #Iob;
UN #Dsp;
= L 9.0;
BLD 103;
CALL #idesb (
IN := L 9.0,
PT := #Tdes,
Q := #Ides2,
ET := #Pres7);
NOP 0;
NETWORK
TITLE =
//*ODIL_ID:2002_20*
PARA: NOP 0;
NETWORK
TITLE =Defaut parametre Pos_mse
//Pos_MSE parameter fault
//*ODIL_ID:2002_21*
//
O(;
L #POS_MSE;
L 1;
<I;
);
O(;
L #POS_MSE;
L 15;
>I;
);
= #dfpara;
NETWORK
TITLE =DEFAUT GENERAL BUTEE
//Stopper major fault
//*ODIL_ID:2002_22*
//
UN #Idsup1;
UN #Idsup2;
UN #Dsup3;
UN #Idmouv;
UN #Idmouvo;
UN #Idmouvf;
UN #Ides1;
UN #Ides2;
UN #dfpara;
= #Xdef;
NETWORK
TITLE =DEFAUT BUTEE
//Stopper fault
//*ODIL_ID:2002_23*
//
UN #Xdef;
= #Def;
NETWORK
TITLE =INDICATION DU DEFAUT
//Code : N° de defaut ou dalarme en Decimal
//
//         1  :Decyclage butee ou defaut detecteur support present
//              (mem presence=0,detecteur=1)
//         2  :Decyclage butee ou defaut detecteur support present
//             (mem presence=1detecteur=0)
//         4  :Decyclage butee (mem evacuation=1,butee fermee)
//         8  :Defaut mouvement(pas d'info de position de la butee)
//         16 :Defaut a l'ouverture de la butee (coincee en position de fermeture)
//         32 :Defaut a la fermeture de la butee (coincee en position d ouverture)
//         64 :Defaut evacuation support (support coince sur la butee)
//         128 :Defaut evacuation support (pas recu de controle de l'evacuation)
//         256 :
//         512 :Defaut de parametrage de la valeur Pos_MSE (Verifier les bornes)
//         1024:Defaut general de la butee
//
//FAULT INDICATION
//Code : Fault or alarm number in DEC
//
//         1  :Stopper out of cycle or support present sensor fault
//              (Presence memory=0, Presence sensor=1)
//         2  :Stopper out of cycle or support present sensor fault
//              (Presence memory=1, Presence sensor=0)
//         4  :Stopper out of cycle (Unloading memory=1, Closed stopper)
//         8  :Stopper movement fault (No stopper position information)
//         16 :Stopper opening fault (Stopper is blocked in closed position)
//         32 :Stopper closing fault (Stopper is blocked in opened position)
//         64 :Support unloading fault (Support in blocked on stopper)
//         128 :Support unloading fault (No unloading feedback)
//         256 :
//         512 :Pos_MSE Parameter fault (check the terminals)
//         1024:Stopper major fault
//*ODIL_ID:2002_24*
//
L 0;
T #Diag.CodeDef;
NOP 0;
NETWORK
TITLE =DIAGNOSTIC: N° LISTE DE DEFAUT PROPRE A LA FB POUR IHMP
//DIAGNOSIS: List number of own FB fault for IHMP
//*ODIL_ID:2002_25*
//
L 0;
T #Diag.NumListe;
NOP 0;
NETWORK
TITLE =DOCUMENTATION DU MOT DE DIAGNOSTIC DEFAUT BUTEE
//Stopper fault Diagnosis word writing
//*ODIL_ID:2002_26*
//
U #Ba1i;
= L 9.0;
U L 9.0;
U #Idsup1;
SPBNB _001;
L 1;
T #Diag.CodeDef;
_001: NOP 0;
U L 9.0;
U #Idsup2;
SPBNB _002;
L 2;
T #Diag.CodeDef;
_002: NOP 0;
U L 9.0;
U #Dsup3;
SPBNB _003;
L 4;
T #Diag.CodeDef;
_003: NOP 0;
U L 9.0;
U #Idmouv;
SPBNB _004;
L 8;
T #Diag.CodeDef;
_004: NOP 0;
U L 9.0;
U #Idmouvo;
SPBNB _005;
L 16;
T #Diag.CodeDef;
_005: NOP 0;
U L 9.0;
U #Idmouvf;
SPBNB _006;
L 32;
T #Diag.CodeDef;
_006: NOP 0;
U L 9.0;
U #Ides1;
SPBNB _007;
L 64;
T #Diag.CodeDef;
_007: NOP 0;
U L 9.0;
U #Ides2;
SPBNB _008;
L 128;
T #Diag.CodeDef;
_008: NOP 0;
U L 9.0;
U #dfpara;
SPBNB _009;
L 512;
T #Diag.CodeDef;
_009: NOP 0;
NETWORK
TITLE =DIAG IHM DFB
//DFB HMI Diagnosis
//*ODIL_ID:2002_27*
//
U #Dfb;
= #Diag.Ihmdfb;
NETWORK
TITLE =DIAG IHM DOB
//DOB HMI Diagnosis
//*ODIL_ID:2002_28*
//
U #Dob;
= #Diag.Ihmdob;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MB_CHAINE1"
TITLE =BF_MB_CHAINE1
//*******************************************************************************
//*                           FB MB_CHAINE1                                     *
//*                                                                             *
//*    PERMET DE PILOTER LE MOTEUR DU MEUBLE ET DE SURVEILLER LES DEFAUTS       *
//*                CONTROLS RACK MOTOR AND MONITORE FAULTS                      *
//*******************************************************************************
//(In English further below)
//
//DESCRIPTION:  LE FB "MB_CHAINE1" ASSURE:
//************
//- LE PILOTAGE DU MOTEUR DE LA CHAINE DU MEUBLE
//   . Pilotage du relais de commande de la rotation de la chaine
//   . Gestion des informations de seuil maxi et mini.
//   . Gestion de linformation de defaut du meuble.
//   . Gestion de la temporisation fin de quart.
//
//- LA SURVEILLANCE DES DEFAUTS MOTEUR DU MEUBLE :
//
//
//POUR LA DESCRIPTION DETAILLEE DE LA FB : VOIR LA DOCUMENTATION du BLOC
//
//MISE en OEUVRE:
//******************
//ENTREES
//   - AU: Commun actionneur moteur, issu du contacteur KAU (Arret d'urgence
//ZONE)
//et AU exterieurs.
//   - MS: Mot securite, mot regroupant les informations de securite documentees
//a l'exterieur de la FB
//              Ssm    = Selecteurs de securite meuble ou Safety
//              Climef = Limiteur d'effort
//              Cdjm   = Disjoncteur moteur
//              Csil   = Silhouette
//              Cvirch = Condition de transit de la navette dans le virage du
//                       poste de chargement
//              Cvirdch = Condition de transit de la navette dans le virage du
//                        poste de dechargement
//              Ch_ok   = Bon fonctionnement du meuble au poste de chargement
//                        (pour les meubles inter-zones)
//              Cexam   = Condition exterieure d'arret moteur  (si info a un,
//                        alors arret moteur)
//   - Finquart:Condition fin de quart,Sert a stopper le fonctionnement de la
//              chaîne suite a une inactivite du meuble dune duree parametrable.
//   - DSsmax  :Detecteur seuil maxi (Saturation)
//   - Dsmin   :Detecteur seuil mini
//   - Z_ir    :Info rearmement zone
//   - Iadf    :Info annulation defaut
//
//   - TEMPOS :
//              - TP_Fquar (Fin de quart) => valeur en minute,
//              - TP_Smax  (SEUIL MAX) => Valeur en seconde
//              - TP_Smin  (SEUIL MIN) => valeur en seconde
//              - TP_Vir  (TEMPO DE VIRAGE) => valeur en seconde
//
//SORTIES
//   - Rme     :CONTACTEUR MARCHE CHAINE MEUBLE (Sortie API)
//   - Ismaxi  :INFO DE SEUIL MAXI (Traitement Programme)
//   - Ismini  :INFO DE SEUIL MINI (Traitement Programme)
//   - Def     :DEFAUT CONTACTEUR OU SECURITE MARCHE CHAINE MEUBLE (Lien SMP)
//
//CODE DEFAUT :
//************
//Valeur de Diag.codedef :
// 1 : DEFAUT LIMITEUR EFFORT MOTEUR
// 2 : DEFAUT DISJONCTEUR MOTEUR
// 4 : DEFAUT SILHOUETTE
// 8 : DEFAUT VIRAGE AU CHARGEMENT
//16 : DEFAUT VIRAGE AU DECHARGEMENT
//32 : DEFAUT CHARGEMENT ZONE AMONT (CAS D'UN MEUBLE INTER ZONES)
//
//******************** ENGLISH DESCRIPTION*********************************
//
//DESCRIPTION:  The FB "MB_CHAINE1" handles:
//************
//- The rack's chain motor control with
//   . Chain rotation control relay
//   . Min and max threshold information management
//   . Rack's fault information management
//   . End of quarter timer management
//- Rack's motor faults monitoring with
//
//- End of quarter timer control
//
//For more information, see the block documentation
//OPERATING :
//************
//INPUTS
//   - AU: Motor actuator common 24V, from KAU (Emergency stop contactor of zone)
//        and external AU
//   - MS: Safety word, includins safety information. Parameter before FB call.
//              Ssm    = Zone or rack safety selector
//              Climef = Torque limiter
//              Cdjm   = Motor circuit breaker
//              Csil   = Shape
//              Cvirch = Loading turn shuttle transit condition
//              Cvirdch = Unloading turn shuttle transit condition
//              Ch_ok   = Loading stage correct working (for inter-zone racks)
//              Cexam   = Rack motor stop external conditions (if set, motor
//stops)
//
//   - Finquart: End of quarter condition , used for stop the chain after a idle
//time.
//   - DSsmax  : Max threshold sensor (Saturation)
//   - Dsmin   : Min threshold sensor
//   - Z_ir    : Zone control on (reset) information
//   - Iadf    : Fault reset information
//
//   - Timers :
//              - TP_Fquar (End of quarter) => value in minutes
//              - TP_Smax (MAX threshold) => value  in seconds
//              - TP_Smin (MIN threshold) => value in seconds
//              - TP_vir (Turn timer) => value in seconds
//
//OUTPUTS
//   - Rme     : Rack chain motor relay control (PLC out)
//   - Ismaxi  : Max thershold information (Program)
//   - Ismini  : Max thershold information (Program)
//   - Def     : Rack's chain contactor or safety fault (SMP link)
//
//FAULT CODE :
//************
//Value of Diag.codedef :
// 1 : Motor torque limiter fault
// 2 : Motor circuit breaker fault
// 4 : Shape fault
// 8 : Loading turn fault
//16 : Unloading turn fault
//32 : Inter zone racks upstream fault
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 48
//Dernier ID mis en oeuvre / Last ID implemented : 2001_48
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'CHAINE1'
VERSION : 1.2
VAR_INPUT
  Au : BOOL;	//Safety Common 24V/Information commun sous tension
  MS : STRUCT	//Safety Word/Mot securite
    Ssm : BOOL;	//Zone or Rack safety selector/ Selecteurs de securite meuble ou Safety
    Climef : BOOL;	//Torque limiter information/information du limiteur d'effort
    Cdjm : BOOL;	//Motor circuit breaker information/information du disjoncteur moteur
    Csil : BOOL;	//Unloading shape information/Information de la silhouette de dechargement
    Cvirch : BOOL;	//Shuttle transit check/controle de transit de la navette
    Cvirdch : BOOL;	//Shuttle turn transit check/Ctrl transit navette ds virage poste decharg
    Ch_ok : BOOL;	//Loading stage correct working/bon fonctionnement meuble poste chargement
    Cexam : BOOL;	//Rack motor stop ext conditions/conditions exterieures darret moteur du meuble.
  END_STRUCT ;
  Finquart : BOOL;	//End of quarter information/Information fin de quart
  Dsmax : BOOL;	//Max threshold sensor/Detecteur seuil max
  Dsmin : BOOL;	//Min threshold sensor/Detecteur seuil mini
  Z_ir : BOOL;	//Zone control on (reset)/rearmement zone
  Iadf : BOOL;	//Fault reset/Annulation defaut
  Tp_fquar : TIME;	//Rack's end of quarter timer/Temporisation de fin de quart du meuble
  Tp_smin : TIME;	//Min threshold timer/Temporisation du seuil mini
  Tp_smax : TIME;	//Max threshold timer/Temporisation du seuil maxi
  Tp_vir : TIME;	//Turn fault timer/Temporisation defaut virage
END_VAR
VAR_OUTPUT
  Rme : BOOL;	//Rack chain motor relay control/Active la commande du relais moteur chaine
  Ismaxi : BOOL;	//Max thershold reached info/Information seuil maxi atteint
  Ismini : BOOL;	//Min thershold reached info/information seuil mini atteint
  def : BOOL;	//SMP fault/Defaut general SMP
  Diag : STRUCT
    Def : BOOL;	//Fault/defaut
    Ala : BOOL;	//Alarm/alarme
    Numlist : INT;	//List number/Numero defaut
    Codedef : INT;	//Fault code/Code de defaut
    infoatrcmc : BOOL;	//Chain contactor reset waiting/Attente rearmement contacteur marche chaine
    infoau : BOOL;	//AU (Em Stop) common status/Etat du commun AU
    infossm : BOOL;	//Zone or rack safety switch statusEtat Selecteurs Securite meuble ou info SAFETY
    infoch_ok : BOOL;	//Loading OK exchange status/Etat de lechange chargement OK
    infodefsec : BOOL;	//Chain safety fault status/Etat defaut securite chaine
    infoftfq : BOOL;	//End of quarter status/Etat fin de quart meuble
    infoRme : BOOL;	//Chain contactor status/Etat contacteur marche chaine
  END_STRUCT ;
END_VAR
VAR
  Ssm : BOOL;	//Zone or rack safety selector/Selecteurs de securite meuble ou Safety
  Climef : BOOL;	//Torque limiter check/controle limiteur d'effort
  Cdjm : BOOL;	//Chain motor circuit breaker check/Controle disjoncteur moteur chaine
  Csil : BOOL;	//Shape check/Controle silouhette
  Cvirch : BOOL;	//Loading turn check/Controle virage au chargement (cas de meuble a ch manuel)
  Cvirdch : BOOL;	//Unloading turn check/Controle virage au dechargement
  Ch_ok : BOOL;	//Loading OK (inter-zone rack case)/Chargement OK (cas de meuble inter zone)
  Cexam : BOOL;	//Motor stop external condition/Condition exterieur d'arret moteur
  Carme : BOOL;	//Rack relay conditions with reset/Condition avec rearmement relais meuble
  Marme : BOOL;	//Rack relay memory with reset/Memoire avec rearmement relais meuble
  Csrme : BOOL;	//Rack relay without reset cond/Condition sans rearmement relais meuble
  Icvirch : BOOL;	//Loading turn check info/Info controle virage au chargement
  Icvirdch : BOOL;	//Unloading turn check info/Info controle virage au dechargement
  idvirch : BOOL;	//Loading turn fault info/Info defaut virage au chargement
  Idvirdch : BOOL;	//Unloading turn fault info/Info defaut virage au dechargement
  Priv1 : WORD;	//Loading turn fault timer preset/Val preselection Tempo defaut virage chargement
  Mot1 : WORD;	//Loading turn fault timer current/Val courante Tempo defaut virage chargement
  Priv2 : WORD;	//Unloading turn fault timer preset/Val preselection Tempo defaut virage dech
  Mot2 : WORD;	//Unloading turn fault timer currentVal courante Tempo defaut virage dechargement
  Ftfq : BOOL;	//End of quarter timer/Fin de tempo fin de quart
  Dlimef : BOOL;	//Torque limiter fault/Defaut limiteur d'effort
  Ddjm : BOOL;	//Chain motor circuit breaking fault/Defaut disjonction moteur chaine
  Dsil : BOOL;	//Shape fault/Defaut silhouette
  Dvirch : BOOL;	//Loading turn fault/Defaut virage au chargement
  Dvirdch : BOOL;	//Unloading turn fault/Defaut virage au dechargement
  Dfamont : BOOL;	//Upstream zone loading fault/Defaut au chargement zone amont
  Defsec : BOOL;	//Safety fault/Defaut de securite
  Nbsec : WORD;	//Count up seconds number/Increment nombre de secondes
  Fsec : BOOL;	//Count up seconds num rising edge/Front Increment nombre de secondes
  M1tour : BOOL;	//First cycle memory/Memoire premier tour sequentiel
  Vt_smax : TIME;	//Max threshold timer parameter val/Valeur de parametrage tempo seuil maxi
  Idsmax1 : BOOL;	//Max threshold info = 1/Info de seuil maxi a l'etat 1
  Idsmax0 : BOOL;	//Max threshold info = 0/Info de seuil maxi a l'etat 0
  Idsmin1 : BOOL;	//Min threshold info = 1/Info de seuil mini a l'etat 1
  Idsmin0 : BOOL;	//Min threshold info = 0/Info de seuil mini a l'etat 0
  priv3 : WORD;	//Max threshold timer preset = 1/Val preselection Tempo de seul maxi etat 1
  Mot3 : DWORD;	//Max threshold timer current val = 1/Valeur courante tempo de seuil maxi etat 1
  Priv4 : WORD;	//Min threshold timer preset= 1/Valeur de preselection tempo de seuil mini etat 1
  Mot4 : DWORD;	//Min threshold timer current val = 1/Valeur courante tempo de seuil mini etat 1
  Priv5 : WORD;	//Max threshold timer preset= 0/Valeur de preselection tempo de seuil maxi etat 0
  Mot5 : DWORD;	//Max threshold timer current val = 0/Valeur courante tempo de seuil maxi etat 0
  Priv6 : WORD;	//Min threshold timer preset= 0/Valeur de preselection tempo de seuil mini etat 0
  Mot6 : DWORD;	//Min threshold timer current val = 0/Valeur courante tempo de seuil mini etat 0
  Ftsmax1 : BOOL;	//Max threshold timer ending=1/Fin Tempo seuil max a l'etat 1
  Ftsmax0 : BOOL;	//Max threshold timer ending=0/Fin Tempo seuil max a l'etat 0
  Ftsmini1 : BOOL;	//Min threshold timer ending=1/Fin Tempo seuil mini a l'etat 1
  Ftsmini0 : BOOL;	//Min threshold timer ending=0/Fin Tempo seuil mini a l'etat 0
  Piadf_9 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf_8 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf_7 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf_6 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf_5 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf_4 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf_3 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf_2 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf_1 : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Piadf : BOOL;	//Fault reset info rising edge/Front montant info annulation defaut
  Tonidvirch : TON;	//Loading fault info timer/Tempo Info Defaut au Chargement
  Tonidvirdch : TON;	//Unloading fault info timer/Tempo Info Defaut au Dechargement
  Tonftsmax1 : TON;	//Max threshold info set timer/Tempo Mise a 1 Info de seuil Maxi
  Tonftsmax0 : TON;	//Max threshold info reset timer/Tempo Mise a 0 Info de seuil Maxi
  Tonftsmini1 : TON;	//Min threshold info set timer/Tempo Mise a 1 Info de seuil Mini
  Tonftsmini0 : TON;	//Min threshold info reset timer/Tempo Mise a 0 Info de seuil Mini
  Aux_nbsec : WORD;	//Sec number auxiliary end of quarter calc/Aux nb de sec pour calcul fin de quart
  TONPulsor : TON;	//Pulsor
  Tpulsor : TIME  := T#1S;	//Pulsor time R/W at 1/ Lec/Ecr Temps du pulsor a 1
  TONPulsor1 : TON;	//Pulsor
  Tpulsor1 : TIME  := T#150MS;	//Pulsor time R/W at 1/ Lec/Ecr Temps du pulsor a 1
END_VAR
VAR_TEMP
  Ba1i : BOOL;	//Bit always at 1/Bit toujours a 1
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Set internal bits
//*ODIL_ID:2001_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =RELAIS  MOTEUR CHAINE MEUBLE : CONDITION AVEC REARMEMENT
//Rack's chain motor relay : Condition with reset
//*ODIL_ID:2001_2*
//
UN #Defsec;
UN #MS.Cexam;
U #MS.Ssm;
= #Carme;
NETWORK
TITLE =RELAIS  MOTEUR CHAINE MEUBLE : MEMOIRE CONDITION AVEC REARMEMENT
//Rack's chain motor relay : condition with reset memory
//*ODIL_ID:2001_3*
//
U(;
O #Z_ir;
O #Marme;
);
U #Carme;
= #Marme;
NETWORK
TITLE =RELAIS MOTEUR CHAINE MEUBLE : CONDITIONS  SANS REARMEMENT
//Rack's chain motor relay : condition without reset
//*ODIL_ID:2001_4*
//
U #MS.Ch_ok;
UN #Ftfq;
U #Au;
= #Csrme;
NETWORK
TITLE =RELAIS MOTEUR CHAINE MEUBLE: ACTIONNEUR CONTACTEUR CHAINE MEUBLE
//Rack's chain motor relay : Rack's chain contactor actuator
//*ODIL_ID:2001_5*
//
U #Marme;
U #Csrme;
= #Rme;
NETWORK
TITLE =RELAIS MOTEUR CHAINE MEUBLE : DIAGNOSTIC ATTENTE DE REARMEMENT
//Rack's chain motor relay : Waiting for reset diagnosis
//*ODIL_ID:2001_6*
//
U #Carme;
U #Csrme;
UN #Rme;
= #Diag.infoatrcmc;
NETWORK
TITLE =**************** DEFAUTS MEUBLE / RACKS FAULT  *****************
//DEFAUT LIMITEUR EFFORT MOTEUR
//
//Motor torque limiter fault
//*ODIL_ID:2001_7*
//
U #Rme;
UN #MS.Climef;
S #Dlimef;
U #Iadf;
FP #Piadf_2;
U #MS.Climef;
R #Dlimef;
NOP 0;
NETWORK
TITLE =DEFAUT DISJONCTEUR MOTEUR
//Motor circuit breaker fault
//*ODIL_ID:2001_8*
//
UN #MS.Cdjm;
S #Ddjm;
U #Iadf;
FP #Piadf_3;
U #MS.Cdjm;
R #Ddjm;
NOP 0;
NETWORK
TITLE =DEFAUT SILHOUETTE AU DECHARGEMENT
//Unloading shape fault
//*ODIL_ID:2001_9*
//
UN #MS.Csil;
S #Dsil;
U #Iadf;
FP #Piadf_4;
U #MS.Csil;
R #Dsil;
NOP 0;
NETWORK
TITLE =DEFAUT VIRAGE AU CHARGEMENT
//Loading turn fault
//*ODIL_ID:2001_10*
//
U #MS.Cvirch;
U #Rme;
= #Icvirch;
NETWORK
TITLE =DEFAUT VIRAGE AU CHARGEMENT
//Loading turn fault
//*ODIL_ID:2001_11*
//
U #Icvirch;
= L 1.0;
BLD 103;
CALL #Tonidvirch (
IN := L 1.0,
PT := #Tp_vir,
Q := #idvirch);
NOP 0;
NETWORK
TITLE =DEFAUT VIRAGE AU CHARGEMENT
//Loading turn fault
//*ODIL_ID:2001_12*
//
U #idvirch;
S #Dvirch;
U #Iadf;
FP #Piadf_5;
R #Dvirch;
NOP 0;
NETWORK
TITLE =DEFAUT VIRAGE AU DECHARGEMENT
//Unloading turn fault
//*ODIL_ID:2001_13*
//
U #MS.Cvirdch;
U #Rme;
= #Icvirdch;
NETWORK
TITLE =DEFAUT VIRAGE AU DECHARGEMENT
//Unloading turn fault
//*ODIL_ID:2001_14*
//
U #Icvirdch;
= L 1.0;
BLD 103;
CALL #Tonidvirdch (
IN := L 1.0,
PT := #Tp_vir,
Q := #Idvirdch);
NOP 0;
NETWORK
TITLE =DEFAUT VIRAGE AU DECHARGEMENT
//Unloading turn fault
//*ODIL_ID:2001_15*
//
U #Idvirdch;
S #Dvirdch;
U #Iadf;
FP #Piadf_6;
R #Dvirdch;
NOP 0;
NETWORK
TITLE =DEFAUT AU DECHARGEMENT ZONE AMONT
//Inter zone racks upstream fault (In upstream zone, unloading fault)
//*ODIL_ID:2001_16*
//
UN #MS.Ch_ok;
= #Dfamont;
NETWORK
TITLE =DEFAUT GENERAL MEUBLE
//Rack general fault
//*ODIL_ID:2001_17*
//
O #Dlimef;
O #Ddjm;
O #Dsil;
O #Dvirch;
O #Dvirdch;
= #Defsec;
NETWORK
TITLE =DEFAUT GENERAL MEUBLE
//Rack general fault
//*ODIL_ID:2001_18*
//
U #Defsec;
= #def;
= #Diag.Def;
NETWORK
TITLE =INFOS DE SEUIL MAXI
//Max threshold info
//*ODIL_ID:2001_19*
//
U #Dsmax;
U #Rme;
= #Idsmax1;
NETWORK
TITLE =INFOS DE SEUIL MAXI
//Max threshold info
//*ODIL_ID:2001_20*
//
U #Idsmax1;
= L 1.0;
BLD 103;
CALL #Tonftsmax1 (
IN := L 1.0,
PT := #Tp_smax,
Q := #Ftsmax1);
NOP 0;
NETWORK
TITLE =INFOS DE SEUIL MAXI
//Max threshold info
//*ODIL_ID:2001_21*
//
UN #Dsmax;
U #Rme;
= #Idsmax0;
NETWORK
TITLE =INFOS DE SEUIL MAXI
//Max threshold info
//*ODIL_ID:2001_22*
//
U #Idsmax0;
= L 1.0;
BLD 103;
CALL #Tonftsmax0 (
IN := L 1.0,
PT := #Tp_smax,
Q := #Ftsmax0);
NOP 0;
NETWORK
TITLE =INFOS DE SEUIL MAXI
//Max threshold info
//*ODIL_ID:2001_23*
//
U #Ftsmax1;
S #Ismaxi;
U #Ftsmax0;
R #Ismaxi;
NOP 0;
NETWORK
TITLE =INFOS DE SEUIL MINI
//Min threshold info
//*ODIL_ID:2001_24*
//
U #Dsmin;
U #Rme;
= #Idsmin1;
NETWORK
TITLE =INFOS DE SEUIL MINI
//Min threshold info
//*ODIL_ID:2001_25*
//
U #Idsmin1;
= L 1.0;
BLD 103;
CALL #Tonftsmini1 (
IN := L 1.0,
PT := #Tp_smin,
Q := #Ftsmini1);
NOP 0;
NETWORK
TITLE =INFOS DE SEUIL MINI
//Min threshold info
//*ODIL_ID:2001_26*
//
UN #Dsmin;
U #Rme;
= #Idsmin0;
NETWORK
TITLE =INFOS DE SEUIL MINI
//Min threshold info
//*ODIL_ID:2001_27*
//
U #Idsmin0;
= L 1.0;
BLD 103;
CALL #Tonftsmini0 (
IN := L 1.0,
PT := #Tp_smin,
Q := #Ftsmini0);
NOP 0;
NETWORK
TITLE =INFOS DE SEUIL MINI
//Min threshold info
//*ODIL_ID:2001_28*
//
U #Ftsmini1;
S #Ismini;
U #Ftsmini0;
R #Ismini;
NOP 0;
NETWORK
TITLE =Fin de quart
//tempo fin de quart
//
//End of quarter: timer
//*ODIL_ID:2001_29*
//
U(;
ON #Finquart;
O #Z_ir;
);
SPBNB _001;
L 0;
T #Nbsec;
_001: NOP 0;
NETWORK
TITLE =Tempo fin de quart: Lancement du Pulsor de cadencement
//End of quarter timer: launcing pace pulsor
//*ODIL_ID:2001_30*
//
U #Ba1i;
UN #TONPulsor1.Q;
= L 1.0;
BLD 103;
CALL #TONPulsor (
IN := L 1.0,
PT := #Tpulsor);
NOP 0;
NETWORK
TITLE =Tempo fin de quart: Lancement du Pulsor de cadencement
//End of quarter timer: launcing pace pulsor
//*ODIL_ID:2001_31*
//
U #Ba1i;
U #TONPulsor.Q;
= L 1.0;
BLD 103;
CALL #TONPulsor1 (
IN := L 1.0,
PT := #Tpulsor1);
NOP 0;
NETWORK
TITLE =tempo fin de quart
//End of quarter timer
//*ODIL_ID:2001_32*
//
U #Finquart;
UN #Z_ir;
U #TONPulsor.Q;
UN #Fsec;
UN #Ftfq;
SPBNB _002;
L #Nbsec;
L 1;
+I;
T #Nbsec;
_002: NOP 0;
NETWORK
TITLE =tempo fin de quart
//End of quarter timer
//*ODIL_ID:2001_33*
//
U #TONPulsor.Q;
= #Fsec;
NETWORK
TITLE =tempo fin de quart
//End of quarter timer
//*ODIL_ID:2001_34*
//
U(;
L #Tp_fquar;
L 1000;
/D;
T #Vt_smax;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L #Nbsec;
L #Vt_smax;
>=I;
);
= #Ftfq;
NETWORK
TITLE =Diagnostic:bit des defauts
//Diagnostic: N° liste de defaut propre a la FB pour IHMP
//
//DIAGNOSIS: Fault bits
//Diagnosis word, fault list number specific to this FB (for IHMP use)
//*ODIL_ID:2001_35*
//
L 0;
T #Diag.Numlist;
NOP 0;
NETWORK
TITLE =RAZ du mot DIAG.codedef
//DIAG.codedef word reset
//*ODIL_ID:2001_36*
//
L 0;
T #Diag.Codedef;
NOP 0;
NETWORK
TITLE =Code : N° de defaut ou dalarme en Decimal
//1 :Defaut limiteur effort moteur
//
//Diagnosis fault code
//*ODIL_ID:2001_37*
//
U #Dlimef;
SPBNB _003;
L 1;
T #Diag.Codedef;
_003: NOP 0;
NETWORK
TITLE =Code : N° de defaut ou dalarme en Decimal
//2 : Defaut disjoncteur moteur
//
//Diagnosis fault code
//2 : Motor circuit breaker fault
//*ODIL_ID:2001_38*
//
U #Ddjm;
SPBNB _004;
L 2;
T #Diag.Codedef;
_004: NOP 0;
NETWORK
TITLE =Code : N° de defaut ou dalarme en Decimal
//4 :Defaut silhouette
//
//Diagnosis fault code
//4 : Shape fault
//*ODIL_ID:2001_39*
//
U #Dsil;
SPBNB _005;
L 4;
T #Diag.Codedef;
_005: NOP 0;
NETWORK
TITLE =Code : N° de defaut ou dalarme en Decimal
//8 : Defaut virage au chargement
//
//Diagnosis fault code
//8 : Loading turn fault
//*ODIL_ID:2001_40*
//
U #Dvirch;
SPBNB _006;
L 8;
T #Diag.Codedef;
_006: NOP 0;
NETWORK
TITLE =Code : N° de defaut ou dalarme en Decimal
//16 :Defaut virage au dechargement
//
//Diagnosis fault code
//16 : Unloading turn fault
//*ODIL_ID:2001_41*
//
U #Dvirdch;
SPBNB _007;
L 16;
T #Diag.Codedef;
_007: NOP 0;
NETWORK
TITLE =Code : N° de defaut ou dalarme en Decimal
//32 :Defaut chargement zone amont
//
//Diagnosis fault code
//32 : Inter zone racks upstream fault
//*ODIL_ID:2001_42*
//
U #Dfamont;
SPBNB _008;
L 32;
T #Diag.Codedef;
_008: NOP 0;
NETWORK
TITLE =INFO SUR ETAT  pour IHM EVENTUELLE
//Status information for possible HMI
//*ODIL_ID:2001_43*
//
U #Au;
= #Diag.infoau;
NETWORK
TITLE =INFO SUR ETAT pour IHM EVENTUELLE
//Status information for possible HMI
//*ODIL_ID:2001_44*
//
U #Ssm;
= #Diag.infossm;
NETWORK
TITLE =INFO SUR ETAT pour IHM EVENTUELLE
//Status information for possible HMI
//*ODIL_ID:2001_45*
//
U #Ch_ok;
= #Diag.infoch_ok;
NETWORK
TITLE =INFO SUR ETAT pour IHM EVENTUELLE
//Status information for possible HMI
//*ODIL_ID:2001_46*
//
U #Defsec;
= #Diag.infodefsec;
NETWORK
TITLE =INFO SUR ETAT pour IHM EVENTUELLE
//Status information for possible HMI
//*ODIL_ID:2001_47*
//
U #Ftfq;
= #Diag.infoftfq;
NETWORK
TITLE =INFO SUR ETAT pour IHM EVENTUELLE
//Status information for possible HMI
//*ODIL_ID:2001_48*
//
U #Rme;
= #Diag.infoRme;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_NC_LOCATOR_16-32"
TITLE =Bf_NC_Locator_16-32
//*******************************************************************************
//*                           FB "NC_LOCATOR_16/32"                             *
//*                                                                             *
//*                                DESCRIPTION                                  *
//*                                                                             *
//*******************************************************************************
//( In English further below)
//DESCRIPTION:
//************
//   - gestion des ordres de commande suivant les modes:
//       Auto, Manu reglage, Auto Pas a Pas, Auto Retour Origine de Cycle
//        (positionnes sur les bits du mot lien pupitre LIEN_PUP)
//   - gestion de l'ordre de commande suivant l'etat de la fonction
//       (positionnees sur les bits du mot fonction MF)
//   - gestion des voyants particuliers
//   - gestion des voyants communs
//   - mesure du temps d'execution du mouvement et comparaison avec un temps
//       de reference enregistre. Activation d'une alerte et d'un defaut
//
//
//MISE EN OEUVRE :
//*************
//Utilise :
//l' UDT 1988 Lien_Pup ( les information sont generees par la BF_Zone_Mode)
//l'UDT 2042 Mot_Fonc (Information a generer en amont de la BF)
//Gestion des mouvements en Mode Manuel :
//Par defaut la BF fonctionne pour une commande de mouvement dans une zone fermee
//sans risque operateur
//Pour une utilisation avec commande Bimanuelle, l'information BIM contenue dans
//le Mot fonction MF doit etre Maintenue a 1 en amont de la BF pour visualiser la
//position du mouvement sur l'ecran et permettre la selection du sens du
//mouvement
//
//Les temps de references doivent etre associes au DB $98 de la zone (Z$T)
//($ = Numero de la zone)
//
//L'entree COM doit etre mise en uvre avec l'information de commun electrique
//issue du programme Safety
//Pour les mouvements en zone fermee = info safety de la zone fermee "TNI".Z$FZ_OK
//Pour les mouvements avec commande bimanuelle = Info safety de securite
//operateur
//"TRI".<NomSE>SOP_OK
//
//
//************************** ENGLISH INFORMATION  ****************************
//DESCRIPTION :
//*************
// Control of the order of commands depending on the operating modes:
//Auto, Manual control, Auto Step mode, Auto Return to Cycle Origin
//(set by the bool of the UDT link to operator panel LIEN_PUP)
//- Control of the order of commands depending on the status of the function
//(set with the Bool of the UDT function MF )
//- Control of the dedicated lamps
//- Control of the commom lamps
//- Measurement of the execution time for the movement and comparison with the
//recorded reference time. Activation of a warning and an error message.
//
//OPERATING:
//***********
//This BF Use :
//UDT 1988 "LIEN_PUP" (written by BF_ZONE_MODE)
//UDT 2042 "MOT_FONC" (the information must be written before this BF)
//Movement in Manual Mode:
//If you use an Safety Bimanual comand, the BIM Input contained in MF UDT must be
//set to 1 before this BF to see the lamp position of movement to the screen
//and select the movement direction
//Time movement Reference:
//Must be use between the global data DB$98 "Z$T" of the area (zone) dependence (
//$ = zone Number)
//COM Input : must be operate with the safety command polarity
//- For a movement in a closed Area = Safety closed area command polarity data in
//"TNI" DB (for example: "TNI".Z$FZ_OK (With $= zone number of the facility)
//- For a movement with Bimanual commad = Safety operator data in "TRI" DB ( For
//example: "TRI".<Sub-unit NAME>SOP_OK
//
//
//
//************************** _ODIL_ID_ ****************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 94
//Dernier ID mis en oeuvre / Last ID implemented : 1827_94
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
VERSION : 2.0
VAR_INPUT
  ADR_IO_NCL : INT;	//DEVICE ADRESS ON PROFINET / ADRESSE DU COFFRET LOCATOR SUR PROFINET
  COM_ES : BOOL;	//SAFETY COMMON ES / COMMUN DE SECURITE POUR NIVEAU ES (STO du NCLOC)
  COM_FZ_SOP : BOOL;	//SAFETY COMMON FZ ou SOP / COMMUN DE SECURITE POUR NIVEAU FZ ou SOP (SS2 du NCLO
  LIEN_PUP : LIEN_PUP;	//PANELS LINK INFORMATION / MOT DES INDICATEURS LIEN DU  PUPITRE
  MF : MOT_FONC_NC;	//MOVEMENT FUNCTION INFORMATION / MOT FONCTION DU MVT
  CODE_LOCATOR : INT;	//TARGET POSITION CODE / CODE POSITION A ATTEINDRE
  NGP_SL : INT;	//HMI SELECT GROUP NUMBER / NUMERO DE GROUPE SELECTIONNE EN IHM
  N_GP : INT;	//LOCATOR GROUP NUMBER / NUMERO DE GROUPE DU DP_LOCATOR
  ROB_COD_PIL : WORD;	//ROBOT CYCLE NUMBER / ROBOT CODE PILOTAGE
  ROB_MOTORON : BOOL;	//ROBOT POWER ON / ROBOT SOUS PUISSANCE
  ROB_MANU : BOOL;	//ROBOT IN MANUAL MODE / ROBOT EN MODE MANU
  Num1seq : INT;	//NUMERO 1ere SEQUENCE PROGRAMMEE SUR LE ROBOT
  MODE : INT;	//MODE NUMBER / NUMERO DE MODE D UTILISATION
  BAMV : BOOL;	//ADVANCE MOVEMENT PUSH BUTTON / BP AVANCE MOUVEMENT
  BRMV : BOOL;	//RETURN MOVEMENT PUSH BUTTON / BP RECUL MOUVEMENT
  EVT : STRUCT	//EVENT TO LOCATOR / EVENEMENTS VERS LOCATOR
    EV1 : BOOL;	//EVENT 1 / EVENEMENT 1
    EV2 : BOOL;	//EVENT 2 / EVENEMENT 2
    EV3 : BOOL;	//EVENT 3 / EVENEMENT 3
    EV4 : BOOL;	//EVENT 4 / EVENEMENT 4
    EV5 : BOOL;	//EVENT 5 / EVENEMENT 5
    EV6 : BOOL;	//EVENT 6 / EVENEMENT 6
    EV7 : BOOL;	//EVENT 7 / EVENEMENT 7
    EV8 : BOOL;	//EVENT 8 / EVENEMENT 8
    EV9 : BOOL;	//EVENT 9 / EVENEMENT 9
    EV10 : BOOL;	//EVENT 10 / EVENEMENT 10
    EV11 : BOOL;	//EVENT 11 / EVENEMENT 11
    EV12 : BOOL;	//EVENT 12 / EVENEMENT 12
    EV13 : BOOL;	//EVENT 13 / EVENEMENT 13
    EV14 : BOOL;	//EVENT 14 / EVENEMENT 14
    EV15 : BOOL;	//EVENT 15 / EVENEMENT 15
    EV16 : BOOL;	//EVENT 16 / EVENEMENT 16
  END_STRUCT ;
  PILOT : STRUCT	//PILOT STRUCTURE / STRUCTURE PILOT
    CODE_AXE : INT;	//HMI AXIS CODE / CODE AXE SELECTIONNE EN IHM
    CODE_LOCATOR : INT;	//HMI TARGET POSITION CODE / CODE POSITION A ATTEINDRE IHM
    SECUAXE1 : BOOL;	//HMI AXIS 1 SAFETY INFORMATION (MOVE ENABLE IF 1) / INFO SECURITE AXE 1
    SECUAXE2 : BOOL;	//HMI AXIS 1 SAFETY INFORMATION (MOVE ENABLE IF 1) / INFO SECURITE AXE 1
    SECUAXE3 : BOOL;	//HMI AXIS 1 SAFETY INFORMATION (MOVE ENABLE IF 1) / INFO SECURITE AXE 1
    SECUAXE4 : BOOL;	//HMI AXIS 1 SAFETY INFORMATION (MOVE ENABLE IF 1) / INFO SECURITE AXE 1
    SECUAXE5 : BOOL;	//HMI AXIS 1 SAFETY INFORMATION (MOVE ENABLE IF 1) / INFO SECURITE AXE 1
    SECUAXE6 : BOOL;	//HMI AXIS 1 SAFETY INFORMATION (MOVE ENABLE IF 1) / INFO SECURITE AXE 1
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  F_AR : BOOL;	//SAFETY POWER CONDITION (EXCHANGE WITH SAFETY PROG) / CONDITION REARM SECURITE
  IA : BOOL;	//ALL AXIS ADVANCED / TOUS LES AXES EN POSITION AVANCE
  IR : BOOL;	//ALL AXIS RETURNED / TOUS LES AXES EN POSITION RECUL
  OR : STRUCT	//NC LOCATOR ORDER / ORDRES RECU DU NC LOCATOR
    OR9 : BOOL;	//ORDER 9 / ORDRE 9
    OR10 : BOOL;	//ORDER 10 / ORDRE 10
    OR11 : BOOL;	//ORDER 11 / ORDRE 11
    OR12 : BOOL;	//ORDER 12 / ORDRE 12
    OR13 : BOOL;	//ORDER 13 / ORDRE 13
    OR14 : BOOL;	//ORDER 14 / ORDRE 14
    OR15 : BOOL;	//ORDER 15 / ORDRE 15
    OR16 : BOOL;	//ORDER 16 / ORDRE 16
    OR1 : BOOL;	//ORDER 1 / ORDRE 1
    OR2 : BOOL;	//ORDER 2 / ORDRE 2
    OR3 : BOOL;	//ORDER 3 / ORDRE 3
    OR4 : BOOL;	//ORDER 4 / ORDRE 4
    OR5 : BOOL;	//ORDER 5 / ORDRE 5
    OR6 : BOOL;	//ORDER 6 / ORDRE 6
    OR7 : BOOL;	//ORDER 7 / ORDRE 7
    OR8 : BOOL;	//ORDER 8 / ORDRE 8
  END_STRUCT ;
  SA : BOOL;	//NC_LOCATOR BACKWARD SAFETY / SECURITE ARRIERE NC_LOCATOR
  ALA : BOOL;	//ALARM / ALARME
  DEF : BOOL;	//FAULT / DEFAUT
  DIAG : STRUCT	//DIAGNOSIS AND INFORMATION /INFORMATION ET DIAGNOSTIC
    DEF : BOOL;	//FAULT PRESENCE / PRESENCE DEFAUT
    ALA : BOOL;	//ALARM PRESENCE / PRESENCE D'UNE ALARME
    NUMLIST : INT;	//RESERVED FOR SMP FAULT LIST NUMBER / NUMERO DE LISTE DEFAUT SMP
    CODEDEF : WORD;	//FAULT OR ALARM NUMBER / N° DE DEFAUT OU D'ALARME EN DECIMAL
    IHM_VAMV : BOOL;	//HMI ADVANCE LAMP / INFORMATION AVANCE POUR IHM
    IHM_VRMV : BOOL;	//HMI RETURN LAMP / INFORMATION RECUL POUR IHM
    LIEN_IHM : STRUCT	//HMI LINK / LIEN AVEC IHM
      MOT_ETAT : STRUCT
        VEH_POS : BOOL;	//INFO - Vehicule En Position
        AXE1_IN_POS : BOOL;	//INFO - Axe 1 en Position
        AXE2_IN_POS : BOOL;	//INFO - Axe 2 en Position
        AXE3_IN_POS : BOOL;	//INFO - Axe 3 en Position
        AXE4_IN_POS : BOOL;	//INFO - Axe 4 en Position
        AXE5_IN_POS : BOOL;	//INFO - Axe 5 en Position
        AXE6_IN_POS : BOOL;	//INFO - Axe 6 en Position
        Pt_Reb : BOOL;	//INFO - Position Point de Rebouclage
        ES_ACTIF : BOOL;	//INFO - ES Actif
        FZ_SOP_ACTIF : BOOL;	//INFO - FZ Actif
        HM_ACTIF : BOOL;	//INFO - HOMME MORT VENANT DU ROBOT
        MODE_REGLAGE : BOOL;	//INFO - Mode Reglage
        NC_OK : BOOL;	//INFO - NcLocator Pret
        EN_REFERENCE : BOOL;	//NU
        NC_MOVE : BOOL;	//NU
      END_STRUCT ;
      RET_CODE_PROG : WORD;	//CODE VEHICULE EN COURS
      EVT : STRUCT	//EVENEMENTS
        EV9 : BOOL;	//Evenement Numero 9
        EV10 : BOOL;	//Evenement Numero 10
        EV11 : BOOL;	//Evenement Numero 11
        EV12 : BOOL;	//Evenement Numero 12
        EV13 : BOOL;	//Evenement Numero 13
        EV14 : BOOL;	//Evenement Numero 14
        EV15 : BOOL;	//Evenement Numero 15
        EV16 : BOOL;	//Evenement Numero 16
        EV1 : BOOL;	//Evenement Numero 1
        EV2 : BOOL;	//Evenement Numero 2
        EV3 : BOOL;	//Evenement Numero 3
        EV4 : BOOL;	//Evenement Numero 4
        EV5 : BOOL;	//Evenement Numero 5
        EV6 : BOOL;	//Evenement Numero 6
        EV7 : BOOL;	//Evenement Numero 7
        EV8 : BOOL;	//Evenement Numero 8
      END_STRUCT ;
      VITESSE : INT;	//INFO - VITESSE SUR IHM
      ORDRES : STRUCT	//ORDRES
        OR9 : BOOL;	//Ordre numero 9
        OR10 : BOOL;	//Ordre numero 10
        OR11 : BOOL;	//Ordre numero 11
        OR12 : BOOL;	//Ordre numero 12
        OR13 : BOOL;	//Ordre numero 13
        OR14 : BOOL;	//Ordre numero 14
        OR15 : BOOL;	//Ordre numero 15
        OR16 : BOOL;	//Ordre numero 16
        OR1 : BOOL;	//Ordre numero 1
        OR2 : BOOL;	//Ordre numero 2
        OR3 : BOOL;	//Ordre numero 3
        OR4 : BOOL;	//Ordre numero 4
        OR5 : BOOL;	//Ordre numero 5
        OR6 : BOOL;	//Ordre numero 6
        OR7 : BOOL;	//Ordre numero 7
        OR8 : BOOL;	//Ordre numero 8
      END_STRUCT ;
      ATTENTE_EVT : BYTE;	//ATTENTE EVENEMENT
      AXE1 : STRUCT	//INFO - Axe 1
        POS : INT;
        SECU : BOOL;
        DEF_CG : BOOL;
        MVEC : BOOL;
      END_STRUCT ;
      AXE2 : STRUCT	//INFO - Axe 2
        POS : INT;
        SECU : BOOL;
        DEF_CG : BOOL;
        MVEC : BOOL;
      END_STRUCT ;
      AXE3 : STRUCT	//INFO - Axe 3
        POS : INT;
        SECU : BOOL;
        DEF_CG : BOOL;
        MVEC : BOOL;
      END_STRUCT ;
      AXE4 : STRUCT	//INFO - Axe 4
        POS : INT;
        SECU : BOOL;
        DEF_CG : BOOL;
        MVEC : BOOL;
      END_STRUCT ;
      AXE5 : STRUCT	//INFO - Axe 5
        POS : INT;
        SECU : BOOL;
        DEF_CG : BOOL;
        MVEC : BOOL;
      END_STRUCT ;
      AXE6 : STRUCT	//INFO - Axe 6
        POS : INT;
        SECU : BOOL;
        DEF_CG : BOOL;
        MVEC : BOOL;
      END_STRUCT ;
      CD_MARCHE_ON_OFF : BOOL;	//CONDITION MARCHE ON OFF
      ETAT_MARCHE_ON_OFF : BOOL;	//ETAT MARCHE ON OFF
      MVEC : BOOL;	//MOVEMENT IN PROGRESS / MOUVEMENT EN COURS
      CODE_NC_ENCOURS : INT;	//CODE VEHICULE - EN COURS
      CODE_NC_DERNIER : INT;	//CODE VEHICULE - N-1
      CODE_NC_ETAT : BYTE;	//CODE VEHICULE - MOT ETAT de la verification
      TREC : BOOL;	//TRAJECTOIRE IN PROGRESS / TRAJECTOIRE EN COURS
      ETAT_PROG_LOC_DETAIL : STRUCT	//ETAT PROGRAMME
        ENTREE_ATT : BYTE;
        NUMERO : BYTE;
      END_STRUCT ;
      CODE_ROB_Av : BOOL;	//SEQUENCE ROBOT AVANCE
      CODE_ROB_Re : BOOL;	//SEQUENCE ROBOT RECUL
      CODE_ROB_PIL : WORD;	//SEQUENCE ROBOT NUMERO
    END_STRUCT ;
    CODEDEF_FB : WORD;	//FAULT OR ALARM NUMBER / N° DE DEFAUT OU D'ALARME NC LOCATOR
    CODEDEF_NC_HEX : DWORD;	//FAULT OR ALARM NUMBER / N° DE DEFAUT OU D'ALARME NC LOCATOR
    CODEDEF_NC_DEC : WORD;	//FAULT OR ALARM NUMBER / N° DE DEFAUT OU D'ALARME NC LOCATOR
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  MVEC : BOOL;	//SOFT IN PROGRESS / PROGRAMME EN COURS
  TREF : TIME;	//MOVEMENT REFERENCE TIME / TEMP DE REFERENCE MOUVEMENT
END_VAR
VAR
  READ : STRUCT
    MOT_ETAT : STRUCT
      VEH_POS : BOOL;
      AXE1_IN_POS : BOOL;
      AXE2_IN_POS : BOOL;
      AXE3_IN_POS : BOOL;
      AXE4_IN_POS : BOOL;
      AXE5_IN_POS : BOOL;
      AXE6_IN_POS : BOOL;
      PtReb_POS : BOOL;
      ES_ACTIF : BOOL;
      FZ_SOP_ACTIF : BOOL;
      HM_ACTIF : BOOL;	//INFO HOMME MORT VENANT DU ROBOT
      MODE_REGLAGE : BOOL;
      NC_OK : BOOL;
      EN_REFERENCE : BOOL;
      NC_MOVE : BOOL;
      I_RDREB : BOOL;	//INFO REPLI DIRECT AU POINT DE REBOUCLAGE
    END_STRUCT ;
    CODE_DEFAUT : DINT;
    RET_CODE_PROG : WORD;
    RET_CODE_VEH : BYTE;
    RET_CODE_AXE : BYTE;
    POS_AXE1 : INT;
    POS_AXE2 : INT;
    POS_AXE3 : INT;
    POS_AXE4 : INT;
    POS_AXE5 : INT;
    POS_AXE6 : INT;
    ORDRES : STRUCT
      OR9 : BOOL;	//ORDER 9 / ORDRE 9
      OR10 : BOOL;	//ORDER 10 / ORDRE 10
      OR11 : BOOL;	//ORDER 11 / ORDRE 11
      OR12 : BOOL;	//ORDER 12 / ORDRE 12
      OR13 : BOOL;	//ORDER 13 / ORDRE 13
      OR14 : BOOL;	//ORDER 14 / ORDRE 14
      OR15 : BOOL;	//ORDER 15 / ORDRE 15
      OR16 : BOOL;	//ORDER 16 / ORDRE 16
      OR1 : BOOL;	//ORDER 1 / ORDRE 1
      OR2 : BOOL;	//ORDER 2 / ORDRE 2
      OR3 : BOOL;	//ORDER 3 / ORDRE 3
      OR4 : BOOL;	//ORDER 4 / ORDRE 4
      OR5 : BOOL;	//ORDER 5 / ORDRE 5
      OR6 : BOOL;	//ORDER 6 / ORDRE 6
      OR7 : BOOL;	//ORDER 7 / ORDRE 7
      OR8 : BOOL;	//ORDER 8 / ORDRE 8
    END_STRUCT ;
    ETAT_PROG_LOC : WORD;	//MOT ETAT DU PROGRAMME NcLocator
    SPARE1 : WORD;	//RESERVE
    SPARE2 : WORD;	//RESERVE
    SPARE3 : WORD;	//RESERVE
  END_STRUCT ;
  WRITE : STRUCT
    MOT_COMMANDE : STRUCT
      SECUAXE1 : BOOL;
      SECUAXE2 : BOOL;
      SECUAXE3 : BOOL;
      SECUAXE4 : BOOL;
      SECUAXE5 : BOOL;
      SECUAXE6 : BOOL;
      SPARE1 : BOOL;
      SPARE2 : BOOL;
      PILOTAGE_API : BOOL;
      MODE_AUTO : BOOL;
      MODE_MANU : BOOL;
      MARCHE_ON_OFF : BOOL;
      ACQ_DEFAUT : BOOL;
      VALID_CODE_VEH : BOOL;
      SPARE3 : BOOL;
      SPARE4 : BOOL;
    END_STRUCT ;
    CODE_PROG : INT;
    CODE_VEH : BYTE;
    CODE_AXE : BYTE;
    VITESSE : INT;
    COTE_POSITION : DINT;
    EVT : STRUCT
      EV9 : BOOL;
      EV10 : BOOL;
      EV11 : BOOL;
      EV12 : BOOL;
      EV13 : BOOL;
      EV14 : BOOL;
      EV15 : BOOL;
      EV16 : BOOL;
      EV1 : BOOL;
      EV2 : BOOL;
      EV3 : BOOL;
      EV4 : BOOL;
      EV5 : BOOL;
      EV6 : BOOL;
      EV7 : BOOL;
      EV8 : BOOL;
    END_STRUCT ;
    SPARE1 : WORD;	//RESERVE
  END_STRUCT ;
  PILOT_C_MANU : WORD;	//CYCLE CODE IN MANUAL MODE / PILOTAGE CODE EN MANUEL
  CODE_ROB_PIL : WORD;	//CODE PILOTAGE ROBOT EN MANUEL
  PILOT_C_MANU_X : WORD;	//CYCLE CODE IN MANUAL MODE / PILOTAGE CODE EN MANUEL
  DEF_PARAM : BOOL;	//FONCTION BLOC SETTING FAULT / DEFAUT PARAMETRAGE BF
  ROB_AV_POS_VEH : BOOL;	//ROBOT DEMANDE AVANCE POSITION VEHICULE
  ROBM_AV_PtReb : BOOL;	//ROBOT MOUVEMENT AVANCE POSITION POINT DE REBOUCLAGE
  ROBM_AV_VH : BOOL;	//ROBOT MOUVEMENT AVANCE POSITION VEHICULE
  ROBM_RE_PtReb : BOOL;	//ROBOT DEMANDE RECUL POSITION POINT DE REBOUCLAGE
  ROBM_RE_VH : BOOL;	//ROBOT MOUVEMENT RECUL POSITION VEHICULE
  Prov : BOOL;	//Bit provisoire attente Evolution NCLocator (Bit a 0)
  CVC_0 : BOOL;	//CONTROL VALEUR CODE A 0
  DEFPARAM1 : BOOL;	//DEFAUT PARAMETRAGE 1
  DEFPARAM2 : BOOL;	//DEFAUT PARAMETRAGE 2
  DEFPARAM3 : BOOL;	//DEFAUT PARAMETRAGE 3
  DEFPARAM4 : BOOL;	//DEFAUT PARAMETRAGE 4
  SECU_OK : BOOL;	//SAFETY LOOP OK / BOUCLES DE SECURITE OK
  CODE_VERIFE_OK : BOOL;
  CODE_DEF_DETAIL : STRUCT
    NumAxe : BYTE;
    TypeDef : BYTE;
    NumDef : WORD;
  END_STRUCT ;
  DEF_VARIATEUR : BOOL;
  DEF_LOCATOR : BOOL;
  ETAT_PROG_LOC_DETAIL : STRUCT	//MOT ETAT DU PROGRAMME NcLocator
    ENTREE_ATT : BYTE;	//NUMERO DE L'EVENEMENT ATTENDU
    NUMERO : BYTE;	//NUMERO ETAT EN COURS DU PROGRAMME NcLocator
  END_STRUCT ;
  T_CG : TON;	//Timer Chien de Garde
  DEF_TEMPS_CYCLE : BOOL;
  T_CGAXE1 : TON;	//Timer - Chien de Garde Axe 1
  T_CGAXE2 : TON;	//Timer - Chien de Garde Axe 2
  T_CGAXE3 : TON;	//Timer - Chien de Garde Axe 3
  T_CGAXE4 : TON;	//Timer - Chien de Garde Axe 4
  T_CGAXE5 : TON;	//Timer - Chien de Garde Axe 5
  T_CGAXE6 : TON;	//Timer - Chien de Garde Axe 6
  TREF_COEF : TIME;
  DEF_REPLI_DIRECT : BOOL;
  DEF_CGAXE : STRUCT	//DEFAUT CHIEN DE GARDE AXE GENERAL
    AXE1 : BOOL;	//DEFAUT CHIEN DE GARDE AXE 1
    AXE2 : BOOL;	//DEFAUT CHIEN DE GARDE AXE 2
    AXE3 : BOOL;	//DEFAUT CHIEN DE GARDE AXE 3
    AXE4 : BOOL;	//DEFAUT CHIEN DE GARDE AXE 4
    AXE5 : BOOL;	//DEFAUT CHIEN DE GARDE AXE 5
    AXE6 : BOOL;	//DEFAUT CHIEN DE GARDE AXE 6
  END_STRUCT ;
  xCVC_0 : BOOL;
  CODE_VERIFE : BYTE;
  xCODE_VERIFE : BOOL;
  OLD_POS : STRUCT
    AXE1 : INT;
    AXE2 : INT;
    AXE3 : INT;
    AXE4 : INT;
    AXE5 : INT;
    AXE6 : INT;
  END_STRUCT ;
  xICL : BOOL;	//Auxiliaire Front Montant ICL
  TEMP_CAD_1 : TON;
  DEF_NC_GENERAL : BOOL;
  CODE_VEH_COMPL : BYTE;
  TONTpmeRV : TON;	//Temps de Mouvement
  XTpmeRV : TIME;	//Movement time measure auxiliary / Aux Temps de mouvement mesure
  TpmeRV : TIME;	//Movement time measure auxiliary / Aux Temps de mouvement mesure
  DepReb_Pos : BOOL;	//Quitte le point de rebouclage NC
  xDepReb_Pos : BOOL;	//Auxiliaire Quitte le point de rebouclage NC
  TONTpmeVR : TON;
  XTpmeVR : TIME;	//Movement time measure auxiliary / Aux Temps de mouvement mesure
  TpmeVR : TIME;	//Movement time measure auxiliary / Aux Temps de mouvement mesure
  DepVeh_Pos : BOOL;	//Quitte le point de position vehicule NC
  xDepVeh_Pos : BOOL;	//Auxiliaire Quitte le point de position vehicule NC
  xRazTpme : BOOL;	//AUXILIAIRE REMISE A ZERO
  CALCUL_1 : REAL;	//CALCUL INTERMEDIAIRE
  CALCUL_2 : DINT;	//CALCUL INTERMEDIAIRE
  ROB_COD_OK : BOOL;	//SEQUENCE ROBOT OK
END_VAR
VAR_TEMP
  ADR_IO_WORD : WORD;	//DEVICE ADRESS ON PROFINET / ADRESSE DU COFFRET LOCATOR SUR PROFINET
  RETVAL : INT;	//RETURN VALUE / VALEUR RETOUR
  BA1I : BOOL;	//INTERNAL BIT ALWAYS ON / BIT TOUJOURS A 1
  AUTO : BOOL;	//AUTOMATIC MODE INDICATOR / INDICATEUR MODE DE MARCHE AUTOMATIQUE
  MANU : BOOL;	//MANUAL MODE INDICATOR / INDICATEUR MODE DE MARCHE MANUEL
  NC_PRET : BOOL;	//SYSTEM READY / SYSTEME PRET
  MD_PROG_16S : BOOL;	//PROGRAM MODE (LIKE ROBOT) / MODE PROGRAMME (TYPE MARGUERITE)
  MD_POINT_16S : BOOL;	//POINT TO POINT MODE / MODE POINT A POINT
  MD_PROG_32S : BOOL;	//PROGRAM MODE (LIKE ROBOT) / MODE PROGRAMME (TYPE MARGUERITE)
  MD_POINT_32S : BOOL;	//POINT TO POINT MODE / MODE POINT A POINT
  CODE_OK : BOOL;	//IN PROGRESS LOCATOR CODE OK / INFO CODE LOCATOR EN COURS OK
  MGPOK : BOOL;	//GROUPED MANUAL MODE SELECT OK / SELECTION MODE MANU GROUPE OK
  CODE_ROB_PIL_TEMP : WORD;	//CODE PILOTAGE ROBOT EN MANUEL TEMPORAIRE
  CODE_ROB_PIL_TEMP2 : WORD;	//CODE PILOTAGE ROBOT EN MANUEL TEMPORAIRE 2
  CODE_ROB_PIL_TEMP3 : WORD;	//CODE PILOTAGE ROBOT EN MANUEL TEMPORAIRE 3
  CODE_DEF_TMP : DWORD;
  TREF_TMP : WORD;
  Num1SeqBis : INT;
  CALCUL_1_RDINT : DINT;	//Conversion Real To DINT
END_VAR
BEGIN
NETWORK
TITLE =SET TO 1 THE USEFUL INFORMATION IN THE BF BLOCK
//MISE A UN DES INFORMATIONS UTILES EN INTERNE DE LA FB
//
//*ODIL_ID:1827_1*
O #BA1I;
ON #BA1I;
= #BA1I;
NETWORK
TITLE =AUTOMATIC MODE
//MODE DE MARCHE AUTO
//
//*** ATTENTION ***
//Le soft BOSCH ne prend pas en compte l'utilisation des modes de marche AUTO /
//MANU
//
//*ODIL_ID:1827_2*
U #LIEN_PUP.Z_mauto;
UN #LIEN_PUP.Z_manup;
= L 24.0;
U L 24.0;
BLD 102;
= #AUTO;
U L 24.0;
U #Prov;
= #WRITE.MOT_COMMANDE.MODE_AUTO;
NETWORK
TITLE =MANUAL MODE
//MODE DE MARCHE MANU
//
//*** ATTENTION ***
//Le soft BOSCH ne prend pas en compte l'utilisation des modes de marche AUTO /
//MANU
//
//*ODIL_ID:1827_3*
UN #LIEN_PUP.Z_mauto;
U #LIEN_PUP.Z_manup;
= L 24.0;
U L 24.0;
BLD 102;
= #MANU;
U L 24.0;
U #Prov;
= #WRITE.MOT_COMMANDE.MODE_MANU;
NETWORK
TITLE =GROUPED MANUAL MODE SELECT
//SELECTION MODE MANUEL GROUPE
//
//*ODIL_ID:1827_4*
U #MF.GP_SL;
U(;
L #NGP_SL;
L #N_GP;
==I;
);
= #MGPOK;
NETWORK
TITLE =PROGRAM MODE SETTING (LIKE A ROBOT)
//MODE PROGRAMME (TYPE MARGUERITE)16equences
//
//*ODIL_ID:1827_5*
L #MODE;
L 1;
==I;
S #MD_PROG_16S;
R #MD_POINT_16S;
R #MD_PROG_32S;
R #MD_POINT_32S;
NETWORK
TITLE =POINT TO POINT MODE SETTING
//MODE POINT A POINT 16 Sequences
//
//*ODIL_ID:1827_6*
L #MODE;
L 2;
==I;
R #MD_PROG_16S;
S #MD_POINT_16S;
R #MD_PROG_32S;
R #MD_POINT_32S;
NETWORK
TITLE =PROGRAM MODE SETTING (LIKE A ROBOT)
//MODE PROGRAMME (TYPE MARGUERITE)32 Sequences
//
//*ODIL_ID:1827_7*
L #MODE;
L 3;
==I;
R #MD_PROG_16S;
R #MD_POINT_16S;
S #MD_PROG_32S;
R #MD_POINT_32S;
NETWORK
TITLE =POINT TO POINT MODE SETTING
//PARAMETRE MODE POINT A POINT 32 Sequences
//
//*ODIL_ID:1827_8*
L #MODE;
L 4;
==I;
R #MD_PROG_16S;
R #MD_POINT_16S;
R #MD_PROG_32S;
S #MD_POINT_32S;
NETWORK
TITLE =FAULT SETTING 1
//DEFAUT DE PARAMETRAGE 1
//
//*ODIL_ID:1827_9*
U(;
L #MODE;
L 1;
<I;
);
U(;
L #MODE;
L 4;
>I;
);
O;
U #DEFPARAM1;
UN #LIEN_PUP.Z_iadf;
= #DEFPARAM1;
R #MD_PROG_16S;
R #MD_POINT_16S;
R #MD_PROG_32S;
R #MD_POINT_32S;
NETWORK
TITLE =CONVERT IO ADRESS VALUE FROM INT TO WORD
//CONVERSION DU FORMAT INT VERS WORD POUR L ADRESSE DE L IO
//
//*ODIL_ID:1827_10*
L #ADR_IO_NCL;
T #ADR_IO_WORD;
NOP 0;
NETWORK
TITLE =READ NC DATA FROM PROFINET NETWORK (SAVE IN STAT DATA)
//LECTURE DES DONNEES NC DEPUIS PROFINET ET SAUVEGARDE EN ZONE STAT
//
//*ODIL_ID:1827_11*
CALL "DPRD_DAT" (
LADDR := #ADR_IO_WORD,
RET_VAL := #RETVAL,
RECORD := #READ);
NOP 0;
NETWORK
TITLE =SAFETY STATUS FOR HMI
//RETOUR INFORMATIONS ETAT DES BOUCLES SECURITE VENANT DU NCLOC
//
//*ODIL_ID:1827_12*
U #BA1I;
= L 24.0;
U L 24.0;
U #READ.MOT_ETAT.ES_ACTIF;
= #DIAG.LIEN_IHM.MOT_ETAT.ES_ACTIF;
U L 24.0;
U #READ.MOT_ETAT.FZ_SOP_ACTIF;
= #DIAG.LIEN_IHM.MOT_ETAT.FZ_SOP_ACTIF;
U L 24.0;
U #READ.MOT_ETAT.HM_ACTIF;
= #DIAG.LIEN_IHM.MOT_ETAT.HM_ACTIF;
U L 24.0;
U #READ.MOT_ETAT.MODE_REGLAGE;
= #DIAG.LIEN_IHM.MOT_ETAT.MODE_REGLAGE;
NETWORK
TITLE =SAFETY LOOP OK FOR MOVEMENT
//BOUCLES DE SECURITE OK POUR MOUVEMENT
//
//*ODIL_ID:1827_13*
U(;
O #LIEN_PUP.Z_ir;
O;
UN #COM_FZ_SOP;
U #ROB_MANU;
U #ROB_MOTORON;
O #SECU_OK;
);
U #COM_ES;
U #READ.MOT_ETAT.ES_ACTIF;
U(;
U #COM_FZ_SOP;
U #READ.MOT_ETAT.FZ_SOP_ACTIF;
ON #READ.MOT_ETAT.HM_ACTIF;
);
= #SECU_OK;
NETWORK
TITLE =CONTROL BY PLC INFORMATION
//INFORMATION PILOTAGE DEPUIS L API
//
//*ODIL_ID:1827_14*
UN #READ.MOT_ETAT.MODE_REGLAGE;
= #WRITE.MOT_COMMANDE.PILOTAGE_API;
NETWORK
TITLE =SYSTEM READY
//SYSTEME PRET
//
//*ODIL_ID:1827_15*
U #READ.MOT_ETAT.NC_OK;
UN #READ.MOT_ETAT.MODE_REGLAGE;
= #NC_PRET;
= #DIAG.LIEN_IHM.MOT_ETAT.NC_OK;
NETWORK
TITLE =SPEED LIMIT IN MANUAL MODE
//LIMITATION DE VITESSE POUR MODE MARCHE MANU
//
//*ODIL_ID:1827_16*
U(;
O #MANU;
O #ROB_MANU;
);
U #NC_PRET;
SPBNB _001;
L 2000;
T #WRITE.VITESSE;
_001: NOP 0;
NETWORK
TITLE =SPEED REQUEST IN AUTOMATIC MODE
//CONSIGNE VITESSE POUR MARCHE AUTOMATIQUE
//
//*ODIL_ID:1827_17*
U(;
U #AUTO;
U #NC_PRET;
O;
U #MANU;
U #READ.MOT_ETAT.MODE_REGLAGE;
);
SPBNB _002;
L 10000;
T #WRITE.VITESSE;
_002: NOP 0;
NETWORK
TITLE =HMI LINK FOR SPEED DISPLAY
//AFFICHAGE CONSIGNE VITESSE EN IHM
//
//*ODIL_ID:1827_18*
L #WRITE.VITESSE;
L 100;
/I;
T #DIAG.LIEN_IHM.VITESSE;
NOP 0;
NETWORK
TITLE =FAULT SETTING 3
//DEFAUT PARAMETRAGE 3
//
//*ODIL_ID:1827_19*
U(;
O(;
L #Num1seq;
L 0;
<I;
);
O(;
L #Num1seq;
L 16;
>I;
);
);
U(;
O #MD_PROG_16S;
O #MD_POINT_16S;
);
O;
U(;
L #Num1seq;
L 0;
<>I;
);
U(;
O #MD_PROG_32S;
O #MD_POINT_32S;
);
O;
U #DEFPARAM3;
UN #LIEN_PUP.Z_iadf;
= #DEFPARAM3;
NETWORK
TITLE =ROBOT CODE PILOTAGE
//Calcul intermediaire
//
//*ODIL_ID:1827_20*
L #Num1seq;
L 1;
-I;
T #Num1SeqBis;
NOP 0;
NETWORK
TITLE =ROBOT CODE PILOTAGE
//Le code Robot selectionne est OK
//
//*ODIL_ID:1827_21*
U #ROB_MANU;
U(;
L #Num1seq;
L 1;
>=I;
);
U(;
L #ROB_COD_PIL;
L 1;
>=I;
);
U(;
L #ROB_COD_PIL;
L 31;
<=I;
);
= #ROB_COD_OK;
NETWORK
TITLE =ROBOT CODE PILOTAGE
//Code du pilotage du robot
//
//*ODIL_ID:1827_22*
U #BA1I;
= L 24.0;
U L 24.0;
U #ROB_COD_OK;
= L 24.1;
U(;
U(;
U(;
U L 24.1;
SPBNB _003;
L #ROB_COD_PIL;
DTR;
T #CALCUL_1;
SET;
SAVE;
CLR;
_003: U BIE;
);
SPBNB _004;
L #CALCUL_1;
L 2.000000e+000;
/R;
T #CALCUL_1;
UN OV;
SAVE;
CLR;
_004: U BIE;
);
SPBNB _005;
L #CALCUL_1;
RND+;
T #CALCUL_2;
UN OV;
SAVE;
CLR;
_005: U BIE;
);
SPBNB _006;
L #CALCUL_2;
L #Num1SeqBis;
-I;
T #CODE_ROB_PIL_TEMP3;
_006: NOP 0;
U L 24.1;
NOT;
SPBNB _007;
L 0;
T #CODE_ROB_PIL_TEMP3;
_007: NOP 0;
U L 24.0;
SPBNB _008;
L #CODE_ROB_PIL_TEMP3;
T #DIAG.LIEN_IHM.CODE_ROB_PIL;
_008: NOP 0;
NETWORK
TITLE =ROBOT CODE PILOTAGE
//Information Avance ou Recul par rapport au code robot selectionne
//
//*ODIL_ID:1827_23*
U #ROB_COD_OK;
SPBNB _009;
L #CALCUL_1;
TRUNC;
T #CALCUL_1_RDINT;
UN OV;
SAVE;
CLR;
_009: U BIE;
= L 24.0;
U L 24.0;
U(;
L #CALCUL_1_RDINT;
L #CALCUL_2;
==I;
);
= #DIAG.LIEN_IHM.CODE_ROB_Av;
U L 24.0;
U(;
L #CALCUL_1_RDINT;
L #CALCUL_2;
<>I;
);
= #DIAG.LIEN_IHM.CODE_ROB_Re;
NETWORK
TITLE =ADVANCE TO HOME POSITION ON ROBOT REQUEST
//AVANCE A LA POSITION POINT DE REBOUCLAGE SUR DEMANDE PMA ROBOT
//MJ
//
//*ODIL_ID:1827_24*
U #ROB_MANU;
UN #READ.MOT_ETAT.NC_MOVE;
U(;
L #ROB_COD_PIL;
L 32;
==I;
);
O;
U #ROBM_AV_PtReb;
U #ROB_MOTORON;
UN #READ.MOT_ETAT.PtReb_POS;
= L 24.0;
U L 24.0;
BLD 102;
= #ROBM_AV_PtReb;
U L 24.0;
SPBNB _00a;
L 16;
T #PILOT_C_MANU_X;
_00a: NOP 0;
NETWORK
TITLE =ADVANCE TO VEHICULE X POSITION ON ROBOT REQUEST
//AVANCE A LA POSITION VEHICULE X SUR DEMANDE PMA ROBOT
//MJ
//
//*ODIL_ID:1827_25*
U(;
U #ROB_MANU;
UN #DIAG.LIEN_IHM.MVEC;
UN #DIAG.LIEN_IHM.TREC;
O;
U #ROBM_AV_VH;
U #ROB_COD_OK;
);
U #ROB_MOTORON;
U #DIAG.LIEN_IHM.CODE_ROB_Av;
UN #ROBM_RE_VH;
UN #ROBM_AV_PtReb;
= L 24.0;
U L 24.0;
BLD 102;
= #ROBM_AV_VH;
U L 24.0;
SPBNB _00b;
L #CODE_ROB_PIL_TEMP3;
T #PILOT_C_MANU_X;
_00b: NOP 0;
NETWORK
TITLE =RETURN FROM VEHICULE X POSITION ON ROBOT REQUEST
//RECUL DEPUIS LA POSITION VEHICULE X SUR DEMANDE PMA ROBOT
//MJ
//
//*ODIL_ID:1827_26*
U(;
U #ROB_MANU;
UN #DIAG.LIEN_IHM.MVEC;
U #DIAG.LIEN_IHM.TREC;
O;
U #ROBM_RE_VH;
U #ROB_COD_OK;
);
U #ROB_MOTORON;
U #DIAG.LIEN_IHM.CODE_ROB_Re;
UN #ROBM_AV_VH;
UN #ROBM_AV_PtReb;
UN #READ.MOT_ETAT.PtReb_POS;
= L 24.0;
U L 24.0;
BLD 102;
= #ROBM_RE_VH;
U L 24.0;
SPBNB _00c;
L #CODE_ROB_PIL_TEMP3;
T #PILOT_C_MANU_X;
_00c: NOP 0;
NETWORK
TITLE =FAULT SETTING 2
//DEFAUT PARAMETRAGE 2
//
//*ODIL_ID:1827_27*
U(;
O(;
L #CODE_ROB_PIL;
L 0;
<I;
);
O(;
L #CODE_ROB_PIL;
L 32;
>I;
);
);
U(;
O #MD_PROG_16S;
O #MD_POINT_16S;
);
O;
U(;
L #CODE_ROB_PIL;
L 0;
<>I;
);
U(;
O #MD_PROG_32S;
O #MD_POINT_32S;
);
O;
U #DEFPARAM2;
UN #LIEN_PUP.Z_iadf;
= #DEFPARAM2;
NETWORK
TITLE =VEHICULE POSITION MOVE REQUEST BY ROBOT
//DEMANDE PILOTAGE ROBOT POS VEHICULE
//
//*ODIL_ID:1827_28*
U #ROBM_AV_VH;
= #ROB_AV_POS_VEH;
NETWORK
TITLE =HOME POSITION MOVE REQUEST BY ROBOT
//DEMANDE PILOTAGE ROBOT VERS POINT DE REBOUCLAGE
//
//*ODIL_ID:1827_29*
O #ROBM_AV_PtReb;
O #ROBM_RE_VH;
= #ROBM_RE_PtReb;
NETWORK
TITLE =CYCLE CODE IN MANUAL MODE IHM / ROBOT
//CODE PILOTAGE EN MANUEL IHM / ROBOT
//
//*ODIL_ID:1827_30*
O #MANU;
O #ROB_MANU;
= L 24.0;
U L 24.0;
UN #ROB_AV_POS_VEH;
UN #ROBM_RE_PtReb;
SPBNB _00d;
L #PILOT.CODE_LOCATOR;
T #PILOT_C_MANU;
_00d: NOP 0;
U L 24.0;
U(;
O #ROB_AV_POS_VEH;
O #ROBM_RE_PtReb;
);
SPBNB _00e;
L #PILOT_C_MANU_X;
T #PILOT_C_MANU;
_00e: NOP 0;
NETWORK
TITLE =SEND LOCATOR CODE FOR AUTOMATIC MODE
//ENVOI DU CODE LOCATOR EN MODE AUTOMATIQUE
//
//*ODIL_ID:1827_31*
U #NC_PRET;
UN #READ.MOT_ETAT.MODE_REGLAGE;
U #AUTO;
U #CVC_0;
U(;
L #CODE_LOCATOR;
L 0;
>I;
);
U(;
O #READ.MOT_ETAT.PtReb_POS;
O #MD_POINT_16S;
O #MD_POINT_32S;
);
U(;
L #READ.RET_CODE_VEH;
L 0;
==I;
);
SPBNB _00f;
L #CODE_LOCATOR;
T #WRITE.CODE_VEH;
_00f: NOP 0;
NETWORK
TITLE =SEND LOCATOR CODE FOR MANUAL MODE
//ENVOI DU CODE LOCATOR EN MODE MANU
//
//*ODIL_ID:1827_32*
U #NC_PRET;
U(;
O #MANU;
O #ROB_MANU;
);
U #CVC_0;
U(;
L #PILOT_C_MANU;
L 0;
>I;
);
U(;
L #READ.RET_CODE_VEH;
L 0;
==I;
);
= L 24.0;
U L 24.0;
U(;
O #MGPOK;
O #ROB_MANU;
);
U(;
O #READ.MOT_ETAT.PtReb_POS;
O #MD_POINT_16S;
O #MD_POINT_32S;
O #ROB_MANU;
O;
U #MANU;
U(;
U #MD_PROG_16S;
U(;
L #PILOT_C_MANU;
L 16;
==I;
);
O;
U #MD_PROG_32S;
U(;
L #PILOT_C_MANU;
L 32;
==I;
);
);
);
SPBNB _010;
L #PILOT_C_MANU;
T #WRITE.CODE_VEH;
_010: NOP 0;
U L 24.0;
U #MF.MVT_SL;
SPBNB _011;
L #PILOT_C_MANU;
T #WRITE.CODE_VEH;
_011: NOP 0;
NETWORK
TITLE =LOCATOR CODE IN PROGRESS
//INFORMATION CODE EN COURS SUR NC
//
//*ODIL_ID:1827_33*
L #READ.RET_CODE_VEH;
T #DIAG.LIEN_IHM.RET_CODE_PROG;
NOP 0;
NETWORK
TITLE =CODE CONTROL
//Control Validation code a zero
//
//*ODIL_ID:1827_34*
U #NC_PRET;
U(;
L #READ.RET_CODE_VEH;
L 0;
==I;
);
S #CVC_0;
NETWORK
TITLE =CODE CONTROL
//Control Validation code a zero
//
//*ODIL_ID:1827_35*
U #NC_PRET;
U #READ.MOT_ETAT.NC_MOVE;
U(;
L #READ.RET_CODE_VEH;
L 0;
>I;
);
R #CVC_0;
NETWORK
TITLE =IN PROGRESS CODE LOCATOR OK
//CODE LOCATOR PRESENT = CODE LOCATOR ATTENDU
//
//*ODIL_ID:1827_36*
U #NC_PRET;
U(;
L #WRITE.CODE_VEH;
L #READ.RET_CODE_VEH;
==I;
);
= #CODE_OK;
NETWORK
TITLE =FAULT SETTING 4
//DEFAUT PARAMETRAGE 4
//
//*ODIL_ID:1827_37*
O(;
L #WRITE.CODE_VEH;
L 0;
<I;
);
O;
U(;
L #WRITE.CODE_VEH;
L 16;
>I;
);
U(;
O #MD_PROG_16S;
O #MD_POINT_16S;
);
O;
U(;
L #WRITE.CODE_VEH;
L 32;
>I;
);
U(;
O #MD_PROG_32S;
O #MD_POINT_32S;
);
O;
U #DEFPARAM4;
UN #LIEN_PUP.Z_iadf;
= #DEFPARAM4;
NETWORK
TITLE =RAZ MOVEMENT TIME
//Remise a zero des auxiliaires de temps des mouvement
//
//*ODIL_ID:1827_38*
U(;
U #READ.MOT_ETAT.PtReb_POS;
FN #xRazTpme;
SPBNB _012;
L 0;
T #TpmeVR;
SET;
SAVE;
CLR;
_012: U BIE;
);
SPBNB _013;
L 0;
T #TpmeRV;
_013: NOP 0;
NETWORK
TITLE =MOVEMENT TIME
//Temps de mouvement - Pos Reb --> Pos Veh
//
//*ODIL_ID:1827_39*
U #BA1I;
= L 24.0;
U L 24.0;
U #READ.MOT_ETAT.PtReb_POS;
FN #xDepReb_Pos;
S #DepReb_Pos;
U L 24.0;
U #READ.MOT_ETAT.VEH_POS;
R #DepReb_Pos;
NETWORK
TITLE =MOVEMENT TIME
//Temps de mouvement - Pos Reb --> Pos Veh
//Calcul du temps de mouvement (Position Rebouclage vers la position Vehicule)
//T#5M20S
//
//*ODIL_ID:1827_40*
U #DepReb_Pos;
= L 24.0;
BLD 103;
CALL #TONTpmeRV (
IN := L 24.0,
PT := T#5M20S,
ET := #XTpmeRV);
NOP 0;
NETWORK
TITLE =MOVEMENT TIME
//Temps de mouvement - Pos Reb --> Pos Veh
//Sauvegarde de la valeur
//
//*ODIL_ID:1827_41*
U(;
L #XTpmeRV;
L 0;
<>I;
);
SPBNB _014;
L #XTpmeRV;
T #TpmeRV;
_014: NOP 0;
NETWORK
TITLE =MOVEMENT TIME
//Temps de mouvement - Pos Reb --> Pos Veh
//
//*ODIL_ID:1827_42*
U #BA1I;
= L 24.0;
U L 24.0;
U #READ.MOT_ETAT.VEH_POS;
FN #xDepVeh_Pos;
S #DepVeh_Pos;
U L 24.0;
U #READ.MOT_ETAT.PtReb_POS;
R #DepVeh_Pos;
NETWORK
TITLE =MOVEMENT TIME
//Temps de mouvement - Pos Reb --> Pos Veh
//Calcul du temps de mouvement (Position Rebouclage vers la position Vehicule)
//T#5M20S
//
//*ODIL_ID:1827_43*
U #DepVeh_Pos;
= L 24.0;
BLD 103;
CALL #TONTpmeVR (
IN := L 24.0,
PT := T#5M20S,
ET := #XTpmeVR);
NOP 0;
NETWORK
TITLE =MOVEMENT TIME
//Temps de mouvement - Pos Reb --> Pos Veh
//Sauvegarde de la valeur
//
//*ODIL_ID:1827_44*
U(;
L #XTpmeVR;
L 0;
<>I;
);
SPBNB _015;
L #XTpmeVR;
T #TpmeVR;
_015: NOP 0;
NETWORK
TITLE =AXIS POSITION REACH INFORMATION
//INFORMATION POSITION ATTEINTE (AXE / AXE)
//
//*ODIL_ID:1827_45*
U #BA1I;
= L 24.0;
U L 24.0;
U(;
O #READ.MOT_ETAT.AXE1_IN_POS;
O #READ.MOT_ETAT.PtReb_POS;
);
= #DIAG.LIEN_IHM.MOT_ETAT.AXE1_IN_POS;
U L 24.0;
U(;
O #READ.MOT_ETAT.AXE2_IN_POS;
O #READ.MOT_ETAT.PtReb_POS;
);
= #DIAG.LIEN_IHM.MOT_ETAT.AXE2_IN_POS;
U L 24.0;
U(;
O #READ.MOT_ETAT.AXE3_IN_POS;
O #READ.MOT_ETAT.PtReb_POS;
);
= #DIAG.LIEN_IHM.MOT_ETAT.AXE3_IN_POS;
U L 24.0;
U(;
O #READ.MOT_ETAT.AXE4_IN_POS;
O #READ.MOT_ETAT.PtReb_POS;
);
= #DIAG.LIEN_IHM.MOT_ETAT.AXE4_IN_POS;
U L 24.0;
U(;
O #READ.MOT_ETAT.AXE5_IN_POS;
O #READ.MOT_ETAT.PtReb_POS;
);
= #DIAG.LIEN_IHM.MOT_ETAT.AXE5_IN_POS;
U L 24.0;
U(;
O #READ.MOT_ETAT.AXE6_IN_POS;
O #READ.MOT_ETAT.PtReb_POS;
);
= #DIAG.LIEN_IHM.MOT_ETAT.AXE6_IN_POS;
NETWORK
TITLE =AXES POSITIONS VALUE FOR HMI
//INFORMATION COTE POSITION AXES
//
//*ODIL_ID:1827_46*
U #BA1I;
= L 24.0;
U L 24.0;
SPBNB _016;
L #READ.POS_AXE1;
T #DIAG.LIEN_IHM.AXE1.POS;
_016: NOP 0;
U L 24.0;
SPBNB _017;
L #READ.POS_AXE2;
T #DIAG.LIEN_IHM.AXE2.POS;
_017: NOP 0;
U L 24.0;
SPBNB _018;
L #READ.POS_AXE3;
T #DIAG.LIEN_IHM.AXE3.POS;
_018: NOP 0;
U L 24.0;
SPBNB _019;
L #READ.POS_AXE4;
T #DIAG.LIEN_IHM.AXE4.POS;
_019: NOP 0;
U L 24.0;
SPBNB _01a;
L #READ.POS_AXE5;
T #DIAG.LIEN_IHM.AXE5.POS;
_01a: NOP 0;
U L 24.0;
SPBNB _01b;
L #READ.POS_AXE6;
T #DIAG.LIEN_IHM.AXE6.POS;
_01b: NOP 0;
NETWORK
TITLE =CURRENT MOVEMENT
//GESTION DU MVEC (MouvEment En Cours)
//Creation d'un crenau a 300 MS
//
//*ODIL_ID:1827_47*
U #BA1I;
UN #TEMP_CAD_1.Q;
= L 24.0;
BLD 103;
CALL #TEMP_CAD_1 (
IN := L 24.0,
PT := T#300MS);
NOP 0;
NETWORK
TITLE =CURRENT MOVEMENT
//GESTION DU MVEC (MouvEment En Cours)
//Sauvegarde de la position precedente des axes
//
//*ODIL_ID:1827_48*
U #TEMP_CAD_1.Q;
FP #xICL;
= L 24.0;
U L 24.0;
SPBNB _01c;
L #READ.POS_AXE1;
T #OLD_POS.AXE1;
_01c: NOP 0;
U L 24.0;
SPBNB _01d;
L #READ.POS_AXE2;
T #OLD_POS.AXE2;
_01d: NOP 0;
U L 24.0;
SPBNB _01e;
L #READ.POS_AXE3;
T #OLD_POS.AXE3;
_01e: NOP 0;
U L 24.0;
SPBNB _01f;
L #READ.POS_AXE4;
T #OLD_POS.AXE4;
_01f: NOP 0;
U L 24.0;
SPBNB _020;
L #READ.POS_AXE5;
T #OLD_POS.AXE5;
_020: NOP 0;
U L 24.0;
SPBNB _021;
L #READ.POS_AXE6;
T #OLD_POS.AXE6;
_021: NOP 0;
NETWORK
TITLE =CURRENT MOVEMENT
//GESTION DU MVEC (MouvEment En Cours)
//
//*ODIL_ID:1827_49*
U #BA1I;
= L 24.0;
U L 24.0;
U(;
L #READ.POS_AXE1;
L #OLD_POS.AXE1;
<>I;
);
= L 24.1;
U L 24.1;
NOT;
R #DIAG.LIEN_IHM.AXE1.MVEC;
U L 24.1;
BLD 102;
S #DIAG.LIEN_IHM.AXE1.MVEC;
U L 24.0;
U(;
L #READ.POS_AXE2;
L #OLD_POS.AXE2;
<>I;
);
= L 24.1;
U L 24.1;
NOT;
R #DIAG.LIEN_IHM.AXE2.MVEC;
U L 24.1;
BLD 102;
S #DIAG.LIEN_IHM.AXE2.MVEC;
U L 24.0;
U(;
L #READ.POS_AXE3;
L #OLD_POS.AXE3;
<>I;
);
= L 24.1;
U L 24.1;
NOT;
R #DIAG.LIEN_IHM.AXE3.MVEC;
U L 24.1;
BLD 102;
S #DIAG.LIEN_IHM.AXE3.MVEC;
U L 24.0;
U(;
L #READ.POS_AXE4;
L #OLD_POS.AXE4;
<>I;
);
= L 24.1;
U L 24.1;
NOT;
R #DIAG.LIEN_IHM.AXE4.MVEC;
U L 24.1;
BLD 102;
S #DIAG.LIEN_IHM.AXE4.MVEC;
U L 24.0;
U(;
L #READ.POS_AXE5;
L #OLD_POS.AXE5;
<>I;
);
= L 24.1;
U L 24.1;
NOT;
R #DIAG.LIEN_IHM.AXE5.MVEC;
U L 24.1;
BLD 102;
S #DIAG.LIEN_IHM.AXE5.MVEC;
U L 24.0;
U(;
L #READ.POS_AXE6;
L #OLD_POS.AXE6;
<>I;
);
= L 24.1;
U L 24.1;
NOT;
R #DIAG.LIEN_IHM.AXE6.MVEC;
U L 24.1;
BLD 102;
S #DIAG.LIEN_IHM.AXE6.MVEC;
NETWORK
TITLE =CURRENT MOVEMENT
//GESTION DU MVEC (MouvEment En Cours)
//
//*ODIL_ID:1827_50*
O #DIAG.LIEN_IHM.AXE1.MVEC;
O #DIAG.LIEN_IHM.AXE2.MVEC;
O #DIAG.LIEN_IHM.AXE3.MVEC;
O #DIAG.LIEN_IHM.AXE4.MVEC;
O #DIAG.LIEN_IHM.AXE5.MVEC;
O #DIAG.LIEN_IHM.AXE6.MVEC;
= #DIAG.LIEN_IHM.MVEC;
NETWORK
TITLE =AXIS 1 MOVEMENT SAFETY
//SECURITE MOUVEMENT AXE 1
//
//*ODIL_ID:1827_51*
U #SECU_OK;
U #MF.SECUAXE1;
= #WRITE.MOT_COMMANDE.SECUAXE1;
= #DIAG.LIEN_IHM.AXE1.SECU;
NETWORK
TITLE =AXIS 2 MOVEMENT SAFETY
//SECURITE MOUVEMENT AXE 2
//
//*ODIL_ID:1827_52*
U #SECU_OK;
U #MF.SECUAXE2;
= #WRITE.MOT_COMMANDE.SECUAXE2;
= #DIAG.LIEN_IHM.AXE2.SECU;
NETWORK
TITLE =AXIS 3 MOVEMENT SAFETY
//SECURITE MOUVEMENT AXE 3
//
//*ODIL_ID:1827_53*
U #SECU_OK;
U #MF.SECUAXE3;
= #WRITE.MOT_COMMANDE.SECUAXE3;
= #DIAG.LIEN_IHM.AXE3.SECU;
NETWORK
TITLE =AXIS 4 MOVEMENT SAFETY
//SECURITE MOUVEMENT AXE 4
//
//*ODIL_ID:1827_54*
U #SECU_OK;
U #MF.SECUAXE4;
= #WRITE.MOT_COMMANDE.SECUAXE4;
= #DIAG.LIEN_IHM.AXE4.SECU;
NETWORK
TITLE =AXIS 5 MOVEMENT SAFETY
//SECURITE MOUVEMENT AXE 5
//
//*ODIL_ID:1827_55*
U #SECU_OK;
U #MF.SECUAXE5;
= #WRITE.MOT_COMMANDE.SECUAXE5;
= #DIAG.LIEN_IHM.AXE5.SECU;
NETWORK
TITLE =AXIS 6 MOVEMENT SAFETY
//SECURITE MOUVEMENT AXE 6
//
//*ODIL_ID:1827_56*
U #SECU_OK;
U #MF.SECUAXE6;
= #WRITE.MOT_COMMANDE.SECUAXE6;
= #DIAG.LIEN_IHM.AXE6.SECU;
NETWORK
TITLE =ADVANCE ENABLE TO VEHICULE POSITION
//AUTORISATION AVANCE VERS POSITION VEHICULE
//
//*ODIL_ID:1827_57*
U(;
O #MD_PROG_16S;
O #MD_PROG_32S;
);
U(;
U #AUTO;
U #CODE_OK;
U #MF.AA;
O;
U #MANU;
U #BAMV;
O;
U #ROB_MANU;
U #ROB_AV_POS_VEH;
);
U #READ.MOT_ETAT.PtReb_POS;
O;
U(;
O #MD_POINT_16S;
O #MD_POINT_32S;
);
U #MF.AA;
= #WRITE.EVT.EV1;
NETWORK
TITLE =RETURN ENABLE TO HOME POSITION
//AUTORISATION RECUL VERS POSITION REBOUCLAGE
//
//*ODIL_ID:1827_58*
U #MD_PROG_16S;
U(;
U #AUTO;
U #MF.AR;
O;
U #MANU;
U #BRMV;
O;
U #ROB_MANU;
U #ROBM_RE_PtReb;
);
U #READ.MOT_ETAT.VEH_POS;
= #WRITE.EVT.EV2;
NETWORK
TITLE =UPDATE EVENT DATA TO LOCATOR
//MISE A JOURS DES EVENEMENTS VERS LE NC LOCATOR
//
//*ODIL_ID:1827_59*
U #BA1I;
= L 24.0;
U L 24.0;
U #EVT.EV3;
= #WRITE.EVT.EV3;
U L 24.0;
U #EVT.EV4;
= #WRITE.EVT.EV4;
U L 24.0;
U #EVT.EV5;
= #WRITE.EVT.EV5;
U L 24.0;
U #EVT.EV6;
= #WRITE.EVT.EV6;
U L 24.0;
U #EVT.EV7;
= #WRITE.EVT.EV7;
U L 24.0;
U #EVT.EV8;
= #WRITE.EVT.EV8;
U L 24.0;
U #EVT.EV9;
= #WRITE.EVT.EV9;
U L 24.0;
U #EVT.EV10;
= #WRITE.EVT.EV10;
U L 24.0;
U #EVT.EV11;
= #WRITE.EVT.EV11;
U L 24.0;
U #EVT.EV12;
= #WRITE.EVT.EV12;
U L 24.0;
U #EVT.EV13;
= #WRITE.EVT.EV13;
U L 24.0;
U #EVT.EV14;
= #WRITE.EVT.EV14;
U L 24.0;
U #EVT.EV15;
= #WRITE.EVT.EV15;
U L 24.0;
U #EVT.EV16;
= #WRITE.EVT.EV16;
NETWORK
TITLE =DUPLICATE EVENEMENT TO HMI
//Evenements envoye au Locator recopies dans la structure DIAG de la FB
//
//*ODIL_ID:1827_60*
CALL "BLKMOV" (
SRCBLK := #WRITE.EVT,
RET_VAL := #RETVAL,
DSTBLK := #DIAG.LIEN_IHM.EVT);
NOP 0;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//
//*ODIL_ID:1827_61*
U #READ.MOT_ETAT.VEH_POS;
= #IA;
= #DIAG.LIEN_IHM.MOT_ETAT.VEH_POS;
= #DIAG.IHM_VAMV;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//
//*ODIL_ID:1827_62*
U #READ.MOT_ETAT.PtReb_POS;
= #IR;
= #DIAG.LIEN_IHM.MOT_ETAT.Pt_Reb;
= #DIAG.IHM_VRMV;
NETWORK
TITLE =ORDER FROM LOCATOR INFORMATION
//ORDRES RECU DU NC LOCATOR
//
//*ODIL_ID:1827_63*
U(;
CALL "BLKMOV" (
SRCBLK := #READ.ORDRES,
RET_VAL := #RETVAL,
DSTBLK := #OR);
U BIE;
);
SPBNB _022;
CALL "BLKMOV" (
SRCBLK := #OR,
RET_VAL := #RETVAL,
DSTBLK := #DIAG.LIEN_IHM.ORDRES);
_022: NOP 0;
NETWORK
TITLE =CODE VALIDATION
//VALIDATION DU CODE
//
//CODE_VERIFE = 0 => Pas de code (code 0)
//CODE_VERIFE = 1 => Code verifie et OK
//CODE_VERIFE = 2 => Code verifie et NOK
//
//*ODIL_ID:1827_64*
U #NC_PRET;
UN #LIEN_PUP.Z_iadf;
= L 24.0;
U L 24.0;
U(;
L #CODE_LOCATOR;
L 0;
>I;
);
U(;
L #WRITE.CODE_VEH;
L 0;
>I;
);
UN #CODE_VERIFE_OK;
= #WRITE.MOT_COMMANDE.VALID_CODE_VEH;
U L 24.0;
U #WRITE.MOT_COMMANDE.VALID_CODE_VEH;
SPBNB _023;
L 255;
L #WRITE.CODE_VEH;
-I;
T #CODE_VEH_COMPL;
UN OV;
SAVE;
CLR;
_023: U BIE;
= L 24.1;
U L 24.1;
U(;
U(;
L #DIAG.LIEN_IHM.ETAT_PROG_LOC_DETAIL.NUMERO;
L 4;
<>D;
);
U(;
L #READ.RET_CODE_VEH;
L #CODE_VEH_COMPL;
==D;
);
O;
U(;
L #DIAG.LIEN_IHM.ETAT_PROG_LOC_DETAIL.NUMERO;
L 4;
==D;
);
U(;
L #READ.RET_CODE_VEH;
L #WRITE.CODE_VEH;
==D;
);
);
SPBNB _024;
L 1;
T #CODE_VERIFE;
SET;
SAVE;
CLR;
_024: U BIE;
S #CODE_VERIFE_OK;
U L 24.1;
U(;
L #DIAG.LIEN_IHM.ETAT_PROG_LOC_DETAIL.NUMERO;
L 4;
<>D;
);
U(;
L #READ.RET_CODE_VEH;
L #CODE_VEH_COMPL;
<>D;
);
SPBNB _025;
L 2;
T #CODE_VERIFE;
SET;
SAVE;
CLR;
_025: U BIE;
R #CODE_VERIFE_OK;
U L 24.0;
U(;
L #CODE_LOCATOR;
L 0;
==I;
);
U(;
L #READ.RET_CODE_VEH;
L 0;
==I;
);
SPBNB _026;
L 0;
T #CODE_VERIFE;
SET;
SAVE;
CLR;
_026: U BIE;
R #CODE_VERIFE_OK;
NETWORK
TITLE =IHM CODE INFORMATION
//INFORMATION DU CODE SUR L'IHM
//
//IHM Code en cours et N-1
//
//*ODIL_ID:1827_65*
U #BA1I;
= L 24.0;
U L 24.0;
SPBNB _027;
L #CODE_VERIFE;
T #DIAG.LIEN_IHM.CODE_NC_ETAT;
_027: NOP 0;
U L 24.0;
U(;
L #READ.RET_CODE_VEH;
L 0;
<>I;
);
U(;
L #READ.RET_CODE_VEH;
L #CODE_VEH_COMPL;
<>I;
);
U #CODE_VERIFE_OK;
FP #xCODE_VERIFE;
SPBNB _028;
L #READ.RET_CODE_VEH;
T #DIAG.LIEN_IHM.CODE_NC_ENCOURS;
_028: NOP 0;
U L 24.0;
U #CVC_0;
FP #xCVC_0;
= L 24.1;
U L 24.1;
SPBNB _029;
CALL "BLKMOV" (
SRCBLK := #DIAG.LIEN_IHM.CODE_NC_ENCOURS,
RET_VAL := #RETVAL,
DSTBLK := #DIAG.LIEN_IHM.CODE_NC_DERNIER);
_029: NOP 0;
U L 24.1;
SPBNB _02a;
L 0;
T #DIAG.LIEN_IHM.CODE_NC_ENCOURS;
_02a: NOP 0;
NETWORK
TITLE =CYCLE START / CYCLE STOP INFORMATION
//CONDITION INFORMATION MARCHE / ARRET
//
//*ODIL_ID:1827_66*
U(;
U #AUTO;
UN #LIEN_PUP.Z_macy;
UN #READ.MOT_ETAT.MODE_REGLAGE;
O;
U(;
U #MANU;
U(;
O #BAMV;
O #BRMV;
);
U(;
O #MGPOK;
O #MF.MVT_SL;
);
O;
U #ROB_MANU;
U(;
O #ROB_AV_POS_VEH;
O #ROBM_RE_PtReb;
);
);
U(;
L #PILOT_C_MANU;
L 0;
<>I;
);
);
U #SECU_OK;
U #NC_PRET;
U(;
O #READ.MOT_ETAT.PtReb_POS;
O;
UN #READ.MOT_ETAT.PtReb_POS;
U(;
U #MVEC;
U(;
L #READ.RET_CODE_VEH;
L 0;
>I;
);
ON #MVEC;
);
);
UN #DEF;
= #DIAG.LIEN_IHM.CD_MARCHE_ON_OFF;
NETWORK
TITLE =CYCLE START / CYCLE STOP INFORMATION
//INFORMATION MARCHE / ARRET
//
//*ODIL_ID:1827_67*
U #BA1I;
U(;
U #AUTO;
U(;
L #CODE_LOCATOR;
L 0;
<>I;
);
U #CODE_VERIFE_OK;
O #MANU;
O #ROB_MANU;
);
U #DIAG.LIEN_IHM.CD_MARCHE_ON_OFF;
= #WRITE.MOT_COMMANDE.MARCHE_ON_OFF;
= #DIAG.LIEN_IHM.ETAT_MARCHE_ON_OFF;
NETWORK
TITLE =PROGRAM IN PROGRESS
//PROGRAMME EN COURS
//
//*** ATTENTION ***
//Programme en cours (PAS forcement NC LOCATOR en mouvement)
//
//*ODIL_ID:1827_68*
U #READ.MOT_ETAT.NC_MOVE;
= #MVEC;
= #DIAG.LIEN_IHM.TREC;
NETWORK
TITLE =BACKWARD SAFETY INFORMATION
//INFORMATION SECURITE ARRIERE DU NC LOCATOR
//
//*ODIL_ID:1827_69*
O #IR;
O #IA;
O #READ.ORDRES.OR1;
= #SA;
NETWORK
TITLE =FAULT RESET
//ANNULATION DEFAUT
//
//*ODIL_ID:1827_70*
U #LIEN_PUP.Z_iadf;
= #WRITE.MOT_COMMANDE.ACQ_DEFAUT;
NETWORK
TITLE =WRITE NC DATA ON PROFINET NETWORK (FROM STAT DATA)
//ECRITURE DE LA TRAME SUR PROFINET VERS LE NC
//
//*ODIL_ID:1827_71*
CALL "DPWR_DAT" (
LADDR := #ADR_IO_WORD,
RECORD := #WRITE,
RET_VAL := #RETVAL);
NOP 0;
NETWORK
TITLE =COEFFICIENT REFERENCE TIME
//COEFFICIENT PAR RAPPORT AU TEMPS DE REFERENCE
//TREF + 10% de TREF
//
//*ODIL_ID:1827_72*
U(;
U(;
U(;
L #TREF;
L 0;
<>I;
);
SPBNB _02b;
L #TREF;
L 10;
/I;
T #TREF_TMP;
UN OV;
SAVE;
CLR;
_02b: U BIE;
);
SPBNB _02c;
L #TREF;
L #TREF_TMP;
+I;
T #TREF_TMP;
UN OV;
SAVE;
CLR;
_02c: U BIE;
);
SPBNB _02d;
L #TREF_TMP;
T #TREF_COEF;
_02d: NOP 0;
NETWORK
TITLE =FAULT - AXE 1 WATCH DOG
//DEFAUT - CHIEN DE GARDE DE L'AXE 1
//
//*ODIL_ID:1827_73*
U(;
U #AUTO;
U #WRITE.MOT_COMMANDE.MARCHE_ON_OFF;
UN #READ.MOT_ETAT.PtReb_POS;
UN #READ.MOT_ETAT.AXE1_IN_POS;
= L 24.0;
BLD 103;
CALL #T_CGAXE1 (
IN := L 24.0,
PT := #TREF_COEF);
U BIE;
);
U #T_CGAXE1.Q;
S #DEF_CGAXE.AXE1;
U(;
O #READ.MOT_ETAT.AXE1_IN_POS;
O #BA1I;
);
U #LIEN_PUP.Z_iadf;
R #DEF_CGAXE.AXE1;
U #DEF_CGAXE.AXE1;
= #DIAG.LIEN_IHM.AXE1.DEF_CG;
NETWORK
TITLE =FAULT - AXE 2 WATCH DOG
//DEFAUT - CHIEN DE GARDE DE L'AXE 2
//
//*ODIL_ID:1827_74*
U(;
U #AUTO;
U #WRITE.MOT_COMMANDE.MARCHE_ON_OFF;
UN #READ.MOT_ETAT.PtReb_POS;
UN #READ.MOT_ETAT.AXE2_IN_POS;
= L 24.0;
BLD 103;
CALL #T_CGAXE2 (
IN := L 24.0,
PT := #TREF_COEF);
U BIE;
);
U #T_CGAXE2.Q;
S #DEF_CGAXE.AXE2;
U(;
O #READ.MOT_ETAT.AXE2_IN_POS;
O #BA1I;
);
U #LIEN_PUP.Z_iadf;
R #DEF_CGAXE.AXE2;
U #DEF_CGAXE.AXE2;
= #DIAG.LIEN_IHM.AXE2.DEF_CG;
NETWORK
TITLE =FAULT - AXE 3 WATCH DOG
//DEFAUT - CHIEN DE GARDE DE L'AXE 3
//
//*ODIL_ID:1827_75*
//
U(;
U #AUTO;
U #WRITE.MOT_COMMANDE.MARCHE_ON_OFF;
UN #READ.MOT_ETAT.PtReb_POS;
UN #READ.MOT_ETAT.AXE3_IN_POS;
= L 24.0;
BLD 103;
CALL #T_CGAXE3 (
IN := L 24.0,
PT := #TREF_COEF);
U BIE;
);
U #T_CGAXE3.Q;
S #DEF_CGAXE.AXE3;
U(;
O #READ.MOT_ETAT.AXE3_IN_POS;
O #BA1I;
);
U #LIEN_PUP.Z_iadf;
R #DEF_CGAXE.AXE3;
U #DEF_CGAXE.AXE3;
= #DIAG.LIEN_IHM.AXE3.DEF_CG;
NETWORK
TITLE =FAULT - AXE 4 WATCH DOG
//DEFAUT - CHIEN DE GARDE DE L'AXE 4
//
//*ODIL_ID:1827_76*
//
U(;
U #AUTO;
U #WRITE.MOT_COMMANDE.MARCHE_ON_OFF;
UN #READ.MOT_ETAT.PtReb_POS;
UN #READ.MOT_ETAT.AXE4_IN_POS;
= L 24.0;
BLD 103;
CALL #T_CGAXE4 (
IN := L 24.0,
PT := #TREF_COEF);
U BIE;
);
U #T_CGAXE4.Q;
S #DEF_CGAXE.AXE4;
U(;
O #READ.MOT_ETAT.AXE4_IN_POS;
O #BA1I;
);
U #LIEN_PUP.Z_iadf;
R #DEF_CGAXE.AXE4;
U #DEF_CGAXE.AXE4;
= #DIAG.LIEN_IHM.AXE4.DEF_CG;
NETWORK
TITLE =FAULT - AXE 5 WATCH DOG
//DEFAUT - CHIEN DE GARDE DE L'AXE 5
//
//*ODIL_ID:1827_77*
//
U(;
U #AUTO;
U #WRITE.MOT_COMMANDE.MARCHE_ON_OFF;
UN #READ.MOT_ETAT.PtReb_POS;
UN #READ.MOT_ETAT.AXE5_IN_POS;
= L 24.0;
BLD 103;
CALL #T_CGAXE5 (
IN := L 24.0,
PT := #TREF_COEF);
U BIE;
);
U #T_CGAXE5.Q;
S #DEF_CGAXE.AXE5;
U(;
O #READ.MOT_ETAT.AXE5_IN_POS;
O #BA1I;
);
U #LIEN_PUP.Z_iadf;
R #DEF_CGAXE.AXE5;
U #DEF_CGAXE.AXE5;
= #DIAG.LIEN_IHM.AXE5.DEF_CG;
NETWORK
TITLE =FAULT - AXE 6 WATCH DOG
//DEFAUT - CHIEN DE GARDE DE L'AXE 6
//
//*ODIL_ID:1827_78*
//
U(;
U #AUTO;
U #WRITE.MOT_COMMANDE.MARCHE_ON_OFF;
UN #READ.MOT_ETAT.PtReb_POS;
UN #READ.MOT_ETAT.AXE6_IN_POS;
= L 24.0;
BLD 103;
CALL #T_CGAXE6 (
IN := L 24.0,
PT := #TREF_COEF);
U BIE;
);
U #T_CGAXE6.Q;
S #DEF_CGAXE.AXE6;
U(;
O #READ.MOT_ETAT.AXE6_IN_POS;
O #BA1I;
);
U #LIEN_PUP.Z_iadf;
R #DEF_CGAXE.AXE6;
U #DEF_CGAXE.AXE6;
= #DIAG.LIEN_IHM.AXE6.DEF_CG;
NETWORK
TITLE =IHM INFORMATION
//INFORMTATION IHM - Etat du programme
//
//*ODIL_ID:1827_79*
U(;
CALL "BLKMOV" (
SRCBLK := #READ.ETAT_PROG_LOC,
RET_VAL := #RETVAL,
DSTBLK := #ETAT_PROG_LOC_DETAIL);
U BIE;
);
SPBNB _02e;
CALL "BLKMOV" (
SRCBLK := #READ.ETAT_PROG_LOC,
RET_VAL := #RETVAL,
DSTBLK := #DIAG.LIEN_IHM.ETAT_PROG_LOC_DETAIL);
_02e: NOP 0;
NETWORK
TITLE =EVENEMENT WAITING INFORMATION
//INFORMATION ATTENTE EVENEMENT
//
//*ODIL_ID:1827_80*
L #ETAT_PROG_LOC_DETAIL.NUMERO;
L 2;
==I;
= L 24.0;
U L 24.0;
SPBNB _02f;
L #ETAT_PROG_LOC_DETAIL.ENTREE_ATT;
T #DIAG.LIEN_IHM.ATTENTE_EVT;
_02f: NOP 0;
U L 24.0;
NOT;
SPBNB _030;
L 0;
T #DIAG.LIEN_IHM.ATTENTE_EVT;
_030: NOP 0;
NETWORK
TITLE =GESTION DES ALARMES ET DES DEFAUTS
//********************************************************************************
//*                                                                              *
//*                    GESTION DES ALARMES ET DES DEFAUTS                        *
//*                                                                              *
//********************************************************************************
//
//*ODIL_ID:1827_81*

NETWORK
TITLE =IDENTIFICATION FAULT CODE
//Transfert du CODE DEFAUT dans une structure permettant
//d'identifier le defaut
//
//*ODIL_ID:1827_82*
U(;
CALL "BLKMOV" (
SRCBLK := #READ.CODE_DEFAUT,
RET_VAL := #RETVAL,
DSTBLK := #CODE_DEF_DETAIL);
U BIE;
);
U(;
L #CODE_DEF_DETAIL.NumDef;
L 0;
<>I;
);
= L 24.0;
U L 24.0;
U(;
L #CODE_DEF_DETAIL.TypeDef;
L B#16#0;
==I;
);
= #DEF_LOCATOR;
U L 24.0;
U(;
L #CODE_DEF_DETAIL.TypeDef;
L B#16#F;
==I;
);
= #DEF_VARIATEUR;
NETWORK
TITLE =FONCTION BLOC SETTING FAULT
//DEFAUT PARAMETRAGE FB
//
//*ODIL_ID:1827_83*
O #DEFPARAM1;
O #DEFPARAM2;
O #DEFPARAM3;
O #DEFPARAM4;
= #DEF_PARAM;
NETWORK
TITLE =DIRECT RETREAT FAULT
//DEFAUT REPLI DIRECT DES AXES
//
//*ODIL_ID:1827_84*
U #READ.MOT_ETAT.I_RDREB;
= #DEF_REPLI_DIRECT;
NETWORK
TITLE =NC GENERAL FAULT
//DEFAUT GENERAL NC
//
//*ODIL_ID:1827_85*
L #READ.CODE_DEFAUT;
L 0;
<>D;
= #DEF_NC_GENERAL;
NETWORK
TITLE =FAULT CODE TRAITMENT (ALARM PRESENT)
//***** NON UTILISE *****
//GESTION DU CODE DEFAUT (PRESENCE D UNE ALARME)
//
//*ODIL_ID:1827_86*
//
U #DEF_REPLI_DIRECT;
UN #LIEN_PUP.Dmaitre;
= #ALA;
= #DIAG.ALA;
NETWORK
TITLE =FAULT DETECT ON NC LOCATOR
//DEFAUT PRESENT SUR NC LOCATOR (ERREUR PARAMETRAGE BF OU DEFAUT PRESENT SUR NC
//LOCATOR)
//
//*ODIL_ID:1827_87*
U(;
O #DEF_PARAM;
O #DEF_CGAXE.AXE6;
O #DEF_CGAXE.AXE5;
O #DEF_CGAXE.AXE4;
O #DEF_CGAXE.AXE3;
O #DEF_CGAXE.AXE2;
O #DEF_CGAXE.AXE1;
O #DEF_LOCATOR;
O #DEF_VARIATEUR;
O #DEF_NC_GENERAL;
);
UN #LIEN_PUP.Dmaitre;
UN #LIEN_PUP.Z_iadf;
= #DEF;
= #DIAG.DEF;
NETWORK
TITLE =NC LOCATOR FAULT CODE
//CODE DEFAUT DU NC LOCATOR
//
//*ODIL_ID:1827_88*
L #READ.CODE_DEFAUT;
T #DIAG.CODEDEF_NC_HEX;
NOP 0;
NETWORK
TITLE =Def and Ala inter-lock
//Interverrouillage def et Ala
//
//*ODIL_ID:1827_89*
U #DEF;
R #ALA;
R #DIAG.ALA;
NETWORK
TITLE =DIAGNOSTIC: N° LISTE DE DEFAUT PROPRE A LA FB POUR IHMP
//*ODIL_ID:1827_90*
L 0;
T #DIAG.NUMLIST;
NOP 0;
NETWORK
TITLE =INDICATION DU DEFAUT
//Code : N° de defaut ou dalarme en Decimal
//
//        9913 : Def Para FB - Code Vehicule incorrect
//        9912 : Def Para FB - Num Sequence Robot incorrect
//        9911 : Def Para FB - Code Pilotage Robot en manuel incorrect
//        9910 : Def Para FB - Mode incorrect
//        9909 : Defaut Repli direct
//        9908 : Defaut Chien de Garde Axe 6
//        9907 : Defaut Chien de Garde Axe 5
//        9906 : Defaut Chien de Garde Axe 4
//        9905 : Defaut Chien de Garde Axe 3
//        9904 : Defaut Chien de Garde Axe 2
//        9903 : Defaut Chien de Garde Axe 1
//        9902 : Defaut Variateur
//        9901 : Defaut Locator
//
//*ODIL_ID:1827_91*
U #BA1I;
= L 24.0;
U L 24.0;
U #DEF_PARAM;
U #DEFPARAM4;
SPBNB _031;
L 9913;
T #DIAG.CODEDEF_FB;
_031: NOP 0;
U L 24.0;
U #DEF_PARAM;
U #DEFPARAM3;
SPBNB _032;
L 9912;
T #DIAG.CODEDEF_FB;
_032: NOP 0;
U L 24.0;
U #DEF_PARAM;
U #DEFPARAM2;
SPBNB _033;
L 9911;
T #DIAG.CODEDEF_FB;
_033: NOP 0;
U L 24.0;
U #DEF_PARAM;
U #DEFPARAM1;
SPBNB _034;
L 9910;
T #DIAG.CODEDEF_FB;
_034: NOP 0;
U L 24.0;
U #DEF_REPLI_DIRECT;
SPBNB _035;
L 9909;
T #DIAG.CODEDEF_FB;
_035: NOP 0;
U L 24.0;
U #DEF_CGAXE.AXE6;
SPBNB _036;
L 9908;
T #DIAG.CODEDEF_FB;
_036: NOP 0;
U L 24.0;
U #DEF_CGAXE.AXE5;
SPBNB _037;
L 9907;
T #DIAG.CODEDEF_FB;
_037: NOP 0;
U L 24.0;
U #DEF_CGAXE.AXE4;
SPBNB _038;
L 9906;
T #DIAG.CODEDEF_FB;
_038: NOP 0;
U L 24.0;
U #DEF_CGAXE.AXE3;
SPBNB _039;
L 9905;
T #DIAG.CODEDEF_FB;
_039: NOP 0;
U L 24.0;
U #DEF_CGAXE.AXE2;
SPBNB _03a;
L 9904;
T #DIAG.CODEDEF_FB;
_03a: NOP 0;
U L 24.0;
U #DEF_CGAXE.AXE1;
SPBNB _03b;
L 9903;
T #DIAG.CODEDEF_FB;
_03b: NOP 0;
U L 24.0;
U #DEF_VARIATEUR;
SPBNB _03c;
L 9902;
T #DIAG.CODEDEF_FB;
_03c: NOP 0;
U L 24.0;
U #DEF_LOCATOR;
SPBNB _03d;
L 9901;
T #DIAG.CODEDEF_FB;
_03d: NOP 0;
NETWORK
TITLE =
//GESTION CODE DEFAUT NC LOCATOR / FB INTERNE
//
//*ODIL_ID:1827_92*
U(;
L 16;
L #DIAG.CODEDEF_NC_HEX;
RRD;
T #CODE_DEF_TMP;
SET;
SAVE;
CLR;
U BIE;
);
SPBNB _03e;
CALL "BLKMOV" (
SRCBLK := #CODE_DEF_TMP,
RET_VAL := #RETVAL,
DSTBLK := #DIAG.CODEDEF_NC_DEC);
_03e: NOP 0;
NETWORK
TITLE =
//GESTION CODE DEFAUT NC LOCATOR / FB INTERNE
//
//*ODIL_ID:1827_93*
L #DIAG.CODEDEF_NC_HEX;
L 0;
<>D;
= L 24.0;
U L 24.0;
SPBNB _03f;
CALL "BLKMOV" (
SRCBLK := #DIAG.CODEDEF_NC_DEC,
RET_VAL := #RETVAL,
DSTBLK := #DIAG.CODEDEF);
_03f: NOP 0;
U L 24.0;
NOT;
SPBNB _040;
CALL "BLKMOV" (
SRCBLK := #DIAG.CODEDEF_FB,
RET_VAL := #RETVAL,
DSTBLK := #DIAG.CODEDEF);
_040: NOP 0;
NETWORK
TITLE =RAZ CODE DE DEFAUT
//codedef value Reset
//
//*ODIL_ID:1827_94*
U(;
U(;
U(;
UN #DEF;
UN #ALA;
SPBNB _041;
L 0;
T #DIAG.CODEDEF_NC_DEC;
SET;
SAVE;
CLR;
_041: U BIE;
);
SPBNB _042;
L 0;
T #DIAG.CODEDEF_NC_HEX;
SET;
SAVE;
CLR;
_042: U BIE;
);
SPBNB _043;
L 0;
T #DIAG.CODEDEF_FB;
SET;
SAVE;
CLR;
_043: U BIE;
);
SPBNB _044;
L 0;
T #DIAG.CODEDEF;
_044: NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_ROBOT"
TITLE =BF_ROBOT
//*************************************************************************
//*                               BF_ROBOT                                *
//*        Pilotage Robot RENAULT    /    RENAULT Robot Control           *
//*************************************************************************
//( In English further below)
//
//DESCRIPTION:
//*************
//Ce Bloc fonctionnel realise
//1- le rearmement du robot et l'envoi des informations de pilotage
//2- l'envoi du code cycle
//3- l'elaboration de variables pour le suivi des moyens
//4- l'elaboration de variables pour l IHM
//
//INFORMATION DE FONCTIONNEMENT ROBOT
//******************************
//1-REARMEMENT
//Lors d'une demande de rearmement (Rearm), si le Robot est pret,
//le FB demande le rearmement de la puissance (DMSP),
//attend la mise sous puissance (MOTORON),
//et envoie trois impulsions de depart cycle (DDCY).
//
//API           ROBOT
//
//<------------ RCREADY
//DMSP ------------>
//<------------ MOTORON
//DDCY (1) ------------> Rearmement depart Cycle
//DDCY (2) ------------> Rearmement depart Cycle
//DDCY (3) ------------> Pour le rearmement eventuel d'un defaut d'air
//
//Les variables
//"Tpulsor1": Temps des creneaux emis a 1 (valeur standard: 0,7s).
//"Tpulsor0": Temps des creneaux emis a 0 (valeur standard: 0,4s).
//peuvent etre modifiees si besoin via un acces direct a l'instance
//Le FB Transmet egalement (AEVRB), (STOP), (DEV), (ENPRO) et (RFZ)
//****
//2- CODE CYCLE ROBOT
//Chaque changement de code cycle (cod), entraine l'envoi d'un code 0 au robot
//pendant une seconde. Pendant cette phase le bit de validation du code a zero
//(CVC0) est positionne.
//Apres cette attente et si le code cycle demande n'est pas nul, son bit
//d'imparite (#clcBit_par) est calcule.
//Sont alors transferes au robot, le code cycle, la validation du code a 1 (CVC1)
//et le bit d'imparite (CPC0).
//
//Ecriture des codes robot en amont de la BF avec un code sur 8 bits :
//- En premier les codes des programmes de travail :
//de 1 a 59
//et de 64 a 255
//- puis les codes des programmes de service :
//Service libre = 60
//Rodage d'electrode = 61
//Changement d'electrode = 62
//- puis le programme de Repli :
//Repli = 63
//
//Mise en oeuvre de la BF :
//********************
//- L'entrees Rearm utilise info de rearmement zone safety
//- Les entrees Dever et S_prodok utilisent des informations generes par
//la BF Zone_mode_IHM et disponible dans le DB ZxG (X = Numero de la zone)
//- Les entrees Z_es et Z_fz utilisent les informations issues des DB safety
//associes a la zone.
//- les entrees Aevr, Stop, Enpro doivent etre mise a 1 si les fonctions ne sont
//pas utilisees sur le robot.
//- l'entree S_code_mx doit etre documentee avec la valeur du dernier numero de
//code de travail utilise par le robot.
//- Les entrees Iw_Rbe1 a Iw_rbe6 doivent etre documentees avec les Entrees API
//au
//format Mot du robot.
//- Les entrees / Sortie Qw_Rbe1 a Qw_rbe6 doivent etre documentees avec les
//Sorties API au format Mot du robot.
//- Toutes les sorties S_xxx doivent etre documentees soit par des variable STAT
//dans le FB de mise en oeuvre du BF_ROBOT. Soit etre en lien avec la BF_TCY_SUIV
//(documentation  BF_TCY_SUIV pour plus de detail)
//- La sortie Diag n'est pas raccordee a une variable du programme
//- L'entree G_outils_API permet d'indiquer si des evenements outils sont geres
//par l'api et necessite l'ecriture d'une equation en Amont de la BF.
//
//CODES de DEFAUT
//******************
//Valeur Diag.codedef
//1 = Defaut presence piece
//2 =  Alarme Rodage
//16 = Alarme changement electrode
//
//************************** ENGLISH INFORMATION  ****************************
//DESCRIPTION:
//*************
//This function block has the following tasks:
//1- reset robot and transmit control information
//2- transmit the cycle code
//3- process variables for resource tracing
//4- process variables for HMI
//
//ROBOT FUNCTIONING INFORMATION :
//*******************************
//1-RESETTING
//Upon a reset request (Rearm), and provided the robot is ready,
//the function block requests the application of power (DMSP),
//waits for power up (MOTORON),
//and sends three start cycle pulses (DDCY).
//PLC           ROBOT
//
//<------------ RCREADY
//DMSP ------------>
//<------------ MOTORON
//DDCY (1) ------------> Reset cycle start (Rearmement depart Cycle)
//DDCY (2) ------------> Reset cycle start (Rearmement depart Cycle)
//DDCY (3) ------------> For possible reset of air fault
//
//The variables are as follows:
//"Tpulsor1": Time slices sent at 1 (default value: 0.7s).
//"Tpulsor0": Time slices sent at 0 (default value: 0.4s).
//If required, these values can be modified using direct access at the instance.
//The FB also transmits the values (AEVRB), (STOP), (DEV), (ENPRO) and (RFZ)
//****
//2- ROBOT CYCLE CODE
//Every change of the cycle code (cod) is followed by the transmission of a code
//0 to the robot
//for a period of 1 second. During this delay, the validation bit of the zero
//code (CVC0) is set.
//After this waiting period and if the requested cycle code is not at zero, then
//its uneven parity
//bit (#clcBit_par) is calculated.
//The following information is hence transmitted to the robot:
//the cycle code, the validation of the code at 1 (CVC1) and the uneven parity
//bit
//(CPC0).
//
//Robot code must be wrote before the block and her value must be on 8 Booleans.
//- In first the Working program codes:1 to 59 and 64 to 255
//- Then the service program codes:
//Free service code = 60
//Electrode Tip-Dressing code = 61
//Electrode change code = 62
//- Then the Main Fallback code :Main Fallback code = 63
//****
//BF OPERATING  :
//****************
//- Rearm use the Safety zone resetting.
//- Dever and S_prodok Inputs use the BF_Zone_MODE_IHM informations., see
//ZxG Global Data for find their. ( x= zone number)
//- Z_es and Z_fz Inputs use the Safety DB informations.
//- Aevr, Stop, Enpro Inputs must be set to 1 if the functions are not used on
//the
//Robot.
//-  S_code_mx Input must be documented with the last value of theWorking program
//code used by the robot..
//- Iw_Rbe1 to Iw_rbe6 Inputs must be documented with the PLC word inputs of the
//robot.
//- Qw_Rbe1 a Qw_rbe6 Inputs/outputs must be documented with the PLC outputs of
//the robot.
//- All S_xxx output can be documented by Stat type variables in the FB where you
//put the BF or can be used by the BF_TCY_SUIV (For more Detail See OAP or
//BF_TCY_SUIV documentation)
//- Diag output is not used in the PLC program (directly used by HMI system)
//- The "G_outils_API" input allows to indicate if events tools are managed by
//the PLC and require the writing of an equation upstream to the BF.
//
//FAULT LIST  :
//*************
//Diag.codedef values:
//1 = Part presence fault
//2 = Tip_dressing Alarm
//16 = Electrode Change Alarm
//********************************************************************************
//                                     ANNEXES
//                                     APPENDIX
//********************************************************************************
//
//Mots d'echanges API <-> Robot
//Sorties robot -> Entrees automate (Iw_rbsX)
//Sorties automate (Qw_rbeX) -> Entrees robot
//La table d'echange initiale de 4 mots d'entrees/sorties a ete etendue a 15
//mots...
//Six de ces mots sont exploites par ce Bloc Fonctionnel.
//********
//Exchange words  PLC <-> Robot
//Outputs robot  ->  Inputs controller (Iw_rbsX)
//Outputs controller (Qw_rbeX) -> Inputs robot
//The initial exchange table comprising 4 input/output words has been extended to
//15 words...
//Six of these words are evaluated by this function block.
//
//Iw_rbe1                    Iw_rbe2                   Iw_rbe3
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//|Octet de Poids Fort   |  |Octet de Poids Fort   |  |Octet de Poids Fort   |
//|Most significant byte |  |Most significant byte |  |Most significant byte |
//|----------+-----------+  |----------+-----------+  +----------+-----------+
//| E x   .0 | RC READY  |  | E x+2 .0 | OR1       |  | E x+4 .0 | Ctrl Ver  |
//| E x   .1 | MOTORON   |  | E x+2 .1 | OR2       |  | E x+4 .1 | Ctrl Dev  |
//| E x   .2 | AUTO      |  | E x+2 .2 | OR3       |  | E x+4 .2 | Pret Ver  |
//| E x   .3 | MANU      |  | E x+2 .3 | OR4       |  | E x+4 .3 |           |
//| E x   .4 | REPLI     |  | E x+2 .4 | OR5       |  | E x+4 .4 |           |
//| E x   .5 |           |  | E x+2 .5 | OR6       |  | E x+4 .5 |           |
//| E x   .6 |           |  | E x+2 .6 | OR7       |  | E x+4 .6 | FRO MS    |
//| E x   .7 |           |  | E x+2 .7 | OR8       |  | E x+4 .7 | FRO1 FZ   |
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//|Octet de poids faible |  |Octet de poids faible |  |Octet de poids faible |
//|Least significant byte|  |Least significant byte|  |Least significant byte|
//+----------------------+  +----------------------+  +----------------------+
//| E x+1 .0 | HPR       |  | E x+3 .0 | OR9       |  | E x+5 .0 | FRO2 FZ   |
//| E x+1 .1 | AOP       |  | E x+3 .1 | OR10      |  | E x+5 .1 | CP air    |
//| E x+1 .2 | DE        |  | E x+3 .2 | OR11      |  | E x+5 .2 | DMR 1     |
//| E x+1 .3 | TC        |  | E x+3 .3 | OR12      |  | E x+5 .3 | DMR 2     |
//| E x+1 .4 | AI        |  | E x+3 .4 | OR13      |  | E x+5 .4 | DMR 3     |
//| E x+1 .5 | APE       |  | E x+3 .5 | OR14      |  | E x+5 .5 | DMR 4     |
//| E x+1 .6 | APF       |  | E x+3 .6 | OR15      |  | E x+5 .6 | DMR 5     |
//| E x+1 .7 | APP       |  | E x+3 .7 | OR16      |  | E x+5 .7 | DMR 6     |
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//Iw_rbe4                    Iw_rbe5                   Iw_rbe6
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//|Octet de Poids Fort   |  |Octet de Poids Fort   |  |Octet de Poids Fort   |
//|Most significant byte |  |Most significant byte |  |Most significant byte |
//|----------+-----------+  |----------+-----------+  +----------+-----------+
//| E x+6 .0 |           |  | E x+8 .0 | ORO1      |  | E x+10.0 | Ctrl Ver  |
//| E x+6 .1 |           |  | E x+8 .1 | ORO2      |  | E x+10.1 | Ctrl Dev  |
//| E x+6 .2 |   DEFAUT  |  | E x+8 .2 | ORO3      |  | E x+10.2 | Pret Ver  |
//| E x+6 .3 |   FAULT   |  | E x+8 .3 | ORO4      |  | E x+10.3 | N.U.      |
//| E x+6 .4 |    SMP    |  | E x+8 .4 | ORO5      |  | E x+10.4 | N.U.      |
//| E x+6 .5 |           |  | E x+8 .5 | ORO6      |  | E x+10.5 | N.U.      |
//| E x+6 .6 |    p f    |  | E x+8 .6 | ORO7      |  | E x+10.6 | FRO MS    |
//| E x+6 .7 |           |  | E x+8 .7 | ORO8      |  | E x+10.7 | FRO1 FZ   |
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//|Octet de poids faible |  |Octet de poids faible |  |Octet de poids faible |
//|Least significant byte|  |Least significant byte|  |Least significant byte|
//+----------------------+  +----------------------+  +----------------------+
//| E x+7 .0 |           |  | E x+9 .0 | ORO9      |  | E x+11.0 | FRO2 FZ   |
//| E x+7 .1 |           |  | E x+9 .1 | ORO10     |  | E x+11.1 | CP air    |
//| E x+7 .2 |   DEFAUT  |  | E x+9 .2 | ORO11     |  | E x+11.2 | DMR 1     |
//| E x+7 .3 |   FAULT   |  | E x+9 .3 | ORO12     |  | E x+11.3 | DMR 2     |
//| E x+7 .4 |    SMP    |  | E x+9 .4 | ORO13     |  | E x+11.4 | DMR 4     |
//| E x+7 .5 |           |  | E x+9 .5 | ORO14     |  | E x+11.5 | DMR 8     |
//| E x+7 .6 |    P F    |  | E x+9 .6 | ORO15     |  | E x+11.6 | DMR 16    |
//| E x+7 .7 |           |  | E x+9 .7 | ORO16     |  | E x+11.7 | DMR 32    |
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//
//Qw_rbs1                   Qw_rbs2                   Qw_rbs3
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//|Octet de Poids Fort   |  |Octet de Poids Fort   |  |Octet de Poids Fort   |
//|Most significant byte |  |Most significant byte |  |Most significant byte |
//|----------+-----------+  |----------+-----------+  +----------+-----------+
//| A x   .0 | AEVRB     |  | A x+2 .0 | EV1       |  | A x+4 .0 | ENPRO     |
//| A x   .1 | DMSP      |  | A x+2 .1 | EV2       |  | A x+4 .1 | RFZ       |
//| A x   .2 | STOP      |  | A x+2 .2 | EV3       |  | A x+4 .2 |           |
//| A x   .3 | DDCY      |  | A x+2 .3 | EV4       |  | A x+4 .3 |           |
//| A x   .4 | DEV       |  | A x+2 .4 | EV5       |  | A x+4 .4 |           |
//| A x   .5 | CVC0      |  | A x+2 .5 | EV6       |  | A x+4 .5 |           |
//| A x   .6 | CVC1      |  | A x+2 .6 | EV7       |  | A x+4 .6 |           |
//| A x   .7 | CPC0      |  | A x+2 .7 | EV8       |  | A x+4 .7 |           |
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//|Octet de poids faible |  |Octet de poids faible |  |Octet de poids faible |
//|Least significant byte|  |Least significant byte|  |Least significant byte|
//+----------------------+  +----------------------+  +----------------------+
//| A x+1 .0 | C1        |  | A x+3 .0 | EV9       |  | A x+5 .0 |           |
//| A x+1 .1 | C2        |  | A x+3 .1 | EV10      |  | A x+5 .1 |           |
//| A x+1 .2 | C4        |  | A x+3 .2 | EV11      |  | A x+5 .2 |           |
//| A x+1 .3 | C8        |  | A x+3 .3 | EV12      |  | A x+5 .3 |           |
//| A x+1 .4 | C16       |  | A x+3 .4 | EV13      |  | A x+5 .4 |           |
//| A x+1 .5 | C32       |  | A x+3 .5 | EV14      |  | A x+5 .5 |           |
//| A x+1 .6 | Res       |  | A x+3 .6 | EV15      |  | A x+5 .6 |           |
//| A x+1 .7 | Res       |  | A x+3 .7 | EV16      |  | A x+5 .7 |           |
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//Qw_rbs4                    Qw_rbs5                   Qw_rbs6
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//|Octet de Poids Fort   |  |Octet de Poids Fort   |  |Octet de Poids Fort   |
//|Most significant byte |  |Most significant byte |  |Most significant byte |
//|----------+-----------+  |----------+-----------+  +----------+-----------+
//| A x+6 .0 | GS1       |  | A x+8 .0 | EVO1      |  | A x+10.0 |           |
//| A x+6 .1 | GS2       |  | A x+8 .1 | EVO2      |  | A x+10.1 |           |
//| A x+6 .2 | GS4       |  | A x+8 .2 | EVO3      |  | A x+10.2 |           |
//| A x+6 .3 | GS8       |  | A x+8 .3 | EVO4      |  | A x+10.3 |           |
//| A x+6 .4 | E1S_RE    |  | A x+8 .4 | EVO5      |  | A x+10.4 |           |
//| A x+6 .5 | E1S_AV    |  | A x+8 .5 | EVO6      |  | A x+10.5 |           |
//| A x+6 .6 | E2S_RE    |  | A x+8 .6 | EVO7      |  | A x+10.6 |           |
//| A x+6 .7 | E2S_AV    |  | A x+8 .7 | EVO8      |  | A x+10.7 |           |
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//|Octet de poids faible |  |Octet de poids faible |  |Octet de poids faible |
//|Least significant byte|  |Least significant byte|  |Least significant byte|
//+----------------------+  +----------------------+  +----------------------+
//| A x+7 .0 | Cde Dev   |  | A x+9 .0 | EVO9      |  | A x+11.0 |           |
//| A x+7 .1 | Cde Ver   |  | A x+9 .1 | EVO10     |  | A x+11.1 |           |
//| A x+7 .2 |           |  | A x+9 .2 | EVO11     |  | A x+11.2 |           |
//| A x+7 .3 |           |  | A x+9 .3 | EVO12     |  | A x+11.3 |           |
//| A x+7 .4 |           |  | A x+9 .4 | EVO13     |  | A x+11.4 |           |
//| A x+7 .5 |           |  | A x+9 .5 | EVO14     |  | A x+11.5 |           |
//| A x+7 .6 |           |  | A x+9 .6 | EVO15     |  | A x+11.6 |           |
//| A x+7 .7 |           |  | A x+9 .7 | EVO16     |  | A x+11.7 |           |
//+----------+-----------+  +----------+-----------+  +----------+-----------+
//
//*************************** -ODIL_ID- ************************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 55
//Dernier ID mis en oeuvre / Last ID implemented : 2016_56
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'ROBOT'
VERSION : 4.1
VAR_INPUT
  Rearm : BOOL;	//Robot Reset / Rearmement des robots
  Z_es : BOOL;	//Zone power On / Zone en service
  Z_fz : BOOL;	//Closed zone /Zone fermee
  Aevr : BOOL;	//Progress Autorization / Autorisation devolution
  Stop : BOOL;	//Robot cycle stop (if equal to Zero) / Arret cycle robot (Arret si Zero)
  Dever : BOOL;	//Dry run Mode (debugging mode) / Mode deverminage
  Enpro : BOOL;	//In production Mode / Mode En production
  S_prodok : BOOL;	//Monitoring system : Production OK /Suivi:Production OK(Autor de remonte tps Rb)
  Cod : WORD;	//Cycle Code / Code Cycle
  S_cod_mx : WORD;	//Monitoring: Robot's max.cycle code / Suivi:Code Cycle maxi(pour mesure du Tps)
  Iw_rbe1 : WORD;	//1st Robot output word (PLC input) / 1er mot sortie robot(Entree sur API mot1)
  Iw_rbe2 : WORD;	//2nd Robot output word (PLC input) / 2eme mot sortie robot(Entree sur API mot2)
  Iw_rbe3 : WORD;	//3rd Robot output word (PLC input) / 3eme mot sortie robot(Entree sur API mot3)
  Iw_rbe4 : WORD;	//4th Robot output word (PLC input) / 4eme mot sortie robot(Entree sur API mot4)
  Iw_rbe5 : WORD;	//5th Robot output word (PLC input) / 5eme mot sortie robot(Entree sur API mot4)
  Iw_rbe6 : WORD;	//6th Robot output word (PLC input) / 6eme mot sortie robot(Entree sur API mot4)
  Iw_rbe7 : WORD;	//7th Robot output word (PLC input) / 7eme mot sortie robot(Entree sur API mot4)
  Iw_rbe8 : WORD;	//8th Robot output word (PLC input) / 8eme mot sortie robot(Entree sur API mot4)
  G_outils_API : BOOL;	//Tools management by PLC / Gestion outils par API
END_VAR
VAR_OUTPUT
  Def_rb : BOOL;	//Robot fault / robot en defaut
  Appel_op : BOOL;	//Operator call / Appel operateur
  S_ar_rb : BOOL;	//Monitoring system : Robot stopped / Suivi : Arret robot
  S_att_rb : BOOL;	//Monitoring system : Robot in wait / Suivi : Robot en attente
  S_top_cy : BOOL;	//Monitoring system : Robot cycle start / Suivi: Top cycle robot
  S_hpr : BOOL;	//Monitoring system : Robot out of product /Suivi : Hors Production Robot
  S_de : BOOL;	//Monitoring system : Drift / Suivi : Derive
  S_ai : BOOL;	//Monitoring system : Infers stop / Suivi:Arret Induit(Attente Info. Externe)
  S_ape : BOOL;	//Monitoring system :  Stop for Exploitation / Suivi : Arret prope Exploitation
  S_apf : BOOL;	//Monitoring system : Stop For Manufacturing / Suivi : Arret propre Fonctionnel
  S_aop : BOOL;	//Monitoring system : Operator call / Suivi : Appel Operateur
  S_com : WORD;	//Monitoring System : SMP fault number / Suivi : Commentaires du robot
  Diag : STRUCT	//Monitoring System : Diagnostics structure for HMI / Struct diagnostic pour IHMP
    Def : BOOL;	//Fault / Defaut
    Ala : BOOL;	//Alarm / Alarme
    Numliste : INT;	//Reserved for SMP Fault list Number / Numero de liste defaut SMP
    Codedef : INT;	//Fault or Alarm Number / N° de defaut ou dalarme en Decimal
    IhmDrod : BOOL;	//Tip dressing request gun 1 / Demande de rodage pince 1
    IhmDrod2 : BOOL;	//Tip dressing request gun 2 / Demande de rodage pince 2
    IhmFrod : BOOL;	//End of tip dressing gun 1 / Fin de rodage pince 1
    IhmFrod2 : BOOL;	//End of tip dressing gun 2 / Fin de rodage pince 2
    IhmDche : BOOL;	//Electrode Change request gun 1 / Demande de changement d'electrodes pince 1
    IhmDche2 : BOOL;	//Electrode Change request gun 2 / Demande de changement d'electrodes pince 2
    IhmFche : BOOL;	//End of Electrode Change gun 1 / Fin de changement d'electrodes pince 1
    IhmFche2 : BOOL;	//End of Electrode Change gun 2 / Fin de changement d'electrodes pince 2
    IhmArret_rb : BOOL;	//Robot Stopped / Robot a l'arret
    IhmS_com : WORD;	//Robot Status / Etat du robot
    Ihmord : WORD;	//Orders Robot 1 to 16 -> PLC / ROBOT -> API Ordre 1 a 16
    Ihmevm : WORD;	//Events PLC 1 to 16 -> Robot / API -> ROBOT evenement 1 a 16
    Ihmordo : WORD;	//Tool Orders Robot -> PLC / ROBOT -> API Ordre Outil
    Ihmevmo : WORD;	//Tool Events PLC -> Robot / API -> ROBOT evenement outil
    Ihmord2 : WORD;	//Orders Robot 1 to 17 -> PLC / ROBOT -> API Ordre 17 a 32
    Ihmevm2 : WORD;	//Events PLC 17 to 32 -> Robot / API -> ROBOT evenement 17 a 32
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Qw_rbs1 : WORD;	//1st Robot input Word (PLC output) / 1er mot d'entree robot (Sorties API mot1)
  Qw_rbs2 : WORD;	//2nd Robot input Word (PLC output) / 2eme mot d'entree robot (Sorties API mot2)
  Qw_rbs3 : WORD;	//3rd Robot input Word (PLC output) / 3eme mot d'entree robot (Sorties API mot3)
  Qw_rbs4 : WORD;	//4th Robot input Word (PLC output) / 4eme mot d'entree robot (Sorties API mot4)
  Qw_rbs5 : WORD;	//5th Robot input Word (PLC output) / 5eme mot d'entree robot (Sorties API mot5)
  Qw_rbs6 : WORD;	//6th Robot input Word (PLC output) / 6eme mot d'entree robot (Sorties API mot6)
  Qw_rbs7 : WORD;	//7th Robot input Word (PLC output) / 7eme mot d'entree robot (Sorties API mot6)
  Qw_rbs8 : WORD;	//8th Robot input Word (PLC output) / 8eme mot d'entree robot (Sorties API mot6)
END_VAR
VAR
  COA : STRUCT
    CCHDE : BOOL;	//Controle Changeur deverrouille
    CCHVE : BOOL;	//Controle Changeur verrouille
    CPO : BOOL;	//Controle presence outil
    CPADV : BOOL;	//Controle pression air deverrouillage
    CPAV : BOOL;	//Controle pression air verrouillage
    CPAS : BOOL;	//Controle pression air EV de securite
    COHSUP : BOOL;	//Controle outil hors support
    DECH : BOOL;	//Deverrouillage changeur
  END_STRUCT ;
  Tpulsor1 : TIME  := T#700MS;	//R_W pulsor time at 1 / R_W Temps du pulsor a 1
  Tpulsor0 : TIME  := T#400MS;	//R_w pulsor time pulsor at 1 / R_W Temps du pulsor a 1
  MCod : WORD;	//Cycle code memory / Memoire du code cycle (memorise pour changement d'etat)
  MRearm : BOOL;	//Resetting Memory / Memoire de rearmement
  FRearm : BOOL;	//Rearm Rising edge auxiliary / Auxilliaire Front Montant de Rearm
  FXdche : BOOL;	//Xdche Rising edge / Intermediaire de calcul du Front montant de Xdche
  Xdchrod : BOOL;	//Electrode change auxiliary / Aux Demande de changement d'electrodes
  Chgelectr : BOOL;	//Electrode change alarm gun 1 / Alarme changement d'electrodes pince 1
  Chgelectr2 : BOOL;	//Electrode change alarm gun 2 / Alarme changement d'electrodes pince 2
  Qcreneau : BOOL;	//Square pulse / creneau
  CmpPulse : INT;	//square pulse compt of start cycle / Compteur de creneau de depart cycle
  TONPulsor : TON;	//Pulsor
  TONRaz : TON;	//Maintenance Tempo. of cycle code at 0 / Tempo de maintien du code cycle a zero
END_VAR
VAR_TEMP
  rbe1 : STRUCT	//LW0 input word 1 of Robot / LW0 - Mot d'entree 1 du Robot
    RC_READY : BOOL;	//X0-Robot ready in Automatic mode / X0-Robot en auto pret a recevoir des infos
    MOTORON : BOOL;	//X1 - Robot in control loop/ X1 - Robot sous asservissement
    AUTO : BOOL;	//X2 - Automatic mode / X2 - Auto
    MANU : BOOL;	//X3 - Manual Mode /  X3 - Manu
    REPLI : BOOL;	//X4 - Main Fallback Position / X4 - Position de repli
    XCYCLEON : BOOL;	//X5 - XcycleOn / en execution
    REB_PRG : BOOL;	//X6 - Reb_prg / Robot au point de rebouclage
    RAMVT : BOOL;	//X7 - RAMVT
    HPR : BOOL;	//X8 - Robot out of product / X8 - Hors Production Robot
    AOP : BOOL;	//X9 - Operator call / X9 - Appel Operateur
    DE : BOOL;	//X10 - Drift / X10 - Derive
    TC : BOOL;	//X10 - start cycle / X11 - Top Cycle (Prise en compte N° de Cycle)
    AI : BOOL;	//X12-Infers stop(waitting external info) / X12-Arret Induit (Attente Info Exter)
    APE : BOOL;	//X13 - Stop for Exploitation / X13 - Arret Exploitation
    Apf : BOOL;	//X14 - Stop For Manufacturing / X14 - Arret Fonctionnel
    App : BOOL;	//X15 - Stop for Fault / X15 - Arret Propre Panne
  END_STRUCT ;
  rbe4 : WORD;	//LW2 input word 4 of Robot / LW2 - Mot d'entree 4 du Robot
  rbe6 : STRUCT	//LW4 input word 6 of Robot / LW4 - Mot d'entree 6 du Robot
    P1I1 : BOOL;	//Welding gun 1 information 1 (X0) / Pince 1 Info 1 (X0)
    P1I2 : BOOL;	//Welding gun 1 information 2 (X1) / Pince 1 Info 2 (X1)
    P1I4 : BOOL;	//Welding gun 1 information 4 (X2) / Pince 1 Info 4 (X2)
    P2I1 : BOOL;	//Welding gun 2 information 1 (X0) / Pince 2 Info 1 (X0)
    P2I2 : BOOL;	//Welding gun 2 information 2 (X1) / Pince 2 Info 2 (X1)
    P2I4 : BOOL;	//Welding gun 2 information 4 (X2) / Pince 2 Info 4 (X2)
    X6 : BOOL;	//Reserve
    X7 : BOOL;	//Reserve
    BYTERes : BYTE;	//Reserve
  END_STRUCT ;
  rbs1 : STRUCT	//LW6 output word 1 of Robot / LW6 - Mot de sortie 1 du Robot
    AEVRB : BOOL;	//Robot runing authorization / Autorisation Evolution Robot
    DMSP : BOOL;	//Power on Request / Demande de mise sous puissance
    STOP : BOOL;	//Stop
    DDCY : BOOL;	//Start cycle request / Demande de depart cycle
    DEV : BOOL;	//Dry run Mode /Mode deverminage
    CVC0 : BOOL;	//Code check at 0 / Controle de validation du code a 0
    CVC1 : BOOL;	//Code check at 1 / Controle de validation du code a 1
    CPC0 : BOOL;	//Parity Bool / bit de parite
    Code : BYTE;	//Robot code cycle Number : Numero de cycle robot
  END_STRUCT ;
  rbs3 : STRUCT	//LW8 output word 3 of Robot /LW8 - Mot de sortie 3 du Robot
    ENPRO : BOOL;	//In product / En production
    RFZ : BOOL;	//Zone closed / Zone fermee
    X2 : BOOL;	//reserve
    X3 : BOOL;	//reserve
    X4 : BOOL;	//reserve
    X5 : BOOL;	//reserve
    X6 : BOOL;	//reserve
    X7 : BOOL;	//reserve
    BYTERes : BYTE;	//reserve / Bits X8 a X15
  END_STRUCT ;
  Code : STRUCT	//Code
    C1 : BOOL;	//Boolean value = 1
    C2 : BOOL;	//Boolean value = 2
    C4 : BOOL;	//Boolean value = 4
    C8 : BOOL;	//Boolean value = 8
    C16 : BOOL;	//Boolean value = 16
    C32 : BOOL;	//Boolean value = 32
    C64 : BOOL;	//Boolean value = 64
    C128 : BOOL;	//Boolean value = 128
  END_STRUCT ;
  SavAR2 : DWORD;	//AR1 save /sauvegarde AR1
  PTPulsor : TIME;	//Pulsor value / Valeur du pulsor
  Ba1i : BOOL;	//Bool ever at 1 / Bit toujours a 1
  Robot_de : BOOL;	//Drift Robot / Robot derive
  Robot_ai : BOOL;	//Infers stop Robot(waitting external info)/Arret Induit Rob(Attente Info Exter)
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//Set to 1 for internal information used in the FB
//*ODIL_ID:2016_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Formatage du mot d'entrees 1
//Input Word 1 Formatting (copy Input in Temp variable)
//*ODIL_ID:2016_2*
//
L #Iw_rbe1;
T LW 0;
NOP 0;
NETWORK
TITLE =Modification info robot avec Gestion outils par API
//Gestion Robot derive
//Modification of robot information with Management tools by PLC
//Drift Robot Management
//*ODIL_ID:2016_3*
//
U #rbe1.DE;
UN #G_outils_API;
= #Robot_de;
NETWORK
TITLE =Modification info robot avec Gestion outils par API
//Arret Induit robot
//Modification of robot information with Management tools by PLC
//Infers stop Robot Management
//*ODIL_ID:2016_4*
//
U #rbe1.DE;
U #G_outils_API;
= #Robot_ai;
NETWORK
TITLE =Affectation de la structure COA pour mise à dispo dans le DBI
//Cette structure de données permet de mettre à disposition de l'API l'ensemble
//des bits pour le pilotage et le controle du changeur d'outils automatique
//securise.
//Input Word 3 formatting ( Copy input in Stat variable )
//*ODIL_ID:2016_56*
//
// Sauvegarde de l'AR2
TAR2 #SavAR2;
// Preparation pointeur sur Iw_rbe3
LAR1 AR2;
L P##Iw_rbe3;
+AR1;
// Preparation pointeur sur structure COA
LAR2 #SavAR2;
L P##COA;
+AR2;
// Lecture et masquage du premier octet du mot Iw_rbe3 pour affecter la structure COA
L DIB [AR1,P#0.0];
UW W#16#7F; // Masque pour filtrer le RMS de la trame profinet
T DIB [AR2,P#0.0]; // Ecriture dans la structure COA
// Restitution de l'AR2 modifié avant sortie du FB
LAR2 #SavAR2;
// Preparation pointeur sur Qw_rbs4
LAR1 #SavAR2;
L P##Qw_rbs4;
+AR1;
// Lecture et masquage du bit 8 du mot Qw_rbs4 pour affecter la structure COA
U DIX [AR1,P#1.0];
= #COA.DECH;
NETWORK
TITLE =Formatage du mot d'entree 4 poids Fort <-> poids Faible
//Input Word 4 formattting and reverse Octet (copy Input in Temp variable)
//*ODIL_ID:2016_5*
//
L #Iw_rbe4;
TAW;
T #rbe4;
NETWORK
TITLE =Formatage du mot d'entree 6
//Input word 6 Formatting (copy Input in Temp variable)
//*ODIL_ID:2016_6*
//
L #Iw_rbe6;
T LW 4;
NOP 0;
NETWORK
TITLE =Initialisation rbs1 pour traitement
//rbs1 initialization for processing (copy In/output in Temp variable)
//*ODIL_ID:2016_7*
//
L #Qw_rbs1;
T LW 6;
NOP 0;
NETWORK
TITLE =Initialisation rbs3 pour traitement
//rbs3 initialization for processing(copy In/output in Temp variable)
//*ODIL_ID:2016_8*
//
L #Qw_rbs3;
T LW 8;
NOP 0;
NETWORK
TITLE =Rearmement du robot
//Demande de mise sous puissance si robot en auto pret a recevoir des infos
//distantes et non en asservissement
//
//Robot Resetting
//Power-on request if Robot in automatic mode and ready to receive external
//informations without control loop.
//*ODIL_ID:2016_9*
//
U #Rearm;
U #rbe1.RC_READY;
UN #rbe1.MOTORON;
= #rbs1.DMSP;
NETWORK
TITLE =Autorisation devolution
//Robot runing authorization
//*ODIL_ID:2016_10*
//
U #Aevr;
= #rbs1.AEVRB;
NETWORK
TITLE =Arret cycle robot
//Robot end cycle
//*ODIL_ID:2016_11*
//
U #Stop;
= #rbs1.STOP;
NETWORK
TITLE =Memorisation de la demande de rearmement
//Resetting request storage
//*ODIL_ID:2016_12*
//
U(;
U #Rearm;
FP #FRearm;
O #MRearm;
);
U #rbe1.RC_READY;
UN #Qcreneau;
= #MRearm;
NETWORK
TITLE =Initialisation du compteur de pulse
//Initialisation du compteur de pulse a 3...
//(Creneau 700ms a 1 et 400ms a 0 - 3 fois)
//
//Pulsor initialization
//Initial Value at 3
//(square pulse format = 700ms at 1 and 400ms at 0 - 3 times)
//*ODIL_ID:2016_13*
//
U #MRearm;
U #rbe1.MOTORON;
SPBNB _001;
L 3;
T #CmpPulse;
_001: NOP 0;
NETWORK
TITLE =
//*ODIL_ID:2016_14*
//
L #CmpPulse;
L 0;
>I;
= #Qcreneau;
NETWORK
TITLE =Temps de pulsation Creneau de "Depart cycle"
//Pulsation time of Start cycle pulse
//*ODIL_ID:2016_15*
//
L #Tpulsor0;
L #Tpulsor1;
+D;
T #PTPulsor;
NOP 0;
NETWORK
TITLE =Lancement du Pulsor de rearmement
//Pulsor of Resetting Launching
//*ODIL_ID:2016_16*
//
U #Qcreneau;
UN #TONPulsor.Q;
= L 21.0;
BLD 103;
CALL #TONPulsor (
IN := L 21.0,
PT := #PTPulsor);
NOP 0;
NETWORK
TITLE =Decrementation du compteur de pulse
//Decrementation of pulse counter
//*ODIL_ID:2016_17*
//
U #TONPulsor.Q;
SPBNB _002;
L #CmpPulse;
L 1;
-I;
T #CmpPulse;
_002: NOP 0;
NETWORK
TITLE =Impulsion de rearmement
//Signal pulse of Ressetting
//*ODIL_ID:2016_18*
//
U(;
L #TONPulsor.ET;
L #Tpulsor1;
<=D;
);
U #Qcreneau;
U #rbe1.RC_READY;
U #rbe1.MOTORON;
= #rbs1.DDCY;
NETWORK
TITLE =Deverminage
//Dry run
//*ODIL_ID:2016_19*
//
U #Dever;
= #rbs1.DEV;
NETWORK
TITLE =En Production
//In product
//*ODIL_ID:2016_20*
//
U #Enpro;
= #rbs3.ENPRO;
NETWORK
TITLE =Zone fermee
//Zone closed
//*ODIL_ID:2016_21*
//
U #Z_fz;
= #rbs3.RFZ;
NETWORK
TITLE =Detection de changement de code cycle
//Envoi d'un code cycle a zero vers le robot
//
//Cycle code shift detection
//Cycle code at 0 send to the robot
//*ODIL_ID:2016_22*
//
L #Cod;
L #MCod;
<>D;
= L 21.0;
U L 21.0;
SPBNB _003;
L #Cod;
T #MCod;
_003: NOP 0;
U L 21.0;
SPBNB _004;
L 0;
T #rbs1.Code;
_004: NOP 0;
NETWORK
TITLE =Code cycle a Un
//Cycle code at 1
//*ODIL_ID:2016_23*
//
L #rbs1.Code;
L B#16#0;
<>D;
= #rbs1.CVC1;
NETWORK
TITLE =Code Cycle a Zero
//Cycle code at 0
//*ODIL_ID:2016_24*
//
UN #rbs1.CVC1;
= #rbs1.CVC0;
NETWORK
TITLE =Temporisation de maintien du code cycle a zero
//locking Temporisation of Cycle code at 0
//*ODIL_ID:2016_25*
//
U #rbs1.CVC0;
= L 21.0;
BLD 103;
CALL #TONRaz (
IN := L 21.0,
PT := T#1S);
NOP 0;
NETWORK
TITLE =Envoi du code cycle
//Envoi du code cycle a l'issue de la temporisation
//
//Cycle code sending
//Cycle code is send at the end of the time delay
//*ODIL_ID:2016_26*
//
U #TONRaz.Q;
SPBNB _005;
L #Cod;
T #rbs1.Code;
_005: NOP 0;
NETWORK
TITLE =Calcul de Parite
//Parity calculation
//*ODIL_ID:2016_27*
//
L #rbs1.Code;
LAR1 P##Code;
T LB [AR1,P#0.0];
U #Code.C1; //XOR on all the code bool _ Ou Exclusif sur l'ensemble des bits du code
X #Code.C2;
X #Code.C4;
X #Code.C8;
X #Code.C16;
X #Code.C32;
X #Code.C64;
X #Code.C128;
NOT;
U #rbs1.CVC1;
= #rbs1.CPC0;
NETWORK
TITLE =SUIVI DU ROBOT - Attente Robot
//Robot monitoring _ Robot in wait
//*ODIL_ID:2016_28*
//
O #rbe1.AI;
O #rbe1.Apf;
O #Robot_ai;
= #S_att_rb;
NETWORK
TITLE =Arret du Robot
//Robot Monitoring - Robot stopped
//*ODIL_ID:2016_29*
//
ON #Z_es;
ON #Z_fz;
O(;
L #Cod;
L #S_cod_mx;
>D;
);
O #rbe1.APE;
O #rbe1.App;
ON #S_prodok;
= #S_ar_rb;
NETWORK
TITLE =Suivi: Hors Production Robot
//Robot Monitoring - Robot out of product
//*ODIL_ID:2016_30*
//
U #rbe1.HPR;
= #S_hpr;
NETWORK
TITLE =Suivi: Derive
//Robot Monitoring - Drift
//*ODIL_ID:2016_31*
//
U #Robot_de;
= #S_de;
NETWORK
TITLE =Suivi: Arret Induit (Attente Information Externe)
//Robot Monitoring - Infers stop
//*ODIL_ID:2016_32*
//
O #rbe1.AI;
O #Robot_ai;
= #S_ai;
NETWORK
TITLE =Suivi: Arret Exploitation
//Robot Monitoring - Stop for exploitation
//*ODIL_ID:2016_33*
//
U #rbe1.APE;
= #S_ape;
NETWORK
TITLE =Suivi: Arret Fonctionnel
//Robot Monitoring - Stop for manufacturing
//*ODIL_ID:2016_34*
//
U #rbe1.Apf;
= #S_apf;
NETWORK
TITLE =Suivi: Appel Operateur
//Robot Monitoring - operator call
//*ODIL_ID:2016_35*
//
U #rbe1.AOP;
= #S_aop;
NETWORK
TITLE =Recopie du Mot: commentaires
//Copy of Robot world comment
//*ODIL_ID:2016_36*
//
L #rbe4;
T #S_com;
NOP 0;
NETWORK
TITLE =Top cycle robot
//Robot monitoring - Robot cycle start
//*ODIL_ID:2016_37*
//
U #rbe1.TC;
= #S_top_cy;
NETWORK
TITLE =Mise a un du bit Appel operateur
//operator call boolean information set to 1
//*ODIL_ID:2016_38*
//
U(;
U #rbe1.AOP;
UN #Chgelectr;
UN #Chgelectr2;
UN #Diag.IhmDche;
UN #Diag.IhmDche2;
O;
U #rbe1.APE;
UN #Qcreneau;
U(;
L #rbe4;
L 30;
<>D;
);
U(;
O(;
L #rbe4;
L 41;
<D;
);
O(;
L #rbe4;
L 44;
>D;
);
);
O #Robot_de;
);
U #Z_es;
U #Z_fz;
= #Appel_op;
= #Diag.Ala;
NETWORK
TITLE =Mise a un de l'info Defaut Robot
//Robot fault information set to 1
//*ODIL_ID:2016_39*
//
U #rbe1.App;
= #Def_rb;
= #Diag.Def;
NETWORK
TITLE =interverrouillage def et Ala
//Def est prioritaire
//
//Interlock between "def" and "Ala":
//Priority is given to "def"
//*ODIL_ID:2016_40*
//
U #Diag.Def;
R #Diag.Ala;
NETWORK
TITLE =(********** INFO DE DIAGNOSTIC **********)
//*********Information and Diagnostics**************
//*ODIL_ID:2016_41*
//

NETWORK
TITLE =(*DIAGNOSTIC: N° LISTE DE DEFAUT PROPRE AU FB POUR IHMP*)
//Smp Fault list Number
//*ODIL_ID:2016_42*
//
L 0;
T #Diag.Numliste;
NOP 0;
NETWORK
TITLE =Robot a l'arret
//Robot stopped
//*ODIL_ID:2016_43*
//
O #rbe1.AI;
O;
U #rbe1.APE;
U(;
O(;
L #rbe4;
L 42;
<D;
);
O(;
L #rbe4;
L 44;
>D;
);
);
O #Def_rb;
O #Robot_ai;
= #Diag.IhmArret_rb;
NETWORK
TITLE =envoi code defaut / alerte
//Codedef : N° de defaut ou dalarme en Decimal
//
//         1 : Defaut presence piece
//         2 : Alarme Rodage pince 1 ou 2
//         16: Alarme changement d'electrode pince 1 ou 2
//
//
//Fault/ Alarm code sendding
//Codedef : Fault or alarm Number in decimal
//        1 = Part presence fault
//        2 = Tip_dressing Alarm gun 1 or 2
//        16 = Electrode Change Alarm gun 1 or 2
//*ODIL_ID:2016_44*
//
U #Ba1i;
= L 21.0;
U L 21.0;
SPBNB _006;
L B#16#0;
T #Diag.Codedef;
_006: NOP 0;
U L 21.0;
U(;
U #rbe6.P1I1;
UN #rbe6.P1I2;
UN #rbe6.P1I4;
O;
U #rbe6.P2I1;
UN #rbe6.P2I2;
UN #rbe6.P2I4;
);
SPBNB _007;
L 2;
T #Diag.Codedef;
_007: NOP 0;
U L 21.0;
U(;
UN #rbe6.P1I1;
UN #rbe6.P1I2;
U #rbe6.P1I4;
O;
UN #rbe6.P2I1;
UN #rbe6.P2I2;
U #rbe6.P2I4;
);
SPBNB _008;
L 16;
T #Diag.Codedef;
_008: NOP 0;
U L 21.0;
U(;
L #rbe4;
L 130;
>=I;
);
U(;
L #rbe4;
L 138;
<=I;
);
SPBNB _009;
L 1;
T #Diag.Codedef;
_009: NOP 0;
NETWORK
TITLE =PROGRAMMES DE SERVICES ROBOT SOUDEUR - Alarme rodage
//Remplace par Diag.codedef = 2
//
//WELDING ROBOT SERVICE PROGRAM - TIP DRESSING ALARM
//Remplaced by Diagcodedef = 2
//*ODIL_ID:2016_45*
//

NETWORK
TITLE =Demande de rodage
//Tip dressing request
//*ODIL_ID:2016_46*
//
U #Ba1i;
= L 21.0;
U L 21.0;
UN #rbe6.P1I1;
U #rbe6.P1I2;
UN #rbe6.P1I4;
= #Diag.IhmDrod;
U L 21.0;
UN #rbe6.P2I1;
U #rbe6.P2I2;
UN #rbe6.P2I4;
= #Diag.IhmDrod2;
NETWORK
TITLE =Fin de rodage
//Tip dressing end
//*ODIL_ID:2016_47*
//
U #Ba1i;
= L 21.0;
U L 21.0;
U #rbe6.P1I1;
U #rbe6.P1I2;
UN #rbe6.P1I4;
= #Diag.IhmFrod;
U L 21.0;
U #rbe6.P2I1;
U #rbe6.P2I2;
UN #rbe6.P2I4;
= #Diag.IhmFrod2;
NETWORK
TITLE =Alarme changement d'electrode
//Remplace par Diag.def = 16
//
//Electrode change alarm
//Remplaced by Diagcodedef = 16
//*ODIL_ID:2016_48*
//
U #Ba1i;
= L 21.0;
U L 21.0;
UN #rbe6.P1I1;
UN #rbe6.P1I2;
U #rbe6.P1I4;
= #Chgelectr;
U L 21.0;
UN #rbe6.P2I1;
UN #rbe6.P2I2;
U #rbe6.P2I4;
= #Chgelectr2;
NETWORK
TITLE =Aux demande de changement d'electrodes
//Electrode change request auxiliary
//*ODIL_ID:2016_49*
//
L #rbe4;
L 45;
==D;
= #Xdchrod;
NETWORK
TITLE =Demande de changement d'electrodes
//Electrode change request
//*ODIL_ID:2016_50*
//
U #Xdchrod;
FP #FXdche;
S #Diag.IhmDche;
U(;
O #Diag.IhmFche;
O #Diag.IhmFche2;
O(;
L #rbe4;
L 21;
==D;
);
);
R #Diag.IhmDche;
NOP 0;
NETWORK
TITLE =Fin de changement d'electrodes
//Electrode Change END
//*ODIL_ID:2016_51*
//
U #Ba1i;
= L 21.0;
U L 21.0;
UN #rbe6.P1I1;
U #rbe6.P1I2;
U #rbe6.P1I4;
= #Diag.IhmFche;
U L 21.0;
UN #rbe6.P2I1;
U #rbe6.P2I2;
U #rbe6.P2I4;
= #Diag.IhmFche2;
NETWORK
TITLE =rbs1
//RBS1
//*ODIL_ID:2016_52*
//
L LW 6;
T #Qw_rbs1;
NOP 0;
NETWORK
TITLE =rbs3
//RBS3
//*ODIL_ID:2016_53*
//
L LW 8;
T #Qw_rbs3;
NOP 0;
NETWORK
TITLE =Etat du robot pour IHMP ecran 601
//Robot status for HMI
//*ODIL_ID:2016_54*
//
L #rbe4;
T #Diag.IhmS_com;
NOP 0;
NETWORK
TITLE =Transfert infos Word vers infos bits pour diag IHMP ecran 601
//pointeur1  sur premier bit Ihmord (bit8) offset 10.0
//pointeur2 sur premier bit Ihmevm (bit8) offset 12.0
//Attention une modification de la structure Diag peut entrainer des erreurs
//d'adressage!
//
//Copy Word information to booleans information for HMI diagnostics
//
//Pointer Number1 on first bool Ihmord (8th Bool) Offset 10.0 in Diag Struct
//Pointer Number on first bool Ihmevn (8th Bool) offszt 12.0 in Diag Struct
//Be careful an Modification of Diag structure can drive to a addressing fault in
//the FB
//*ODIL_ID:2016_55*
//
LAR1 AR2; // AR1 := AR2
L P##Diag; // offset structure Diag
+AR1;
L #Iw_rbe2; //source Iw_rbe2
T DIW [AR1,P#10.0]; // dest Ihmord
L #Iw_rbe8; //source Iw_rbe8
T DIW [AR1,P#18.0]; // dest Ihmord2
L #Qw_rbs2; //source Qw_rbs2
T DIW [AR1,P#12.0]; //dest Ihmevm
L #Qw_rbs8; //source Qw_rbs8
T DIW [AR1,P#20.0]; //dest Ihmevm2
L #Iw_rbe5; //source Iw_rbe5
T DIW [AR1,P#14.0]; // dest Ihmordo
L #Qw_rbs5; //source Qw_rbs5
T DIW [AR1,P#16.0]; //dest Ihmevmo
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_RB_COD_PREH_API"
TITLE =BF_RB_COD_PREH_API
//********************************************************************************
//*                            BF "RB_COD_PREH_API"                              *
//*             Commande et controle d'un prehenseur robot par API               *
//*                    Control and check of a Robot Gripper by PLC               *
//********************************************************************************
//(In English further below)
//
//DESCRIPTION:
//************
//Ce Bloc Fonctionnel permet la conduite manuelle depuis le pupitre du robot des
// sequences dun prehenseur robot pilote par lautomate programmable
//
//Le Bloc fonctionnel BF_RB_COD_PREH_API utilise:
//
//le mot d'entree 3 du Robot (Iw_rbe3)
//pour delivrer:
//   - le numero de sequence selectionne sur le Robot en mode manu (Num_Seq)
//   - l'ordre Avance/Recul (Bamv/Brmv) conditionne par le mode manu du robot
//(ManuRobot)
//
//le mot de sortie 4 du Robot (Qw_rbs4)
//pour animer la page des mouvements manuels du robot a partir des "Mots
//Fonction" (fct_s1 a fct_s16).
//
//
//Transmission des informations d'etats des sequences :
//*****************************************************
//Les bits d'etat Avance/Recul des 16 sequences sont transmis par groupe de deux
//vers le robot dans une fenetre d'un octet.
//
//  +------------+------------+------------+------------+-----------------+
//  |     X7     |     X6     |     X5     |    X4      |   X3 a X0       |
//  |   ES2_AV   |   ES2_RE   |   ES1_AV   |   E1S_RE   | GS8 GS4 GS2 GS1 |
//  +------------+------------+------------+------------+-----------------+
//  |  fct_s2.IA |  fct_S2.IR |  fct_s1.IA |  fct_S1.IR |        1        |
//  |  fct_s4.IA |  fct_S4.IR |  fct_s3.IA |  fct_S3.IR |        2        |
//  |  fct_s6.IA |  fct_S6.IR |  fct_s5.IA |  fct_S5.IR |        3        |
//  |  fct_s8.IA |  fct_S8.IR |  fct_s7.IA |  fct_S7.IR |        4        |
//  | fct_s10.IA | fct_S10.IR |  fct_s9.IA |  fct_S9.IR |        5        |
//  | fct_s12.IA | fct_S12.IR | fct_s11.IA | fct_S11.IR |        6        |
//  | fct_s14.IA | fct_S14.IR | fct_s13.IA | fct_S13.IR |        7        |
//  | fct_s16.IA | fct_S16.IR | fct_s15.IA | fct_S15.IR |        8        |
//  +------------+------------+------------+------------+-----------------+
//
//Le numero de groupe est incremente toutes les 200 ms.
//
//
//
//Decodage des demandes mouvements issues du robot vers l'automate :
//****************************************************************
//Les demandes de mouvement issues du robot sont codees sur 6 bits.
//
//  +--------+--------+--------+--------+--------+--------+
//  | DRM 32 | DRM 16 | DRM 8  | DRM 4  | DRM 2  | DRM 1  |
//  +--------+--------+--------+--------+--------+--------+
//
//Le bit DRM 1 indique le sens du mouvement (0 Avance / 1 Recul)
//les bits DRM 2 a DRM 32 permettent de retrouver Le numero de sequence.
//(Num_Seq := ("DRM 2 a 32" + 1) / 2)
//
//  +---------+---------+-------+-------+
//  | Num_Mvt | Num_Seq | Brmv  | Bamv  |
//  +---------+---------+-------+-------+
//  |    0    |    0    |   0   |   0   |
//  |    1    |    1    |   1*  |   0   |
//  |    2    |    1    |   0   |   1*  |
//  |    3    |    2    |   1*  |   0   |
//  |    4    |    2    |   0   |   1*  |
//  |    5    |    3    |   1*  |   0   |
//  |    6    |    3    |   0   |   1*  |
//  |    7    |    4    |   1*  |   0   |
//  |    8    |    4    |   0   |   1*  |
//  |    9    |    5    |   1*  |   0   |
//  |   10    |    5    |   0   |   1*  |
//  |   11    |    6    |   1*  |   0   |
//  |   12    |    6    |   0   |   1*  |
//  |   13    |    7    |   1*  |   0   |
//  |   14    |    7    |   0   |   1*  |
//  |   15    |    8    |   1*  |   0   |
//  |   16    |    8    |   0   |   1*  |
//  +---------+---------+-------+-------+
//* Si le parametre "ManuRobot" est positionne
//
//MISE en OEUVRE :
//**************
//Entrees Fct-Sx = Mot fonction de la BF_Mouv2P1 associe a la sequence (<Nom
//instance Mouv2P1>.MF)
//
//
//Sortie Num_Seq = utiliser pour seter l'entree SL du mot fonction de la
//BF_Mouv2P1 associe avec robot en mode manuel.
//
//Sortie BAMV et BRMV = entree BAMV et BRMV des BF_Mouv2P1
//
//CODE DEFAUTS :
//**************
//Non utilise
//
//
//******************************** English Information ***************************
//DESCRIPTION:
//************
//This functional block is used for the manual control of robot gripper sequences
// controlled by the PLC from the robot panel.
//
//This Block uses :
//The 3rd input word of the robot (IW_rbe3) to provide :
//   - The sequence number selected on the panel robot in manual mode (Num_seq)
//   - The Advance/return order (Bamv/Brmv) when robot is in manual mode.
//     (ManuRobot)
//
//The 4th output word of the robot (QW_rbs4) to run the manual mouvement page of
//robot from "function word" (Fct_S1 to Fct_S16)
//
//
//Transmission of sequence status data to the robot :
//*************************************************
//The Advance/Return status bits for the 16 sequences (fct_s1 to fct_s16) are
//sent in pairs to the robot in a one byte window (High order byte of the fourth
//word of the robot output).
//
//  +------------+------------+------------+------------+-----------------+
//  |     X7     |     X6     |     X5     |    X4      |   X3 a X0       |
//  |   ES2_AV   |   ES2_RE   |   ES1_AV   |   E1S_RE   | GS8 GS4 GS2 GS1 |
//  +------------+------------+------------+------------+-----------------+
//  |  fct_s2.IA |  fct_S2.IR |  fct_s1.IA |  fct_S1.IR |        1        |
//  |  fct_s4.IA |  fct_S4.IR |  fct_s3.IA |  fct_S3.IR |        2        |
//  |  fct_s6.IA |  fct_S6.IR |  fct_s5.IA |  fct_S5.IR |        3        |
//  |  fct_s8.IA |  fct_S8.IR |  fct_s7.IA |  fct_S7.IR |        4        |
//  | fct_s10.IA | fct_S10.IR |  fct_s9.IA |  fct_S9.IR |        5        |
//  | fct_s12.IA | fct_S12.IR | fct_s11.IA | fct_S11.IR |        6        |
//  | fct_s14.IA | fct_S14.IR | fct_s13.IA | fct_S13.IR |        7        |
//  | fct_s16.IA | fct_S16.IR | fct_s15.IA | fct_S15.IR |        8        |
//  +------------+------------+------------+------------+-----------------+
//
// The Group number is incremented every 200 ms.
//
//Decoding of movement requests from the robot to the PLC:
//*******************************************************
//  +--------+--------+--------+--------+--------+--------+
//  | DRM 32 | DRM 16 | DRM 8  | DRM 4  | DRM 2  | DRM 1  |
//  +--------+--------+--------+--------+--------+--------+
//
// DRM 1 bit give the mouvement way  (0 Advance / 1 Return)
//DRM 2 to DRM 32 bits are used to encode the sequence number.
//(Num_Seq := ("DRM 2 to 32" + 1) / 2)
//  +---------+---------+-------+-------+
//  | Num_Mvt | Num_Seq | Brmv  | Bamv  |
//  +---------+---------+-------+-------+
//  |    0    |    0    |   0   |   0   |
//  |    1    |    1    |   1*  |   0   |
//  |    2    |    1    |   0   |   1*  |
//  |    3    |    2    |   1*  |   0   |
//  |    4    |    2    |   0   |   1*  |
//  |    5    |    3    |   1*  |   0   |
//  |    6    |    3    |   0   |   1*  |
//  |    7    |    4    |   1*  |   0   |
//  |    8    |    4    |   0   |   1*  |
//  |    9    |    5    |   1*  |   0   |
//  |   10    |    5    |   0   |   1*  |
//  |   11    |    6    |   1*  |   0   |
//  |   12    |    6    |   0   |   1*  |
//  |   13    |    7    |   1*  |   0   |
//  |   14    |    7    |   0   |   1*  |
//  |   15    |    8    |   1*  |   0   |
//  |   16    |    8    |   0   |   1*  |
//  +---------+---------+-------+-------+
//* If "ManuRobot" is set
//
//OPERATING :
//***********
//Fct-Sx inputs = BF_Mouv2P1 Function Word corresponding tothe sequence(<Mouv2P1
//instance name>.MF)
//
//Num_Seq output = used to set the function word "SL" of BF_Mouv2P1 corresponding
//to the Robot in Manual Mode.
//
//BAMV and BRMV outputs =  BAMV and BRMV imputs of BF_mouv2P1
//
//FAULT CODE :
//************
//Not used
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 10
//Dernier ID mis en oeuvre / Last ID implemented : 1953_10
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'PREHENS'
VERSION : 1.4
VAR_INPUT
  fct_s1 : MOT_FONC;	//Function Word Clamp 1 / Mot fonction du serrage 1
  fct_s2 : MOT_FONC;	//Function Word Clamp 2 / Mot fonction du serrage 2
  fct_s3 : MOT_FONC;	//Function Word Clamp 3 /Mot fonction du serrage 3
  fct_s4 : MOT_FONC;	//Function Word Clamp 4 /Mot fonction du serrage 4
  fct_s5 : MOT_FONC;	//Function Word Clamp 5 /Mot fonction du serrage 5
  fct_s6 : MOT_FONC;	//Function Word Clamp 6 /Mot fonction du serrage 6
  fct_s7 : MOT_FONC;	//Function Word Clamp 7 /Mot fonction du serrage 7
  fct_s8 : MOT_FONC;	//Function Word Clamp 8 /Mot fonction du serrage 8
  fct_s9 : MOT_FONC;	//Function Word Clamp 9 /Mot fonction du serrage 9
  fct_s10 : MOT_FONC;	//Function Word Clamp 10 /Mot fonction du serrage 10
  fct_s11 : MOT_FONC;	//Function Word Clamp 11 /Mot fonction du serrage 11
  fct_s12 : MOT_FONC;	//Function Word Clamp 12 /Mot fonction du serrage 12
  fct_s13 : MOT_FONC;	//Function Word Clamp 13 /Mot fonction du serrage 13
  fct_s14 : MOT_FONC;	//Function Word Clamp 14 /Mot fonction du serrage 14
  fct_s15 : MOT_FONC;	//Function Word Clamp 15 /Mot fonction du serrage 15
  fct_s16 : MOT_FONC;	//Function Word Clamp 16 /Mot fonction du serrage 16
  ManuRobot : BOOL;	//Robot in Manual Mode /Robot en Mode Manuel
  Iw_rbe3 : WORD;	//Movement request from 3rd robot output W/Dem mvts du 3eme mot sortie du robot
END_VAR
VAR_OUTPUT
  Num_Seq : WORD;	//Sequence number / Numero de la sequence (Seq1 -> Mvt1 ou Mvt2, ...)
  Bamv : BOOL;	//Sequence Mouvement Advance / Avance Mvt de la sequence
  Brmv : BOOL;	//Sequence Mouvement Return / Recul Mvt de la sequence
END_VAR
VAR_IN_OUT
  Qw_rbs4 : WORD;	//8 bit coding of sequences to robot / Codage sur 8 bits des sequences vers robot
END_VAR
VAR
  Index : WORD;	//Index / Compris entre 0 et 7 pour N° de groupe compris entre 1 et 8
  TONIncIndex : TON;	//Index incrementation timer / tempo incrementation index
  IncIndex : BOOL;	//Index incrementation
END_VAR
VAR_TEMP
  SavAR1 : DWORD;	//address 1 register save /Sauvegarde du registre d'adresse 1
  Seq : STRUCT	//sequence
    GS1 : BOOL;	//Bool 0 of Group Number / Bit 0 du Numeo de Groupe
    GS2 : BOOL;	//Bool 1 of Group Number /  Bit 1 du Numeo de Groupe
    GS3 : BOOL;	//Bool 2 of Group Number / Bit 2 du Numeo de Groupe
    GS4 : BOOL;	//Bool 3 of Groupe Number / Bit 3 du Numeo de Groupe
    E1S_RE : BOOL;	//Group Number: return information / Info REcul fnct(N°Grp)
    E1S_AV : BOOL;	//Group Number: advance information / Info AVance fnct(N°Grp)
    E2S_RE : BOOL;	//Group Number: return information / Info REcul fnct(N°Grp)
    E2S_AV : BOOL;	//Group Number: advance information / Info AVance fnct(N°Grp)
  END_STRUCT ;
  Num_Mvt : WORD;	//Mouvement number / Numero du Mouvement
  MvtSel : BOOL;	//Mouvement selected / Mouvement selectionne
  MvtAv : BOOL;	//Past Mouvement / Mouvement Avant
END_VAR
BEGIN
NETWORK
TITLE =Temporisation pour incrementation de l'index
//Timer for index incrementation
//*ODIL_ID:1953_1*
//
UN #IncIndex;
= L 9.0;
BLD 103;
CALL #TONIncIndex (
IN := L 9.0,
PT := T#100MS,
Q := #IncIndex);
NOP 0;
NETWORK
TITLE =Incrementation de l'index
//Index incrementation
//*ODIL_ID:1953_2*
//
U #IncIndex;
SPBNB _001;
L #Index;
L 1;
+I;
T #Index;
_001: NOP 0;
NETWORK
TITLE =Sauvegarde du registre AR1
//AR1 registry save
//*ODIL_ID:1953_3*
//
TAR1 #SavAR1;
NETWORK
TITLE =Copie du Numero de Groupe
//Copy of Group Number
//*ODIL_ID:1953_4*
//
L #Index;
UW W#16#7; //Limitation de Index (Compris du fait du masque entre 0 et 7)_ Index limit
T #Index;
+ 1; //N° de groupe = Index + 1 _ Group Number = Index+1
LAR1 P##Seq;
T LB [AR1,P#0.0]; //Copie du Num de Groupe dans la structure seq _ Copy of Group Number to SEQ structure
NETWORK
TITLE =Copie des Infos AVance REcul
//Indexation de la table formee par l'ensemble des mots d'entree
//pour recopie des bits IA et IR dans la structure Seq
//
//Copy of ADvance REturn informations
//Table Input word indexing to copy the IA and IR bool in Seq structure
//*ODIL_ID:1953_5*
//
LAR1 AR2; //Multi Instance
L P##fct_s1;
+AR1;
L #Index;
SLW 5; //Multiply by 4 and make bit Ptr
+AR1;
U DIX [AR1,P#0.4]; //Info Recul _ Return Information
= #Seq.E1S_RE;
U DIX [AR1,P#1.4]; //Info Avance _ Advance Information
= #Seq.E1S_AV;
U DIX [AR1,P#2.4]; //Info Recul _ Return Information
= #Seq.E2S_RE;
U DIX [AR1,P#3.4]; //Info Avance _ Advance Information
= #Seq.E2S_AV;
NETWORK
TITLE =Mise a jour du Mot de sortie du Robot
//Recopie de la Structure Seq dans l'octet de Poids Fort du mot de sortie du
//robot
//
//Robot word output update
//Copy of Seq Structure to the most significant bit of the robot word output
//*ODIL_ID:1953_6*
//
L #Qw_rbs4;
UW W#16#FF; //effacement octet poids fort _ Most significant bit reset
LAR1 P##Seq;
L LB [AR1,P#0.0]; //Chargement de la structure Seq _ Call of SEQ structure
TAW; //Permutation PF pf _ Most/Less significant bit swapping
OW;
T #Qw_rbs4;
NETWORK
TITLE =Restitution du registre AR1
//AR1 restore
//*ODIL_ID:1953_7*
//
LAR1 #SavAR1;
NETWORK
TITLE =Demande de mouvement (3 eme mot d'entree)
//Extraction du code de commande manuelle (6 bits -> 0 a 63)
//0 -> Pas de Mouvement
//1, 3, 5 ... Recul
//2, 4, 6 ... Avance
//
//Mouvement request ( 3rd word of input)
//Manual control code extraction ( 6 bools -> 0 to 63)
//0 -> No mouvement
//1, 3, 5 ... Return
//2, 4, 6 ... Advance
//*ODIL_ID:1953_8*
//
L #Iw_rbe3;
UW W#16#FC; //Masque des 6 bits DRM _ 6 bools DRM mask
UN ==0;
= #MvtSel; //Numero de Mouvement non nul _ Mouvement number not nul
SRW 2;
PUSH; //Numero de Mouvement _ Mouvement number
UW W#16#1;
U ==0;
= #MvtAv;
NETWORK
TITLE =Conversion du Numero de Mouvement en Numero de sequence
//Seq 1 : Mvt 1 ou Mvt 2
//Seq 2 : Mvt 3 ou Mvt 4
//...
//
//Conversion of mouvement number to sequence number
//Sequence 1 : Mouvement 1 or 2
//Sequence 2 : Mouvement 3 or 4
//*ODIL_ID:1953_9*
//
POP; //Numero de Mouvement _ Mouvement number
+ 1;
SRW 1;
T #Num_Seq; //Num_Seq := (Num_Mvt + 1) / 2
NETWORK
TITLE =Avance / Recul
//Si le Robot est en mode MANU
//
//Advance/ Return
//If the robot is in manual Mode
//*ODIL_ID:1953_10*
//
U #MvtSel;
U #ManuRobot;
= L 9.0;
U L 9.0;
U #MvtAv;
= #Bamv;
U L 9.0;
UN #MvtAv;
= #Brmv;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_RB_SERVICE"
TITLE =BF_RB_SERVICE
//********************************************************************************
//*                            BF "RB_SERVICE"                                   *
//*       ASSURE LA GESTION PAR GROUPE DE RODAGE OU CHANGEMENT D'ELECTRODES      *
//*             MANAGE TIP DRESSING OR TIP REPLACEMENT BY GROUP                  *
//********************************************************************************
//(IN English futher below)
//
//DESCRIPTION:
//************
//Ce FB permet de gérer le rodage ou le changement d'electrodes par l'automate
//en définissant au maximum 4 groupes auxquels chaque robot de l'ilot appartient.
//POUR LA DESCRIPTION DETAILLEE DU FB : VOIR GUIDE GE03.FP.242
//
//MISE EN OEUVRE :
//****************
//- Rd_che : paramétre de choix du mode rodage ou changement électrodes :
//           Rd_che = 1 = RODAGE
//           Rd_che = 0 = CHANGEMENT ELECTRODES
//- Num_rb : affecter à chaque robot de la zone un numéro compris entre 1 et 16
//- Gestion des groupes :
//   - GR1 : Liste des robots du Groupe 1 (Tableau de 16 bits)
//   - GR2 : Liste des robots du Groupe 2 (Tableau de 16 bits)
//   - GR3 : Liste des robots du Groupe 3 (Tableau de 16 bits)
//   - GR4 : Liste des robots du Groupe 4 (Tableau de 16 bits)
//  Pour assurer les liens avec les écrans IHMP les variable de groupe sont à
//  déclarer en fonction du mode retenu:
//   - Pour un rodage :
//    Declarer un Structure (ROD) sous ZxG ( x = Numero de la zone) contenant 4
//
//    variables de type Array of 16 bools.
//    ZxG.ROD.GR<Num du groupe>
//   - Pour un Changement d'électrode :
//    Declarer un Structure (CHELA) sous ZxG ( x = Numero de la zone) contenant 4
//
//    variables de type Array of 16 bools.
//    ZxG.CHELA.GR<Num du groupe>
//- Mdsv et Mfsv : Information à échanger entre les BF_RB_service et a déclarer
//                 sous ZxG
//- Lien avec les écrans IHMP :
//  Pour lus de détail voir documentation du bloc.
//  Les liens avec les écrans sont assurés :
//   par des structures déclarées sous ZxG ( CHELM )
//   ou
//   Par des variables STAT mise en oeuvre au niveau du FB du sous enssemble Robot
//
//CODE DE DEFAULT :
//*****************
//Non Utilisé
//
//***************************** ENGLISH INFORMATION ******************************
//
//DESCRIPTION:
//************
// This FB manage the Tip dressing or the tip replacement by PLC by
//defining at most 4 groups of robots.
//FOR THE DETAILED DESCRIPTION OF the FB: SEE GE03. FP.242
//
//OPERATING :
//***********
//- Rd_che: choice of Mode parameter Tip dressing or tip replacement :
//           Rd_che = 1 = TIP DRESSING
//           RD_che = 0 = TIP REPLACEMENT
//- Num_rb: allocate to each robot of the zone a identifier between 1 and
//16
//- Group Management :
//   - GR1: Robots list in the Group 1 (Array of 16 bools)
//   - GR2: Robots list in the Group 2 (Array of 16 bools)
//   - GR3: Robots list in the Group 3 (Array of 16 bools)
//   - GR4: Robots list in the Group 4 (Array of 16 bools)
//To ensure the links with IHMP screens, groups are to declare according to the
//mode chosen :
//   - For a Tip dressing:
//     Create one Structure (ROD) in ZxG (x = zone number) containing 4
//     variables of Array of 16 bools type.
//     ZxG.ROD.GR < Num of the group >
//  - For a tip replacement:
//     Create one Structure (CHELA) in ZxG (x = zone number) containing 4
//     variables of Array of 16 bools type .
//    ZxG.CHELA.GR < Num of the group >
//- Mdsv and Mfsv: Information to be exchanged between the BF_RB_service and
//  to be created in ZxG
//
//- Link with IHMP screens:
// for more details, see the documentation of the block.
//  The links with screens are ensured:
//   By structure created under ZxG ( CHELM)
//   or
//   By STAT variables implemented at the level of the FB on Robot Sub assembly
//
//FAULT CODE :
//**********
// Not used
//
//****************************ODIL_ID****************************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 17
//Dernier ID mis en oeuvre / Last ID implemented : 1997_18
//            (Ajout reseau0 surV2-2 / Neetwork0 added in V2-2)
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : sans objet / NO  (V2-2 : decalage de tous les reseaux/ V2-2 all
//neetwork moving of one )
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'RB_SERVI'
VERSION : 2.2
VAR_INPUT
  Iw_rbe6 : WORD;	//6th robot output word (W6 In PLC)/6ème mot de sortie robot(Entrée API mot6)
  Rd_che : BOOL;	//Parameter: 1= Tip dressing/0=tip replacement / param: rodage=1/chang. élec.=0
  Num_rb : INT;	//Robot number in zone / Numéro Robot dans la Zone
  GR1 : ARRAY  [0 .. 15 ] OF //Table of robots in group 1 / Table d'appartenance des robots au groupe 1
BOOL;
  GR2 : ARRAY  [0 .. 15 ] OF //Table of robots in group 2 / Table d'appartenance des robots au groupe 2
BOOL;
  GR3 : ARRAY  [0 .. 15 ] OF //Table of robots in Group 3 / Table d'appartenance des robots au groupe 3
BOOL;
  GR4 : ARRAY  [0 .. 15 ] OF //Table of robots in group 4 / Table d'appartenance des robots au groupe 4
BOOL;
END_VAR
VAR_OUTPUT
  Dtsr : BOOL;	//Robot service trajectory request / Demande de Trajectoire Service Robot
  Alarm : BOOL;	//Service request Alarm / Alarme Demande de Service
END_VAR
VAR_IN_OUT
  Mdsv : WORD;	//Service trajectory request word / Mot Demande de Trajectoire de Service
  Mfsv : WORD;	//End of Service trajectory word / Mot Fin Trajectoire de Service
  Nbrs : WORD;	//Service trajectory done Number / Nombre de trajectoire de service effectué
END_VAR
VAR
  Mds : BOOL;	//Service request memory / Mémoire Demande Service
  Mfs : BOOL;	//End of service Memory / Mémoire Fin Service
  xF : BOOL;	//End of service Rising edge auxiliary  / Auxiliaire de front de fin de service
END_VAR
VAR_TEMP
  Isvrd : BOOL;	//Tip dressing / Rodage
  Isvche : BOOL;	//Tip replacement / Changement d'électrode
  Iar : BOOL;	//Tip dressing Alarm / Info Alarme Rodage
  Idr : BOOL;	//Tip dressing request Info / Info Demande de Rodage
  Ifr : BOOL;	//Tip dressing end / Info Fin de Rodage
  Iache : BOOL;	//Tip replacement alarm / Info Alarme Changement Electrodes
  Idche : BOOL;	//Tip replacement request / Info Demande de Changement Electrodes
  Ifche : BOOL;	//Tip replacement end / Info Fin Changement Electrodes
  Numok : BOOL;	//Robot Number Ok / Numéro de robot correct
  Rbpg1 : BOOL;	//Robot belong to group 1 / Le robot appartient au Groupe 1
  Rbpg2 : BOOL;	//Robot belong to group 2 / Le robot appartient au Groupe 2
  Rbpg3 : BOOL;	//Robot belong to group 3 /Le robot appartient au Groupe 3
  Rbpg4 : BOOL;	//Robot belong to group 4 /Le robot appartient au Groupe 4
  Dsg1 : BOOL;	//Service request Group 1 / Demande de Service Groupe 1
  Dsg2 : BOOL;	//Service request Group 2 / Demande de Service Groupe 2
  Dsg3 : BOOL;	//Service request Group 3 / Demande de Service Groupe 3
  Dsg4 : BOOL;	//Service request Group 4 / Demande de Service Groupe 4
  DsRb : BOOL;	//Service request / Demande de Service
  Fsg1 : BOOL;	//All robot End of service group 1/ Fin de Service de tous les Robots du Groupe 1
  Fsg2 : BOOL;	//All robot End of service group 2/ Fin de Service de tous les Robots du Groupe 2
  Fsg3 : BOOL;	//All robot End of service group 3/ Fin de Service de tous les Robots du Groupe 3
  Fsg4 : BOOL;	//All robot End of service group 4/ Fin de Service de tous les Robots du Groupe 4
  GRp1 : WORD;	//GR1 Image / Image de GR1
  GRp2 : WORD;	//GR2 Image / Image de GR2
  GRp3 : WORD;	//GR3 Image / Image de GR3
  GRp4 : WORD;	//GR4 Image / Image de GR4
  MaskRb : WORD;	//Robot Number Mask / Masque du nr robot(0000 0000 0001 pour Robot 1)
  NotMaskRb : WORD;	//MaskRb supplement To1/Complément à 1 MaskRb(1111 1111 1111 1110 pour robot1)
  SaveAR2 : DWORD;	//Sauvegarde de l'AR2 / Save AR2
END_VAR
BEGIN
NETWORK
TITLE =Sauvegarde de AR2
//*ODIL_ID:1997_18*
//
TAR2 #SaveAR2;
NETWORK
TITLE =PARAMETRAGE "RODAGE" SELECTIONNE
//"TIP DRESSING" SELECTED
//*ODIL_ID:1997_1*
//
U #Rd_che;
= #Isvrd;
NETWORK
TITLE =PARAMETRAGE "CHANGEMENT ELECTRODES" SELECTIONNE
//"TIP REPLACEMENT" SELECTED
//*ODIL_ID:1997_2*
//
UN #Rd_che;
= #Isvche;
NETWORK
TITLE =CREATION DES INFOS DE SERVICE A PARTIR DU MOT ROBOT 6
//Décodage des informations issues du robot
//
//SERVICE INFORMATION CREATED BY ROBOT WORD 6
//Decoding of data coming from robot
//*ODIL_ID:1997_3*
//
L #Iw_rbe6;
TAW; //Permutation PF pf _ Swapping
UW W#16#7;
L B#16#1;
==D;
= #Iar; //Alarme de rodage _ Tip dressing alarm
POP;
L B#16#2;
==D;
= #Idr; //Demande de rodage _ Tip dressing request
POP;
L B#16#3;
==D;
= #Ifr; //Fin de rodage _ End of Tip dressing
POP;
L B#16#4;
==D;
= #Iache; //Alarme de changement d'électrode _ Electro changing alarm
POP;
L B#16#5;
==D;
= #Idche; //Demande de changement d'électrode _ Electro changing request
POP;
L B#16#6;
==D;
= #Ifche; //Fin de changement d'éléctrode _End of Electro changing
NETWORK
TITLE =Contrôle du Numéro du Robot
//Robot number checking
//*ODIL_ID:1997_4*
//
U(;
L #Num_rb;
L 1;
>=D;
);
U(;
L #Num_rb;
L 16;
<=D;
);
= #Numok;
NETWORK
TITLE =Création du masque correspondant au numéro du robot
//Robot 1 -> 0000 0000 0000 0001
//Robot 2 -> 0000 0000 0000 0010
//Etc...
//Si le numéro de robot est incorrect, le masque est mis à zéro...
//
//Robot Number mask
//Robot 1 -> 0000 0000 0000 0001
//Robot 2 -> 0000 0000 0000 0010
//...
//If the robot number is not correct, mask is resetting
//*ODIL_ID:1997_5*
//
L B#16#0;
U #Numok;
SPBN TR;
L #Num_rb;
+ -1;
L B#16#1;
SLW;
TR: T #MaskRb;
INVI;
T #NotMaskRb;
NETWORK
TITLE =Recherche du groupe auquel appartient le robot
//Robot group search
//*ODIL_ID:1997_6*
//GRP1
//
L #MaskRb;
L DIW [AR2,P#6.0]; //L GR1
TAW; //Permutation PF pf _ Swapping
T #GRp1;
UW;
U <>0;
= #Rbpg1;
//GRP2
POP; //L MaskRb
L DIW [AR2,P#8.0]; //L GR1
TAW; //Permutation PF pf _ Swapping
T #GRp2;
UW;
U <>0;
= #Rbpg2;
//GRP3
POP; //L MaskRb
L DIW [AR2,P#10.0]; //L GR1
TAW; //Permutation PF pf _ Swapping
T #GRp3;
UW;
U <>0;
= #Rbpg3;
//GRP4
POP; //L MaskRb
L DIW [AR2,P#12.0]; //L GR1
TAW; //Permutation PF pf _ Swapping
T #GRp4;
UW;
U <>0;
= #Rbpg4;
NETWORK
TITLE =RECOPIE DEMANDE DE SERVICE ROBOT DANS MOT DEMANDE DE SERVICE
//COPY of ROBOT SERVICE REQUEST TO ROBOT SERVICE WORD
//*ODIL_ID:1997_7*
//
U(;
U #Isvrd;
U #Idr;
O;
U #Isvche;
U #Idche;
);
SPBNB _001;
L #MaskRb;
L #Mdsv;
OW;
T #Mdsv;
_001: NOP 0;
NETWORK
TITLE =MISE A ZERO INFO DEMANDE DE SERVICE ROBOT DANS MOT DEMANDE DE S
//ROBOT SERVICE WORD RESET
//*ODIL_ID:1997_8*
//
U(;
U #Isvrd;
UN #Idr;
O;
U #Isvche;
UN #Idche;
);
SPBNB _002;
L #NotMaskRb;
L #Mdsv;
UW;
T #Mdsv;
_002: NOP 0;
NETWORK
TITLE =DEMANDE DE CYCLE DE SERVICE D'UN ROBOT
//REQUEST OF ROBOT SERVICE CYCLE
//*ODIL_ID:1997_9*
//---------- Groupe 1
//
L #Mdsv; //Demandes de service _ Service request
L #GRp1;
UW;
U <>0;
= #Dsg1; //Demandes de service Groupe 1 _ Group 1 Service Request
//---------- Groupe 2
POP; //L #Mdsv
L #GRp2;
UW;
U <>0;
= #Dsg2; //Demandes de service Groupe 2 _ Group 2 Service Request
//---------- Groupe 3
POP; //L #Mdsv
L #GRp3;
UW;
U <>0;
= #Dsg3; //Demandes de service Groupe 3 _ Group 3 Service Request
//---------- Groupe 4
POP; //L #Mdsv
L #GRp4;
UW;
U <>0;
= #Dsg4; //Demandes de service Groupe 4 _ Group 4 Service Request
NETWORK
TITLE =CYCLE DE SERVICE EXECUTE DE TOUS LES ROBOTS DES GROUPES
//ALL ROBOT SERVICE CYCLE EXECUTED
//*ODIL_ID:1997_10*
//---------- Groupe 1
//
L #Mfsv;
L #GRp1;
UW;
==D;
= #Fsg1; //Fin de service Groupe 1 _End of Service group 1
//---------- Groupe 2
POP; //L #Mfsv
L #GRp2;
UW;
==D;
= #Fsg2; //Fin de service Groupe 2 _End of Service group 2
//---------- Groupe 3
POP; //L #Mfsv
L #GRp3;
UW;
==D;
= #Fsg3; //Fin de service Groupe 3 _End of Service group 3
//---------- Groupe 4
POP; //L #Mfsv
L #GRp4;
UW;
==D;
= #Fsg4; //Fin de service Groupe 4 _End of Service group 4
NETWORK
TITLE =MEMOIRE DEMANDE DE CYCLE DE SERVICE DU ROBOT
//ROBOT SERVICE CYCLE REQUEST MEMORY
//*ODIL_ID:1997_11*
//
U #Dsg1;
U #Rbpg1;
O;
U #Dsg2;
U #Rbpg2;
O;
U #Dsg3;
U #Rbpg3;
O;
U #Dsg4;
U #Rbpg4;
= #DsRb;
NETWORK
TITLE =MEMOIRE DEMANDE DE CYCLE DE SERVICE DU ROBOT
//ROBOT SERVICE CYCLE REQUEST MEMORY
//*ODIL_ID:1997_12*
//
U #DsRb;
UN #Mfs;
U(;
O #Isvche;
O;
U #Isvrd;
UN #Iache;
);
S #Mds;
U #Mfs;
R #Mds;
U #Mds;
= #Dtsr;
NETWORK
TITLE =MISE A ZERO INFO FIN SERVICE ROBOT DANS MOT FIN SERVICE
//END SERVICE WORD RESET
//*ODIL_ID:1997_13*
//
UN #Mfs;
SPBNB _003;
L #NotMaskRb;
L #Mfsv;
UW;
T #Mfsv;
_003: NOP 0;
NETWORK
TITLE =MEMOIRE FIN CYCLE DE SERVICE DU ROBOT
//ROBOT END SERVICE MEMORY
//*ODIL_ID:1997_14*
//
U(;
U(;
U #Isvrd;
U #Ifr;
O;
U #Isvche;
U #Ifche;
);
U #Mds;
O;
U #Isvrd;
U #Iache;
U #DsRb;
);
S #Mfs;
U(;
U #Isvrd;
UN #Idr;
O;
U #Isvche;
UN #Idche;
);
U(;
UN #Dsg1;
U #Rbpg1;
U #Fsg1;
O;
UN #Dsg2;
U #Rbpg2;
U #Fsg2;
O;
UN #Dsg3;
U #Rbpg3;
U #Fsg3;
O;
UN #Dsg4;
U #Rbpg4;
U #Fsg4;
);
UN #Mds;
R #Mfs;
NOP 0;
NETWORK
TITLE =RECOPIE FIN SERVICE ROBOT DANS MOT FIN SERVICE
//COPY ROBOT END SERVICE TO END SERVICE WORD
//*ODIL_ID:1997_15*
//
U #Mfs;
SPBNB _004;
L #MaskRb;
L #Mfsv;
OW;
T #Mfsv;
_004: NOP 0;
NETWORK
TITLE =COMPTEUR NOMBRE DE CYCLE DE SERVICE EFFECTUE
//SERVICE CYCLE COUNTER
//*ODIL_ID:1997_16*
//
U(;
U #Isvrd;
U #Ifr;
O;
U #Isvche;
U #Ifche;
);
FP #xF;
SPBNB _005;
L #Nbrs;
L 1;
+I;
T #Nbrs;
_005: NOP 0;
NETWORK
TITLE =ALARME DEMANDE DE CYCLE DE SERVICE
//SERVICE CYCLE ALARM
//*ODIL_ID:1997_17*
//
U #Isvrd;
U #Iar;
O;
U #Isvche;
U #Iache;
= #Alarm;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_RB_NISSAN"
TITLE =FANUC NISSAN ROBOT FB / BF ROBOT FANUC NISSAN
//**************************************************************************
//*                            BF RB_NISSAN                                *
//**************************************************************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 69
//Dernier ID mis en oeuvre / Last ID implemented : 1650_69
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'RB_NISSA'
VERSION : 1.0
VAR_INPUT
  Z_es : BOOL;	//Zone power On / Zone en service
  Z_fz : BOOL;	//Closed zone /Zone fermee
  Lien_pup : LIEN_PUP;	//Panels link information / mot des indicateurs LIEN du  PUPitre
  S_cod_mx : INT;	//Monitoring: Robot's max.cycle code / Suivi:Code Cycle maxi(pour mesure du Tps)
  AuxSendCodeCycle : BOOL;	//Auxiliaire d'envoie du code cycle
  CodeCycle : BYTE;	//Code Cycle
  AutHold : BOOL;	//Autorisation d'evolution Hold
  Dever : BOOL;	//Dry run Mode (debugging mode) / Mode deverminage
  IO_RB_BYTES : INT;	//Entrees/Sorties Robot (en BYTES)
END_VAR
VAR_OUTPUT
  Auto : BOOL;	//Robot in automatic mode / Mode auto du robot
  Manu : BOOL;	//Robot in manual mode / Mode manu du robot
  HomePosition : BOOL;	//Home Position Robot
  RobReady : BOOL;	//Robot Ready
  ProgMatching : BOOL;	//Programme Matching
  AuxStart : BOOL;	//Variable auxiliaire du demarrage cycle robot
  S_fault_program : BOOL;	//Programme non opérationnel
  S_internal_fault : BOOL;	//Défaut interne baie
  Fault_robot : BOOL;	//Défaut général robot robot
  Word_TipDress_Chelman : WORD;	//Mot pour FB groupe rodage/chgt electrode en entree
  S_state : WORD;	//Suivi : Etat du robot
  Diag : STRUCT	//Structure diagnostic pour IHMP (attention presence appels indexes)
    Def : BOOL;	//Defaut IHMP
    Ala : BOOL;	//Alarme IHMP
    Numliste : INT;	//Numero liste IHMP
    Codedef : INT;	//Code defaut IHMP
    IhmDrod : BOOL;	//Demande de rodage
    IhmFrod : BOOL;	//Fin de rodage
    IhmDche : BOOL;	//Demande de changement d'electrodes
    IhmFche : BOOL;	//Fin de changement d'electrodes
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  STATE_1 : STRUCT
    X0 : BOOL;
    X1 : BOOL;
    X2 : BOOL;
    X3 : BOOL;
    X4 : BOOL;
    X5 : BOOL;
    X6 : BOOL;
    X7 : BOOL;
    X8 : BOOL;
    X9 : BOOL;
    X10 : BOOL;
    X11 : BOOL;
    X12 : BOOL;
    X13 : BOOL;
    X14 : BOOL;
    X15 : BOOL;
    X16 : BOOL;
    X17 : BOOL;
    X18 : BOOL;
    X19 : BOOL;
    X20 : BOOL;
    X21 : BOOL;
    X22 : BOOL;
    X23 : BOOL;
    X24 : BOOL;
    X25 : BOOL;
    X26 : BOOL;
    X27 : BOOL;
    X28 : BOOL;
    X29 : BOOL;
    X30 : BOOL;
    X31 : BOOL;
  END_STRUCT ;
END_VAR
VAR
  rbs1 : STRUCT	//Byte de sortie 1 du robot (LB46)
    CMDENBL : BOOL;	//Command Enable(UO1)
    SYSRDY : BOOL;	//System Ready (UO2)
    PROGRUN : BOOL;	//Program Run(UO3)
    PAUSED : BOOL;	//Paused(UO4)
    HOLD : BOOL;	//Hold(UO5)
    FAULT : BOOL;	//Fault Robot (UO6)
    ATPERCH : BOOL;	//Home Position(UO7)
    TPENBL : BOOL;	//TP Enable(UO8)
  END_STRUCT ;
  rbs2 : STRUCT	//Byte de sortie 2 du robot (LB48)
    BATALM : BOOL;	//(UO9)
    BUSY : BOOL;	//(UO10)
    ACK1 : BOOL;	//(UO11)
    ACK2 : BOOL;	//(UO12)
    ACK3 : BOOL;	//(UO13)
    ACK4 : BOOL;	//(UO14)
    ACK5 : BOOL;	//(UO15)
    ACK6 : BOOL;	//(UO16)
  END_STRUCT ;
  rbs3 : STRUCT	//Byte de sortie 3 du robot (LB50)
    ACK7 : BOOL;	//(UO17)
    ACK8 : BOOL;	//(UO18)
    SNACK : BOOL;	//(UO19)
    X3 : BOOL;	//(UO20)
    X4 : BOOL;	//(UO21)
    X5 : BOOL;	//(UO22)
    X6 : BOOL;	//(UO23)
    X7 : BOOL;	//(UO24)
  END_STRUCT ;
  rbs4 : STRUCT	//Byte de sortie 4 du robot (LB52)
    X0 : BOOL;	//(DO1)
    X1 : BOOL;	//(DO2)
    X2 : BOOL;	//(DO3)
    X3 : BOOL;	//(DO4)
    X4 : BOOL;	//(DO5)
    X5 : BOOL;	//DO6
    X6 : BOOL;	//DO7
    X7 : BOOL;	//DO8
  END_STRUCT ;
  rbs5 : STRUCT	//Byte de sortie 5 du robot (LB54)
    X8 : BOOL;	//(DO9)
    X9 : BOOL;	//(DO10)
    X10 : BOOL;	//(DO11)
    X11 : BOOL;	//(DO12)
    X12 : BOOL;	//(DO13)
    X13 : BOOL;	//(DO14)
    X14 : BOOL;	//(D015)
    X15 : BOOL;	//(D016)
  END_STRUCT ;
  rbs6 : STRUCT	//Byte de sortie 6 du robot (LB56)
    X16 : BOOL;	//DO17
    X17 : BOOL;	//DO18
    X18 : BOOL;	//DO19
    X19 : BOOL;	//DO20
    X20 : BOOL;	//DO21
    X21 : BOOL;	//DO22
    X22 : BOOL;	//D023
    X23 : BOOL;	//D024
  END_STRUCT ;
  rbs7 : STRUCT	//Byte de sortie 7 du robot (LB58)
    X24 : BOOL;	//Tip Dress Start(DO25)
    X25 : BOOL;	//Tip Dress Cycle Complete (DO26)
    X26 : BOOL;	//(DO27)
    X27 : BOOL;	//(DO28)
    X28 : BOOL;	//(DO29)
    X29 : BOOL;	//End of Tip Change (DO30)
    X30 : BOOL;	//(D031)
    X31 : BOOL;	//(D032)
  END_STRUCT ;
  rbs8 : STRUCT	//Byte de sortie 8 du robot (LB60)
    X0 : BOOL;	//(DO33)
    X1 : BOOL;	//(DO34)
    X2 : BOOL;	//(DO35)
    X3 : BOOL;	//(DO36)
    X4 : BOOL;	//(DO37)
    X5 : BOOL;	//(DO38)
    X6 : BOOL;	//(DO39)
    X7 : BOOL;	//(DO40)
  END_STRUCT ;
  rbs9 : STRUCT	//Byte de sortie 9 du robot (LB62)
    X8 : BOOL;	//DO41
    X9 : BOOL;	//D042
    X10 : BOOL;	//D043
    X11 : BOOL;	//D044
    X12 : BOOL;	//D045
    X13 : BOOL;	//DO46
    X14 : BOOL;	//D047
    X15 : BOOL;	//DO48
  END_STRUCT ;
  rbs10 : STRUCT	//Byte de sortie 10 du robot (LB64)
    X16 : BOOL;	//D049
    X17 : BOOL;	//D050
    X18 : BOOL;	//D051
    X19 : BOOL;	//D052
    X20 : BOOL;	//D053
    X21 : BOOL;	//D054
    X22 : BOOL;	//D055
    X23 : BOOL;	//D056
  END_STRUCT ;
  rbs11 : STRUCT	//Byte de sortie 11 du robot (LB66)
    X24 : BOOL;	//D057
    X25 : BOOL;	//D058
    X26 : BOOL;	//D059
    X27 : BOOL;	//D060
    X28 : BOOL;	//D061
    X29 : BOOL;	//D062
    X30 : BOOL;	//D063
    X31 : BOOL;	//D064
  END_STRUCT ;
  rbs12 : STRUCT	//Byte de sortie 12 du robot (LB68)
    X0 : BOOL;	//D065
    X1 : BOOL;	//D066
    X2 : BOOL;	//D067
    X3 : BOOL;	//D068
    ATIPDR : BOOL;	//Auto Tip Dress (DO69)
    X5 : BOOL;	//(DO70)
    ATIPCH : BOOL;	//Auto Tip Change (DO71)
    TIPEOF : BOOL;	//Tip End of Life Warning (DO72)
  END_STRUCT ;
  rbs13 : STRUCT	//Byte de sortie 13 du robot (LB70)
    X8 : BOOL;	//(DO73)
    X9 : BOOL;	//(DO74)
    X10 : BOOL;	//(DO75)
    X11 : BOOL;	//(DO76)
    X12 : BOOL;	//(DO77)
    X13 : BOOL;	//(DO78)
    X14 : BOOL;	//(DO79)
    X15 : BOOL;	//(DO80)
  END_STRUCT ;
  rbs14 : STRUCT	//Byte de sortie 14 du robot (LB72)
    X16 : BOOL;	//(DO81)
    X17 : BOOL;	//(DO82)
    X18 : BOOL;	//(DO83)
    X19 : BOOL;	//(DO84)
    X20 : BOOL;	//(DO85)
    X21 : BOOL;	//(DO86)
    X22 : BOOL;	//(DO87)
    X23 : BOOL;	//(DO88)
  END_STRUCT ;
  rbs15 : STRUCT	//Byte de sortie 15 du robot (LB74)
    X24 : BOOL;	//(DO89)
    X25 : BOOL;	//(DO90)
    X26 : BOOL;	//(DO91)
    X27 : BOOL;	//(DO92)
    X28 : BOOL;	//(DO93)
    X29 : BOOL;	//(DO94)
    X30 : BOOL;	//(DO95)
    X31 : BOOL;	//(DO96)
  END_STRUCT ;
  rbs16 : STRUCT	//Byte de sortie 16 du robot (LB76)
    X0 : BOOL;	//Reserved for Model A interconnect - DO145
    X1 : BOOL;	//Reserved for Model A interconnect - DO146
    X2 : BOOL;	//Reserved for Model A interconnect - DO147
    X3 : BOOL;	//Reserved for Model A interconnect - DO148
    X4 : BOOL;	//Reserved for Model A interconnect - DO149
    X5 : BOOL;	//Reserved for Model A interconnect - DO150
    X6 : BOOL;	//Reserved for Model A interconnect - DO151
    X7 : BOOL;	//Reserved for Model A interconnect - DO152
  END_STRUCT ;
  rbs17 : STRUCT	//Byte de sortie 17 du robot (LB78)
    X8 : BOOL;	//Reserved for Model A interconnect - DO153
    X9 : BOOL;	//Reserved for Model A interconnect - DO154
    X10 : BOOL;	//Reserved for Model A interconnect - DO155
    X11 : BOOL;	//Reserved for Model A interconnect - DO156
    X12 : BOOL;	//Reserved for Model A interconnect - DO157
    X13 : BOOL;	//Reserved for Model A interconnect - DO158
    X14 : BOOL;	//Reserved for Model A interconnect - DO159
    X15 : BOOL;	//Reserved for Model A interconnect - DO160
  END_STRUCT ;
  rbs18 : STRUCT	//Byte de sortie 18 du robot (LB80)
    X16 : BOOL;	//Reserved for Model A interconnect - DO161
    X17 : BOOL;	//Reserved for Model A interconnect - DO162
    X18 : BOOL;	//Reserved for Model A interconnect - DO163
    X19 : BOOL;	//Reserved for Model A interconnect - DO164
    X20 : BOOL;	//Reserved for Model A interconnect - DO165
    X21 : BOOL;	//Reserved for Model A interconnect - DO166
    X22 : BOOL;	//Reserved for Model A interconnect - DO167
    X23 : BOOL;	//Reserved for Model A interconnect - DO168
  END_STRUCT ;
  rbs19 : STRUCT	//Byte de sortie 19 du robot (LB82)
    X24 : BOOL;	//Reserved for Model A interconnect - DO169
    X25 : BOOL;	//Reserved for Model A interconnect - DO170
    X26 : BOOL;	//Reserved for Model A interconnect - DO171
    X27 : BOOL;	//Reserved for Model A interconnect - DO172
    X28 : BOOL;	//Reserved for Model A interconnect - DO173
    X29 : BOOL;	//Reserved for Model A interconnect - DO174
    X30 : BOOL;	//Reserved for Model A interconnect - DO175
    X31 : BOOL;	//Reserved for Model A interconnect - DO176
  END_STRUCT ;
  rbs20 : STRUCT	//Byte de sortie 20 du robot (LB84)
    X0 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO177
    X1 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO178
    X2 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO179
    X3 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO180
    X4 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO181
    X5 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO182
    X6 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO183
    X7 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO184
  END_STRUCT ;
  rbs21 : STRUCT	//Byte de sortie 21 du robot (LB86)
    X8 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO185
    X9 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO186
    X10 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO187
    X11 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO188
    X12 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO189
    X13 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO190
    X14 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO191
    X15 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO192
  END_STRUCT ;
  rbs22 : STRUCT	//Byte de sortie 22 du robot (LB88)
    X16 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO193
    X17 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO194
    X18 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO195
    X19 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO196
    X20 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO197
    X21 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO198
    X22 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO199
    X23 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO200
  END_STRUCT ;
  rbs23 : STRUCT	//Byte de sortie 23 du robot (LB90)
    X24 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO201
    X25 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO202
    X26 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO203
    X27 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO204
    X28 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO205
    X29 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO206
    X30 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO207
    X31 : BOOL;	//Reserved for Hand Input from DNet to PLC - DO208
  END_STRUCT ;
  rbe1 : STRUCT	//Byte d entree 1 du robot (LB0)
    IMSTP : BOOL;	//Ordre de mise sous puissance (UI1)
    HOLD : BOOL;	//Autorisation d'evolution Hold (UI2)
    SFSPD : BOOL;	//Vitesse de secu en zone fermee (UI3)
    CSTOPI : BOOL;	//Signal arret execution cycle(UI4)
    REARM : BOOL;	//Raz defaut (UI5)
    RESTART : BOOL;	//Pulse de restart (UI6)
    HOME : BOOL;	//Appel de la traj de repli (UI7)
    ENABLE : BOOL;	//Bit toujours a 1 (UI8)
  END_STRUCT ;
  rbe2 : STRUCT	//Byte d entree 2 du robot (LB2)
    CODECYCLE : BYTE;	//Code cycle (UI9 a UI16)
  END_STRUCT ;
  rbe3 : STRUCT	//Byte d entree 3 du robot (LB4)
    PNSTROBE : BOOL;	//Validation du code cycle (UI17)
    PRODSTART : BOOL;	//Pulse de start (UI18)
    Res1 : BOOL;	//Reserve
    Res2 : BOOL;	//Reserve
    Res3 : BOOL;	//Reserve
    Res4 : BOOL;	//Reserve
    Res5 : BOOL;	//Reserve
    Res6 : BOOL;	//Reserve
  END_STRUCT ;
  rbe4 : STRUCT	//Byte d entree 4 du robot (LB6)
    X0 : BOOL;	//DI1
    X1 : BOOL;	//DI2
    X2 : BOOL;	//DI3
    X3 : BOOL;	//DI4
    X4 : BOOL;	//DI5
    X5 : BOOL;	//DI6
    X6 : BOOL;	//DI7
    X7 : BOOL;	//DI8
  END_STRUCT ;
  rbe5 : STRUCT	//Byte d entree 5 du robot (LB8)
    X8 : BOOL;	//DI9
    X9 : BOOL;	//DI10
    X10 : BOOL;	//DI11
    X11 : BOOL;	//DI12
    X12 : BOOL;	//DI13
    X13 : BOOL;	//DI14
    X14 : BOOL;	//DI15
    X15 : BOOL;	//DI16
  END_STRUCT ;
  rbe6 : STRUCT	//Byte d entree 6 du robot (LB10)
    X16 : BOOL;	//DI17
    X17 : BOOL;	//DI18
    X18 : BOOL;	//DI19
    X19 : BOOL;	//DI20
    X20 : BOOL;	//DI21
    X21 : BOOL;	//DI22
    X22 : BOOL;	//DI23
    X23 : BOOL;	//DI24
  END_STRUCT ;
  rbe7 : STRUCT	//Byte d entree 7 du robot (LB12)
    X24 : BOOL;	//DI25
    X25 : BOOL;	//DI26
    X26 : BOOL;	//DI27
    X27 : BOOL;	//DI28
    X28 : BOOL;	//DI29
    X29 : BOOL;	//DI30
    X30 : BOOL;	//DI31
    X31 : BOOL;	//DI32
  END_STRUCT ;
  rbe8 : STRUCT	//Byte d entree 8 du robot (LB14)
    X0 : BOOL;	//DI33
    X1 : BOOL;	//DI34
    X2 : BOOL;	//DI35
    X3 : BOOL;	//DI36
    X4 : BOOL;	//DI37
    X5 : BOOL;	//DI38
    X6 : BOOL;	//DI39
    X7 : BOOL;	//DI40
  END_STRUCT ;
  rbe9 : STRUCT	//Byte d entree 9 du robot (LB16)
    X8 : BOOL;	//DI41
    X9 : BOOL;	//DI42
    X10 : BOOL;	//DI43
    X11 : BOOL;	//DI44
    X12 : BOOL;	//DI45
    X13 : BOOL;	//DI46
    X14 : BOOL;	//DI47
    X15 : BOOL;	//DI48
  END_STRUCT ;
  rbe10 : STRUCT	//Byte d entree 10 du robot (LB18)
    X16 : BOOL;	//DI49
    X17 : BOOL;	//DI50
    X18 : BOOL;	//DI51
    X19 : BOOL;	//DI52
    X20 : BOOL;	//DI53
    X21 : BOOL;	//DI54
    X22 : BOOL;	//DI55
    X23 : BOOL;	//DI56
  END_STRUCT ;
  rbe11 : STRUCT	//Byte d entree 11 du robot (LB20)
    X24 : BOOL;	//DI57
    X25 : BOOL;	//DI58
    X26 : BOOL;	//DI59
    X27 : BOOL;	//DI60
    X28 : BOOL;	//DI61
    X29 : BOOL;	//DI62
    X30 : BOOL;	//DI63
    X31 : BOOL;	//DI64
  END_STRUCT ;
  rbe12 : STRUCT	//Byte d entree 12 du robot (LB22)
    DEVERM : BOOL;	//DI65 PARTS BYPASS
    X1 : BOOL;	//DI66
    X2 : BOOL;	//DI67
    X3 : BOOL;	//DI68
    X4 : BOOL;	//DI69
    X5 : BOOL;	//DI70
    X6 : BOOL;	//DI71
    X7 : BOOL;	//DI72
  END_STRUCT ;
  rbe13 : STRUCT	//Byte d entree 13 du robot (LB24)
    Over_100_1 : BOOL;	//DI73 Over 100-1
    Over_100_2 : BOOL;	//DI74 Over 100_2
    X10 : BOOL;	//DI75
    X11 : BOOL;	//DI76
    X12 : BOOL;	//DI77
    X13 : BOOL;	//DI78
    X14 : BOOL;	//DI79
    X15 : BOOL;	//DI80
  END_STRUCT ;
  rbe14 : STRUCT	//Byte d entree 14 du robot (LB26)
    X16 : BOOL;	//DI81
    X17 : BOOL;	//DI82
    X18 : BOOL;	//DI83
    X19 : BOOL;	//DI84
    X20 : BOOL;	//DI85
    X21 : BOOL;	//DI86
    X22 : BOOL;	//DI87
    X23 : BOOL;	//DI88
  END_STRUCT ;
  rbe15 : STRUCT	//Byte d entree 15 du robot (LB28)
    X24 : BOOL;	//DI89
    X25 : BOOL;	//DI90
    X26 : BOOL;	//DI91
    X27 : BOOL;	//DI92
    X28 : BOOL;	//DI93
    X29 : BOOL;	//DI94
    X30 : BOOL;	//DI95
    X31 : BOOL;	//DI96
  END_STRUCT ;
  rbe16 : STRUCT	//Byte d entree 16 du robot (LB30)
    X0 : BOOL;	//Reserved for Model A inter connect - DI145
    X1 : BOOL;	//Reserved for Model A inter connect - DI146
    X2 : BOOL;	//Reserved for Model A inter connect - DI147
    X3 : BOOL;	//Reserved for Model A inter connect - DI148
    X4 : BOOL;	//Reserved for Model A inter connect - DI149
    X5 : BOOL;	//Reserved for Model A inter connect - DI150
    X6 : BOOL;	//Reserved for Model A inter connect - DI151
    X7 : BOOL;	//Reserved for Model A inter connect - DI152
  END_STRUCT ;
  rbe17 : STRUCT	//Byte d entree 17 du robot (LB32)
    X8 : BOOL;	//Reserved for Model A inter connect - DI153
    X9 : BOOL;	//Reserved for Model A inter connect - DI154
    X10 : BOOL;	//Reserved for Model A inter connect - DI155
    X11 : BOOL;	//Reserved for Model A inter connect - DI156
    X12 : BOOL;	//Reserved for Model A inter connect - DI157
    X13 : BOOL;	//Reserved for Model A inter connect - DI158
    X14 : BOOL;	//Reserved for Model A inter connect - DI159
    X15 : BOOL;	//Reserved for Model A inter connect - DI160
  END_STRUCT ;
  rbe18 : STRUCT	//Byte d entree 18 du robot (LB34)
    X16 : BOOL;	//Reserved for Model A inter connect - DI161
    X17 : BOOL;	//Reserved for Model A inter connect - DI162
    X18 : BOOL;	//Reserved for Model A inter connect - DI163
    X19 : BOOL;	//Reserved for Model A inter connect - DI164
    X20 : BOOL;	//Reserved for Model A inter connect - DI165
    X21 : BOOL;	//Reserved for Model A inter connect - DI166
    X22 : BOOL;	//Reserved for Model A inter connect - DI167
    X23 : BOOL;	//Reserved for Model A inter connect - DI168
  END_STRUCT ;
  rbe19 : STRUCT	//Byte d entree 19 du robot (LB36)
    X24 : BOOL;	//Reserved for Model A inter connect - DI169
    X25 : BOOL;	//Reserved for Model A inter connect - DI170
    X26 : BOOL;	//Reserved for Model A inter connect - DI171
    X27 : BOOL;	//Reserved for Model A inter connect - DI172
    X28 : BOOL;	//Reserved for Model A inter connect - DI173
    X29 : BOOL;	//Reserved for Model A inter connect - DI174
    X30 : BOOL;	//Reserved for Model A inter connect - DI175
    X31 : BOOL;	//Reserved for Model A inter connect - DI176
  END_STRUCT ;
  rbe20 : STRUCT	//Byte d entree 20 du robot (LB38)
    X0 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI177
    X1 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI178
    X2 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI179
    X3 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI180
    X4 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI181
    X5 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI182
    X6 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI183
    X7 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI184
  END_STRUCT ;
  rbe21 : STRUCT	//Byte d entree 21 du robot (LB40)
    X8 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI185
    X9 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI186
    X10 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI187
    X11 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI188
    X12 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI189
    X13 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI190
    X14 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI191
    X15 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI192
  END_STRUCT ;
  rbe22 : STRUCT	//Byte d entree 22 du robot (LB42)
    X16 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI193
    X17 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI194
    X18 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI195
    X19 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI196
    X20 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI197
    X21 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI198
    X22 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI199
    X23 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI200
  END_STRUCT ;
  rbe23 : STRUCT	//Byte d entree 23 du robot (LB44)
    X24 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI201
    X25 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI202
    X26 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI203
    X27 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI204
    X28 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI205
    X29 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI206
    X30 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI207
    X31 : BOOL;	//Reserved for Hand Output from PLC to DNet - DI208
  END_STRUCT ;
  Tmp_W_Rod : STRUCT	//Temporaire pour rodage et chgt electrode
    X0 : BOOL;
    X1 : BOOL;
    X2 : BOOL;
    X3 : BOOL;
    X4 : BOOL;
    X5 : BOOL;
    X6 : BOOL;
    X7 : BOOL;
    X8 : BOOL;
    X9 : BOOL;
    X10 : BOOL;
    X11 : BOOL;
    X12 : BOOL;
    X13 : BOOL;
    X14 : BOOL;
    X15 : BOOL;
  END_STRUCT ;
  SnackMemory : BOOL;	//Memoire Acquittement code cycle
  StartMemory : BOOL;	//Memoire Demarrage Cycle
  Snack_fault : BOOL;	//Memoire de defaut snack
  Program_matchFault : BOOL;	//Défaut mémoire programme
  Internal_fault : BOOL;	//Defaut interne
  RAZDef : TIME  := T#200MS;	//Temporisation RAZ Defaut
  PulseStart : TIME  := T#500MS;	//Temporisation Pulse de Start
  PulseReStart : TIME  := T#200MS;	//Temporisation Pulse de ReStart
  Pulseprogramfault : TIME  := T#1S;	//Temporisation Programm Match Fault
  Pulsesnackfault : TIME  := T#1S;	//Temporisation SnackFault
  Pulseinternalfault : TIME  := T#1S;	//Temporisation défaut interne baie
  Trazdef : TON;
  Tstart : TON;
  Tprogrammatchfault : TON;
  Tinternalfault : TON;
  Tsnackfault : TON;
  Trestart : TON;
  TPowerON : TON;	//Temporisation mise en service
  Ba1i : BOOL;	//Bool ever at 1 / Bit toujours a 1
END_VAR
VAR_TEMP
  Code : STRUCT	//Variable pour l'eclatement du code cycle
    C1 : BOOL;
    C2 : BOOL;
    C4 : BOOL;
    C8 : BOOL;
    C16 : BOOL;
    C32 : BOOL;
    Res1 : BOOL;
    Res2 : BOOL;
  END_STRUCT ;
  TempCodeCycle : INT;	//Variable temporaire du code cycle
  ReadyForStart : BOOL;	//Robot Pret pour demarrage cycle
  AuxProgMatch : BOOL;	//Variable auxiliaire prog matching
  DdeRod1 : BOOL;	//Variable temporaire pour la demande de rodage pince 1
  FinRod1 : BOOL;	//Variable temporaire pour la fin de rodage pince 1
  AlrRod1 : BOOL;	//Variable temporaire pour l'alarme rodage pince 1
  AlrChelm1 : BOOL;	//Variable temporaire pour l'alarme chelman pince 1
  DdeChelm1 : BOOL;	//Variable temporaire pour la demande chelman pince 1
  FinChelm1 : BOOL;	//Variable temporaire pour la fin chelman pince 1
END_VAR
BEGIN
NETWORK
TITLE =Mise a un des informations utiles en interne de la FB
//*ODIL_ID:1650_1*
//
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Lecture des entrees et sorties robot
//*ODIL_ID:1650_2*
//
L #IO_RB_BYTES; //Chargement des E/S dans l Accumulateur 1
SLD 3; //Decalage
LAR1; //Chargement du Registre Accumuluteur 1
L EB [AR1,P#0.0]; //Lecture du Byte de l accumulateur 1 (avec son offset)
T DIB [AR2,P#32.0]; //Transfert dans le statique (avec son offset)
L EB [AR1,P#1.0];
T DIB [AR2,P#34.0];
L EB [AR1,P#2.0];
T DIB [AR2,P#36.0];
L EB [AR1,P#3.0];
T DIB [AR2,P#38.0];
L EB [AR1,P#4.0];
T DIB [AR2,P#40.0];
L EB [AR1,P#5.0];
T DIB [AR2,P#42.0];
L EB [AR1,P#6.0];
T DIB [AR2,P#44.0];
L EB [AR1,P#7.0];
T DIB [AR2,P#46.0];
L EB [AR1,P#8.0];
T DIB [AR2,P#48.0];
L EB [AR1,P#9.0];
T DIB [AR2,P#50.0];
L EB [AR1,P#10.0];
T DIB [AR2,P#52.0];
L EB [AR1,P#11.0];
T DIB [AR2,P#54.0];
L EB [AR1,P#12.0];
T DIB [AR2,P#56.0];
L EB [AR1,P#13.0];
T DIB [AR2,P#58.0];
L EB [AR1,P#14.0];
T DIB [AR2,P#60.0];
L EB [AR1,P#15.0];
T DIB [AR2,P#62.0];
L B#16#0;
T LW 0;
L AB [AR1,P#0.0]; //Lecture des sorties
T DIB [AR2,P#78.0]; //Copie dans le statique (avec son offset)
L AB [AR1,P#1.0];
T #rbe2.CODECYCLE;
L AB [AR1,P#2.0];
T DIB [AR2,P#82.0];
L AB [AR1,P#3.0];
T DIB [AR2,P#84.0];
L AB [AR1,P#4.0];
T DIB [AR2,P#86.0];
L AB [AR1,P#5.0];
T DIB [AR2,P#88.0];
L AB [AR1,P#6.0];
T DIB [AR2,P#90.0];
L AB [AR1,P#7.0];
T DIB [AR2,P#92.0];
L AB [AR1,P#8.0];
T DIB [AR2,P#94.0];
L AB [AR1,P#9.0];
T DIB [AR2,P#96.0];
L AB [AR1,P#10.0];
T DIB [AR2,P#98.0];
L AB [AR1,P#11.0];
T DIB [AR2,P#100.0];
L AB [AR1,P#12.0];
T DIB [AR2,P#102.0];
L AB [AR1,P#13.0];
T DIB [AR2,P#104.0];
L AB [AR1,P#14.0];
T DIB [AR2,P#106.0];
L AB [AR1,P#15.0];
T DIB [AR2,P#108.0];
NOP 0;
NETWORK
TITLE =-------------- DEFAUT GENERAL ROBOT ----------------
//*ODIL_ID:1650_3*
//

NETWORK
TITLE =SNACK FAULT
//*ODIL_ID:1650_4*
//
U #Lien_pup.Dmaitre;
U #rbe3.PNSTROBE;
UN #rbs3.SNACK;
= L 5.0;
BLD 103;
CALL #Tsnackfault (
IN := L 5.0,
PT := #Pulsesnackfault);
NOP 0;
NETWORK
TITLE =
//*ODIL_ID:1650_5*
//
O #Tsnackfault.Q;
O;
UN #Lien_pup.Z_ir;
UN #Lien_pup.Z_iadf;
U #Snack_fault;
= #Snack_fault;
NETWORK
TITLE =PROGRAM MATCHING FAULT
//*ODIL_ID:1650_6*
//
U #Lien_pup.Dmaitre;
U #rbs3.SNACK;
U #ProgMatching;
= L 5.0;
BLD 103;
CALL #Tprogrammatchfault (
IN := L 5.0,
PT := #Pulseprogramfault);
NOP 0;
NETWORK
TITLE =
//*ODIL_ID:1650_7*
//
O #Tprogrammatchfault.Q;
O;
UN #Lien_pup.Z_ir;
UN #Lien_pup.Z_iadf;
U #Program_matchFault;
= #Program_matchFault;
= #S_fault_program;
NETWORK
TITLE =Internal Fault
//*ODIL_ID:1650_8*
//
U #Lien_pup.Dmaitre;
U #Z_es;
U #rbs1.FAULT;
= L 5.0;
BLD 103;
CALL #Tinternalfault (
IN := L 5.0,
PT := #Pulseinternalfault);
NOP 0;
NETWORK
TITLE =
//*ODIL_ID:1650_9*
//
O #Tinternalfault.Q;
O;
UN #Lien_pup.Z_ir;
UN #Lien_pup.Z_iadf;
U #Internal_fault;
= #Internal_fault;
= #S_internal_fault;
NETWORK
TITLE =Defaut general robot
//*ODIL_ID:1650_10*
//
O #Snack_fault;
O #Program_matchFault;
O #Internal_fault;
= #Fault_robot;
NETWORK
TITLE =-------------- INFO GENERAL ROBOT ----------------
//*ODIL_ID:1650_11*
//

NETWORK
TITLE =Auto / manu mode from robot
//Info auto manu du robot
//*ODIL_ID:1650_12*
//
U #Ba1i;
= L 5.0;
U L 5.0;
UN #rbs1.TPENBL;
U #rbs1.CMDENBL;
= #Auto;
U L 5.0;
U #rbs1.TPENBL;
= #Manu;
NETWORK
TITLE =Home position robot
//Demande de mise sous puissance si robot en auto pret a recevoir des infos
//distantes et non en asservissement
//*ODIL_ID:1650_13*
//
UN #rbs1.PROGRUN;
UN #rbs1.PAUSED;
U #rbs1.ATPERCH;
= #HomePosition;
NETWORK
TITLE =Robot Pret
//*ODIL_ID:1650_14*
//
U(;
O #rbs1.CMDENBL;
O #rbs1.TPENBL;
);
U #rbs1.SYSRDY;
= #RobReady;
NETWORK
TITLE =-------------- COMMANDES ROBOTS ET CODES CYCLES ----------------
//*ODIL_ID:1650_15*
//

NETWORK
TITLE =Ordre de mise sous puissance
//*ODIL_ID:1650_16*
//
U #Z_es;
= L 5.0;
BLD 103;
CALL #TPowerON (
IN := L 5.0,
PT := T#1S,
Q := #rbe1.IMSTP);
NOP 0;
NETWORK
TITLE =Autorisation d'evolution Hold
//*ODIL_ID:1650_17*
//
U #AutHold;
= #rbe1.HOLD;
NETWORK
TITLE =Vitesse de secu en zone fermee
//*ODIL_ID:1650_18*
//
UN #rbs1.TPENBL;
= #rbe1.SFSPD;
NETWORK
TITLE =RAZ Defaut Robot - Tempo
//*ODIL_ID:1650_19*
//
U #Lien_pup.Z_ir;
U #rbe1.IMSTP;
U #rbs1.FAULT;
= L 5.0;
BLD 103;
CALL #Trazdef (
IN := L 5.0,
PT := #RAZDef);
NOP 0;
NETWORK
TITLE =RAZ Defaut Robot
//*ODIL_ID:1650_20*
//
U(;
O #Lien_pup.Z_ir;
O #Lien_pup.Z_iadf;
);
U #rbe1.IMSTP;
U(;
O #rbs1.FAULT;
ON #rbs1.SYSRDY;
);
UN #Trazdef.Q;
= #rbe1.REARM;
NETWORK
TITLE =Envoie du Code Cycle
//*ODIL_ID:1650_21*
//
L #CodeCycle;
T #rbe2.CODECYCLE;
NOP 0;
NETWORK
TITLE =Auxiliaire Start Cycle Robot
//*ODIL_ID:1650_22*
//
U(;
U #Lien_pup.Z_mauto;
U #RobReady;
U #rbe1.HOLD;
SPBNB _001;
L #rbe2.CODECYCLE;
T #TempCodeCycle;
SET;
SAVE;
CLR;
_001: U BIE;
);
U(;
O #AuxSendCodeCycle;
O(;
L #TempCodeCycle;
L #S_cod_mx;
>I;
);
);
U(;
L #TempCodeCycle;
L 0;
<>I;
);
= #AuxStart;
NETWORK
TITLE =Conditions Start Cycle Robot
//*ODIL_ID:1650_23*
//
U #AuxStart;
UN #StartMemory;
= #ReadyForStart;
NETWORK
TITLE =Validation du code cycle
//*ODIL_ID:1650_24*
//
U #ReadyForStart;
UN #SnackMemory;
U(;
L #TempCodeCycle;
L 0;
<>I;
);
= #rbe3.PNSTROBE;
NETWORK
TITLE =Pulse de start - Tempo
//*ODIL_ID:1650_25*
//
U #ReadyForStart;
U #SnackMemory;
UN #StartMemory;
= L 5.0;
BLD 103;
CALL #Tstart (
IN := L 5.0,
PT := #PulseStart);
NOP 0;
NETWORK
TITLE =Pulse de start
//*ODIL_ID:1650_26*
//
U #ReadyForStart;
U #SnackMemory;
UN #StartMemory;
UN #Tstart.Q;
= #rbe3.PRODSTART;
NETWORK
TITLE =Pulse de Restart - Tempo
//*ODIL_ID:1650_27*
//
U(;
O #Lien_pup.Z_ir;
O #Lien_pup.Z_iadf;
);
UN #rbs1.FAULT;
U #rbe1.HOLD;
U #RobReady;
UN #rbs1.PROGRUN;
= L 5.0;
BLD 103;
CALL #Trestart (
IN := L 5.0,
PT := #PulseReStart);
NOP 0;
NETWORK
TITLE =Pulse de Restart
//*ODIL_ID:1650_28*
//
U #Lien_pup.Z_ir;
U #Lien_pup.Z_mauto;
UN #rbs1.FAULT;
U #rbe1.HOLD;
U #RobReady;
UN #rbs1.PROGRUN;
U #rbs1.PAUSED;
UN #Trestart.Q;
= #rbe1.RESTART;
NETWORK
TITLE =Set Snack Memory
//*ODIL_ID:1650_29*
//
U #ReadyForStart;
U #rbe3.PNSTROBE;
U #rbs3.SNACK;
U #ProgMatching;
S #SnackMemory;
NETWORK
TITLE =Set Start Memory
//*ODIL_ID:1650_30*
//
U #SnackMemory;
U(;
U #rbs1.PROGRUN;
UN #rbs1.ATPERCH;
O;
U #rbs1.ATPERCH;
U #rbs1.PAUSED;
);
S #StartMemory;
NETWORK
TITLE =Reset Snack & Start Memory
//*ODIL_ID:1650_31*
//
U #HomePosition;
U #rbs1.SYSRDY;
U(;
U #rbs1.CMDENBL;
U #AuxStart;
ON #rbs1.CMDENBL;
);
U #SnackMemory;
U #StartMemory;
R #SnackMemory;
R #StartMemory;
NETWORK
TITLE =Transfert code cycle
//*ODIL_ID:1650_32*
//
L #rbe2.CODECYCLE;
LAR1 P##Code;
T LB [AR1,P#0.0];
NETWORK
TITLE =Program Matching
//*ODIL_ID:1650_33*
//
U(;
U #Code.C1;
U #rbs2.ACK1;
O;
UN #Code.C1;
UN #rbs2.ACK1;
);
U(;
U #Code.C2;
U #rbs2.ACK2;
O;
UN #Code.C2;
UN #rbs2.ACK2;
);
U(;
U #Code.C4;
U #rbs2.ACK3;
O;
UN #Code.C4;
UN #rbs2.ACK3;
);
U(;
U #Code.C8;
U #rbs2.ACK4;
O;
UN #Code.C8;
UN #rbs2.ACK4;
);
= #AuxProgMatch;
NETWORK
TITLE =Program Matching
//*ODIL_ID:1650_34*
//
U #AuxProgMatch;
U(;
U #Code.C16;
U #rbs2.ACK5;
O;
UN #Code.C16;
UN #rbs2.ACK5;
);
U(;
U #Code.C32;
U #rbs2.ACK6;
O;
UN #Code.C32;
UN #rbs2.ACK6;
);
U(;
U #Code.Res1;
U #rbs3.ACK7;
O;
UN #Code.Res1;
UN #rbs3.ACK7;
);
U(;
U #Code.Res2;
U #rbs3.ACK8;
O;
UN #Code.Res2;
UN #rbs3.ACK8;
);
= #ProgMatching;
NETWORK
TITLE =Enable
//*ODIL_ID:1650_35*
//
U #Ba1i;
= #rbe1.ENABLE;
NETWORK
TITLE =Deverminage
//*ODIL_ID:1650_36*
//
U #Dever;
= #rbe12.DEVERM;
NETWORK
TITLE =Over 100
//*ODIL_ID:1650_37*
//
U #Ba1i;
= #rbe13.Over_100_1;
= #rbe13.Over_100_2;
NETWORK
TITLE =--------------- GESTION DU MOT ROBOT POUR GROUPE DE RODAGE -----
//*ODIL_ID:1650_38*
//

NETWORK
TITLE =RAZ bits de sortie
//*ODIL_ID:1650_39*
//
U #Ba1i;
R #Tmp_W_Rod.X0;
R #Tmp_W_Rod.X1;
R #Tmp_W_Rod.X2;
NETWORK
TITLE =Creation de la demande de rodage
//*ODIL_ID:1650_40*
//
O #rbs12.X3;
O #rbs12.ATIPDR;
= #DdeRod1;
NETWORK
TITLE =Creation de la demande de changement d'electrode
//*ODIL_ID:1650_41*
//
O #rbs12.X5;
O #rbs12.ATIPCH;
= #DdeChelm1;
NETWORK
TITLE =Creation de la fin de rodage
//*ODIL_ID:1650_42*
//
U #rbs7.X25;
= #FinRod1;
NETWORK
TITLE =Creation de la fin de changement d'electrode
//*ODIL_ID:1650_43*
//
U #rbs7.X29;
= #FinChelm1;
NETWORK
TITLE =Creation de l'alarme changement d'electrode
//*ODIL_ID:1650_44*
//
U #rbs12.TIPEOF;
= #AlrChelm1;
NETWORK
TITLE =Creation de l'alarme changement rodage
//*ODIL_ID:1650_45*
//
U #rbs7.X31;
= #AlrRod1;
NETWORK
TITLE =Gestion du premier bit - Set
//*ODIL_ID:1650_46*
//
UN #DdeRod1;
UN #AlrChelm1;
UN #FinChelm1;
U(;
O #FinRod1;
O #DdeChelm1;
O #AlrRod1;
);
S #Tmp_W_Rod.X0;
NETWORK
TITLE =Gestion du premier bit - Reset
//*ODIL_ID:1650_47*
//
U(;
O #DdeRod1;
O #AlrChelm1;
O #FinChelm1;
);
UN #FinRod1;
UN #DdeChelm1;
UN #AlrRod1;
R #Tmp_W_Rod.X0;
NETWORK
TITLE =Gestion du deuxieme bit - Set
//*ODIL_ID:1650_48*
//
UN #AlrRod1;
UN #DdeChelm1;
UN #AlrChelm1;
U(;
O #DdeRod1;
O #FinRod1;
O #FinChelm1;
);
S #Tmp_W_Rod.X1;
NETWORK
TITLE =Gestion du deuxieme bit - Reset
//*ODIL_ID:1650_49*
//
U(;
O #DdeChelm1;
O #AlrChelm1;
O #AlrRod1;
);
UN #DdeRod1;
UN #FinRod1;
UN #FinChelm1;
R #Tmp_W_Rod.X1;
NETWORK
TITLE =Gestion du troisieme bit - Set
//*ODIL_ID:1650_50*
//
UN #AlrRod1;
UN #DdeRod1;
UN #FinRod1;
U(;
O #AlrChelm1;
O #DdeChelm1;
O #FinChelm1;
);
S #Tmp_W_Rod.X2;
NETWORK
TITLE =Gestion du troisieme bit - Reset
//*ODIL_ID:1650_51*
//
U(;
O #DdeRod1;
O #FinRod1;
O #AlrRod1;
);
UN #AlrChelm1;
UN #DdeChelm1;
UN #FinChelm1;
R #Tmp_W_Rod.X2;
NETWORK
TITLE =Transfert du mot robot pour rodage & chgmt electrode
//*ODIL_ID:1650_52*
//
L DIW [AR2,P#176.0];
T #Word_TipDress_Chelman;
NETWORK
TITLE =--------------- GESTION DU MOT D'ETAT ---------------
//*ODIL_ID:1650_53*
//

NETWORK
TITLE =Ecriture du mot d'etat - Robot Pret
//*ODIL_ID:1650_54*
//
U #RobReady;
SPBNB _002;
L 1000;
T #S_state;
_002: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Systeme Pret
//*ODIL_ID:1650_55*
//
U #rbs1.SYSRDY;
SPBNB _003;
L 1001;
T #S_state;
_003: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Repli
//*ODIL_ID:1650_56*
//
U #HomePosition;
SPBNB _004;
L 41;
T #S_state;
_004: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Defaut
//*ODIL_ID:1650_57*
//
U #rbs1.FAULT;
SPBNB _005;
L 1005;
T #S_state;
_005: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Appel Operateur
//*ODIL_ID:1650_58*
//
UN #rbe1.IMSTP;
SPBNB _006;
L 10;
T #S_state;
_006: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Pas de Defauts
//*ODIL_ID:1650_59*
//
U #STATE_1.X0;
SPBNB _007;
L 0;
T #S_state;
_007: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Attente autorisation d'evolution
//*ODIL_ID:1650_60*
//
U #STATE_1.X1;
SPBNB _008;
L 24;
T #S_state;
_008: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Mode auto du robot
//*ODIL_ID:1650_61*
//
U #STATE_1.X2;
SPBNB _009;
L 1002;
T #S_state;
_009: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Mode manu du robot
//*ODIL_ID:1650_62*
//
U #STATE_1.X3;
SPBNB _00a;
L 1003;
T #S_state;
_00a: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Defaut Snack
//*ODIL_ID:1650_63*
//
U(;
O #STATE_1.X4;
O #Snack_fault;
);
SPBNB _00b;
L 1006;
T #S_state;
_00b: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Defaut Prog Matching
//*ODIL_ID:1650_64*
//
U(;
O #STATE_1.X5;
O #ProgMatching;
);
SPBNB _00c;
L 1007;
T #S_state;
_00c: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Defaut Cable de Soudure
//*ODIL_ID:1650_65*
//
U #STATE_1.X6;
SPBNB _00d;
L 1008;
T #S_state;
_00d: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Defaut Soudure
//*ODIL_ID:1650_66*
//
U #STATE_1.X7;
SPBNB _00e;
L 1009;
T #S_state;
_00e: NOP 0;
NETWORK
TITLE =Ecriture du mot d'etat - Defaut Debit d'eau
//*ODIL_ID:1650_67*
//
U #STATE_1.X8;
SPBNB _00f;
L 1010;
T #S_state;
_00f: NOP 0;
NETWORK
TITLE =--------------- ECRITURE DES BYTES DE SORTIE ---------------
//*ODIL_ID:1650_68*
//

NETWORK
TITLE =Ecriture sorties robot
//*ODIL_ID:1650_69*
//
L #IO_RB_BYTES;
SLD 3;
LAR1;
L DIB [AR2,P#78.0];
T AB [AR1,P#0.0];
L #rbe2.CODECYCLE;
T AB [AR1,P#1.0];
L DIB [AR2,P#82.0];
T AB [AR1,P#2.0];
L DIB [AR2,P#84.0];
T AB [AR1,P#3.0];
L DIB [AR2,P#86.0];
T AB [AR1,P#4.0];
L DIB [AR2,P#88.0];
T AB [AR1,P#5.0];
L DIB [AR2,P#90.0];
T AB [AR1,P#6.0];
L DIB [AR2,P#92.0];
T AB [AR1,P#7.0];
L DIB [AR2,P#94.0];
T AB [AR1,P#8.0];
L DIB [AR2,P#96.0];
T AB [AR1,P#9.0];
L DIB [AR2,P#98.0];
T AB [AR1,P#10.0];
L DIB [AR2,P#100.0];
T AB [AR1,P#11.0];
L DIB [AR2,P#102.0];
T AB [AR1,P#12.0];
L DIB [AR2,P#104.0];
T AB [AR1,P#13.0];
L DIB [AR2,P#106.0];
T AB [AR1,P#14.0];
L DIB [AR2,P#108.0];
T AB [AR1,P#15.0];
NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_API_MAITRE_CAL"
TITLE =LIAISON API CALCULATEUR
//*******************************************************************************
//*                       BF_API_MAITRE_CAL                                     *
//*               Echanges Automate maitre <-> Calculateur                      *
//*                                                                             *
//*               Exchange between Master PLC <-> Server                        *
//*******************************************************************************
//( In English further below)
//
//DESCRIPTION :
//******
//Ce bloc Fonctionnel prend en charge les echanges de donnees avec le systeme de
//production.
//
//Il s'occupe:
//- de la mise a jour du bloc d'echange a partir des donnees issues
//de l'application. (Tab_maj ->>> Tab_ech)
//
//- du dialogue entre le calculateur et l'automate (Gestion des mots de
//synchronisation des echanges).
//
//- de la mise a jour des donnees utilisees par l'application en provenance
//du calculateur. (Tab_ech ->>> Tab_acq)
//
//
//
//MISE EN OEUVRE :
//***************
//A) DB Globale :
//
//Ce FB utilise des Tables de donnees mise en oeuvre dans le DB SIPx
//( voir exemple dans le DB89 au format Struct)
//
//Ces Structs doivent etre personalisees en fonction du vehicule et du projet
//vous devez faire confirmer les 4 structures par votre projet
//
//Dans la structure programme Les Blocs DB89 a DB80 sont reserves a cette effet.
//(Numerotation decroissante a respecter)
//
//Le Nom symbolique des DB est SIP<x> avec x = 1 pour la premier liaison N2
//(maxi 8 suivant le type dautomate).
//le DB89 porte le Nom SIP1
//
//B) utilisation des Structures dans le DB Globale
//
//4 structures sont mises en oeuvre :
//"NOMSE" = entree BF "Tab_ech" pour Trame dechange entre Siptol et API
//"NOMSEana" = information SIPTOL pour animation des ecrans danalyses
//"NOMSEacq" = entree BF "Tab_acq" pour Donnees pouvant etre lues par API
//"NOMSEmaj" = entree BF "Tab_maj" pour Donnees pouvant etre ecrites par API
//
//NOMSE doit etre remplace par le NOM du sous ensemble ou la BF est mise en oeuvre
//
//Constitution de TAB_ECH dans l'ordre suivant :
// - VALAPI (Mot de gestion des echanges API --> Calculateur)
// - Les donnees (Informations de production equivalentes au contenue de TAB_acq
//et TAB_maj)
// - N° de requete du calculateur (MOT)
// - VALCAL  (Mot de gestion des echanges Calculateur --> API)
// - Marche locale (Mot d'information du type de fonctionnement du mode)
//
//Voir le guide de mise en oeuvre du bloc fonctionnel GE03.FP.216 pour plus
//d'information.
//
//
//C) ETAT INTERFACE :
//
//Sortie Etat dial :
//*VALAPI*VALCAL*ETATDIAL*DEFINITIONS
//***********************************
//*  0   *  0   *  10    * Dialogue non initialise
//*  1   *  0   *  1     * Demande de dialogue avec Siptol
//*  2   *  0   *  2     * Fin de l'attente de Siptol
//*  3   *  0   *  3     * Dialogue en marche forcee
//*  4   *  0   *  4     * Dialogue sur defaut d'identification
//*  5   *  0   *  5     * Correction des donnees Siptol
//*  0   *  1   *  6     * Reponse de Siptol
//*  0   *  2   *  7     * Demande d'attente de Siptol
//*  0   *  4   *  8     * Donnees erronees pour Siptol
//* >5   *      *  11    * VALAPI et VALCAL non conformes
//
//
//LISTE DES DEFAUTS :
//******************
//Sortie codedef :
//1 = Defaut de parametrage
//2 = Defaut caracteristiques
//4 = Time-out liaison calculateur
//
//************************** ENGLISH INFORMATION  ****************************
//
//DESCRIPTION :
//******
//This Functional block takes care of the data exchanges with the production
//control IT system.
//
//It handles:
//- the update of the exchange block from the data coming
//the application. (Tab_maj - > > > Tab_ech)
//
//- the dialog between the Server and the PLC
//(Management of the exchanges words of synchronization).
//
//- the update of the data used by the PLC from the Calculator.
// (Tab_ech - > > > Tab_acq)
//
//OPERATING :
//**********
//A) Global Data :
//
//This FB uses data tables that are implementated in the DB SIPx
// (see example in the DB 89 in Struct format)
//
//Structs must be adapted to the vehicle and your project.
//You have to make confirm the 4 struct by your project
//
//In the S7 program structure, DB89 to DB80 are reserved in this effect.
//( Lessening Numbering to be respected)
//
//The symbolic Name of the DB is SIPx with x = 1 for the first
//Link with N2_Ethernet Level (maxi 8 according to the type of PLC)
//The Name of DB89 is SIP1
//
//B) Use of the Structures in Global DB
//
//4 structures are implemented:
//"NOMSE"  = Tab_ech BF input for exchange frame between Siptol and PLC
//"NOMSEana" = SIPTOL information used by screen (HMI) and specified by siptol
//"NOMSEacq" = Tab_acq BF input for Data can be read by PLC
//"NOMSEmaj" = Tab_maj BF input for Data can be written by PLC
//
//NOMSE must be replaced by the sub assembly NAME where the BF is operating
//
//Constitution of TAB_ECH in the following order:
//- VALAPI (Exchange management word PLC -> server)
//- The data (Words of product data equivalent to TAB_acq and TAB_maj data)
//- Server request number (NRcal WORD)
//- VALCAL (Exchange management word server -> PLC)
//- local Mode ( Flag_mdm Operating type information Word)
//
//See the guide of implementation of the functional block GE03. FP.216
//for more information.
//
//C) Interface Status :
//
//Etat_dial out:
//*VALAPI*VALCAL*ETATDIAL* DEFINITIONS
//***********************************
//*  0   *  0   *   10   * not initialized Dialog
//*  1   *  0   *   1    * Request of dialog with Siptol
//*  2   *  0   *   2    * End of wait of Siptol
//*  3   *  0   *   3    * Dialog on forced mode
//*  4   *  0   *   4    * Dialog on identification (RFID) fault
//*  5   *  0   *   5    * Correction of the Siptol data
//*  0   *  1   *   6    * Siptol answer
//*  0   *  2   *   7    * Wait request from Siptol
//*  0   *  4   *   8    * Erroneous Data for Siptol
//* > 5  *      *   11   * VALAPI and VALCAL not corresponding
//
//
//FAULT LIST :
//***********
//Codedef Values :
// 1 = parameter setting Fault
// 2 = characteristics Fault
// 4 = Server link Time-out
//
//**************************** _ODIL_ID_ ***************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 22
//Dernier ID mis en oeuvre / Last ID implemented : 2031_22
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'APIM_CAL'
VERSION : 1.2
VAR_INPUT
  Demdial : BOOL;	//Dialog request / DEMande de DIALogue
  Smf : BOOL;	//Forced mode selector / Selecteur Marche Forcee
  Dfident : BOOL;	//RFID Fault / DeFaut Identifiant
  Fcorrop : BOOL;	//End of operator correction / Fin CORRection Operateur
  Autmdeg : BOOL;	//Degraded mode authorization / AUTorisation Marche DEGradee
  Tattcal : TIME;	//Server Waiting time / Temps d'ATTente CALculateur
  Mfctano : WORD;	//Anomaly function mode/ Mode de FonCTionnement en ANOmalies
  Razcmpt : BOOL;	//Fault counter reset / RAZ CoMPteurs de defauts
  Modeval2 : BOOL;	//Mode Val 2 selector / Selecteur Mode Val 2
  Tab_maj : ANY;	//Update data Table / TABle de Mise A Jour
  Tab_acq : ANY;	//Acquisition data Table / TABle d'ACQuisition
  Tab_ech : ANY;	//Exchange data Table / TABle d'ECHange
END_VAR
VAR_OUTPUT
  Findial : BOOL;	//End of dialog with Server / FIN de DIALogue avec le calculateur
  MemForce : BOOL;	//Forced mode Memory/ Memorisation marche forcee
  Time_Out : BOOL;	//Link with server Time out / Time Out liaison avec calculateur
  DfCarInc : BOOL;	//Bad transfert detectedby calculator/Def detecte par calculat info trans erronee
  DfPara : BOOL;	//Parameter Fault /Defaut de parametrage
  CpTimeout : WORD;	//Server Time out counter / Compteur Time Out calculateur
  CptDefCar : WORD;	//Incorrect characteristic counter / Compteur Caracteristiques incorrect
  EtatDial : INT;	//Dialog status / Etat du dialogue
  Def : BOOL;	//Fault / Defaut
  Diag : STRUCT	//Diagnosis / Diagnostique
    Def : BOOL;	//Fault / Defaut
    Ala : BOOL;	//Alarme (reserve) / alarme (reserve)
    NumListe : INT;	//Fault list number (reserve) / Numero liste de defaut (Reserve)
    CodeDef : INT;	//Fault code / code du defaut
  END_STRUCT ;
END_VAR
VAR
  XFRSmf : BOOL;	//Auxilliaire de front descendant Marche forcee
  XFRDtime_out : BOOL;	//Auxilliaire de front descendant Time out
  DfTempo : BOOL;	//Fin tempo attente Calculateur
  TimeOut : TON;	//SFB4  TON
  REP_CAL : BOOL;	//Reponse calculateur
  Fin_Forc : BOOL;	//Fin de forcage
  ValCal4 : BOOL;	//Defaut Caracteristiques incorrectes
  MemValCal4 : BOOL;	//Memoire front ValCal4
  XFcorrOp : BOOL;	//Auxilliaire de front correction operateur
  XDemDial : BOOL;	//Auxilliaire de front Demande Dialogue
  XRep_Cal : BOOL;	//Auxilliaire de reponse calculateur
  XRazCmpt : BOOL;	//Auxilliaire de front RAZ Compteur
END_VAR
VAR_TEMP
  MAJ : ANY;	//Image Pointeur Mise a jour
  ACQ : ANY;	//Image Pointeur Table Acq
  ECHG : ANY;	//Image pointeur Table Echange
  DB_ECH : WORD;	//Numero de DB table Echange
  PtrValApi : DWORD;	//Adresse de ValApi
  PtrValCal : DWORD;	//Adresse de ValCal
  PtrModLoc : DWORD;	//Adresse de mode local
  ValAPI : WORD;	//Valeur VAL API
  ValCal : WORD;	//Valeur ValCal
  Ret : INT;	//Etat Transfert SFC20
  FRM_Rep_Cal : BOOL;	//Front montant reponse Calculateur
  FRDSmf : BOOL;	//Front descendant Marche forcee
  FrmFCorrop : BOOL;	//Front montant correction operateur
  FRDTime_out : BOOL;	//Front descendant Time out
  FrmDemDial : BOOL;	//Front Montant demande dialogue
  Mfctano_1 : BOOL;
  Mfctano_2 : BOOL;
  Mfctano_3 : BOOL;
  ValCal_0 : BOOL;	//ValCal = 0
  ValCal_1 : BOOL;	//ValCal = 1
  ValCal_2 : BOOL;	//ValCal = 2
  ValCal_4 : BOOL;	//ValCal = 3
  ValApi_0 : BOOL;	//ValApi = 0
  ValApi_1 : BOOL;	//ValApi = 1
  ValApi_2 : BOOL;	//ValApi = 2
  ValApi_3 : BOOL;	//ValApi = 3
  ValApi_4 : BOOL;	//ValApi = 4
  ValApi_5 : BOOL;	//ValApi = 5
END_VAR
BEGIN
NETWORK
TITLE =GESTION DES FRONTS
//*ODIL_ID:2031_1*
U #Smf; // Demande forcage
FN #XFRSmf; // Memorisation et gestion front descendant
= #FRDSmf; // Front descendant selecteur de forcage
U #ValCal4; // ValCal4
= #MemValCal4; // Memoire ValCal4
U #Fcorrop; // Fin Correction operateur
FP #XFcorrOp; // Memoire fin Correction operateur
= #FrmFCorrop; // Front montant Fin correction operateur
U #Demdial; // Demande dialogue
FP #XDemDial;
= #FrmDemDial; // Front montant demande dialogue
NETWORK
TITLE =DECODAGE DU MOT FONCTION ANOMALIE
//Decodage de la selection du Mode de recyclage
//*ODIL_ID:2031_2*
//
L #Mfctano;
L B#16#1;
==D;
= #Mfctano_1;
POP;
L B#16#2;
==D;
= #Mfctano_2;
POP;
L B#16#3;
==D;
= #Mfctano_3;
NETWORK
TITLE =TEST PARAMETRES
//*ODIL_ID:2031_3*
//
L #Tattcal;
L B#16#0;
O(;
==D;
);
L DIB [AR2,P#11.0]; //Type de "Tab_maj"
L DIB [AR2,P#21.0]; //Type de "Tab_acq"
O(;
<>D;
);
L DIB [AR2,P#31.0]; //Type de "Tab_ech"
O(;
<>D;
);
L B#16#2; //Type BYTE
O(;
<>D;
);
L DIW [AR2,P#12.0]; //Longueur de "Tab_maj"
L B#16#0;
O(;
==D;
);
POP;
L DIW [AR2,P#22.0]; //Longueur de "Tab_acq"
O(;
<>D;
);
+ 8;
L DIW [AR2,P#32.0]; //Longueur de "Tab_ech"
O(;
<>D;
);
L DIB [AR2,P#36.0]; //Zone de "Tab_ech"
L B#16#84; //DB
O(;
<>D;
);
O(;
UN #Mfctano_1;
UN #Mfctano_2;
UN #Mfctano_3;
);
= #DfPara; //Defaut parametrage
SPB Err;
NETWORK
TITLE =CALCUL DES POINTEURS
//Pour l'utilisation et la copie des donnees (SFC 20), des pointeurs et des ANY
//sont calcules dans ce reseau.
//
//      Tab_maj            Tab_ech            Tab_acq
//      ANY MAJ            ANY ECHG           ANY ACQ
//      LB 0 a LB 9        LB 20 a LB 29      LB 10 a LB 19
//
//
//                         +-----------+
//                         |  ValApi   | <- PtrValApi
//      +-----------+      +-----------+      +-----------+
//      |           |      |           |      |           |
//      |           |      |           |      |           |
//      |           | ->>> |  Donnees  | ->>> |           |
//      |           |      |           |      |           |
//      |           |      |           |      |           |
//      +-----------+      +-----------+      +-----------+
//                         |  NRCAL    |
//                         +-----------+
//                         |  ValCal   | <- PtrValCal
//                         +-----------+
//                         |  ModLoc   | <- PtrModLoc
//                         +-----------+
//*ODIL_ID:2031_4*
//
//---------- Bloc de donnees
//
L DIW [AR2,P#34.0]; //Numero DB de la table echange
T #DB_ECH;
//---------- Pointeur sur "ValApi"
L DID [AR2,P#36.0]; //Adresse de ValApi
UD DW#16#FFFFFF;
T #PtrValApi;
//---------- Pointeur sur "ValCal"
L DIW [AR2,P#12.0]; //Longueur de "Tab_maj"
+ 4; //+ deux mots
SLW 3; //* 8 (Byte -> Bit)
+D;
T #PtrValCal; //Adresse de ValCal
//---------- Pointeur sur "Mode Local"
+ L#16; // + 16 bits
T #PtrModLoc; //Adresse de Mode Local
//---------- Construction des parametres ANY pour les BLKMOV
L DID [AR2,P#10.0];
T LD 0; //Type & Longueur de "Tab_maj"
T LD 10; //Type & Longueur de "Tab_acq"
T LD 20; //Type & Longueur de "Tab_ech"
L DIW [AR2,P#14.0]; //Numero de DB de "Tab_maj"
T LD 4;
L DIW [AR2,P#24.0]; //Numero de DB de "Tab_acq"
T LD 14;
L #DB_ECH; //Numero de DB de "Tab_ech"
T LD 24;
L DID [AR2,P#16.0]; //Zone & Adresse de "Tab_maj"
T LD 6;
L DID [AR2,P#26.0]; //Zone & Adresse de "Tab_acq"
T LD 16;
L #PtrValApi; //Zone & Adresse de "Tab_ech"
+ L#16; // + 16 bits
OD DW#16#84000000; //Zone DB
T LD 26;
NETWORK
TITLE =ACQUISITION DE ValCal & ValApi
//*ODIL_ID:2031_5*
AUF DB [#DB_ECH]; // Ouverture DB Table Echange
//---------- Acquisition de ValCal
L DBW [#PtrValCal];
T #ValCal;
//---------- Aquiqition de ValApi
L DBW [#PtrValApi];
T #ValAPI;
NETWORK
TITLE =DECODAGE DE ValCal & ValApi
//*ODIL_ID:2031_6*
//---------- Etat de ValCal
//
L #ValCal;
L B#16#0;
==D;
= #ValCal_0; // 0
POP;
L B#16#1;
==D;
= #ValCal_1; // 1
POP;
L B#16#2;
==D;
= #ValCal_2; // 2
POP;
L B#16#4;
==D;
= #ValCal_4; // 4
//---------- Etat de ValApi
L #ValAPI;
L B#16#0;
==D;
= #ValApi_0; // 0
POP;
L B#16#1;
==D;
= #ValApi_1; // 1
POP;
L B#16#2;
==D;
= #ValApi_2; // 2
POP;
L B#16#3;
==D;
= #ValApi_3; // 3
POP;
L B#16#4;
==D;
= #ValApi_4; // 4
POP;
L B#16#5;
==D;
= #ValApi_5; // 5
NETWORK
TITLE =ATTENTE REPONSE CALCULATEUR
//ValAPI = 1 ou ValAPI = 3 et
//ValCAL = 0
//*ODIL_ID:2031_7*
//
O #ValApi_1;
O #ValApi_3;
U #ValCal_0;
UN #Time_Out;
= #TimeOut.IN;
CALL #TimeOut (
PT := #Tattcal);
UN #TimeOut.Q;
SPB NTO;
S #Time_Out;
L #CpTimeout;
+ 1;
T #CpTimeout;
NTO: NOP 0;
NETWORK
TITLE =LE CALCULATEUR A REPONDU A L'AUTOMATE
//ValCAL = 1 ou ValCAL = 2 ou ValCAL = 4
//ValAPI = 0
//*ODIL_ID:2031_8*
//
O #ValCal_1;
O #ValCal_2;
O #ValCal_4;
U #ValApi_0;
= #REP_CAL;
R #Time_Out;
//----------
U #REP_CAL;
FP #XRep_Cal;
= #FRM_Rep_Cal; //Front montant reponse Calculateur
//----------
U #Time_Out;
FN #XFRDtime_out;
= #FRDTime_out; //Front descendant time out
NETWORK
TITLE =FIN DU MODE DE FORCAGE
//*ODIL_ID:2031_9*
U #FRDSmf; // Front descendant selecteur de forcage
U #MemForce; // Memorisation marche forcee
U(;
ON #Time_Out; //Pas de defaut Time Out
ON #Autmdeg; //Pas d'autorisation de marche degradee
);
O;
U #FRDTime_out; // Front descendant Time Out
U #Autmdeg;
S #Fin_Forc;
NETWORK
TITLE =MODE LOCAL = 0
//*ODIL_ID:2031_10*
UN #Smf; // Pas de selecteur Marche Forcee
U(;
ON #Time_Out; //Pas defaut time out
ON #Autmdeg; // Pas autorisation marche degradee
);
SPBN F6;
AUF DB [#DB_ECH];
L B#16#0;
T DBW [#PtrModLoc]; // Table_Echange[AdmLocal]=0
NETWORK
TITLE =MEMORISATION MARCHE FORCEE ( TIME OUT ou DONNEES INCORRECTES )
//*ODIL_ID:2031_11*
F6: U #Time_Out;
U(;
O #Autmdeg;
O #Smf;
);
O;
U #Smf;
U(;
O #DfCarInc;
O #ValApi_2;
O #ValApi_4;
O #ValApi_5;
);
SPBN F7;
S #MemForce;
AUF DB [#DB_ECH];
L B#16#1;
T DBW [#PtrModLoc]; // Table_Echange[AdmLocal]=1
NETWORK
TITLE =COMPTEUR DEFAUT CARACTERISTIQUES INCORRECTES
//ValCAL = 4 ou ValAPI = 5
//*ODIL_ID:2031_12*
//
F7: O #ValCal_4;
O #ValApi_5;
SPBN M8;
S #ValCal4;
U #ValCal4;
UN #MemValCal4;
SPBN F8;
S #DfCarInc; // Mise a 1 defaut caracteristiques incorrectes
L #CptDefCar;
+ 1;
T #CptDefCar; // Incrementation compteur caaracteristiques incorrectes
SPA F8;
M8: UN #ValCal_4;
UN #ValApi_5;
O;
U #ValCal_4;
U #Mfctano_1; // Pas d'information de la correction au calculateur
U #FrmFCorrop; // Front montant fin correction operateur
R #ValCal4; // RAZ Valcal4
R #DfCarInc; // RAZ defaut caracteristiques incorrectes
NETWORK
TITLE =TRANSFERT TABLE DE MISE A JOUR VERS BLOC D'ECHANGE
//*ODIL_ID:2031_13*
F8: U #ValApi_0;
U(;
U(;
O #ValCal_1;
O #ValCal_4;
);
U #FrmDemDial;
O;
U #ValCal_4;
U #Mfctano_2;
U #FrmFCorrop;
);
SPBN M10;
//---- TRANSFERT DE LA TABLE MISE A JOUR VERS BLOC ECHANGE
CALL "BLKMOV" (
SRCBLK := #MAJ,
RET_VAL := #Ret,
DSTBLK := #ECHG);
//---------- ValApi =1
UN #Smf; // pas de selecteur sur marche Force
U(;
UN #Autmdeg; // Pas d'autorisation de marche degradee
O;
UN #Time_Out; // Pas de time out calculateur
);
UN #Fin_Forc; // pas de fin du mode de forcage
SPBN F11;
L B#16#1;
T #ValAPI;
L B#16#0;
T #ValCal;
//---------- ValAPi =3
F11: O #Smf; // Selecteur sur marche forcee
O(;
U #Autmdeg; // Autorisation de marche degradee
U #Time_Out; // Time out Calculateur
);
O #Fin_Forc; // Fin du mode de forcage
SPBN F12;
L B#16#3;
T #ValAPI;
L B#16#0;
T #ValCal;
U #Fin_Forc; //Fin du mode de forcage
SPBN F13;
R #Fin_Forc; //RESET Fin du mode de forcage
R #MemForce; //RAZ memorisation marche forcee
SPA F12;
F13: AUF DB [#DB_ECH];
L B#16#1;
T DBW [#PtrModLoc]; // Tab_Ech[AdmLocal]=1
S #MemForce;
//---------- ValApi = 4
F12: U #Dfident; // Defaut identifiant du point d'echange
UN #ValApi_3;
SPBN UpdV;
L B#16#4;
T #ValAPI; // Anomalie detectee par automate => ValApi=4
L B#16#0;
T #ValCal; // ValCal = 0
SPA UpdV; //-> Mise a jour de ValCal & ValApi
NETWORK
TITLE =GESTION MARCHE AVEC ATTENTE CALCULATEUR
//*ODIL_ID:2031_14*
M10: U #Demdial; //Demande de dialogue
U #ValApi_0;
U #ValCal_2;
UN #MemForce; //Pas de memorisation Marche forcee
SPBN M15;
UN #Modeval2; // Mode Val 2
SPB M15A;
//---- TRANSFERT DE LA TABLE MISE A JOUR VERS BLOC ECHANGE
CALL "BLKMOV" (
SRCBLK := #MAJ,
RET_VAL := #Ret,
DSTBLK := #ECHG);
M15A: L B#16#2;
T #ValAPI; // ValApi = 2
L B#16#0;
T #ValCal; // ValCal = 0
SPA UpdV; //-> Mise a jour de ValCal & ValApi
NETWORK
TITLE =DOUBLE DIALOGUE EN CAS D'ANOMALIE
//*ODIL_ID:2031_15*
M15: U #Demdial; //demande de dialogue
U #ValApi_0;
U #ValCal_4;
U #Mfctano_3;
SPBN UpdV; //-> Mise a jour de ValCal & ValApi
L B#16#5;
T #ValAPI; // ValApi = 5
L B#16#0;
T #ValCal; // ValCal = 0
NETWORK
TITLE =MISE A JOUR VALCAL ET VALAPI
//*ODIL_ID:2031_16*
UpdV: AUF DB [#DB_ECH];
L #ValAPI;
T DBW [#PtrValApi];
L #ValCal;
T DBW [#PtrValCal];
NETWORK
TITLE =RECOPIE DES DONNEES DU BLOC D'ECHANGE VERS LA TABLE ACQUISITION
//*ODIL_ID:2031_17*
U #ValApi_0;
U #ValCal_1;
U #FRM_Rep_Cal; // Front montant reponse calculateur
SPBN F17;
//---------- Recopie
CALL "BLKMOV" (
SRCBLK := #ECHG,
RET_VAL := #Ret,
DSTBLK := #ACQ);
NETWORK
TITLE =RECOPIE DES DONNEES TABLE MISE A JOUR VERS TABLE ACQUISITION
//*ODIL_ID:2031_18*
F17: U #ValApi_0;
U #ValCal_4;
U #Mfctano_1;
U #FrmFCorrop; // Front montant fin de correction operateur
SPBN F18;
R #DfCarInc; // RAZ defaut caracteristiques incorrectes
CALL "BLKMOV" (
SRCBLK := #MAJ,
RET_VAL := #Ret,
DSTBLK := #ACQ);
NETWORK
TITLE =FIN DE L'ECHANGE
//*ODIL_ID:2031_19*
F18: U #ValApi_0;
U(;
U(;
O #ValCal_1;
O;
U #ValCal_4;
UN #Mfctano_3; //Front montant reponse calculateur
);
U #FRM_Rep_Cal;
O; // Mfctano=1 Pas d'information de la correction au calculateur
U #ValCal_4; // Front montant correction operateur
U #Mfctano_1;
U #FrmFCorrop;
);
SPBN M19;
SET;
S #Findial; // Mise a 1 fin de dialogue
SPA F19;
M19: UN #Demdial; //Pas de demande de lialogue
U #Findial; //Fin dialogue
SPBN F19;
SET;
R #Findial; //RAZ Fin de dialogue
NETWORK
TITLE =RAZ COMPTEURS DEFAUTS
//*ODIL_ID:2031_20*
F19: U #Razcmpt; //Demande RAZ Compteur
FP #XRazCmpt; //Front Montant
SPBN F20;
L B#16#0;
T #CpTimeout; // RAZ compteur TimeOut calculateur
T #CptDefCar; // RAZ compteur defaut caracteristiques incorrectes
NETWORK
TITLE =ACTUALISATION DU MOT DE DIALOGUE
//*ODIL_ID:2031_21*
F20: U #ValApi_0; //ValAPI = 0 & ValCAL = 0
U #ValCal_0;
L B#16#A; //-> EtatDial = 10
SPB ED; //-> Mise a jour de "EtatDial"
//----------
U #ValApi_0;
SPB VA_0;
U #ValApi_1; //ValAPI = 1 & ValCAL = 0
L B#16#1; //-> EtatDial = 1
SPB ED; //-> Mise a jour de "EtatDial"
U #ValApi_2; //ValAPI = 2 & ValCAL = 0
L B#16#2; //-> EtatDial = 2
SPB ED; //-> Mise a jour de "EtatDial"
U #ValApi_3; //ValAPI = 3 & ValCAL = 0
L B#16#3; //-> EtatDial = 3
SPB ED; //-> Mise a jour de "EtatDial"
U #ValApi_4; //ValAPI = 4 & ValCAL = 0
L B#16#4; //-> EtatDial = 4
SPB ED; //-> Mise a jour de "EtatDial"
U #ValApi_5; //ValAPI = 5 & ValCAL = 0
L B#16#5; //-> EtatDial = 5
SPB ED; //-> Mise a jour de "EtatDial"
SPA x; //Sinon ...
//----------
VA_0: U #ValCal_1; //ValAPI = 0 & ValCAL = 1
L B#16#6; //-> EtatDial = 6
SPB ED; //-> Mise a jour de "EtatDial"
U #ValCal_2; //ValAPI = 0 & ValCAL = 2
L B#16#7; //-> EtatDial = 7
SPB ED; //-> Mise a jour de "EtatDial"
U #ValCal_4; //ValAPI = 0 & ValCAL = 4
L B#16#8; //-> EtatDial = 8
SPB ED; //-> Mise a jour de "EtatDial"
x: L B#16#B; //-> EtatDial = 11
ED: T #EtatDial;
NETWORK
TITLE =ACTUALISATION MOT DE DEFAUT
//*ODIL_ID:2031_22*
Err: L B#16#0;
UN #DfPara; // Defaut parametrage
SPB F40;
L B#16#1;
F40: UN #DfCarInc; // Defaut Caracteristiques
SPB F41;
+ B#16#2;
F41: UN #Time_Out; // Time out liaison calculateur
SPB F42;
+ B#16#4;
F42: T #Diag.CodeDef;
<>D;
= #Diag.Def; // Defaut en cours
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_LANCEMENT"
TITLE =FB_LANC_SIP
//********************************************************************************
//*                                FB "LANCEMENT"                                *
//*                    Gestion d'un point de lancement siptol                    *
//*                       Management siptol launching point                      *
//********************************************************************************
//(In english further below)
//
//DESCRIPTION :
//*************
//Ce FB permet de gerer le dialogue d'un point de lancement siptol.
//Il prend en charge la fabrication avec ou hors siptol.
//Plusieurs blocs d'echanges sont acceptes.
//
//Pour la description detaillee du Bloc Fonctionnel, voir le guide GE03_J2_011.
//
//MISE EN OEUVRE :
//****************
//TabTyp : Type de table d'echange
//     1 : Bloc d'echange n°1
//     3 : Bloc d'echange n°3 (mono-trame)
//     7 : Bloc d'echange n°7
//    10 : Bloc d'echange n°10 (multi-trame)
//
//LTyp : Type de lancement
//   1 : Lancement piece avec controle de la diversite
//   2 : Lancement piece sans controle de la diversite
//   3 : Lancement palette avec controle de la diversite
//   4 : Lancement palette sans controle de la diversite
//
//Dat : Definition attente/travail
//   x0 : 0 = avec travail / 1 = sans travail (P1 ou CDCG)
//   x1 : 0 = avec travail / 1 = sans travail (CDCD)
//   x2 : 0 = support plein / 1 = support vide
//   x8 : palette de vidage (hors siptol)
//   x9 : deverminage piece ou palette (hors siptol)
//   x10 : palette de MAP (hors siptol)
//   x11 : palette de changement electrode BR (hors siptol)
//   x12 : palette de changement electrode CS (hors siptol)
//   x13 : deverminage piece ou palette (avec siptol)
//
//ETAT DIALOGUE :
//***************
//  1 : Reponse de l'automate
//  2 : Attente proposition siptol
//  6 : Proposition de Siptol
//  7 : Demande d'attente de Siptol
//  10 : Dialogue non initialise
//  11 : VAL CAL et VAL API non conformes
//
//CODES D'ERREUR :
//****************
//Codedef (dec)  IhmInfo (hexa)  Commentaires
//   1             --            : Defaut parametre BF lancement
//                 01            : "LTyp" valeur incorrecte
//                 02            : "TABTyp" valeur incorrecte
//                 03            : "Tab_ech" type de donnee incorrect
//                 04            : "Tab_ech" type de zone incorrecte
//                 05            : "Tab_ech" zone de donnee trop petite
//                 06            : "Tab_acq" type de donnee incorrect
//                 07            : "Tab_acq" type de zone incorrecte
//                 08            : "Tab_acq" zone de donnee trop petite
//
//   2             --            : Defaut dialogue
//                 11            : "ValCal" / "ValApi" valeur inconnue
//                 12            : "ValCal" & "ValApi" valeurs nulle
//
//   4             --            : Defaut parametrage mode MAP
//                 21            : "Tab_map" type de donnee incorrect
//                 22            : "Tab_map" type de zone incorrecte
//                 23            : "Tab_map" zone de donnee trop petite
//                 24            : "Tab_mapex" type de donnee incorrect
//                 25            : "Tab_mapex" type de zone incorrecte
//                 26            : "Tab_mapex" zone de donnee trop petite
//                 27            : "Tab_map" & "Tab_mapex" vide
//
//   8             --            : Defaut lancement mode MAP
//                 31            : "Tab_map" valeurs incorrectes
//                 32            : "Tab_mapex" valeurs incorrectes
//
//   16            --            : Defaut parametrage table de compraison
//                 41            : "Ipf" type de donnee incorrect
//                 42            : "Ipf" type de zone incorrecte
//                 43            : "Ipf" zone de donnee trop petite
//                 44            : "Xipp" type de donnee incorrect
//                 45            : "Xipp" type de zone incorrecte
//                 46            : "Xipp" zone de donnee trop petite
//                 47            : "Ipf" & "Xipp" longueurs donnees differentes
//
//   32            --            : Transfert PLC table fault
//                 51            : Transfert "Tab_ech" vers "Tab_acq"
//                 52            : Transfert "Tab_map" vers "Tab_acq" (1° Partie)
//                 53            : Transfert "Tab_map" vers "Tab_acq" (2° Partie)
//                 54            : Transfert "Tab_mapex" vers "Tab_acq"
//                 55            : Transfert "Pilot.IhmSelDP" vers "Tab_acq"
//                 56            : Transfert "Pilot.IhmSelAO" vers "Tab_acq"
//
//**************************** ENGLISH INFORMATION ***************************
//DESCRIPTION :
//*************
//This FB can manage the communication for launching point siptol.
//This FB supports manufacturing with siptol or without siptol.
//Several exchanges tables are accepted.
//
//For detailed description of the Function Block, see the guide GE03_J2_011.
//
//OPERATING :
//***********
//TabTyp : Exchange table type
//     1 : Exchange bloc n°1
//     3 : Exchange bloc n°3
//     7 : Exchange bloc n°7
//    10 : Exchange bloc n°10
//
//LTyp : Launching type
//   1 : Launched part with diversity check
//   2 : Launched part without diversity check
//   3 : Launched skid with diversity check
//   4 : Launched skid without diversity check
//
//Dat : Definition of work
//   x0 : 0 = with work / 1 = without work (FM or BSL)
//   x1 : 0 = with work / 1 = without work (BSR)
//   x2 : 0 = full support / 1 = empty support
//   x8 : erasing skid (without siptol)
//   x9 : dry run part or skid (without siptol)
//   x10 : skid for MAP (without siptol)
//   x11 : skid for tip changement FM (without siptol)
//   x12 : skid for tip changement BM (without siptol)
//   x13 : dry run part or skid (with siptol)
//
//ETAT DIALOGUE :
//***************
//  1 : PLC reponse
//  2 : Waiting proposal siptol
//  6 : Proposual of siptol
//  7 : Waiting siptol request
//  10 : Uninitialized dialog
//  11 : Unexpected value "ValCal" and "ValApi"
//FAULT CODE :
//************
//Codedef (dec)  IhmInfo (hexa)  Commentaires
//   1             --            : Setting FB Launching fault
//                 01            : Invalid "LTyp" Value
//                 02            : Invalid "TABTyp" Value
//                 03            : Unexpected Data Type (TAB_ECH)
//                 04            : Unexpected Data Area (TAB_ECH)
//                 05            : Area Too Small (TAB_ECH)
//                 06            : Unexpected Data Type (TAB_ACQ)
//                 07            : Unexpected Data Area (TAB_CQ)
//                 08            : Area Too Small (TAB_ACQ)
//
//   2             --            : Communication Fault
//                 11            : Unexpected "ValCal" / "ValApi"
//                 12            : Null "ValCal" & "ValApi"*
//
//   4             --            : Setting HMI mode fault
//                 21            : Unexpected Data Type (TAB_MAP)
//                 22            : Unexpected Data Area (TAB_MAP)
//                 23            : Area Too Small (TAB_MAP)
//                 24            : Unexpected Data Type (TAB_MAPEx)
//                 25            : Unexpected Data Area (TAB_MAPEx)
//                 26            : Area Too Small (TAB_MAPEx)
//                 27            : Null "TAB_MAP" & "TAB_MAPEx"
//
//   8             --            : Launching HMI mode fault
//                 31            : Invalid "TAB_MAP" Values
//                 32            : Invalid "TAB_MAPEx" Values
//
//   16            --            : Setting comprison table fault
//                 41            : Unexpected Data Type ("IPF")
//                 42            : Unexpected Data Area ("IPF")
//                 43            : Odd Data length ("IPF")
//                 44            : Unexpected Data Type ("XIPP")
//                 45            : Unexpected Data Area ("XIPP")
//                 46            : Odd Data length ("XIPP")
//                 47            : Different Length ("IPF" & "XIPP")
//
//   32            --            : Transfert PLC table fault
//                 51            : Copy from "TAB_ECH" to "TAB_ACQ"
//                 52            : Copy from "TAB_MAP" to "TAB_ACQ" (First Part)
//                 53            : Copy from "TAB_MAP" to "TAB_ACQ" (Second Part)
//                 54            : Copy from "TAB_MAPEx" to "TAB_ACQ"
//                 55            : Copy from "Pilot.IhmSelDP" to "TAB_ACQ"
//                 56            : Copy from "Pilot.IhmSelAO" to "TAB_ACQ"
//
//****************************************************************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 16
//Dernier ID mis en oeuvre / Last ID implemented : 1858_16
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'LANC'
VERSION : 1.1
VAR_INPUT
  TabTyp : INT;	//Siptol table type / Type de table siptol
  LTyp : INT;	//Launching type /Type de lancement
  Ac : BOOL;	//Ready to compare / Autorisation comparaison
  Ar : BOOL;	//Response authorization / Autorisation de reponse
  Cmap : BOOL;	//Trying mode Condition / Condition mode mise au point
  Ipf : ANY;	//Part to do info / Info piece a faire
  Xipp : ANY;	//Presence part info / Info presences pieces
  Sup : POINTER;	//Number and support familly / Numero et famille support
  Dat : POINTER;	//Expected Work Definition / Definition attente travail
  ValTc : TIME;	//Calculator reply time out/ Tempo Timeout Reponse calculateur
  Tab_map : ANY;	//Diversity table (without siptol)  / Table diversite (hors siptol)
  Tab_mapex : ANY;	//Expanded diversity table (without siptol)/Table diversite etendu (hors siptol)
  Tab_ech : ANY;	//Exchange siptol table / Table d'echange siptol
  Tab_acq : ANY;	//PLC acquisition table / Table d'acquisition api
  Pilot : STRUCT	//HMI to PLC exchange data / Information dechange IHM vers API
    IhmSelMHS : BYTE;	//Without siptol selection / Selection mode hors siptol
    IhmSelTyp : BYTE;	//Launsing type selection / Selection type de lancement
    IhmSelFAP : BYTE;	//Part fabrication selection / Selection fabrication piece
    IhmSelDiv : BOOL;	//Diversity selection / Selection diversite
    IhmSelDvAT : BYTE;	//Try out selection / Selection deverminage
    IhmSelDvATG : BYTE;	//Left try out selection / Selection deverminage gauche
    IhmSelDvATD : BYTE;	//Right try out selection / Selection deverminage droit
    IhmSelNbPF : INT;	//Number of part to do selection / Selection nombre de piece a faire
    IhmSelVal : BOOL;	//Validation selection / Selection validation
    IhmSelDP : ARRAY  [1 .. 10 ] OF //Definition process selection / Selection definitions process
INT;
    IhmSelAO : ARRAY  [1 .. 10 ] OF //Waiting operator selection / Selection attentes operateur
INT;
    IhmSelValDPAO : BOOL;	//Waiting op & def process validation / Validation déf process et att operateur
    IhmInit : BOOL;	//Acquistion table initialization / Initialisation table d'acquisition
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Drcal : BOOL;	//Calculator reply fault / Defaut reponse calculateur
  Atcal : BOOL;	//Calculator proposal waiting / Attente proposition calculateur
  Ipof : BOOL;	//Manufacturing number presence information / Info presence ordre de fabrication
  Map : BOOL;	//HMI Proposal / Mode mise au point
  Fsp : BOOL;	//Work Without Part / Fabrication sans piece
  Pfb : BOOL;	//End of Comparisson Ok / Fin de comparaison piece bonne
  Pfm : BOOL;	//End of Comparisson NOk / Fin de comparaison piece mauvaise
  Ifc : BOOL;	//End of Comparisson / Information fin de comparaison
  Def : BOOL;	//Fault / Defauts
  Diag : STRUCT	//Diagnosis / Diagnostic
    Def : BOOL;	//Default - Defaut
    Ala : BOOL;	//Warning - Alarme
    IhmAutMHS : BOOL;	//HMI Enable "Without SIPTOL" Mode / IHM Autorisation de mode "Hors SIPTOL"
    IhmAutVal : BOOL;	//HMI Enable "Validation" / IHM Autorisation de "Validation"
    IhmMHSSel : BOOL;	//HMI "Without SIPTOL" Mode Selected / IHM mode "Hors SIPTOL" selectionne
    IhmIPOF : BOOL;	//SIPTOL Proposal / INFO PRESENCE OF
    IhmMAP : BOOL;	//HMI ProposalMODE MISE AU POINT
    IhmPFB : BOOL;	//End of Comparisson Ok / FIN DE COMPARAISON PIECE BONNE
    IhmPFM : BOOL;	//End of Comparisson NOk / FIN DE COMPARAISON PIECE MAUVAISE
    IhmIFC : BOOL;	//End of Comparisson / INFORMATION FIN DE COMPARAISON
    IhmFSP : BOOL;	//Work Without Part / FABRICATION SANS PIECE
    IhmMsgAVD : BOOL;
    IhmMsgAVDPAO : BOOL;
    NumListe : INT;	//FB identifier - Identifiant FB
    CodeDef : INT;	//Default code - Code defaut
    IhmInfo : WORD;	//Additional Information / Information additionnelle
    IhmEtatDial : INT;	//Com Status / Etat Dialogue
    IhmLTyp : INT;	//HMI Launch type (0 = part / 1 = palet)
    IhmTABTyp : INT;	//HMI numéro table echange siptol
    IhmSelNbPR : INT;	//Remaining counter / Reste de piece a faire
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Mdec : BOOL;	//Decision memory / Memoire decision
END_VAR
VAR
  SIPTimeout : TON;	//Calculator reply time out/ Tempo Timeout Reponse calculateur
  sDat : STRUCT	//DAT Structure / Structure DAT
    x8 : BOOL;	//Palette de vidage / Erasing skid
    x9 : BOOL;	//Deverminage hors siptol / Dry run without siptol
    x10 : BOOL;	//Palette de MAP / MAP skid
    x11 : BOOL;	//Palette de chgt elec BR / Skid for tip chg FM
    x12 : BOOL;	//Palette de chgt elec CS / Skid for tip chg BM
    x13 : BOOL;	//Deverminage (avec siptol) / Dry run (with siptol)
    x14 : BOOL;
    x15 : BOOL;
    x0 : BOOL;	//Avec-sans travail (P1, CDCG) / with-without work (FM, BSL)
    x1 : BOOL;	//Avec-sans travail (CDCD) / with-without work (BSR)
    x2 : BOOL;	//Support plein-vide / empty-full support
    x3 : BOOL;
    x4 : BOOL;
    x5 : BOOL;
    x6 : BOOL;
    x7 : BOOL;
  END_STRUCT ;
  xIhmSel : DWORD;	//Auxiliary selection / Auxiliaire selection
  xARsp : BOOL;	//Response authorization auxiliary / Auxiliaire autorisation reponse
  xSelVal : BOOL;	//Validation selection auxiliary / Auxiliaire selection validation
  xSelValDPAO : BOOL;	//Selection validation auxiliary / Auxiliaire validation dp et atop
  ValDPAO : BOOL;	//Def-pro validation auxiliary/Auxiliaire validation def_pro/att_op
END_VAR
VAR_TEMP
  SavAR2 : DINT;	//Pointer on the instance data / Pointeur sur les donnees de l'instance
  Ret : INT;	//Return value of the SFCs/SFBs / Valeur de retour des SFCs/SFBs
  Src : ANY;	//Source data / Donnees sources
  Dst : ANY;	//Destination data / Donnees destination
  Typ : STRUCT	//Type structure / Structure type
    PAD : BYTE;
    x0 : BOOL;
    x1 : BOOL;	//"LTyp" = 1
    x2 : BOOL;	//"LTyp" = 2
    x3 : BOOL;	//"LTyp" = 3
    x4 : BOOL;	//"LTyp" = 4
    x5 : BOOL;
    x6 : BOOL;
    x7 : BOOL;
  END_STRUCT ;
  Args : STRUCT	//Cases structure / Structure arguments
    ECHLen : INT;	//Length of the SIPTOL data area / Longueur de la zone de donnees SIPTOL
    ECHDBNr : INT;	//DB Number of the SIPTOL data / Numero du DB des donnees SIPTOL
    ECHPtr : DINT;	//Pointer on the SIPTOL data / Pointeur sur les dones SIPTOL
    ECHValCalPtr : DINT;	//Pointer on the SIPTOL data (ValCal)/ Pointeur sur les dones SIPTOL (ValCal)
    MAPDBNr : INT;	//MAP table DB number/ Numéro DB table MAP
    MAPPtr : DINT;	//Pointer MAP table / Pointeur table MAP
    MAPExDBNr : INT;	//MAPex table DB number / Numéro DB table Mapex
    MAPExPtr : DINT;	//Pointer Mapex table / Pointeur table Mapex
    ACQDBNr : INT;	//DB Number of the User Data / Numero du DB des Donnes Utilisateur
    ACQPtr : DINT;	//Pointer on the User Data / Pointeur sur les Donnes Utilisateur
    ACQLen : INT;	//Length of the User Data (Bytes) / Longueur des Donnes Utilisateur (Octets)
    CmpLen : INT;	//Comparisson Length (in Byte)
    CmpADBNr : INT;	//DB Number of comparisson table A / Numéro DB table comparaison A
    CmpAPtr : DINT;	//Pointer of comparisson table A / Pointeur table de comparaison A
    CmpBDBNr : INT;	//DB Number of comparisson table B / Numéro DB table comparaison B
    CmpBPtr : DINT;	//Pointer of comparisson table B / Pointeur table de comparaison B
    SUPDBNr : INT;	//Support BD number / Numéro DB support
    SUPPtr : DINT;	//Pointer support / Pointeur support
  END_STRUCT ;
  CFG : STRUCT	//Configuration structure / Structure configuration
    SIPLen : INT;	//SIPTOL Data Length (in Words) / Longueur des donnes SIPTOL (en Mots)
    DivLen : INT;	//Diversity Area Length (in Words) / Longueur de la Zone de Diversite (en Mots)
    Div2Len : INT;	//Second Div Area Len (in Words) / Long de la SecondeZone de Div (en Mots)
    AddrOf_ValCal : INT;	//Addr of "ValCal" in the SIPTOL Table / Adr "ValCal" dans la Table SIPTOL
    AddrOf_NFilm : INT;	//Addr of "Film" in the SIPTOL Table / Adr "Film" dans la Table SIPTOL
    AddrOf_Div : INT;	//Addr of "Div" table in the SIPTOL Table/Adr table "Div" dans la Table SIPTOL
    AddrOf_Div2 : INT;	//Addr of "Div2" table in the SIPTOL Table/Adr table "Div2" dans la Table SIPTOL
    AddrOf_DefPro : INT;	//Addr of "Defprol" in the SIPTOL Table / Adr "Defpro" dans la Table SIPTOL
    AddrOf_AttOpe : INT;	//Addr of "Attop" in the SIPTOL Table / Adr "Attop" dans la Table SIPTOL
    AddrOf_Sup : INT;	//Addr of "Support" in the SIPTOL Table / Adr "Support" dans la Table SIPTOL
    SupLen : INT;	//Lenght support data in siptol table / Longeur donnees support dans Table siptol
  END_STRUCT ;
  sVal : STRUCT	//ValApi - ValCal structure / Structures ValApi - ValCal
    Api : STRUCT	//ValApi
      v8 : BOOL;
      v9 : BOOL;
      v10 : BOOL;
      v11 : BOOL;
      v12 : BOOL;
      v13 : BOOL;
      v14 : BOOL;
      v15 : BOOL;
      v0 : BOOL;	//ValApi = 0
      v1 : BOOL;	//ValApi = 1
      v2 : BOOL;	//ValApi = 2
      v3 : BOOL;	//ValApi = 3
      v4 : BOOL;	//ValApi = 4
      v5 : BOOL;
      v6 : BOOL;
      v7 : BOOL;
    END_STRUCT ;
    Cal : STRUCT	//ValCal
      v8 : BOOL;
      v9 : BOOL;
      v10 : BOOL;
      v11 : BOOL;
      v12 : BOOL;
      v13 : BOOL;
      v14 : BOOL;
      v15 : BOOL;
      v0 : BOOL;	//ValCal = 0
      v1 : BOOL;	//ValCal = 1
      v2 : BOOL;	//ValCal = 2
      v3 : BOOL;	//ValCal = 3
      v4 : BOOL;	//ValCal = 4
      v5 : BOOL;
      v6 : BOOL;
      v7 : BOOL;
    END_STRUCT ;
  END_STRUCT ;
  Err : STRUCT	//Fault structure / Structure erreur
    VAL : BYTE;	//Val
    SIP : BYTE;	//Siptol
    MAP : BYTE;	//Map
    CMP : BYTE;	//Compare
  END_STRUCT ;
  IhmSel : STRUCT	//Selection structure / Structure selection
    FAP : BOOL;	//Fabrication avec piece / Production with part
    DvAT : BOOL;	//Deverminage avec travail / Dry run with work
    DvATG : BOOL;	//Deverminage avec travail Gauche / Left dry run with work
    DvATD : BOOL;	//Deverminage avec travail Droit / Right dry run with work
    x12 : BOOL;
    x13 : BOOL;
    x14 : BOOL;
    x15 : BOOL;
    MAP : BOOL;	//Mode MAP / MAP mode
    Vid : BOOL;	//Mode vidage / Erasing mode
    DevP1 : BOOL;	//Mode devernmiage P1 / FM dry run mode
    DevCDC : BOOL;	//Mode deverminage CDC / BS dry run mode
    CEBR : BOOL;	//Mode chg electode BR / FM tip changement mode
    CECS : BOOL;	//Mode chg electode CS / BM tip changement mode
    CEBRCS : BOOL;	//Mode chg electode BR-CS / FM-BM tip changement mode
    NbPF : INT;	//Nombre piece a faire / Part to do numbers
  END_STRUCT ;
  LCnt : INT;	//Loop Counter / Compteur de boucle
  SIPp : BOOL;	//SIPTOL Proposal / Proposition SIPTOL
  MAPp : BOOL;	//Without SIPTOL Proposal / Proposition en Mode Hors SIPTOL
  CmpR : BOOL;	//Comparisson Requested / Comparaison demandee
  Cmp : BOOL;	//Comparisson / Comparaison
  MCmp : BOOL;	//With Comparisson Mode / Mode avec Comparaison
  CmpNN : BOOL;	//Compared values Not Null
  CmpOk : BOOL;	//OK Comparisson / Comparaison OK
  TypPart : BOOL;	//Part type / Type piece
  TABTyp10 : BOOL;	//Table number 10 / Table numero 10
  MAPNull : BOOL;	//No setting MAP table / Table MAP non parametre
  Fill : BYTE;	//Fill
END_VAR
BEGIN
NETWORK
TITLE =SAUVEGARDE VARIABLE SYSTEM
//*ODIL_ID:1858_1*
TAR2 #SavAR2; //Save AR2
NETWORK
TITLE =TYPE DE LANCEMENT
//LAUNCH TYPE
//*ODIL_ID:1858_2*
L #LTyp; //Value: "LTyp"
T #Diag.IhmLTyp; //HMI Information
L B#16#1;
SLW; //Left Shift 1 of "LTyp" Value
UW W#16#1E; //x1, x2, x3 & x4
L B#16#1; //Error: Invalid "LTyp" Value
SPZ EHEr; //Goto Error Handler (if result is null)
POP;
LAR1 P##Typ;
T LW [AR1,P#0.0]; //Init Structure "Typ"
//------- Launch Point Type
O #Typ.x1; //"LTyp" = 1
O #Typ.x2; //"LTyp" = 2
= #TypPart; //Launch Part
//------- Comparisson
O #Typ.x1; //"LTyp" = 1
O #Typ.x3; //"LTyp" = 3
= #MCmp; //Comparisson Required
NETWORK
TITLE =TYPE DE TABLE D'ECHANGE SIPTOL
//DATA EXCHANGE TYPE
//*ODIL_ID:1858_3*
/////////////////////////////////////////////////////////////////////
// Common Initializations
/////////////////////////////////////////////////////////////////////
L B#16#0;
T #CFG.Div2Len;
T #CFG.AddrOf_Div2;
CLR;
= #TABTyp10;
///////////////////////////////////////////////////////////////////////
// Initializations
///////////////////////////////////////////////////////////////////////
L #TabTyp;
T #Diag.IhmTABTyp; //HMI Information
SPL TE;
SPA TE; //Type 0 (Unsupported)
SPA T1; //Type 1
SPA T2; //Type 2
SPA T3; //Type 3
SPA TE; //Type 4 (Unsupported)
SPA TE; //Type 5 (Unsupported)
SPA TE; //Type 6 (Unsupported)
SPA T7; //Type 7
SPA TE; //Type 8 (Unsupported)
SPA TE; //Type 9 (Unsupported)
SPA T10; //Type 10
TE: L B#16#2; //Error: Invalid "TABTyp" Value
SPA EHEr;
///////////////////////////////////////////////////////////////////////
// Type 1
///////////////////////////////////////////////////////////////////////
T1: L 117;
T #CFG.SIPLen;
//-------
L 29;
T #CFG.DivLen;
//-------
L 115; //Word Address of Valcal
T #CFG.AddrOf_ValCal;
//-------
L 87;
T #CFG.AddrOf_DefPro;
//-------
L 97;
T #CFG.AddrOf_AttOpe;
//-------
SPA TA; //Common Initializations
///////////////////////////////////////////////////////////////////////
// Type 2
///////////////////////////////////////////////////////////////////////
T2: L 88;
T #CFG.SIPLen;
//-------
L 26;
T #CFG.DivLen;
//-------
L 86; //Word Address of Valcal
T #CFG.AddrOf_ValCal;
//-------
L B#16#0;
T #CFG.AddrOf_DefPro;
T #CFG.AddrOf_AttOpe;
//-------
SPA TA; //Common Initializations
///////////////////////////////////////////////////////////////////////
// Type 3
///////////////////////////////////////////////////////////////////////
T3: L 120;
T #CFG.SIPLen;
//-------
L 28;
T #CFG.DivLen;
//-------
L 63;
T #CFG.AddrOf_AttOpe;
//-------
SPA TB; //Common Initializations
///////////////////////////////////////////////////////////////////////
// Type 7
///////////////////////////////////////////////////////////////////////
T7: L 120;
T #CFG.SIPLen;
//-------
L 38;
T #CFG.DivLen;
//-------
L 10;
T #CFG.Div2Len;
//-------
L 63;
T #CFG.AddrOf_Div2;
//-------
L B#16#0;
T #CFG.AddrOf_AttOpe;
//-------
SPA TB; //Common Initializations
///////////////////////////////////////////////////////////////////////
// Type 10
///////////////////////////////////////////////////////////////////////
T10: L 240;
T #CFG.SIPLen;
//-------
L 28;
T #CFG.DivLen;
//-------
L 63;
T #CFG.AddrOf_AttOpe;
//-------
SET;
= #TABTyp10;
SPA TB; //Common Initializations
///////////////////////////////////////////////////////////////////////
// Common Data of Type 1 & 2
///////////////////////////////////////////////////////////////////////
TA: L 58;
T #CFG.AddrOf_Div; //Word Address of the diversity area
//-------
L 8;
T #CFG.AddrOf_Sup;
//-------
L 4;
T #CFG.SupLen;
//-------
L 17;
T #CFG.AddrOf_NFilm;
//-------
SPA Te;
///////////////////////////////////////////////////////////////////////
// Common Data of Type 3, 7 & 10
///////////////////////////////////////////////////////////////////////
TB: L 118; //Word Address of Valcal
T #CFG.AddrOf_ValCal;
//-------
L 25;
T #CFG.AddrOf_Div; //Word Address of the diversity area
//-------
L 53;
T #CFG.AddrOf_DefPro;
//-------
L 10;
T #CFG.AddrOf_Sup;
//-------
L 3;
T #CFG.SupLen;
//-------
L 17;
T #CFG.AddrOf_NFilm;
Te: NOP 0;
NETWORK
TITLE =ANALYSE TABLE D'ECHANGE
//ANALYSIS EXCHANGE TABLE
//*ODIL_ID:1858_4*
//----------------------------------
//    Analyze TAB_ECH Descriptor
//----------------------------------
LAR1 AR2; //Multi Instance
L P##Tab_ech;
+AR1;
//------- Data Type
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, 3: CHAR, 4: WORD, 5: INT, 6: DWORD, 7: DINT ...)
L B#16#2;
<>D;
L B#16#3; //Error: Unexpected Data Type (TAB_ECH)
SPB EHEr; //Goto Error Handler
//------- Data Area
L DIB [AR1,P#6.0]; //ANY: Data Area
XOW W#16#84; //DB
L B#16#4; //Error: Unexpected Data Area (TAB_ECH)
SPN EHEr; //Goto Error Handler
//------- Repetition Factor
L DIW [AR1,P#2.0]; //ANY: Repetition Factor
SRW 1; //Divide by 2
L #CFG.SIPLen;
<D;
L B#16#5; //Error: Area Too Small (TAB_ECH)
SPB EHEr;
//------- Data Block Number
L DIW [AR1,P#4.0]; //ANY: Data Block Number
T #Args.ECHDBNr;
//------- Area - Offset
L DID [AR1,P#6.0]; //ANY: Area - Offset
T #Args.ECHPtr;
NETWORK
TITLE =ANALYSE TABLE D'ACQUISITION
//ANALYSIS TABLE OF ACQUISITION
//*ODIL_ID:1858_5*
//----------------------------------
//    Analyze TAB_ACQ Descriptor
//----------------------------------
LAR1 AR2; //Multi Instance
L P##Tab_acq;
+AR1;
//------- Data Type
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, 3: CHAR, 4: WORD, 5: INT, 6: DWORD, 7: DINT ...)
L B#16#2;
<>D;
L B#16#6; //Error: Unexpected Data Type (TAB_ACQ)
SPB EHEr; //Goto Error Handler
//------- Data Area
L DIB [AR1,P#6.0]; //ANY: Data Area
XOW W#16#84; //DB
L B#16#7; //Error: Unexpected Data Area (TAB_ACQ)
SPN EHEr; //Goto Error Handler
//------- Repetition Factor
L DIW [AR1,P#2.0]; //ANY: Repetition Factor
T #Args.ACQLen;
SRW 1; //Divide by 2
L #CFG.SIPLen;
<D;
L B#16#8; //Error: Area Too Small (TAB_ACQ)
SPB EHEr; //Goto Error Handler
//------- Data Block Number
L DIW [AR1,P#4.0]; //ANY: Data Block Number
T #Args.ACQDBNr;
//------- Area - Offset
L DID [AR1,P#6.0]; //ANY: Area - Offset
T #Args.ACQPtr;
NETWORK
TITLE =GESTION VALCAL / VALAPI / ETAT DIAL
//MANAGEMENT VALCAL / VALAPI / ETAT DIAL
//*ODIL_ID:1858_6*
//
//----------------------------
//    Gestion VALAPI
//----------------------------
AUF DB [#Args.ECHDBNr];
LAR1 #Args.ECHPtr;
L DBW [AR1,P#0.0]; //ValApi
L B#16#1;
SLW;
LAR1 P##sVal;
T LW [AR1,P#0.0]; //Init Structure SVal.Api
UW W#16#7; //ValApi equal 0, 1 or 2
O ==0;
//----------------------------
// Gestion VALCAL
//----------------------------
LAR1 #Args.ECHPtr;
L #CFG.AddrOf_ValCal;
SLW 4; //Make bit Ptr
+AR1;
TAR1 #Args.ECHValCalPtr;
L DBW [AR1,P#0.0]; //ValCal
L B#16#1;
SLW;
LAR1 P##sVal;
T LW [AR1,P#2.0]; //Init Structure SVal.Cal
UW W#16#7; //ValCal equal 0, 1 or 2
O ==0;
O;
//-------------------------
// Gestion Etat Dialogue
//-------------------------
UN #sVal.Cal.v0;
UN #sVal.Api.v0;
SPBN Vv0;
//------- Etat Dial & Error Code
L W#16#A11; //EtatDial = 10 / Error = 0x11 (Unexpected "ValCal" / "ValApi")
//-------
Vv0: U #sVal.Cal.v0;
U #sVal.Api.v0;
SPBN VSp;
//------- Etat Dial & Error Code
L W#16#B12; //EtatDial = 11 / Error = 0x12 (Null "ValCal" & "ValApi")
//------- SIPTOL -> Data Available
VSp: U #sVal.Api.v0;
U #sVal.Cal.v1;
SPBN VSf;
//------- Etat Dial & Error Code
L W#16#600; //EtatDial = 6 / Error = 0 (Siptol proposal)
//------- Siptol Proposal
UN #Diag.IhmMHSSel; //Without Siptol selected
UN #Diag.IhmMAP;
= #SIPp; //Siptol Proposal
//------- SIPTOL -> No More Data Available
VSf: U #sVal.Api.v0;
U #sVal.Cal.v2;
SPBN VwSp; //-> Wait SIPTOL Proposal
//------- ValApi
LAR1 #Args.ECHPtr;
L B#16#2;
T DBW [AR1,P#0.0]; //ValApi
//------- ValCal
LAR1 #Args.ECHValCalPtr;
L B#16#0;
T DBW [AR1,P#0.0]; //ValCal
//------- Etat Dial & Error Code
L W#16#700; //EtatDial = 7 / Error = 0 (SIPTOL waiting request)
VwSp: U #sVal.Api.v2;
U #sVal.Cal.v0;
= #Atcal;
SPBN VwSr; //-> Wait SIPTOL Response
//------- Etat Dial & Error Code
L W#16#200; //EtatDial = 2 / Error = 0 (Waiting of PLC)
//------- Timeout Monitoring
VwSr: U #sVal.Api.v1;
U #sVal.Cal.v0;
= #SIPTimeout.IN;
SPBN Ve;
//------- Etat Dial & Error Code
L W#16#100; //EtatDial = 1 / Error = 0 (PLC response)
Ve: T #Err.VAL;
SRW 8;
T #Diag.IhmEtatDial;
//------- Timeout Timer
CALL #SIPTimeout (
PT := #ValTc,
Q := #Drcal);
NETWORK
TITLE =SELECTION MODE HORS SIPTOL
//OFFLINE SIPTOL SELECTION
//*ODIL_ID:1858_7*
//------- Allow "Without SIPTOL" Mode
U #Cmap;
= #Diag.IhmAutMHS;
//------- Validation
U #Pilot.IhmSelValDPAO;
FP #xSelValDPAO;
O #ValDPAO;
U #Diag.IhmMHSSel;
O #TypPart;
= #ValDPAO;
//------- Allow "Validation"
L #Pilot.IhmSelNbPF;
L B#16#0;
>I;
U #Pilot.IhmSelDiv;
UN #Map;
U #ValDPAO;
= #Diag.IhmAutVal;
//------- HMI Message
U #Diag.IhmMHSSel;
UN #ValDPAO;
= #Diag.IhmMsgAVDPAO;
//------- HMI Message
U #Diag.IhmMHSSel;
UN #Pilot.IhmSelDiv;
= #Diag.IhmMsgAVD;
//------- Clear "IhmSel" Structure
LAR1 P##IhmSel;
L B#16#0;
T LD [AR1,P#0.0]; //"IhmSel" Structure
//------- With or Without SIPTOL
L #Pilot.IhmSelMHS;
L B#16#0;
<>D;
= #Diag.IhmMHSSel;
SPBN I;
//------- Counter
L #Pilot.IhmSelNbPF;
T #IhmSel.NbPF;
//------- With or Without Part
L #Pilot.IhmSelFAP;
L B#16#0;
==D;
= #IhmSel.FAP;
//------- Type
L #Pilot.IhmSelTyp;
L B#16#1;
SLW;
T LB [AR1,P#1.0];
//------- Dry Run With or Without Work
L #Pilot.IhmSelDvAT;
L B#16#0;
==D;
= #IhmSel.DvAT;
//------- Left Body Side Dry Run With or Without Work
L #Pilot.IhmSelDvATG;
L B#16#0;
==D;
= #IhmSel.DvATG;
//------- Right Body Side Dry Run With or Without Work
L #Pilot.IhmSelDvATD;
L B#16#0;
==D;
= #IhmSel.DvATD;
//------- "MAP" Validation
I: U #Pilot.IhmSelVal;
FP #xSelVal;
U #Diag.IhmAutVal;
SPBN V;
L #Pilot.IhmSelNbPF;
T #Diag.IhmSelNbPR;
//-------
V: L #Diag.IhmSelNbPR;
L B#16#0;
>I;
U #Diag.IhmMHSSel;
//------- Selection Change Detection
L #xIhmSel;
L LD [AR1,P#0.0]; //IhmSel Structure
T #xIhmSel;
XOD;
U ==0;
U #Pilot.IhmSelDiv;
= #MAPp;
SPB S;
L B#16#0;
T #Diag.IhmSelNbPR;
NETWORK
TITLE =TRANSFERT DES DONNEES AVEC SIPTOL
//TRANSFER OF DATA SIPTOL
//*ODIL_ID:1858_8*
S: ON #SIPp;
O #Ipof;
L B#16#0;
SPB SEh;
//------- Src - Init Data Descriptor (TAB_ECH - Complete Transfer)
//----------------------------------------------------------------
LAR1 P##Src;
L #CFG.SIPLen;
SLW 1; //Multiply by 2
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.ECHDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #Args.ECHPtr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Dst - Init Data Descriptor (TAB_ACQ)
//--------------------------------------------
LAR1 P##Dst;
L #CFG.SIPLen;
SLW 1; //Multiply by 2
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.ACQDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #Args.ACQPtr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Copy
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
L B#16#51; //Error: Copy from "TAB_ECH" to "TAB_ACQ"
SPBIN SEh; //Goto Error Handler
S #Ipof;
//------- Initialise DAT
AUF DB [#Args.ACQDBNr];
UN #TABTyp10;
SPB ST10;
LAR1 #Args.ACQPtr;
L 120; //Address Of "Vehicle Type"
SLW 4; //Make Bit Ptr
+AR1;
UN DBX [AR1,P#0.7]; //x15: Without Part
ST10: NOT;
LAR1 #Args.ACQPtr;
L #CFG.AddrOf_Div;
SLW 4; //Make Bit Ptr
+AR1;
O DBX [AR1,P#2.7]; //"Modele".x15: Without Part
LAR1 AR2; //Multi Instance
L P##sDat;
+AR1;
L B#16#0; //Clear DAT Structure
T DIW [AR1,P#0.0];
= #sDat.x13;
L B#16#0;
SEh: T #Err.SIP;
NETWORK
TITLE =TRANSFERT DES DONNEES HORS SIPTOL
//DATA TRANSFER OUT SIPTOL
//Copy MAP & MAPEx, Init NFilm & NOF, Copy DefPro & AttOpe
//*ODIL_ID:1858_9*
//
ON #MAPp;
O #Map;
L B#16#0;
SPB MEh;
//------- Analyze TAB_MAP Descriptor
//----------------------------------
LAR1 AR2; //Multi Instance
L P##Tab_map;
+AR1;
//------- Data Type
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, 3: CHAR, 4: WORD, 5: INT, 6: DWORD, 7: DINT ...)
XOW W#16#0;
U ==0;
U #TABTyp10;
= #MAPNull; //Not Parameterized
SPB MX;
L B#16#2;
<>D;
L B#16#21; //Error: Unexpected Data Type (TAB_MAP)
SPB MEh; //Goto Error Handler
//------- Data Area
L DIB [AR1,P#6.0]; //ANY: Data Area
XOW W#16#84; //DB
L B#16#22; //Error: Unexpected Data Area (TAB_MAP)
SPN MEh; //Goto Error Handler
//------- Repetition Factor
L DIW [AR1,P#2.0]; //ANY: Repetition Factor
SRW 1; //Divide by 2
L #CFG.DivLen;
<D;
L B#16#23; //Error: Area Too Small (TAB_MAP)
SPB MEh; //Goto Error Handler
//------- Data Block Number
L DIW [AR1,P#4.0]; //ANY: Data Block Number
T #Args.MAPDBNr;
//------- Area - Offset
L DID [AR1,P#6.0]; //ANY: Area - Offset
T #Args.MAPPtr;
//------- Src - Init Data Descriptor (TAB_MAP - Partial Transfer I)
//-----------------------------------------------------------------
LAR1 P##Src;
L #CFG.DivLen;
L #CFG.Div2Len;
-D;
SLW 1; //Multiply by 2
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.MAPDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #Args.MAPPtr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Dst - Init Data Descriptor (TAB_ACQ)
//--------------------------------------------
LAR1 P##Dst;
L #CFG.DivLen;
L #CFG.Div2Len;
-D;
SLW 1; //Multiply by 2
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.ACQDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
LAR2 #Args.ACQPtr;
L #CFG.AddrOf_Div;
SLD 4; //Make Bit Ptr
+AR2;
TAR2;
T LD [AR1,P#6.0]; //ANY: Area - Offset
LAR2 #SavAR2; //Restore AR2
//------- Copy
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
L B#16#52; //Error: Copy from "TAB_MAP" to "TAB_ACQ" (First Part)
SPBIN MEh; //Goto Error Handler
L #CFG.Div2Len;
XOW W#16#0;
SPZ Mli; //Control "TAB_MAP" Values
//------- Src - Init Data Descriptor (TAB_MAP - Partial Transfer II)
//------------------------------------------------------------------
LAR1 P##Src;
L #CFG.Div2Len;
SLW 1; //Multiply by 2
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
// L #Args.MAPDBNr
// T LW [AR1,P#4.0] //ANY: Data Block Number
//-------
LAR2 #Args.MAPPtr;
L #CFG.DivLen;
L #CFG.Div2Len;
-D;
SLD 4; //Make Bit Ptr
+AR2;
TAR2;
T LD [AR1,P#6.0]; //ANY: Area - Offset
LAR2 #SavAR2;
//------- Dst - Init Data Descriptor (TAB_ACQ)
//--------------------------------------------
LAR1 P##Dst;
L #CFG.Div2Len;
SLW 1; //Multiply by 2
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
// L #Args.ACQDBNr
// T LW [AR1,P#4.0] //ANY: Data Block Number
//-------
LAR2 #Args.ACQPtr;
L #CFG.AddrOf_Div2;
SLD 4; //Make Bit Ptr
+AR2;
TAR2;
T LD [AR1,P#6.0]; //ANY: Area - Offset
LAR2 #SavAR2; //Restore AR2
//------- Copy
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
L B#16#53; //Error: Copy from "TAB_MAP" to "TAB_ACQ" (Second Part)
SPBIN MEh; //Goto Error Handler
//------- Control "TAB_MAP" Values
Mli: AUF DB [#Args.MAPDBNr];
LAR1 #Args.MAPPtr;
L #CFG.DivLen;
Ml: T #LCnt;
L DBW [AR1,P#0.0];
XOW W#16#0;
SPN Mle;
+AR1 P#2.0;
L #LCnt;
LOOP Ml;
Mle: XOW W#16#0;
L B#16#31; //Error: Invalid "TAB_MAP" Values
SPZ MEh; //Goto Error Handler
MX: UN #TABTyp10;
SPB MF; //NFilm - NOF
//------- Analyze TAB_MAPEx Descriptor
//------------------------------------
LAR1 AR2; //Multi Instance
L P##Tab_mapex;
+AR1;
//------- Data Type
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, 3: CHAR, 4: WORD, 5: INT, 6: DWORD, 7: DINT ...)
XOW W#16#0;
U ==0;
U #MAPNull;
L B#16#27; //Error: Null "TAB_MAP" & "TAB_MAPEx"
SPB MEh; //Goto Error Handler
POP; //L DIB [AR1,P#1.0]
L B#16#2;
<>D;
L B#16#24; //Error: Unexpected Data Type (TAB_MAPEx)
SPB MEh; //Goto Error Handler
//------- Data Area
L DIB [AR1,P#6.0]; //ANY: Data Area
XOW W#16#84; //DB
L B#16#25; //Error: Unexpected Data Area (TAB_MAPEx)
SPN MEh; //Goto Error Handler
//------- Repetition Factor
L DIW [AR1,P#2.0]; //ANY: Repetition Factor
SRW 1; //Divide by 2
L 50;
<D;
L B#16#26; //Error: Area Too Small (TAB_MAPEx)
SPB MEh; //Goto Error Handler
//------- Data Block Number
L DIW [AR1,P#4.0]; //ANY: Data Block Number
T #Args.MAPExDBNr;
//------- Area - Offset
L DID [AR1,P#6.0]; //ANY: Area - Offset
T #Args.MAPExPtr;
//------- Src - Init Data Descriptor (TAB_MAPEx)
//----------------------------------------------
LAR1 P##Src;
L DW#16#10020064; //100 Bytes
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.MAPExDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #Args.MAPExPtr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Dst - Init Data Descriptor (TAB_ACQ)
//--------------------------------------------
LAR1 P##Dst;
L DW#16#10020064; //100 Bytes
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.ACQDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
LAR2 #Args.ACQPtr;
L 121; //Address of the Extension Area
SLD 4; //Make Bit Ptr
+AR2;
TAR2;
T LD [AR1,P#6.0]; //ANY: Area - Offset
LAR2 #SavAR2; //Restore AR2
//------- Copy
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
L B#16#54; //Error: Copy from "TAB_MAPEx" to "TAB_ACQ"
SPBIN MEh; //Goto Error Handler
//------- Control "TAB_MAPEx" Values
AUF DB [#Args.MAPExDBNr];
LAR1 #Args.MAPExPtr;
L 50;
Mxl: T #LCnt;
L DBW [AR1,P#0.0];
XOW W#16#0;
SPN Mxle;
+AR1 P#2.0;
L #LCnt;
LOOP Mxl;
Mxle: XOW W#16#0;
L B#16#32; //Error: Invalid "TAB_MAPEx" Values
SPZ MEh; //Goto Error Handler
//------- NFilm - NOF
//-------------------
MF: LAR1 #Args.ACQPtr;
L #CFG.AddrOf_NFilm;
SLD 4; //Make Bit Ptr
+AR1;
AUF DB [#Args.ACQDBNr];
//-------
L 99;
T DBW [AR1,P#0.0]; //NFilm
//-------
L 9999;
T DBW [AR1,P#2.0]; //NOF
//------- Copy DefPro & AttOpe
//----------------------------
L #CFG.AddrOf_DefPro;
L B#16#0;
==D;
SPB MDPe;
//------- Dst - Init Data Descriptor (TAB_ACQ)
//--------------------------------------------
LAR1 P##Dst;
L DW#16#10020014; //20 Bytes
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
// L #Args.DATDBNr
// T LW [AR1,P#4.0] //ANY: Data Block Number
//-------
LAR2 #Args.ACQPtr;
L #CFG.AddrOf_DefPro;
SLD 4; //Make Bit Ptr
+AR2;
TAR2;
T LD [AR1,P#6.0]; //ANY: Area - Offset
LAR2 #SavAR2; //Restore AR2
//------- Copy
CALL "BLKMOV" (
SRCBLK := #Pilot.IhmSelDP,
RET_VAL := #Ret,
DSTBLK := #Dst);
L B#16#55; //Error: Copy from "Pilot.IhmSelDP" to "TAB_ACQ"
SPBIN MEh; //Goto Error Handler
//-------
MDPe: L #CFG.AddrOf_AttOpe;
XOW W#16#0;
SPZ MAOe;
//------- Dst - Init Data Descriptor (TAB_ACQ)
//--------------------------------------------
LAR1 P##Dst;
L DW#16#10020014; //20 Bytes
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
// L #Args.DATDBNr
// T LW [AR1,P#4.0] //ANY: Data Block Number
//-------
LAR2 #Args.ACQPtr;
L #CFG.AddrOf_AttOpe;
SLD 4; //Make Bit Ptr
+AR2;
TAR2;
T LD [AR1,P#6.0]; //ANY: Area - Offset
LAR2 #SavAR2; //Restore AR2
//------- Copy
CALL "BLKMOV" (
SRCBLK := #Pilot.IhmSelAO,
RET_VAL := #Ret,
DSTBLK := #Dst);
L B#16#56; //Error: Copy from "Pilot.IhmSelAO" to "TAB_ACQ"
SPBIN MEh; //Goto Error Handler
MAOe: S #Map;
//------- Initialise DAT
LAR1 AR2; //Multi Instance
L P##sDat;
+AR1;
L B#16#0; //Clear DAT Structure
T DIW [AR1,P#0.0];
//-------
U #TypPart;
SPB MP;
//-------
U #IhmSel.DevP1;
UN #IhmSel.DvAT;
O;
U #IhmSel.DevCDC;
UN #IhmSel.DvATG;
= #sDat.x0;
//-------
U #IhmSel.DevCDC;
UN #IhmSel.DvATD;
= #sDat.x1;
//-------
U #IhmSel.Vid;
= #sDat.x8;
//-------
U #IhmSel.MAP;
= #sDat.x10;
//-------
O #IhmSel.CEBR;
O #IhmSel.CEBRCS;
= #sDat.x11;
//-------
O #IhmSel.CECS;
O #IhmSel.CEBRCS;
= #sDat.x12;
MP: O #IhmSel.DevP1;
O #IhmSel.DevCDC;
UN #TypPart;
O;
UN #IhmSel.FAP;
U #TypPart;
= #sDat.x9;
//------- Init MAP fault
L B#16#0;
MEh: T #Err.MAP;
NETWORK
TITLE =INFORMATION IHMP
//HMI INFORMATION
//*ODIL_ID:1858_10*
//------- Without Part Production
O #sDat.x9;
O #sDat.x13;
= #Fsp;
= #Diag.IhmFSP; //HMI Information
//------- Production with "SIPTOL" Data
U #Ipof;
= #Diag.IhmIPOF; //HMI Information
//------- Production with "HMI" Data
U #Map;
= #Diag.IhmMAP; //HMI Information
NETWORK
TITLE =TRANSFERT xDAT -> DAT
//Copy xDat to Dat
//*ODIL_ID:1858_11*
//-----------------------------
//------- Analyze "DAT" Pointer
//-----------------------------
LAR1 AR2; //Multi Instance
L P##Dat;
+AR1;
L DIW [AR1,P#0.0]; //POINTER: Data Block Number
L DID [AR1,P#2.0]; //POINTER: Area - Offset
//------- Dst - Init Data Descriptor (DAT)
//-----------------------------------------------------------------
LAR1 P##Dst;
//-------
T LD [AR1,P#6.0]; //ANY: Area - Offset (DAT)
//-------
POP;
T LW [AR1,P#4.0]; //ANY: Data Block Number (DAT)
//-------
L DW#16#10020002; //2 Bytes
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//------- Copy
CALL "BLKMOV" (
SRCBLK := #sDat,
RET_VAL := #Ret,
DSTBLK := #Dst);
NETWORK
TITLE =GESTION COMPARAISON
//COMPARISON OF MANAGEMENT
//*ODIL_ID:1858_12*
//
//------- Comparisson Required
O #Ipof;
O #Map;
U #Ac;
= #CmpR;
//------- Comparisson Running
U #CmpR;
UN #Mdec;
= #Cmp;
ON #Cmp;
ON #MCmp;
O #Fsp;
L B#16#0;
SPB CEh;
//------- Analyze Cmp Parameter
LAR1 AR2; //Multi Instance
L P##Ipf;
+AR1;
//------- Data Type
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, 3: CHAR, 4: WORD, 5: INT, 6: DWORD, 7: DINT ...)
L B#16#1;
SLW;
UW W#16#F4; //Data Type = 2, 4, 5, 6 or 7 ?
L B#16#41; //Error: Unexpected Data Type ("IPF")
SPZ CEh; //Goto Error Handler
//------- Data Length
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, 3: CHAR, 4: WORD, 5: INT, 6: DWORD, 7: DINT ...)
SRW 1; //Divide by 2
+ -1;
L B#16#1;
SLW; //Length of the Data Type (in Bytes)
L DIW [AR1,P#2.0]; //ANY: Repetition Factor
*D;
SRW 1; //Divide by 2
L B#16#43; //Error: Odd Data length ("IPF")
SPP CEh; //Goto Error Handler
POP;
T #Args.CmpLen; //Data length (in Word)
//------- Data Area
L DIB [AR1,P#6.0]; //ANY: Data Area
XOW W#16#84; //DB
L B#16#42; //Error: Unexpected Data Area ("IPF")
SPN CEh; //Goto Error Handler
L DID [AR1,P#6.0]; //ANY: Area - Offset
T #Args.CmpAPtr;
//------- Data Block Number
L DIW [AR1,P#4.0]; //ANY: Data Block Number
T #Args.CmpADBNr;
//------- Analyze Cmp Parameter
LAR1 AR2; //Multi Instance
L P##Xipp;
+AR1;
//------- Data Type
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, 3: CHAR, 4: WORD, 5: INT, 6: DWORD, 7: DINT ...)
L B#16#1;
SLW;
UW W#16#F4; //Data Type = 2, 4, 5, 6 or 7 ?
L B#16#44; //Error: Unexpected Data Type ("XIPP")
SPZ CEh; //Goto Error Handler
//------- Data Length
L DIB [AR1,P#1.0]; //ANY: Data Type (... 2: BYTE, 3: CHAR, 4: WORD, 5: INT, 6: DWORD, 7: DINT ...)
SRW 1; //Divide by 2
+ -1;
L B#16#1;
SLW; //Length of the Data Type (in Bytes)
L DIW [AR1,P#2.0]; //ANY: Repetition Factor
*D;
SRW 1; //Divide by 2
L B#16#46; //Error: Odd Data length ("XIPP")
SPP CEh; //Goto Error Handler
POP;
L #Args.CmpLen; //Data length (in Word)
<>D;
L B#16#47; //Error: Different Length ("IPF" & "XIPP")
SPB CEh; //Goto Error Handler
//------- Data Area
L DIB [AR1,P#6.0]; //ANY: Data Area
XOW W#16#84; //DB
L B#16#46; //Error: Unexpected Data Area ("XIPP")
SPN CEh; //Goto Error Handler
L DID [AR1,P#6.0]; //ANY: Area - Offset
T #Args.CmpBPtr;
//------- Data Block Number
L DIW [AR1,P#4.0]; //ANY: Data Block Number
T #Args.CmpBDBNr;
//------- Comparisson Loop
CLR;
= #CmpNN;
= #CmpOk;
L #Args.CmpLen;
CL: T #LCnt;
AUF DB [#Args.CmpADBNr];
LAR1 #Args.CmpAPtr;
L DBW [AR1,P#0.0];
XOW W#16#0; //Null Value ?
U <>0;
S #CmpNN;
+AR1 P#2.0;
TAR1 #Args.CmpAPtr;
AUF DB [#Args.CmpBDBNr];
LAR1 #Args.CmpBPtr;
L DBW [AR1,P#0.0];
+AR1 P#2.0;
TAR1 #Args.CmpBPtr;
XOW;
SPN CE;
L #LCnt;
LOOP CL;
//------- A equal B
U #CmpNN;
= #CmpOk;
CE: L B#16#0;
CEh: T #Err.CMP;
XOW W#16#0;
//------- PFB
U ==0; //No Error
U #CmpOk;
ON #MCmp;
O #Fsp;
U #Cmp;
O;
U #Pfb;
U #CmpR;
= #Pfb; //Comparisson Ok
= #Diag.IhmPFB; //HMI Information
S #Mdec;
//------- PFM
U ==0; //No Error
UN #CmpOk;
U #MCmp;
UN #Fsp;
U #Cmp;
= #Pfm; //Comparisson NOk
= #Diag.IhmPFM; //HMI Information
NETWORK
TITLE =TRANSFERT N°/FAMILLE SUPPORT
//Copy "SUP" Informations
//*ODIL_ID:1858_13*
U #Mdec;
UN #Ifc;
SPBN Ne;
//-----------------------------
//------- Analyze "SUP" Pointer
//-----------------------------
LAR1 AR2; //Multi Instance
L P##Sup;
+AR1;
L DIB [AR1,P#2.0]; //POINTER: Area
XOW W#16#0; //Null
O ==0;
XOW W#16#84; //DB
ON ==0;
SPB Ne;
L DIW [AR1,P#0.0]; //POINTER: Data Block Number
T #Args.SUPDBNr;
L DID [AR1,P#2.0];
T #Args.SUPPtr;
//------- Src - Init Data Descriptor (SUP)
//-----------------------------------------------------------------
LAR1 P##Src;
L #CFG.SupLen;
SLW 1; //Multiply by 2
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.SUPDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #Args.SUPPtr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Dst - Init Data Descriptor (TAB_ECH)
//--------------------------------------------
LAR1 P##Dst;
L #CFG.SupLen;
SLW 1; //Multiply by 2
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.ECHDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
LAR2 #Args.ECHPtr;
L #CFG.AddrOf_Sup;
SLD 4; //Make Bit Ptr
+AR2;
TAR2;
T LD [AR1,P#6.0]; //ANY: Area - Offset
LAR2 #SavAR2; //Restore AR2
//------- Copy
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
//------- Dst - Init Data Descriptor (TAB_ACQ)
//--------------------------------------------
LAR1 P##Dst;
// L #CFG.SupLen
// SLW 1 //Multiply by 2
// OD DW#16#10020000
// T LD [AR1,P#0.0] //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.ACQDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
LAR2 #Args.ACQPtr;
L #CFG.AddrOf_Sup;
SLD 4; //Make Bit Ptr
+AR2;
TAR2;
T LD [AR1,P#6.0]; //ANY: Area - Offset
LAR2 #SavAR2; //Restore AR2
//------- Copy
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
Ne: U #Mdec;
= #Ifc;
= #Diag.IhmIFC; //HMI Information
NETWORK
TITLE =REPONSE AUTOMATE
//PLC RESPONSE
//*ODIL_ID:1858_14*
U #Ar; //Demande reponse automate
U #Mdec;
U #Ipof;
SPBN RZ;
//------- Response to SIPTOL
AUF DB [#Args.ECHDBNr];
//------- ValApi
LAR1 #Args.ECHPtr;
L B#16#1;
T DBW [AR1,P#0.0]; //ValApi
//------- Etat Flux
L B#16#1;
T DBW [AR1,P#2.0]; //Etat Flux
//------- ValCal
LAR1 #Args.ECHValCalPtr;
L B#16#0;
T DBW [AR1,P#0.0]; //ValCal
NETWORK
TITLE =MISE A ZERO DES DONNEES
//DATA CLEAR
//*ODIL_ID:1858_15*
//------- Response Request
RZ: U #Ar; //Demande reponse automate
U #Mdec;
O;
U #SIPTimeout.IN; //Basculement manuelle des vals
U #Ipof;
O;
U #Diag.IhmMHSSel; //Mode hors siptol selectionne
UN #MAPp;
O;
UN #Diag.IhmMHSSel; //Mode avec siptol selectionne
UN #Ipof;
O #Pilot.IhmInit; //Demande init externe
O;
U #sVal.Api.v2; //Attente proposition siptol
UN #Diag.IhmMHSSel;
SPBN EH;
//------- Clear "MDEC"
R #Mdec;
//------- Clear "DAT"
LAR1 AR2; //Multi Instance
L P##sDat;
+AR1;
L B#16#0; //Clear DAT Structure
T DIW [AR1,P#0.0];
//------- Clear "TAB_ACQ"
LAR1 P##Dst;
L #Args.ACQLen;
OD DW#16#10020000;
T LD [AR1,P#0.0]; //ANY: 16#1002xxxx: DataType (2 -> Byte), Repetition Factor
//-------
L #Args.ACQDBNr;
T LW [AR1,P#4.0]; //ANY: Data Block Number
//-------
L #Args.ACQPtr;
T LD [AR1,P#6.0]; //ANY: Area - Offset
//------- Fill
L B#16#0;
T #Fill;
CALL "FILL" (
BVAL := #Fill,
RET_VAL := #Ret,
BLK := #Dst);
//------- Clear "MAPOF"
UN #Map;
SPB ES;
R #Map;
//------- Counter part off SIPTOL
L #Diag.IhmSelNbPR;
L B#16#1;
-D;
SPM ES;
T #Diag.IhmSelNbPR;
//------- Clear "SIPOF"
ES: UN #Ipof;
SPB EH;
R #Ipof;
NETWORK
TITLE =GESTION DES DEFAUTS / ERROR HANDLER
//*ODIL_ID:1858_16*
//
EH: L #Err.VAL;
XOW W#16#0;
SPN EHEr;
//-------
L #Err.SIP;
XOW W#16#0;
SPN EHEr;
//-------
L #Err.MAP;
XOW W#16#0;
SPN EHEr;
//-------
L #Err.CMP;
XOW W#16#0;
SPN EHEr;
SPA EHt; //Clear Diag.COdedef
//-------
EHEr: T #Diag.IhmInfo;
SRW 4;
L B#16#1;
SLW;
EHt: T #Diag.CodeDef;
//------- Def
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_MARIAGE_API"
TITLE =MARIAGE / MATCHING
//****************************************************************************
//*                              BF MARIAGE_API                              *
//*        ASSURE LA GESTION DU MARIAGE DE PIECE VENANT DE 2 FLUX A ET B     *
//*                 MANAGEMENT OF 2 PARTS FROM FLOW A AND FLOW B             *
//****************************************************************************
//(In English further below)
//
//DESCRIPTION:
//************
//En fonction de :
//l'egalite ou non des tables d'identification flux A et flux B
//des entrees SP_FA : sans process flux A
//et SP_FB : sans process flux B
//le FB assure le pilotage des sorties :
//- mariage flux A-flux B
//- sortie flux A
//- sortie flux B
//- defaut mariage flux A-flux B
//
//En Tolerie, ce FB est utilise pour assurer le mariage des pieces
//diversifiees au film
//POUR LA DESCRIPTION DETAILLEE DU FB : VOIR GUIDE GE03.FP.236
//
//MISE EN OEUVRE:
//************
//- Le flux A correspond toujours au  flux principale de l'ilot
//- Le flux B correspond au flux secondaire (piece complementaire a marier) de l
//ilot
//
//- La ou les BF de mariage sont a mettre en oeuvre dans le FB du sous ensemble
//associe au flux A (Flux principale sur l'ilot)
//- La Longueur des 3 Tables  TABLE_FA, TABLE_FB, SV_DTAB doivent etre identiques
//- Ces trois tables doivent etre dans des blocs de donnees ou d'instance
//sinon la sortie DEF du FB passe a 1 et le mot de diagnostic DIAG = 1
//
//-Les tables flux_A, Flux_B et Sv_dtab sont des Struct de 6 mots (maxi) declarees
// au niveau Stat du sous ensemble hebergeant la ou les BF (si mariage a
//plusieurs)
// Les informations de tables flux doivent obligatoirement etres construites
// dans lordre suivant pour garantir lordre daffichage des donnees sous IHMP :
//1er information de la struct = Numero dordre de lOF
//2eme information de la struct = Numero de Famille /phase
//3eme information = 1er mot de diversite utilise sur lilot
//4eme information = 2eme mot de diversite utilise sur lilot
//5eme information = 3eme mot de diversite utilise sur lilot
//6eme information = 4eme mot de diversite utilise sur lilot
//
//
//Le nom symbolique des structures est
//Pour table FluxA et table fluxB = TM_f<NomSE correspondant au flux >
//Pour la table SV_dtab = TM_sv <NomSE FluxA><NomSE FluxB>
//
//
//PRINCIPE DE FONCTIONNEMENT DETAILLE DU MARIAGE:
//***********************************************
//Le mariage des flux A et B est traite par la DFB si les conditions suivantes
//sont reunies :
//- Autorisation Mariage Flux A = 1 (entree DFB Am_fa=1)
//- Autorisation Mariage Flux B = 1 (entree DFB Am_fb=1)
//- Les tables Identification Flux A et B (Table_fa et Table_fb) sont de longueur
//identiques
//- Si aucun mots de la table identification du flux A et du flux B n'est egal a 0
//- Si aucune decision n'a encore ete prise
//8 cas differents peuvent apparaitre suivant l'etat des entrees DFB Sp_fa et
//Sp_fb :
//
//*** Si EGALITE des Tables identification du flux A et du flux B : 4 cas a
//traiter :
//- 1 er cas : sans process flux A (Sp_fa=1) et sans process flux B (Sp_fb=1) :
//=> Decision sortie Flux A
//=> Decision sortie Flux B
//- 2 eme cas : sans process flux A (Sp_fa=1) et avec process flux B (Sp_fb=0) :
//=> Decision sortie Flux A
//=> Decision sortie Flux B
//- 3 eme cas : avec process flux A (Sp_fa=0) et sans process flux B (Sp_fb=1) :
//=> Decision sortie Flux A
//=> Decision sortie Flux B
//- 4 eme cas : avec process flux A (Sp_fa=0) et avec process flux B (Sp_fb=0) :
//=> Decision Mariage Flux A-Flux B
//
//*** Si INEGALITE des Tables identification du flux A et du flux B : 4 cas a
//traiter :
//- 1 er cas : sans process flux A (Sp_fa=1) et sans process flux B (Sp_fb=1) :
//=> Decision sortie Flux A
//- 2 eme cas : sans process flux A (Sp_fa=1) et avec process flux B (Sp_fb=0) :
//=> Decision sortie Flux A
//- 3 eme cas : avec process flux A (Sp_fa=0) et sans process flux B (Sp_fb=1) :
//=> Decision sortie Flux B
//- 4 eme cas : avec process flux A (Sp_fa=0) et avec process flux B (Sp_fb=0) :
//=> Attente Decision Operateur
//   => Appui Bouton Demande de Sortie Flux A (Bds_fa=1) :
//      => Decision sortie Flux A
//   => Appui Bouton Demande de Sortie Flux B (Bds_fb=1) :
//      => Decision sortie Flux B
//
//CODE DE DEFAUT :
//***************
//Valeur de diag.codedef :
//1 = Parametrage incorrect
//      -Les tables ne sont pas de meme longueur
//      -Une au moins des tables n'est pas dans un DB
//      -Le format d'un des parametres n'est pas correct (Word)
//2 =  au moins 1 mot de la table didentification du Flux A est a 0
//4 =  au moins 1 mot de la table didentification du Flux B est a 0
//
//****************************ENGLISH INFORMATION*********************************
//DESCRIPTION:
//************
//-If identification tables from Flow A and B are equal or not,
//-Depending on Input SP_FA = without process flow A
//- and on SP_FB = without process flow B
//the FB give the following outputs:
//- Flow A-B matching
//- Flow A exit
//- Flow B exit
//Flow A-flow B matching fault
//
//In Body Shop, this FB make the sequenced and diversified parts matching
//For detailed FB description : see GE03.FP.236 guide
//
//OPERATING:
//********
//- A Flow is always the main flow on facility
//- B Flow is the complementary part to be match
//- BF_Mariage_API must be integrated in the sub-assembly of the maint flow
//  (A flow)
//- The lenght of the 3 tables TABLE_FA, TABLE_FB, SV_DTAB must be the same
//- These 3 tables must be in DB (Global or Instance).
// If not, the "DEF" output is set for fault, and DIAG Fault code is =1 .
//- The tables Flux_A, Flux_B and SV_dtab use a structure of 6 words (maxi)
//  are defined in the STAT variables in the sub_assembly Function Block who use
//  the BF_Mariage_API
//
//  The Flow tables information must be made in this order to
//  guarantee the IHMP screen informations :
//
// 1st information in the struct = OF Order number
// 2nd information in the struct = Family Number
// 3rd information in the struct = 1st diversity part Word used in facility.
// 4th information in the struct = 2nd diversity part Word used in facility
// 5th information in the struct = 3rd diversity part Word used in facility
// 6th information in the struct = 4th diversity part Word used in facility
//
//The symbolic name of the Struct is :
//For the table Flux_A and Flux_B = TM_f<sub-assembly Name attached to the flow>
//For the table SV_dtab = TM_sv<Sub-assembly Name A flow><Sub-assembly Name B
//flow>
//
//
//DETAILED MATCHING OPERATION :
//******************************
//To match flow A and flow B, FB operates when :
//- Flow A Matching Authorization =1 (Am_fa=1)
//- Flow B Matching Authorization =1 (Am_fb=1)
//- Length of flow A identification table = length flow B identification table
//- No word in flow A or flow B tables is null
//- No decision has been registered for the moment
//
//Depending on Sp_fa and Sp_fb, there are 8 cases:
//***If flow A and flow B Identification tables are EQUAL ("COK"), there are 4
//cases:
//- Case1 : no process in flow A and no process in flow B (Sp_fa=1, Sp_fb=1)
//=> Flow A exit
//=> Flow B exit
//- Case2: no process in flow A and process in flow B (Sp_fa=1, Sp_fb=0)
//=> Flow A exit
//=> Flow B exit
//- Case3: process in flow A and no process in flow B (Sp_fa=0, Sp_fb=1)
//=> Flow A exit
//=> Flow B exit
//- Case4: process in flow A and process in flow B (Sp_fa=0, Sp_fb=0)
//=> Matching Flow A and B
//
//***If flow A and flow B Identification tables are DIFFERENT ("CNK"), there are
//4
//cases:
//- Case1: no process in flow A and no process in flow B (Sp_fa=1, Sp_fb=1)
//=> Flow A exit
//- Case2: no process in flow A and process in flow B (Sp_fa=1, Sp_fb=0)
//=> Flow A exit
//- Case3: process in flow A and no process in flow B (Sp_fa=0, Sp_fb=1)
//=> Flow B exit
//- Case4: process in flow A and process in flow B (Sp_fa=0, Sp_fb=0)
//=> Waiting for operator decision
//     => If button Flow A exit is pushed (Bds_fa=1) then=> Flow A exit
//     => If button Flow B exit is pushed (Bds_fb=1) then=> Flow B exit
//
//FAULT CODE :
//***********
//Diag.codedef values :
//1 = Parameter fault
//      -Flows Tables are not the same size (lenght)
//      -a Flow Table is not in a DB
//      -Type of variable is not correct(Word)
//2 = at least 1 word in the Workflow A identification table is set to 0
//4 = at least 1 word in the Workflow B identification table is set to 0
//
//
//*************************  ODIL_ID *********************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 21
//Dernier ID mis en oeuvre / Last ID implemented : 2003_21
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
NAME : 'MARIAGE'
VERSION : 2.2
VAR_INPUT
  An_fa : BOOL;	//Flow A Matching suspension Author./Autorisation Neutralisation Mariage Flux A
  An_fb : BOOL;	//Flow B Matching suspension Author./Autorisation Neutralisation Mariage Flux B
  Am_fa : BOOL;	//Flow A Matching Authorization/Autorisation Mariage Flux A
  Am_fb : BOOL;	//Flow B Matching Authorization/Autorisation Mariage Flux B
  Hfilm : BOOL;	//Matching without ShopFloorControl Info. / Info Mariage Hors Film
  Bds_fa : BOOL;	//FlowA Part Exit Request Butt (mismatch)/BP Dde Sortie Piece FluxA (discordance)
  Bds_fb : BOOL;	//FlowB Part Exit Request Butt (mismatch)/BP Dde Sortie Piece FluxB (discordance)
  Sp_fa : BOOL;	//Flow A without process condition/Condition Sans Process Flux A
  Sp_fb : BOOL;	//Flow B without process condition/Condition Sans Process Flux B
  Table_fa : ANY;	//Flow A Part Ident. Table (Byte type)/Table Ident. Piece Flux A (Type Byte)
  Table_fb : ANY;	//Flow A Part Ident. Table (Byte type)/Table Ident. Piece Flux B (Type Byte)
  Sv_dtab : ANY;	//Last Match Tab Backup(Byte type)/Sauve. Derniere Table Piece Mariee (Type Byte)
  Pilot : STRUCT	//HMI Input Informations / Informations entres IHM
    ihmbds_fa : BOOL;	//Flow A exit request button/BP demande sortie flux A
    ihmbds_fb : BOOL;	//Flow B exit request button/BP demande sortie flux B
    ihmbv : BOOL;	//Validation button/BP Validation
    ihmbmf99 : BOOL;	//Sequence 99 matching button/BP Mariage au film 99
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Comp_ok : BOOL;	//Flow A and B ID table match OK/ Comparaison Table Identification Flux A et B OK
  Comp_nok : BOOL;	//Flow A and B ID table match Not OK/Comparaison Table Ident. Flux A et B Non OK
  Mar_ab : BOOL;	//Flow A-B matching/Mariage Flux A-B
  Sort_fa : BOOL;	//Flow A part exit/Evacuation Piece Flux A
  Sort_fb : BOOL;	//Flow B part exit/Evacuation Piece Flux B
  Dfma_ab : BOOL;	//Flow A-B mismatch/Defaut Mariage Flux A-B
  Dmaf99 : BOOL;	//Sequence 99 matching request/Demande de mariage au film 99 (Image BP ecran)
  Def : BOOL;	//Fault/Defaut
  Diag : STRUCT	//HMI output Informations / Informations sortie IHM
    Def : BOOL;	//Fault/Defaut
    Ala : BOOL;	//Alarm/Alarme
    NumListe : INT;	//IHMP list number/Numero liste IHMP
    CodeDef : INT;	//Fault code/Code du defaut
    ihmMar_ab : BOOL;	//Flow A-B matching/Mariage Flux A-B
    ihmDfma_ab : BOOL;	//Flow A-B Mismatch/Defaut Mariage Flux A-B
    ihmsort_fa : BOOL;	//Flow A exit/Sortie flux a
    ihmsort_fb : BOOL;	//Flow B exit/Sortie flux b
    ihmcomp_ok : BOOL;	//Matching OK/Comparaison ok
    ihmcomp_nok : BOOL;	//Mismatch/Comparaison nok
    ihmtableA1 : WORD;	//Flow A ID Table Word 1 /1er Mot de la table flux A
    ihmtableA2 : WORD;	//Flow A ID Table Word 2 /2eme mot de la table flux A
    ihmtableA3 : WORD;	//Flow A ID Table Word 3 /3eme Mot de la table flux A
    ihmtableA4 : WORD;	//Flow A ID Table Word 4 /4eme Mot de la table flux A
    ihmtableA5 : WORD;	//Flow A ID Table Word 5 /5eme Mot de la table flux A
    ihmtableA6 : WORD;	//Flow A ID Table Word 6 /6eme Mot de la table flux A
    ihmtableB1 : WORD;	//Flow B ID Table Word 1 /1er Mot de la table flux B
    ihmtableB2 : WORD;	//Flow B ID Table Word 2 /2eme mot de la table flux B
    ihmtableB3 : WORD;	//Flow B ID Table Word 3 /3eme Mot de la table flux B
    ihmtableB4 : WORD;	//Flow B ID Table Word 4 /4eme Mot de la table flux B
    ihmtableB5 : WORD;	//Flow B ID Table Word 5 /5eme Mot de la table flux B
    ihmtableB6 : WORD;	//Flow B ID Table Word 6 /6eme Mot de la table flux B
  END_STRUCT ;
END_VAR
VAR
  xBds_fa : BOOL;	//Edge auxiliary/Auxilliaire de front
  xBds_fb : BOOL;	//Edge auxiliary/Auxilliaire de front
  xPilot_ihmbv : BOOL;	//Edge auxiliary/Auxilliaire de front
END_VAR
VAR_TEMP
  Src : ANY;	//Flow A part ID table mirror/image Table Identification Piece Flux A
  Dst : ANY;	//Last Match Tab Backup mirror/image Sauvegarde Derniere Table Piece Mariee
  Def_Par : BOOL;	//Parameter Fault/Defaut de parametrage
  Def_fa0 : BOOL;	//A_Flow Fault at zero / Defaut Flux_A a zero
  Def_fb0 : BOOL;	//B_Flow fault at zero / Default Flux_B a zero
  SavAR1 : DWORD;	//AR1 register backup/Sauvegarde du registre AR1
  SavAR2 : DWORD;	//AR2 register backup/Sauvegarde du registre AR2
  SavDINR : INT;	//Instance DB number backup/Sauvegarde du Numero de DB d'instance
  Ret : INT;	//"BLKMOV" output value/Valeur retournee par "BLKMOV"
  LgTab : INT;	//Table lenght (in words)/Longueur des tables (en mot)
  Ptr : DWORD;	//Offset / Pointeur
  DBNR : INT;	//DB Number / Numero de DB
  LoopCnt : INT;	//Loop counter/Compteur de boucle
  Tab_fa0 : BOOL;	//"Tab_fa" contains a zero/"Tab_fa" contient une valeur nulle
  Tab_fb0 : BOOL;	//"Tab_fb" contains a zero/"Tab_fb" contient une valeur nulle
  CompFaFbOk : BOOL;	//"Tab_fa" and "Tab_fb" are equal/"Tab_fa" et "Tab_fb" sont egales
  An_f : BOOL;	//Suspension authorization/Autorisation neutralisation
  Admab : BOOL;	//Flow A-B matching decision Author./Autorisation de Decision Mariage Flux A et B
  Adop_dm : BOOL;	//Mismatch-Waiting Operator Decision/Attente Decision Operateur - Defaut Mariage
  Mdec : BOOL;	//Operator decision memory/Memoire Decision Operateur
  FPilot_ihmbv : BOOL;	//Pilot.ihmbv rising edge/Front montant de Pilot.ihmbv
END_VAR
BEGIN
NETWORK
TITLE =
//*ODIL_ID:2003_1*
//---------- Sauvegarde du registre d'adresse AR1 / AR1 register save
//
TAR1 #SavAR1;
//---------- Initialisation des bits de defaut / Fault set to 0
L B#16#0;
T LB 20;
NETWORK
TITLE =Controle des parametres
//Parameters check
//*ODIL_ID:2003_2*
//---------- Controle que les Tables sont de type BYTE / Byte check for tables
//
L DIB [AR2,P#3.0]; //Type de "Table_fa"
L DIB [AR2,P#13.0]; //Type de "Table_fb"
O(;
<>D;
);
L DIB [AR2,P#23.0]; //Type de "Sv_dtab"
O(;
<>D;
);
L B#16#2; //Type BYTE
O(;
<>D;
);
//---------- Controle que les tables sont dans des DBs /Check if tables are in DBs
L DIB [AR2,P#8.0]; //Zone "Table_fa"
L DIB [AR2,P#18.0]; //Zone "Table_fb"
O(;
<>D;
);
L DIB [AR2,P#28.0]; //Zone "Sv_dtab"
O(;
<>D;
);
L B#16#84; //Zone DB
O(;
<>D;
);
//---------- Controle que les Tables sont de meme taille / Size of table Check
L DIW [AR2,P#4.0]; //Taille de "Table_fa"
L DIW [AR2,P#14.0]; //Taille de "Table_fb"
O(;
<>D;
);
L DIW [AR2,P#24.0]; //Taillede "Sv_dtab"
O(;
<>D;
);
= #Def_Par;
SRW 1; //Division par deux
T #LgTab;
SPB Err; //Defaut de parametrage
NETWORK
TITLE =Memoire decision
//Decision memory
//*ODIL_ID:2003_3*
//
O #Mar_ab;
O #Sort_fa;
O #Sort_fb;
= #Mdec;
NETWORK
TITLE =
//Comparaison de Tab_fa et Tab_fb & recherche de valeur nulle
//Compare Tab_fa and Tab_fb and check null value presence
//*ODIL_ID:2003_4*
//
O #Am_fa;
O #Am_fb;
UN #Mdec;
SPBN NCmp;
//---------- Sauvegarde des registres / Register save
TAR2 #SavAR2;
L DINO;
T #SavDINR;
//---------- Initialisation des registres d'adresse / Register adress init
//---------- & Ouverture des Blocs de donnees
//---------- Tab_fa
L DIW [AR2,P#6.0]; //Numero de DB de "Tab_fa"
T #DBNR;
L DID [AR2,P#8.0]; //Offset de "Table_fa"
T #Ptr;
AUF DB [#DBNR];
LAR1 #Ptr;
//---------- Tab_fb
L DIW [AR2,P#16.0]; //Numero de DB de "Tab_fb"
T #DBNR;
L DID [AR2,P#18.0]; //Offset de "Table_fb"
T #Ptr;
AUF DI [#DBNR];
LAR2 #Ptr;
//----------
SET;
R #Tab_fa0;
R #Tab_fb0;
S #CompFaFbOk;
L #LgTab;
LOOP: T #LoopCnt; //Boucle
L B#16#0;
L DBW [AR1,P#0.0];
==D; //Comparaison Tab_fa[n] a 0
S #Tab_fa0;
L DIW [AR2,P#0.0];
<>D; //Comparaison Tab_fa[n] a Tab_fb[n]
R #CompFaFbOk;
L B#16#0;
==D; //Comparaison Tab_fb[n] a 0
S #Tab_fb0;
+AR1 P#2.0;
+AR2 P#2.0;
L #LoopCnt;
LOOP LOOP;
//---------- Restauration des registres
AUF DI [#SavDINR];
LAR2 #SavAR2;
NCmp: NOP 0;
NETWORK
TITLE =Defaut
//Fault
//*ODIL_ID:2003_5*
//
U #Am_fa;
U #Tab_fa0;
UN #Hfilm;
= #Def_fa0;
NETWORK
TITLE =Defaut
//Fault
//*ODIL_ID:2003_6*
//
U #Am_fb;
U #Tab_fb0;
UN #Hfilm;
= #Def_fb0;
NETWORK
TITLE =Autorisation Neutralisation
//Suspension authorization
//*ODIL_ID:2003_7*
//
O #An_fa;
O #An_fb;
= #An_f;
NETWORK
TITLE =Autorisation demande mariage
//Matching request authorization
//*ODIL_ID:2003_8*
//
U #Am_fa;
U #Am_fb;
UN #Def_fa0;
UN #Def_fb0;
UN #An_f;
UN #Mdec;
= #Admab;
NETWORK
TITLE =Comparaison OK
//Matching OK
//*ODIL_ID:2003_9*
//
U #Admab;
U #CompFaFbOk;
= #Comp_ok;
= #Diag.ihmcomp_ok;
NETWORK
TITLE =Comparaison NOK
//Mismatch
//*ODIL_ID:2003_10*
//
U #Admab;
UN #CompFaFbOk;
= #Comp_nok;
= #Diag.ihmcomp_nok;
NETWORK
TITLE =Mariage
//Egalite des tables avec Process Flux A et Process Flux B (Cas4_cok)
//
//Matching
//Tables Process Flow A and Process Flow B are the same => OK - case 4 (Cas4_cok)
//*ODIL_ID:2003_11*
//
U #Comp_ok;
UN #Sp_fa;
UN #Sp_fb;
O;
U #Mar_ab;
UN #An_f;
= #Mar_ab;
= #Diag.ihmMar_ab;
NETWORK
TITLE =Attente decision operateur
//Inegalite des tables avec Process Flux A & Process Flux B (Cas4_cnk)
//
//Waiting for operator decision
//Precess flow B table different than process flow A table => NOK - case 4
//(Cas4_cnk)
//*ODIL_ID:2003_12*
//
U #Comp_nok;
UN #Sp_fa;
UN #Sp_fb;
= #Adop_dm;
NETWORK
TITLE =Defaut mariage
//Mismatch
//*ODIL_ID:2003_13*
//
U #Adop_dm;
UN #Sort_fa;
UN #Sort_fb;
= #Dfma_ab;
= #Diag.ihmDfma_ab;
NETWORK
TITLE =Front montant de Pilot.ihmbv
//Pilot.ihmbv rising edge
//*ODIL_ID:2003_14*
//
U #Pilot.ihmbv;
FP #xPilot_ihmbv;
= #FPilot_ihmbv;
NETWORK
TITLE =Sortie Flux A
//Egalite des tables mais pas de mariage (Cas1_cok, Cas2_cok, Cas3_cok)
//Inegalite des tables & pas de process flux A (Cas1_cnk, Cas2_cnk)
//Attente decision operateur (Cas4_cnk)
//
//Part exit flow A
//Tables are equal but there is no matching (Cas1_cok, Cas2_cok, Cas3_cok)
//Tables are different and there is no process on flow A (Cas1_cnk, Cas2_cnk)
//Waiting for operator decision (Cas4_cnk)
//*ODIL_ID:2003_15*
//
U #Comp_ok;
UN #Mar_ab;
O(;
U #Comp_nok;
U #Sp_fa;
);
O(;
U(;
U #Bds_fa;
FP #xBds_fa;
O;
U #Pilot.ihmbds_fa;
U #FPilot_ihmbv;
);
U #Adop_dm;
);
O;
U #Sort_fa;
UN #An_f;
= #Sort_fa;
= #Diag.ihmsort_fa;
NETWORK
TITLE =Sortie Flux B
//Egalite des tables mais pas de mariage (Cas1_cok, Cas2_cok, Cas3_cok)
//Inegalite des tables, avec process flux A et Sans process flux B (Cas3_cnk)
//Attente decision operateur (Cas4_cnk)
//
//Part exit flow B
//Tables are equal but there is no matching (Cas1_cok, Cas2_cok, Cas3_cok)
//Tables are different, there is process on flow A and no one on flow B (Cas3_cnk)
//Waiting for operator decision (Cas4_cnk)
//*ODIL_ID:2003_16*
//
U #Comp_ok;
UN #Mar_ab;
O(;
U #Comp_nok;
UN #Sp_fa;
U #Sp_fb;
);
O(;
U(;
U #Bds_fb;
FP #xBds_fb;
O;
U #Pilot.ihmbds_fb;
U #FPilot_ihmbv;
);
U #Adop_dm;
);
O;
U #Sort_fb;
UN #An_f;
= #Sort_fb;
= #Diag.ihmsort_fb;
NETWORK
TITLE =Mariage Au film =99
//Restitution BP ecran Mariage au film a 99 pour traitement code externe BF
//
//Sequence 99 Matching
//mirroring HMI screen button for Sequence 99 Matching -> for treatment outside
//FB
//*ODIL_ID:2003_17*
//
U #Pilot.ihmbmf99;
= #Dmaf99;
NETWORK
TITLE =Recopie de Tab_fa vers sv_dtab
//Copy Tab_fa to sv_dtab
//*ODIL_ID:2003_18*
//
U #Mar_ab;
UN #Mdec;
SPBN NM;
//---------- "Tab_fa"
L DID [AR2,P#2.0]; //Type & Fact
T LD 0;
L DIW [AR2,P#6.0]; //Numero de DB
T LW 4;
L DID [AR2,P#8.0]; //Zone & Ptr
T LD 6;
//---------- "Sv_dtab"
L DID [AR2,P#22.0]; //Type & Fact
T LD 10;
L DIW [AR2,P#26.0]; //Numero de DB
T LW 14;
L DID [AR2,P#28.0]; //Zone & Ptr
T LD 16;
//----------
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
NM: NOP 0;
NETWORK
TITLE =Recopie de "Tab_fa" et "Tab_fb" dans la structure de diag
//Copy "Tab_fa" and "Tab_fb" in DIAG structure
//*ODIL_ID:2003_19*
//---------- "Tab_fa"
//
L DID [AR2,P#2.0]; //Type & Fact
T LD 0;
L DIW [AR2,P#6.0]; //Numero de DB
T LW 4;
L DID [AR2,P#8.0]; //Zone & Ptr
T LD 6;
//----------
L DW#16#1002000C; //Type & Fact
T LD 10;
L DINO; //Numero de DB
T LW 14;
LAR1 AR2; //Zone & Ptr
+AR1 P#44.0;
TAR1 LD 16;
//----------
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
//---------- "Tab_fa"
L DID [AR2,P#12.0]; //Type & Fact
T LD 0;
L DIW [AR2,P#16.0]; //Numero de DB
T LW 4;
L DID [AR2,P#18.0]; //Zone & Ptr
T LD 6;
//----------
LAR1 AR2; //Zone & Ptr
+AR1 P#56.0;
TAR1 LD 16;
//----------
CALL "BLKMOV" (
SRCBLK := #Src,
RET_VAL := #Ret,
DSTBLK := #Dst);
NETWORK
TITLE =Erreurs
//Errors
//*ODIL_ID:2003_20*
//
Err: L LB 20; //Bits de defaut
T #Diag.CodeDef;
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
NETWORK
TITLE =Fin du programme
//End of program
//*ODIL_ID:2003_21*
//---------- Fin du programme
//
LAR1 #SavAR1; //Restitution du registre AR1
BEA; //Fin du programme
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_RECALAGE2"
TITLE =BF_RECALAGE2
//***************************************************************************
//*                              FB "RECALAGE2"                             *
//*           BF associee au point de gestion de flux "Recalage"            *
//*       FB associated to "recycling point" of shop floor control          *
//***************************************************************************
//(In english further below)
//
//DESCRIPTION:
//************
//Permet de gerer l'ensemble du processus de recalage aux points dedies
//des units de la base roulante. Elle n'est pas utilisable pour la
//gestion du flux des palettes et donc pour tout perimetre flexible.
//Elle prend en charge les taches suivantes :
//Sur proposition du calculateur :
//- Lecture de la table d'echange Siptol.
//- Generation des mots d'echanges necessaires au processus de recalage.
//Pour le processus de recalage :
//- Analyse de la concordance / discordance aux differents postes du PGF.
//- Prise des decisions de recalage en fonction des demandes operateur.
//- Envoi des decisions prises aux postes pour declenchement des cycles robots.
//- Analyse des actions executees pour evacuation des pieces (convoyeur ou tiroir
//d'entrees sorties)
//En reponse au calculateur :
//- Renseignement de l'etat dialogue.
//- Renseignement de l'etat flux.
//- Basculement des mots de validation.
//
//MISE EN OEUVRE :
//***************
//Pour plus de detail voir la documentation et les outils d'aide programme.
//La BF_Recalage communique avec plusieurs Sous ensembles et des DB Globaux
//La personnalisation des informations pour l'analyse et certains liens IHMP sont
//a realiser dans un FB specifique
//
//A) DB globaux associes :
//**********************
//Pour permettre l'utilisation de la fonction recalages les DB globaux suivants
//doivent etres utilises :
//- DB ''SIPx'' contenant le formatage des noms symbolique des variables en
//liaison avec SIPTOL :
//- DB ''Pile'' contenant les informations d'analyses pour l'IHMP
//Ces DB de base sont donnes dans le fichier zip (bibliotheque S7) accompagnant
//le BF
//
//A.1) DB SIPx
//Dans la structure programme Les Blocs DB89 a DB80 sont reserves a cette effet.
//(Numerotation decroissante a respecter)
//
//Le Nom symbolique des DB est SIP<x> avec x = 1 pour le premier coupleur de
//communication.
//Maxi 8 suivant le type d'automate.
//
//Chaque liaison avec SIPTOL utilise pour le recalage 2 trames d'echanges :
//La premiere comporte les informations relatives a la piece a produire.
//La deuxieme comporte les informations d'analyse pour le recalage (pieces a
//faire et pieces passees)
//
//A.2) DB PILE:
//Ce DB sert a memoriser les differentes donnees issues des BF_Fifo dans le
//programme.
//Dans la structure programme le DB90 est reserve a cet effet.
//Pour le recalage les informations contenues dans les piles, correspondent aux
//differentes pieces passees et à faire pour permettre leur visualisation sur
//L'IHMP.
//
//En aucun cas les noms symboliques associes aux variables ne doivent etre
//modifies pour garantir les liens avec l'IHMP.
//
//La pile pieces a faire : est construire avec les informations issues de la
//tables piece du montage N-5 (maxi) par rapport au point de recalage.
//Les donnees sont sauvegardes dans une struct " NonSE_plus " comportant pour
//chaque posage intermediaire un structure comportant les informations.
//
//La pile pieces passees : correspond aux informations issues du DB contenant les
//donnees pour ecriture sur etiquette dynamique des 2 dernieres pieces ecrites
//apres le point de recalage.
//Les donnees sont sauvegardes dans une struct " NonSE_moins " comportant pour
//chaque piece un structure comportant les informations.
//
//Le nom symbolique des struct est le suivant :
//1er Struct " pieces a Faire " = <NomSE>_plus (nom du sous ensemble de recalage)
//Exemple : O4_plus
//2eme Struct " pieces passees = <NomSE>_moins (nom du sous ensemble de recalage)
//Exemple : O4_moins
//
//La Struct " piece a Faire " doit etre adaptee par rapport au nombre de poste
//precedant le point de recalage en supprimant les sous structure inutiles
//
//
//B) Liens avec IHMP :
//********************
//Les liens avec IHMP sont faits via la BF_Recalage.
//Le nom d'instance de la BF doit suivre la regle suivante : <NOMSE>Recalage
//
//CODE DE DEFAUT :
//***************
//Non utilise
//
//******************************* ENGLISH INFORMATION ***********************
//DESCRIPTION
//***********
//Allow management of whole recycling point of a unit, except for pallet
//management.
//it takes into account:
//* Following calculator request:
//- reading exchange table from Siptol;
//- generating exchanges word used during recycling management.
//* For recycling management:
//- analysing matching/mismatching at each stage of the flow point;
//- associating proper action to operator request, for example sending cycle code
//to robots
//- analysing occured actions to eject parts (rack or part eject stage)
//* for contesting to calculator:
//- set dialogue status;
//- set flow status
//- toggle validation words
//
//OPERATING:
//************
//For further details refer to documentation and Program help tools (OAP)
//The BF_Recalage exchange data with several Sub-assembly and Global DB blocks
//The customization of data for analysis and links with  IHMP must be done in a
//specific FB
//
//A) Associated global DB:
//**********************
//for Recycling function the following global DB must be used :
//- DB " SIPx " containing the symbolic names of variables exchanging with SIPTOL:
//- DB "Pile" containing information of analysis for the IHMP
//These DB are given in the file zip (library S7) joined with the BF
//
//A 1) SIPx  db
//In the Renault program structure, DB89 to DB80 blocks are reserved for this use.
//(Decreasing numbering to be respected)
//
//The symbolic Name of the DB is SIPx with x = 1 for the first card of
//communication.
//Maxi 8 according to the type of PLC.
//
//Each connection with SIPTOL uses 2 frames of exchanges for the recycling
//function:
//The first contains the information of the part to be made.
//The second contains the information of analysis for the recycling (Part to be
//made and past parts)
//Each frame is associated with a structure containing the symbolic names of
//variables.
//These names must be respected to avoid the loss of automatic links between IHMP
//screens and PLC program.
//
//A 2) PILE db:
//This DB is used to memorize the data coming from BF_Fifo.
//In the Renault program structure, the DB90 is reserved for that purpose.
//For the recycling, the information contained in data stack, corresponds to the
//past and to be made part to allow their visualization on IHMP.
//
//The symbolic names associated with variables MUST NOT be modified to ensure the
//links with the IHMP.
//
//The Part to make stack: is built with the part information of sub-assembly N-5
//(maxi) in accordance with the recycling point.
//The data are saved in <sub-assembly name>_plus struct which contains the
//information for every intermediate working point.
//
//The past parts stack corresponds to the information coming from the DB
//containing the data for writing in tag of the last 2 parts written after the
//recycling point.
//The data are saved in a <Sub-assembly name>_moins struct which contains, for
//each part, one data structure.
//
//The symbolic names of structs are:
//1st Struct, Part to do = <Sub-assembly name>_plus (name of recycling sub
//assembly)
//Example: O4_plus
//2nd Struct, Parts past = <Sub-assembly name>_moins (name of recycling sub
//assembly)
//Example: O4_moins
//
//The Part to make Struct must be adapted in accordance with the number of stage
//that are located before the point of recycling by deleting the useless sub-
//struct
//
//
//B) Links with IHMP:
//********************
//The links with IHMP are done by the BF_Recalage.
//The instance name of the BF has to follow the following rule:
//< Sub-assembly name > Recalage
//
//FAULT CODE:
//************
//Not used
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 180
//Dernier ID mis en oeuvre / Last ID implemented : 1857_180
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : 1857_174, 1857_175, 1857_176, 1857_177, 1857_178, 1857_179
//
AUTHOR : RENAULT
FAMILY : 'RENAULT'
NAME : 'RECAL2'
VERSION : 1.1
VAR_INPUT
  NB_Div : INT;	//Number of diversity word used / NB de mot diversite utilise
  Av_ok : BOOL;	//Downstream stage available / Place en aval
  Comp_am : BOOL;	//Ready to compare with upstream stage /Autorisation comparaison avec poste amont
  Comp_tr : BOOL;	//Ready to compare with inject stage / Autorisation comparaison avec poste E/S
  Rep_av : BOOL;	//Upstream stage response authorization / Autorisation de reponse poste aval
  Rep_tr : BOOL;	//Eject stage response authorization / Autorisation de reponse du tiroir E/S
  Dem_sip : STRUCT	//Siptol Recycling request / Demandes de recalage Siptol
    dinjsip : BOOL;	//Injection request / Demande d'injection
    dsortsip : BOOL;	//Ejection request / Demande de sortie
    sunissip : BOOL;	//Unit ejection request (canceled veh) / dem. sortie unit seul suite veh annule
    fspfsip : BOOL;	//Dry run with shop floor control / deverminage au film
  END_STRUCT ;
  Rout_api : STRUCT	//PLC dispatching for repair or analyse / Routage api retouche analyse
    Raretam : BOOL;	//Repair-analyse on previous stage / retouche analyse sur la table amont
    Raretrb : BOOL;	//Repair-analyse on Robot / retouche analyse sur Robot
    Rarettr : BOOL;	//Repair-Analyse on eject-injection stage / retouche analyse sur tiroir E/S
  END_STRUCT ;
  Div_tr1 : INT;	//Diversity 1 at eject-injection stage / Diversite 1 presente au tiroir dE/S
  Div_tr2 : INT;	//Diversity 2 at eject-injection stage / Diversite 2 presente au tiroir dE/S
  Div_tr3 : INT;	//Diversity 3 at eject-injection stage / Diversite 3 presente au tiroir dE/S
  Div_tr4 : INT;	//Diversity 4 at eject-injection stage / Diversite 4 presente au tiroir dE/S
  Tab_film : ANY;	//Siptol Exchange table / Table d'echange Siptol (Film)
  Tab_piec : ANY;	//Part word table (upstream flow) / Table des mots pieces (Flux amont)
  Raz_mdec : BOOL;	//recycling decision memory reset / Mise a zero memoire decision recalage
  Modcy : STRUCT	//EtatCycle modification / modification  etatCycle
    retptr : BOOL;	//Remove part from ejection stage / Retrait piece tiroir E/S
    divinco : BOOL;	//Unknown diversity / Diversite inconnue
  END_STRUCT ;
  Pilot : STRUCT	//Operator decision / Decisions operateur
    Ihmdovinj : BOOL;	//HMI injection complete button  / ihm touche validation injection
    Ihmdorinj : BOOL;	//HMI injection refusal confirmation button / Ihm confirmation refus injection
    Ihmdosortd : BOOL;	//HMI ejection request button / Ihm touche demande de sortie sur decalage
    Ihmdointd : BOOL;	//HMI injection request button / Ihm touche demande d' intro sur decalage
    Ihmdomanqd : BOOL;	//HMI missing part confirmation button / Ihm confirmation piece manquante
    Ihmdoapos : BOOL;	//HMI operator request button / Ihm touche appel operateur sur decalage
    Ihmdosubb : BOOL;	//HMI part OK to substitute button / Ihm touche demande de substit piece bonne
    Ihmdosubl : BOOL;	//HMI damaged part to substitute request but / Ihm touche dem substit piece loupe
    Ihmbpdiv : BOOL;	//HMI diversity choice button / BP IHM de selection diversite (renvois ecran)
    IhmDplr : BOOL;	//button mirror of substitue screen/ Image BP IHM sur ecran substit (piece loup)
    Ihmtrafrai : BOOL;	//Work in progress part view Request / Demande de visu table en cours
    IhmDIV1 : WORD;	//DIVERSITY 1 / DIVERSITE 1
    IhmDIV2 : WORD;	//DIVERSITY 2 / DIVERSITE 2
    IhmDIV3 : WORD;	//DIVERSITY 3 / DIVERSITE 3
    IhmDIV4 : WORD;	//DIVERSITY 4 / DIVERSITE 4
    Ihmvaldi : BOOL;	//Diversity validation button / BP de validation de la diversite
  END_STRUCT ;
  ValTC : TIME;	//Calculator reply time out/ Tempo Timeout Reponse calculateur
END_VAR
VAR_OUTPUT
  Drcal : BOOL;	//Calculator reply fault / Defaut de reponse calculateur
  Atcal : BOOL;	//Calculator proposal waiting / Attente proposition du calculateur
  Apopinj : BOOL;	//Operator request for injection / Appel operateur pour injection
  Apopsort : BOOL;	//Operator request for output / Appel operateur pour sortie
  Apopdec : BOOL;	//Operator request for mismatch /Appel operateur sur decalage discordance
  Autmajmp : BOOL;	//part word update authorization / Autorisation mise a jour des mots pieces
  Etat_div : STRUCT	//Diversities at stage / Etat des diversites presentes aux postes
    Pfbam : BOOL;	//Part OK at upstream stage / Piece a faire bonne sur table amont
    Pfmam : BOOL;	//Wrong part at upstream stage / Piece a faire mauvaise sur table amont
    Pfbtr : BOOL;	//Part OK at injection stage / Piece a faire bonne tiroir E/S
    Pfmtr : BOOL;	//Wrong part at injection stage / Piece a faire mauvaise tiroir E/S
    Ifabspf : BOOL;	//dry run with SFC information / Info fabriquation sans piece au film
    Ipatr : BOOL;	//Absent part at injection stage information / Info piece absente au tiroir E/S
    Majmp : BOOL;	//Part word update authorization / Autorisation mise a jour mot piece
  END_STRUCT ;
  Dec_op : STRUCT	//Operator decision / Decisions operateur
    dovinj : BOOL;	//HMI injection complete button / ihm touche validation injection
    dorinj : BOOL;	//HMI injection refusal confirmation button / Ihm confirmation refus injection
    dosortd : BOOL;	//HMI ejection request button (offset)/ Ihm touche demande de sortie sur decalage
    dointd : BOOL;	//HMI injection request button (offset)/ Ihm touche demande d' intro sur decalage
    domanqd : BOOL;	//HMI missing part confirmation button / Ihm confirmation piece manquante
    doapos : BOOL;	//HMI operator request button / Ihm touche appel operateur sur decalage
    dosubb : BOOL;	//HMI part OK to substitute button / Ihm touche demande de substi piece bonne
    dosubl : BOOL;	//HMI damaged part to substitute request but / Ihm touche dem substit piece loupe
    Dplr : BOOL;	//HMI Robot damaged part declaration / Declaration piece loupee pour Robot
  END_STRUCT ;
  IhmDIV1 : INT;	//diversity 1 information / information de diversite1
  IhmDIV2 : INT;	//diversity 2 information / information de diversite2
  IhmDIV3 : INT;	//diversity 3 information / information de diversite3
  IhmDIV4 : INT;	//diversity 4 information / information de diversite4
  Ihm_div : BOOL;	//Diversity validation / validation de la diversite
  Inf_recal : STRUCT	//Siptol information / informations issues de la trame Siptol
    Ipof : BOOL;	//Manufacturing number presence information / Info presence ordre de fabrication
    Iatof : BOOL;	//Manufacturing order wait information / Info attente ordre de fabication
    Atcal : BOOL;	//calculator proposal wait / Attente de proposition du calculateur
    Valapiok : BOOL;	//PLC reply: VALAPI=1, VALCAL=0 / reponse de l'api val api=1 et Val cal =0
    Ar : BOOL;	//Calculator response authorization / Autorisation reponse au calculateur
    Adec : BOOL;	//Decision authorization / Autorisation de decision
    Idinj : BOOL;	//Siptol part to inject request information / Info demande d'injection Siptol
    Idso : BOOL;	//Sipotl part to eject request information / Info demande de sortie siptol
    Isunis : BOOL;	//Unit to eject information(canceled vehicle)/ Info sortie unit seul (veh annule)
    Ifabspf : BOOL;	//dry run with SFC information / Information fabrication sans piece au film
    Apopinj : BOOL;	//Operator request for injection information / info appel operateur sur injection
    Apopdec : BOOL;	//Operator request for mistmatch info/  Info appel operateur sur discordance
    Trafrai : BOOL;	//Work in progress part view request / dem visu table en cours sur ecran analyse
  END_STRUCT ;
  Memdec : STRUCT	//Decision memory / Memoire des decisions de recalage.
    Mdesub : BOOL;	//Part OK to substitue memory / Memoire subs.piece bonne
    Mdesul : BOOL;	//Damaged part to substitue memory / Memoire subs.piece loupee
    Mdec : BOOL;	//Decision memory / Memoire decision prise
    Mdinj : BOOL;	//Part to inject request memory / Memoire demande injection
    Mdpmqi : BOOL;	//Missing part to inject memory / Memoire decision piece manquante sur injection
    Mdaosip : BOOL;	//Operator request decision memory / Memoire decision appel operateur siptol
    Mdspdi : BOOL;	//Part to eject decision memory / Memoire decision sortie piece sur decalage
    Mdedi : BOOL;	//Part to inject decision memory / Memoire decision intro piece sur decalage
    Mdsor : BOOL;	//Part to eject request memory (Siptol) / Memoire demande de sortie (siptol)
    Mdsub : BOOL;	//Part OK to substitute decision memory/Memoire decision substitution piece bonne
    Mdfnor : BOOL;	//Normal flow decision memory / Memoire decision flux normal
    Mdsul : BOOL;	//Damaged part to substitue decision memory / Memoire decision subst piece loupee
    Mdsl : BOOL;	//Damaged part to eject decision memory / Memoire decision sortie piece loupee
    Mdsma : BOOL;	//Tryout part to eject decision memory / Memoire decision sortie piece MAP
    Mdmqdi : BOOL;	//Missing part to inject decision memory / Memoire decision manque piece
    Mdsorcv : BOOL;	//Siptol ejection decision memory / Mem dec sortie piece Siptol + crochet vide
    Dmqscv : BOOL;	//Miss part decision memory / Mem dec piece attendue en sortie manq + croch Vide
    Dmqsor : BOOL;	//Missing part decision memory Memory / dec att en sortie manqu sans crochet vide
  END_STRUCT ;
  Vdfce : BOOL;	//Part to remove lamp / Voyant piece a retirer du tiroir E/S (Injection)
  Vdpie : BOOL;	//Part to remove lamp (mismatch) /Voyant piece a retirer tiroir E/S (Discordance)
  Diag : STRUCT	//Diag table / Table de mots de diagnostic
    Def : BOOL;	//Fault sum / Sommateur des defauts
    Ala : BOOL;	//Alarm / Alarme
    NumListe : INT;	//Fault list number / Numero de liste de defaut
    CodeDef : INT;	//Fault number (in previous list) / Code du defaut dans la liste pre citee
    Infocyop1 : INT;	//Cycle in progress status 1 / Information 1 sur letat du cycle en cours
    Infocyop2 : INT;	//Cycle in progress status 2 / Information 2 sur letat du cycle en cours
    IhmIpof : BOOL;	//Manufacturing number presence information / Info presence ordre de fabrication
    IhmValapiok : BOOL;	//PLC reply: VALAPI=1, VALCAL=0 / reponse de l'api val api=1 et Val cal =0
    Ihmdinjsip : BOOL;	//Part to inject request / Demande d'injection
    Ihmdsortsip : BOOL;	//Part to eject request / Demande de sortie
    Ihmsunissip : BOOL;	//Unit to eject request (canced vehicle) /dem sortie unit seul suite a veh annule
    Ihmfspfsip : BOOL;	//Dry run with SFC / deverminage au film
    Ihmetatdial : INT;	//diag status / Etat du dialogue
    IhmVsublin : BOOL;	//Subsitution not possible lamp / voyant substitution impossible
    IhmAtvinj : BOOL;	//injection complete button authorization / Autor touche validation dinjection
    IhmAtrinj : BOOL;	//Injection refusal button authorization / Autorisation touche refus dinjection
    IhmAtaos : BOOL;	//Siptol op. request button author / Autor touche appel op. Siptol (Discordance)
    IhmAtdsp : BOOL;	//Part to eject button Author / Autor touche demande sortie piece (Discordance)
    IhmAtdint : BOOL;	//Part to inject button Author / Autor touche demande intro (Discordance)
    IhmAtdpm : BOOL;	//Missing part button Author (Mismatch/Autor touche decl piece manq (Discordance)
    IhmVdinj : BOOL;	//Siptol injection lamp / Voyant injection demandee par Siptol
    IhmVcinj : BOOL;	//Accepted injection request lamp / Voyant demande dinjection acceptee
    IhmVrinj : BOOL;	//Refused injection Lamp / Voyant injection refusee
    IhmVdfce : BOOL;	//Part to remove on stage Lamp / Voyant piece a retirer du tiroir E/S (Injection)
    IhmVdis : BOOL;	//Mismatch lamp / Voyant discordance detectee
    IhmVaosd : BOOL;	//Siptol operator request lamp / Voyant appel ope. Siptol effectue (Discordance)
    IhmVdspd : BOOL;	//Accepted ejection request lamp / Voyant dem sortie piece acceptee (Discordance)
    IhmVintd : BOOL;	//Accepted injection request lamp / Voyant dem intro piece acceptee (Discordance)
    IhmVmqd : BOOL;	//Memorized missing part lamp / Voyant decl piece manq enregistree (Discordance)
    IhmVdpie : BOOL;	//Part to remove on stage Lamp / Voyant piece a retirer du tiroir E/S (Disc)
    IhmVsubb : BOOL;	//memorized subst part OK request lamp / voyant dem enregistree subs.piece bonne
    IhmVsubl : BOOL;	//memorized subst damaged part request lamp / voyant dem enreg subs.piece loupee
    Ihmval_api : INT;	//PLC validation / Validation automate.
    Ihmval_cal : INT;	//Calculator validation / Validation calculateur.
    IhmMdesub : BOOL;	//Part OK to substitue memory / Memoire subs.piece bonne
    IhmMdesul : BOOL;	//Damaged part to substitue memory / Memoire subs.piece loupee
    IhmMdec : BOOL;	//Decision memory / Memoire decision prise
    IhmMdinj : BOOL;	//Injection request memory / Memoire demande injection
    IhmMdpmqi : BOOL;	//Missing part to inject decision memory / Mem decision piece manq sur injection
    IhmMdaosip : BOOL;	//Siptol operator request decision memory / Mem decision appel operateur siptol
    IhmMdspdi : BOOL;	//Part to eject decision memory / Memoire decision sortie piece sur decalage
    IhmMdedi : BOOL;	//Part to inject decision memory / Memoire decision intro piece sur decalage
    IhmMdsor : BOOL;	//Siptol ejection request memory / Memoire demande de sortie (siptol)
    IhmMdsub : BOOL;	//Part OK to substitue decision memory /Memoire decision substitution piece bonne
    IhmMdfnor : BOOL;	//Normal flow desision memory / Memoire decision flux normal
    IhmMdsul : BOOL;	//Damaged part to substitue decision memory / Memoire decision subst piece loupee
    IhmMdsl : BOOL;	//Damaged part to eject decision memory / Memoire decision sortie piece loupee
    IhmMdsma : BOOL;	//Tryout part to eject decision memory / Memoire decision sortie piece MAP
    IhmMdmqdi : BOOL;	//Missing part decision memory / Memoire decision manque piece sur decalage
    IhmMdsorcv : BOOL;	//Siptol ejection decision memory/Mem decision sortie piece Siptol + crochet vide
    IhmDmqscv : BOOL;	//Miss part decision memory/Mem dec piece attendue en sortie manqu + crochet Vide
    IhmDmqsor : BOOL;	//Missing part decision memory/Mem dec attendue en sortie manqu sans crochet vide
    IhmMasque1 : BOOL;	//HMI diversity 1 restriction view / cellule de masquage pour Ihm sur Div1
    IhmMasque2 : BOOL;	//HMI diversity 2 restriction view / cellule de masquage pour Ihm sur Div2
    IhmMasque3 : BOOL;	//HMI diversity 3 restriction view / cellule de masquage pour Ihm sur Div3
    IhmMasque4 : BOOL;	//HMI diversity 4 restriction view / cellule de masquage pour Ihm sur Div4
    IhmRaretam : BOOL;	//repair-Analyse on previous stage / retouche analyse sur la table amont
    IhmRaretrb : BOOL;	//repair-Analyse on Robot / retouche analyse sur Robot
    IhmRarettr : BOOL;	//repair-Analyse on eject-injecting stage / retouche analyse sur tiroir E/S
    IhmPfbam : BOOL;	//Part OK at upstream stage / Piece a faire bonne sur table amont
    IhmPfmam : BOOL;	//Wrong part at upstream stage / Piece a faire mauvaise sur table amont
    IhmPfbtr : BOOL;	//Part OK at injection stage / Piece a faire bonne tirroire E/S
    IhmPfmtr : BOOL;	//Wrong part at ejection stage / Piece a faire mauvaise tiroir E/S
    IhmIfabspf : BOOL;	//Dry run with SFC information / Info fabriquation sans piece au film
    IhmIpatr : BOOL;	//Absent part at injection stage information / Info piece absente au tiroir E/S
    IhmMajmp : BOOL;	//Part word update authorization / Autorisation mise a jour mot piece
    IhmEtflux : INT;	//Flow status / Etat flux
    IhmFilm_film : INT;	//Sequence number part awaited by Siptol/Numero de film piece attendue par Siptol
    IhmNordre_film : INT;	//Order number part awaited by Siptol/Numero ordre piece attendue par Siptol
    IhmFaph_film : INT;	//Phase family part awaited by Siptol/Famille phase piece attendue par Siptol
    IhmCsf_film : INT;	//Final exit cause part awaited Siptol/Cause sortie finale piece attendue Siptol
    IhmFilm_am : INT;	//Sequence number part table upstream table/Numero film mots pieces table amont
    IhmNordre_am : INT;	//Order number part table upstream table/Numero ordre mots pieces table amont
    IhmFamph_am : INT;	//Phase family part table upstream table/Famille phase mots pieces table amont
    IhmCsf_am : INT;	//Final exit cause part table up. table/Cause sort finale mots pieces table amont
    IhmDiv_tr1 : INT;	//Diversity 1 at eject-injection stage / Diversite 1 presente au tiroir dE/S
    IhmDiv_tr2 : INT;	//Diversity 2 at eject-injection stage / Diversite 2 presente au tiroir dE/S
    IhmDiv_tr3 : INT;	//Diversity 3 at eject-injection stage / Diversite 3 presente au tiroir dE/S
    IhmDiv_tr4 : INT;	//Diversity 4 at eject-injection stage / Diversite 4 presente au tiroir dE/S
    IhmDiv_film1 : INT;	//Diversity 1 part awaited by Siptol/Diversite 1 de la piece attendue par Siptol
    IhmDiv_film2 : INT;	//Diversity 2 part awaited by Siptol/Diversite 2 de la piece attendue par Siptol
    IhmDiv_film3 : INT;	//Diversity 3 part awaited by Siptol/Diversite 3 de la piece attendue par Siptol
    IhmDiv_film4 : INT;	//Diversity 4 part awaited by Siptol/Diversite 4 de la piece attendue par Siptol
    IhmDiv_am1 : INT;	//Diversity 1 part table upstream table/Diversite 1 mots pieces table amont
    IhmDiv_am2 : INT;	//Diversity 2 part table upstream table/Diversite 2 mots pieces table amont
    IhmDiv_am3 : INT;	//Diversity 3 part table upstream table/Diversite 3 mots pieces table amont
    IhmDiv_am4 : INT;	//Diversity 4 part table upstream table/Diversite 4 mots pieces table amont
  END_STRUCT ;
END_VAR
VAR_IN_OUT
  Val_api : INT;	//PLC validation / Validation automate
  Val_cal : INT;	//Calculator validation / Validation calculateur
  Etflux : INT;	//Flow status / Etat flux
END_VAR
VAR
  Mdesub : BOOL;	//Memoire demande de substitution piece bonne
  Mdesul : BOOL;	//Memoire demande de substitution piece loupee
  Mdec : BOOL;	//Memoire decision prise
  Mdinj : BOOL;	//Memoire demande d'injection
  MdpMqi : BOOL;	//Memoire decision piece manquante sur injection
  Mdaoo : BOOL;	//Memoire decision appel operateur Siptol
  Mdspdi : BOOL;	//Memoire decision sortie piece sur decalage
  Mdedi : BOOL;	//Memoire decision introduction piece sur decalage
  Mdsor : BOOL;	//Memoire demande de sortie (Siptol)
  Mdsub : BOOL;	//Memoire decision substitution piece bonne
  Mdfnor : BOOL;	//Memoire decision flux normal
  Mdsul : BOOL;	//Memoire decision substitution piece loupee
  Mdsl : BOOL;	//Memoire decision sortie piece loupee
  Mdsma : BOOL;	//Memoire decision sortie piece MAP
  Mdmqdi : BOOL;	//Memoire decision manque piece sur decalage
  Mdsorcv : BOOL;	//Memoire decision sortie piece Siptol + crochet vide
  Dmqscv : BOOL;	//Memoire decision piece attendue en sortie manquante + crochet vide
  Dmqsor : BOOL;	//Memoire decision piece attendue en sortie manquante sans crochet vide
  Filmpaf : INT;	//Numero de film de la piece attendue par Siptol
  Nordrepaf : INT;	//Numero d'ordre de la piece attendue par Siptol
  Div1paf : INT;	//Diversite 1 de la piece attendue par Siptol
  Div2paf : INT;	//Diversite 2 de la piece attendue par Siptol
  Div3paf : INT;	//Diversite 3 de la piece attendue par Siptol
  Div4paf : INT;	//Diversite 4 de la piece attendue par Siptol
  Faphpaf : INT;	//Famille phase de la piece attendue par Siptol
  Csfpaf : INT;	//Cause de sortie finale de la piece attendue par Siptol
  Amfilm : INT;	//Numero de film mots pieces table amont
  Amnordre : INT;	//Numero d'ordre mots pieces table amont
  AmDiv1 : INT;	//Diversite 1 mots pieces table amont
  Amdiv2 : INT;	//Diversite 2 mots pieces table amont
  Amdiv3 : INT;	//Diversite 3 mots pieces table amont
  Amdiv4 : INT;	//Diversite 4 mots pieces table amont
  Amfamph : INT;	//Famille phase mots pieces table amont
  Amcsf : INT;	//Cause de sortie finale de la piece table amont
  AT_CALC : TON;	//Tempo Attente calculateur
  Debtp1 : BOOL;	//Lancement temporisation attente reponse calculateur
  Idopinj : BOOL;	//Information appel operateur sur injection
  Idopsort : BOOL;	//Information appel operateur sur sortie
  Idopdi : BOOL;	//Information appel operateur sur discordance
  Ipof : BOOL;	//Information presence ordre de fabrication
  Valapiok : BOOL;	//Reponse de l'api VAL API = 1 / VAL CAL =0
  Iatof : BOOL;	//Information attente ordre de fabrication
  Idinj : BOOL;	//Information demande d'injection Siptol
  Idso : BOOL;	//Information demande de sortie Siptol
  Isunis : BOOL;	//Information sortie unit seule (Vehicule annule)
  Ifabspf : BOOL;	//Information fabrication sans piece au film
  Mdec_1 : BOOL;	//Memoire Decision Operateur
  Adec : BOOL;	//Autorisation de decision
  Pfmam : BOOL;	//Piece a faire mauvaise sur table amont
  Ipatr : BOOL;	//Information piece absent au tiroir E/S
  Xpfbam : BOOL;	//Auxiliaire piece a faire bonne sur table amont
  Pfbam : BOOL;	//Piece a faire bonne sur table amont
  Pfbtr : BOOL;	//Piece a faire bonne tiroir E/S
  Pfmtr : BOOL;	//Piece a faire mauvaise sur tiroir E/S
  FPbpdiv : BOOL;	//Front Montant
  FPIhmvaldi : BOOL;	//Front montant BP de validation de la diversite
  Fdomanqd : BOOL;	//Front montant BP confirmation manque piece
  Fdorinj : BOOL;	//Front montant BP confirmation refus injection
END_VAR
VAR_TEMP
  BCKP_AR2 : DINT;	//Sauvegarde AR2
  BCKP_AR1 : DINT;	//Sauvegarde AR1
  Img_Tab_Film : ANY;	//Recopie du pointeur de Tab_Film
  IMG_Tab_Piec : ANY;	//Recopie du pointeur de Tab_Piec
  NumDb_Film : INT;	//Numero de DB Table Film
  NumDb_Piec : INT;	//Numero de DB Table Piece
  Lgt_Film : INT;	//Longueur de la table Film
  Deb_Film : DINT;	//Debut de la table Film
  Lgt_Piec : INT;	//Longueur de la table Piec
  Deb_Piec : DINT;	//Debut de la table Piec
  Xdsub : BOOL;	//Equation temporaire
  Xdsul : BOOL;	//Equation temporaire
  AR : BOOL;	//Auxiliaire de reponse au calculateur
  AR1 : BOOL;	//Auxiliaire de reponse 1
  AR2 : BOOL;	//Auxiliaire de reponse 2
  AR3 : BOOL;	//Auxiliaire de reponse 3
  Ba1i : BOOL;	//Bit a 1
  Fmbpdiv : BOOL;	//front montant BP IHM de selection diversite ( revois ecran)
  FmIhmvaldi : BOOL;	//Front montant BP de validation de la diversite
  XPDD : BOOL;	//Pas de diverite selectionnee
  indomanqd : BOOL;	//confirmation manque piece
  indorinj : BOOL;	//confirmation refus injection
END_VAR
BEGIN
NETWORK
TITLE =Sauvegarde contexte
//*ODIL_ID:1857_1*
TAR2;
T #BCKP_AR2; // Sauvegarde AR2
TAR1;
T #BCKP_AR1; // Sauvegarde AR1
NETWORK
TITLE =Bit a 1
//*ODIL_ID:1857_2*
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =RECUPERATION DES LONGUEURS DE TABLE,NUM DB ET DEBUT TABLE
//*ODIL_ID:1857_3*
// Table Film --------------------------------------
L DID [AR2,P#16.0];
T LD 8; // Sauvegarde image Pointeur Table Film
L DIW [AR2,P#18.0];
T #Lgt_Film; // Longueur de la table de mise a jour
L DIW [AR2,P#20.0];
T #NumDb_Film; // Numero DB de la Table Film
L DID [AR2,P#22.0];
T LD 14;
L DW#16#FFFFFF; // masquage zone memoire
UD;
T #Deb_Film; // Adresse en bit debut DB Table Film
// Table piece -------------------------------------
L DID [AR2,P#26.0];
T LD 18; // Sauvegarde image Pointeur Table Piec
L DIW [AR2,P#28.0];
T #Lgt_Piec; // Longueur de la table de mise a jour
L DIW [AR2,P#30.0];
T #NumDb_Piec; // Numero DB de la Table piece
L DID [AR2,P#32.0];
T LD 24; // Sauvegarde image Pointeur Table Piec
L DW#16#FFFFFF; // masquage zone memoire
UD;
T #Deb_Piec;
NETWORK
TITLE =Recuperation des DATAS Film et piece
//*ODIL_ID:1857_4*
AUF DB [#NumDb_Film]; // OUVERTURE TABLE FILM
LAR1 #Deb_Film;
L DBW [AR1,P#0.0];
T #Filmpaf; //Numero de film de la piece attendue par Siptol
T #Diag.IhmFilm_film;
L DBW [AR1,P#2.0];
T #Nordrepaf; //Numero d'ordre de la piece attendue par Siptol
T #Diag.IhmNordre_film;
L DBW [AR1,P#4.0];
T #Div1paf; //Diversite 1 de la piece attendue par Siptol
T #Diag.IhmDiv_film1;
L DBW [AR1,P#6.0];
T #Div2paf; //Diversite 2 de la piece attendue par Siptol
T #Diag.IhmDiv_film2;
L DBW [AR1,P#8.0];
T #Div3paf; //Diversite 3 de la piece attendue par Siptoll
T #Diag.IhmDiv_film3;
L DBW [AR1,P#10.0];
T #Div4paf; //Diversite 4 de la piece attendue par Siptol
T #Diag.IhmDiv_film4;
L DBW [AR1,P#12.0];
T #Faphpaf; //Famille phase de la piece attendue par Siptol
T #Diag.IhmFaph_film;
L DBW [AR1,P#14.0];
T #Csfpaf; //Cause de sortie finale de la piece attendue par Siptol
T #Diag.IhmCsf_film;
AUF DB [#NumDb_Piec]; // OUVERTURE TABLE PIECE
LAR1 #Deb_Piec;
L DBW [AR1,P#0.0];
T #Amfilm; //Numero de film de la piece table amont
T #Diag.IhmFilm_am;
L DBW [AR1,P#2.0];
T #Amnordre; //Numero d'ordre de la piece table amontl
T #Diag.IhmNordre_am;
L DBW [AR1,P#4.0];
T #AmDiv1; //Diversite 1 de la piece table amont
T #Diag.IhmDiv_am1;
L DBW [AR1,P#6.0];
T #Amdiv2; //Diversite 2 de la piece table amont
T #Diag.IhmDiv_am2;
L DBW [AR1,P#8.0];
T #Amdiv3; //Diversite 3 de la piece table amont
T #Diag.IhmDiv_am3;
L DBW [AR1,P#10.0];
T #Amdiv4; //Diversite 4 de la piece table amont
T #Diag.IhmDiv_am4;
L DBW [AR1,P#12.0];
T #Amfamph; //Famille phase de la piece table amont
T #Diag.IhmFamph_am;
L DBW [AR1,P#14.0];
T #Amcsf; //Cause de sortie finale de la piece table amont
T #Diag.IhmCsf_am;
NETWORK
TITLE =Gestion Masque diversite sur IHM
//PAS DE SELECTION DIVERSITE en entree de BF ou hors limite
//*ODIL_ID:1857_5*
//
O(;
L #NB_Div;
L 1;
<I;
);
O(;
L #NB_Div;
L 4;
>I;
);
= #XPDD;
NETWORK
TITLE =
//cellule de masquage pour Ihm sur Div1
//*ODIL_ID:1857_6*
//
U #XPDD;
= #Diag.IhmMasque1;
NETWORK
TITLE =
//cellule de masquage pour Ihm sur Div2
//*ODIL_ID:1857_7*
//
O(;
L #NB_Div;
L 1;
==I;
);
O #XPDD;
= #Diag.IhmMasque2;
NETWORK
TITLE =
//cellule de masquage pour Ihm sur Div3
//*ODIL_ID:1857_8*
//
O(;
L #NB_Div;
L 2;
==I;
);
O #XPDD;
O #Diag.IhmMasque2;
= #Diag.IhmMasque3;
NETWORK
TITLE =
//cellule de masquage pour Ihm sur Div4
//*ODIL_ID:1857_9*
//
O(;
L #NB_Div;
L 3;
==I;
);
O #XPDD;
O #Diag.IhmMasque3;
= #Diag.IhmMasque4;
NETWORK
TITLE =
//Raz des Informations de documentation de diversite IHM sur etat du masque
//*ODIL_ID:1857_10*
//
U #Diag.IhmMasque4;
SPBNB _010;
L 0;
T #Pilot.IhmDIV4;
_010: NOP 0;
U #Diag.IhmMasque3;
SPBNB _011;
L 0;
T #Pilot.IhmDIV3;
_011: NOP 0;
U #Diag.IhmMasque2;
SPBNB _012;
L 0;
T #Pilot.IhmDIV2;
_012: NOP 0;
U #Diag.IhmMasque1;
SPBNB _013;
L 0;
T #Pilot.IhmDIV1;
_013: NOP 0;
NETWORK
TITLE =Gestions acces pages de documentation de la diversite sur IHM
//front montant BP IHM de selection diversite ( revois ecran)
//*ODIL_ID:1857_11*
//
U #Pilot.Ihmbpdiv;
FP #FPbpdiv;
= #Fmbpdiv;
NETWORK
TITLE =Raz diversite documente sur IHMP a l'appel des pages de saisie
//*ODIL_ID:1857_12*
U #Fmbpdiv;
SPBNB _001;
L 0;
T #IhmDIV1;
T #Pilot.IhmDIV1;
T #IhmDIV2;
T #Pilot.IhmDIV2;
T #IhmDIV3;
T #Pilot.IhmDIV3;
T #IhmDIV4;
T #Pilot.IhmDIV4;
_001: NOP 0;
NETWORK
TITLE =
//RAZ BP IHM de selection diversite ( revois ecran)
//*ODIL_ID:1857_13*
//
U #Fmbpdiv;
R #Pilot.Ihmbpdiv;
NETWORK
TITLE =RAZ des memoires de decision sur fin de traitement piece MAP
//Modification du 30/09/2008 car le memoire de decision etaient razee en externe
//de la BF sur la fin de traitement piece de MAP
//*ODIL_ID:1857_14*
//
U #Raz_mdec;
R #Mdec;
R #Mdinj;
R #Mdfnor;
R #Mdaoo;
R #Mdspdi;
R #Mdedi;
R #Mdmqdi;
R #Dmqscv;
R #Dmqsor;
R #Mdsor;
R #Mdsorcv;
R #Mdsub;
R #Mdsul;
R #Mdsl;
R #Mdsma;
R #MdpMqi;
NETWORK
TITLE =Lancement Tempo Attente calculateur
//*ODIL_ID:1857_15*
L #Val_api; // ValApi=1
L B#16#1;
==I;
= #Debtp1; // Bit de lancement attente reponse calculateur
NETWORK
TITLE =Tempo Attente calculateur
//*ODIL_ID:1857_16*
U #Debtp1;
= L 46.0;
BLD 103;
CALL #AT_CALC (
IN := L 46.0,
PT := #ValTC,
Q := #Drcal);
NOP 0;
NETWORK
TITLE =Attente proposition calculateur
//*ODIL_ID:1857_17*
L #Val_api; // ValApi=2
L B#16#2;
==I;
= #Atcal; //Attente proposition du calculateur
NETWORK
TITLE =Appel operateur sur injection
//*ODIL_ID:1857_18*
U #Idopinj;
= #Apopinj;
NETWORK
TITLE =Appel operateur sur sortie
//*ODIL_ID:1857_19*
U #Idopsort;
= #Apopsort;
NETWORK
TITLE =Appel operateur sur discordance
//*ODIL_ID:1857_20*
U #Idopdi;
= #Apopdec;
NETWORK
TITLE =Validation OK
//*ODIL_ID:1857_21*
U(;
L #Val_api;
L 0;
==I;
);
U(;
L #Val_cal;
L 1;
==I;
);
= #Ipof;
NETWORK
TITLE =Validation OK
//*ODIL_ID:1857_22*
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Val_cal;
L 0;
==I;
);
= #Valapiok;
NETWORK
TITLE =Attente ordre de fabrication
//*ODIL_ID:1857_23*
U(;
L #Val_api;
L 0;
==I;
);
U(;
L #Val_cal;
L 2;
==I;
);
= #Iatof;
NETWORK
TITLE =Reponse a une demande d'attente du calculateur
//*ODIL_ID:1857_24*
U(;
U #Iatof;
SPBNB _002;
L 2;
T #Val_api;
SET;
SAVE;
CLR;
_002: U BIE;
);
SPBNB _003;
L 0;
T #Val_cal;
_003: NOP 0;
NETWORK
TITLE =Information demande d'injection Sitpol
//*ODIL_ID:1857_25*
U #Ipof;
U #Dem_sip.dinjsip;
= #Idinj;
= #Diag.Ihmdinjsip;
NETWORK
TITLE =Demande de sortie Siptol
//*ODIL_ID:1857_26*
U #Ipof;
U #Dem_sip.dsortsip;
= #Idso;
= #Diag.Ihmdsortsip;
NETWORK
TITLE =Information demande de sortie Siptol unit seule (Vehicule annule
//*ODIL_ID:1857_27*
U #Ipof;
U #Dem_sip.sunissip;
= #Isunis;
= #Diag.Ihmsunissip;
NETWORK
TITLE =Information fabrication sans piece au film
//*ODIL_ID:1857_28*
U #Ipof;
U #Dem_sip.fspfsip;
= #Ifabspf;
= #Diag.Ihmfspfsip;
NETWORK
TITLE =Autorisation de decision
//*ODIL_ID:1857_29*
U(;
O #Ipof;
O;
U(;
L #Amfilm;
L 99;
==I;
);
UN #Valapiok;
);
U #Av_ok;
UN #Mdec;
= #Adec;
NETWORK
TITLE =Appel operateur sur injection
//*ODIL_ID:1857_30*
U #Adec;
U #Idinj;
= #Idopinj;
NETWORK
TITLE =Appel operateur sur sortie
//*ODIL_ID:1857_31*
U #Adec;
U #Idso;
= #Idopsort;
NETWORK
TITLE =Appel operateur sur discordance
//*ODIL_ID:1857_32*
U #Adec;
UN #Idinj;
U #Pfmam;
= #Idopdi;
NETWORK
TITLE =Information piece absente au tiroir E/S
//*ODIL_ID:1857_33*
U(;
L #Div_tr1;
L 0;
==I;
);
U(;
L #Div_tr2;
L 0;
==I;
);
U(;
L #Div_tr3;
L 0;
==I;
);
U(;
L #Div_tr4;
L 0;
==I;
);
= #Ipatr;
NETWORK
TITLE =Concordance Numero d'ordre/Famille phase/Diversite piece p
//Concordance Numero d'ordre / Famille phase / Diversite piece presente sur le
//poste amont
//*ODIL_ID:1857_34*
//
U #Adec;
U #Comp_am;
U(;
L #Filmpaf;
L #Amfilm;
==I;
);
U(;
L #Nordrepaf;
L #Amnordre;
==I;
);
U(;
L #Div1paf;
L #AmDiv1;
==I;
);
UN #Idinj;
= #Xpfbam;
NETWORK
TITLE =Suite concordance
//*ODIL_ID:1857_35*
U #Xpfbam;
U(;
L #Div2paf;
L #Amdiv2;
==I;
);
U(;
L #Div3paf;
L #Amdiv3;
==I;
);
U(;
L #Div4paf;
L #Amdiv4;
==I;
);
U(;
L #Faphpaf;
L #Amfamph;
==I;
);
= #Pfbam;
NETWORK
TITLE =Discordance piece presente
//Discordance piece presente sur le poste amont differente de celle attendue par
//Siptol
//*ODIL_ID:1857_36*
//
U #Adec;
U #Comp_am;
UN #Pfbam;
UN #Idinj;
= #Pfmam;
NETWORK
TITLE =Concordance piece presente sur le tiroir et attente Siptol
//Concordance piece presente sur le tiroir E/S piece attendue par Siptol
//*ODIL_ID:1857_37*
//
U #Adec;
U #Comp_tr;
U(;
L #Div1paf;
L #Div_tr1;
==I;
);
U(;
L #Div2paf;
L #Div_tr2;
==I;
);
U(;
L #Div3paf;
L #Div_tr3;
==I;
);
U(;
L #Div4paf;
L #Div_tr4;
==I;
);
= #Pfbtr;
NETWORK
TITLE =Discordance piece tiroir E/S et attente Siptol
//Discordance piece presente sur le tiroir E/S differente de piece attendue par
//Siptol
//*ODIL_ID:1857_38*
//
U #Adec;
U #Comp_tr;
UN #Pfbtr;
= #Pfmtr;
NETWORK
TITLE =Piece a faire en MAP sans dialogue avec Siptol
//*ODIL_ID:1857_39*
U #Comp_am;
U(;
L #Amfilm;
L 99;
==I;
);
UN #Idinj;
U #Adec;
UN #Raz_mdec;
S #Mdsma;
NETWORK
TITLE =Validation injection demandee par Siptol
//*ODIL_ID:1857_40*
U #Adec;
U #Idopinj;
U #Pilot.Ihmdovinj;
U #Pfbtr;
S #Mdinj;
NETWORK
TITLE =gestion BP confirmation refus injection
//gestion de l'information sur front montant pour gestion des BP IHMP
//confirmation
//annulation ( remplacement de pilot.ihmdorinj par Indorinj sur reseaux
//39 et 157)
//*ODIL_ID:1857_41*
//
U #Pilot.Ihmdorinj;
BLD 100;
FP #Fdorinj;
= #indorinj;
NETWORK
TITLE =Refus d'injection demandee par Siptol
//*ODIL_ID:1857_42*
U #Adec;
U #Idopinj;
U #indorinj;
S #MdpMqi;
NETWORK
TITLE =Decision piece a faire en flux normal
//*ODIL_ID:1857_43*
U #Adec;
UN #Idinj;
U #Pfbam;
UN #Idso;
U(;
ON #Mdesub;
ON #Pfbtr;
);
UN #Rout_api.Raretam;
UN #Mdsma;
S #Mdfnor;
NETWORK
TITLE =Appel operateur Siptol sur decalage
//*ODIL_ID:1857_44*
U #Adec;
U #Idopdi;
U #Pilot.Ihmdoapos;
S #Mdaoo;
NETWORK
TITLE =Decision operateur de sortie piece sur decalage
//*ODIL_ID:1857_45*
U #Adec;
U #Idopdi;
U #Pilot.Ihmdosortd;
S #Mdspdi;
NETWORK
TITLE =Decision operateur introduction piece sur decalage
//*ODIL_ID:1857_46*
U #Adec;
U #Idopdi;
UN #Idso;
U #Pfbtr;
U #Pilot.Ihmdointd;
S #Mdedi;
NETWORK
TITLE =gestion BP confirmation manque piece
//gestion de l'information sur front montant pour gestion des BP IHMP
//confirmation annulation ( remplacement de pilot.ihmdomanqd par Indomanqd sur
//reseaux 45,46,47,160)
//*ODIL_ID:1857_47*
U #Pilot.Ihmdomanqd;
BLD 100;
FP #Fdomanqd;
= #indomanqd;
NETWORK
TITLE =Decision operateur refus d'injection piece manquante sur decalag
//Decision operateur refus d'injection piece manquante sur decalage
//*ODIL_ID:1857_48*
//
U #Adec;
U #Idopdi;
UN #Idso;
U #indomanqd;
S #Mdmqdi;
NETWORK
TITLE =Piece attendue par Siptol mais sortie en amont
//Piece attendue en sortie par Siptol mais sortie en amont (declaree manquante
//par
//l'operateur au recalage). Cas du vehicule annule : lancement d'un cr»(1)
//*ODIL_ID:1857_49*
//
U #Adec;
U #Idopdi;
U #Idso;
U #Isunis;
U #indomanqd;
S #Dmqscv;
NETWORK
TITLE =Piece attendue par Siptol mais sortie en amont
//Piece attendue en sortie par Siptol mais sortie en amont (declaree manquante
//par
//l'operateur au recalage). Cas differents du vehicule annule : pas de l»(1)
//*ODIL_ID:1857_50*
//
U #Adec;
U #Idopdi;
U #Idso;
UN #Isunis;
U #indomanqd;
S #Dmqsor;
NETWORK
TITLE =Decision sortie piece demandee par Siptol
//*ODIL_ID:1857_51*
U #Adec;
UN #Idinj;
U #Pfbam;
U #Idso;
UN #Isunis;
S #Mdsor;
NETWORK
TITLE =Decision sortie piece demandee par Siptol. Cas du vehicule annul
//Decision sortie piece demandee par Siptol. Cas du vehicule annule : lancement
//d'un crochet vide
//*ODIL_ID:1857_52*
//
U #Adec;
UN #Idinj;
U #Pfbam;
U #Idso;
U #Isunis;
S #Mdsorcv;
NETWORK
TITLE =Decision subsitution piece bonne
//Decision subsitution piece bonne (Prise en compte de la demande anticipee de
//l'operateur)
//*ODIL_ID:1857_53*
//
UN #Idopinj;
UN #Idopdi;
UN #Mdsl;
UN #Mdsor;
UN #Mdsorcv;
UN #Mdspdi;
UN #Mdsul;
UN #Mdsub;
= #Xdsub;
NETWORK
TITLE =Operateur demande de substitution
//*ODIL_ID:1857_54*
U #Comp_tr;
U #Xdsub;
U #Pilot.Ihmdosubb;
S #Mdesub;
NETWORK
TITLE =Raz Memoire demande de substitution piece bonne
//*ODIL_ID:1857_55*
O #Ipatr;
O #Idopinj;
O #Mdsl;
O #Mdspdi;
O #Mdsor;
O #Mdsorcv;
O #Mdsul;
O #Mdsub;
R #Mdesub;
NETWORK
TITLE =Memoire de decision de substitution piece bonne
//*ODIL_ID:1857_56*
U #Adec;
UN #Idinj;
U #Pfbam;
UN #Idso;
U #Pfbtr;
U #Mdesub;
UN #Rout_api.Raretam;
S #Mdsub;
NETWORK
TITLE =Decision subsitution piece loupee
//Decision subsitution piece loupee (Prise en compte de la demande anticipee de
//l'operateur)
//*ODIL_ID:1857_57*
//
UN #Idopinj;
UN #Idopdi;
UN #Mdsl;
UN #Mdsor;
UN #Mdsorcv;
UN #Mdspdi;
UN #Mdsul;
UN #Mdsub;
= #Xdsul;
NETWORK
TITLE =
//Memoire demande de substitution piece loupee
//*ODIL_ID:1857_58*
//
U #Comp_tr;
U #Xdsul;
U #Pilot.Ihmdosubl;
S #Mdesul;
NETWORK
TITLE =
//Raz Memoire demande de substitution piece loupee
//*ODIL_ID:1857_59*
//
O #Ipatr;
O #Idopinj;
O #Mdsl;
O #Mdspdi;
O #Mdsor;
O #Mdsorcv;
O #Mdsul;
O #Mdsub;
R #Mdesul;
NETWORK
TITLE =
//Memoire decision substitution piece loupee
//*ODIL_ID:1857_60*
//
U #Adec;
U #Rout_api.Raretam;
UN #Idinj;
U #Pfbam;
UN #Idso;
U #Pfbtr;
U #Mdesul;
S #Mdsul;
NETWORK
TITLE =Sortie piece pour retouche loupe au poste
//*ODIL_ID:1857_61*
U #Adec;
U #Rout_api.Raretam;
UN #Idinj;
U #Pfbam;
UN #Idso;
UN #Mdesul;
S #Mdsl;
NETWORK
TITLE =Memoire decision prise
//*ODIL_ID:1857_62*
O #Mdinj;
O #MdpMqi;
O #Mdfnor;
O #Mdaoo;
O #Mdspdi;
O #Mdedi;
O #Mdmqdi;
O #Dmqscv;
O #Dmqsor;
O #Mdsor;
O #Mdsorcv;
O #Mdsub;
O #Mdsul;
O #Mdsl;
O #Mdsma;
S #Mdec;
NETWORK
TITLE =Fin de comparasion : Autorisation de mise a jour des mots piec
//Fin de comparasion : Autorisation de mise a jour des mots pieces aux postes
//*ODIL_ID:1857_63*
//
U #Adec;
U(;
O #Mdfnor;
O #Mdsor;
O #Mdsorcv;
O #Mdspdi;
O #Mdsub;
O #Mdsul;
O #Mdsl;
O #Mdsma;
O #Mdinj;
O #Mdedi;
O #Mdsub;
O #Mdsul;
);
= #Autmajmp;
NETWORK
TITLE =Reponse du convoyeur d'evacuation : Cas du crochet vide
//*ODIL_ID:1857_64*
U(;
O #MdpMqi;
O #Mdmqdi;
O #Dmqscv;
);
U #Rep_av;
= #AR1;
NETWORK
TITLE =Reponse du convoyeur d'evacuation: Cas piece evacuee sur crochet
//*ODIL_ID:1857_65*
U(;
O #Mdfnor;
O #Mdedi;
O #Mdinj;
);
U #Rep_av;
= #AR2;
NETWORK
TITLE =Reponse du tiroir E/S
//*ODIL_ID:1857_66*
U(;
O #Mdspdi;
O #Mdsor;
O #Mdsub;
O #Mdsul;
O #Mdsl;
O #Mdsorcv;
O;
U #Mdfnor;
U #Rout_api.Rarettr;
);
U #Rep_tr;
= #AR3;
NETWORK
TITLE =Etablissement de l'autorisation de reponse au calculateur
//*ODIL_ID:1857_67*
U(;
O #Mdaoo;
O #Dmqsor;
O #AR1;
O #AR2;
O #AR3;
);
UN #Mdsma;
= #AR;
NETWORK
TITLE =Mise a zero etat flux
//*ODIL_ID:1857_68*
U(;
O #Autmajmp;
O #Iatof;
);
SPBNB _004;
L 0;
T #Etflux;
_004: NOP 0;
NETWORK
TITLE =ETFLUX =1
//*ODIL_ID:1857_69*
U(;
U #Mdfnor;
U(;
L #Etflux;
L 128;
<>I;
);
O #Mdinj;
O #Mdsor;
O #Mdsorcv;
);
SPBNB _005;
L 1;
T #Etflux;
_005: NOP 0;
NETWORK
TITLE =ETFLUX=2
//*ODIL_ID:1857_70*
U #Mdsub;
SPBNB _006;
L 2;
T #Etflux;
_006: NOP 0;
NETWORK
TITLE =ETFLUX=4
//*ODIL_ID:1857_71*
U(;
O #Mdedi;
O #Mdsul;
);
SPBNB _007;
L 4;
T #Etflux;
_007: NOP 0;
NETWORK
TITLE =ETFLUX=8
//*ODIL_ID:1857_72*
U(;
O #MdpMqi;
O #Mdmqdi;
O #Dmqscv;
O #Dmqsor;
);
SPBNB _008;
L 8;
T #Etflux;
_008: NOP 0;
NETWORK
TITLE =ETFLUX=32
//*ODIL_ID:1857_73*
U #Mdaoo;
SPBNB _009;
L 32;
T #Etflux;
_009: NOP 0;
NETWORK
TITLE =ETFLUX=64
//*ODIL_ID:1857_74*
U #Mdspdi;
SPBNB _00a;
L 64;
T #Etflux;
_00a: NOP 0;
NETWORK
TITLE =ETFLUX=128
//*ODIL_ID:1857_75*
U(;
O #Mdsl;
O;
U #Mdfnor;
U #Rout_api.Raretrb;
);
SPBNB _00c;
L 128;
T #Etflux;
_00c: NOP 0;
NETWORK
TITLE =Basculement des mots de validation
//*ODIL_ID:1857_76*
U #Mdec;
U #AR;
SPBNB _00b;
L B#16#0;
T #Val_cal;
L B#16#1;
T #Val_api;
_00b: NOP 0;
NETWORK
TITLE =RAZ des memoires de decision
//*ODIL_ID:1857_77*
UN #Mdsma;
U #Valapiok;
O;
U #Mdsma;
U #Rep_tr;
R #Mdec;
R #Mdinj;
R #Mdfnor;
R #Mdaoo;
R #Mdspdi;
R #Mdedi;
R #Mdmqdi;
R #Dmqscv;
R #Dmqsor;
R #Mdsor;
R #Mdsorcv;
R #Mdsub;
R #Mdsul;
R #Mdsl;
R #Mdsma;
R #MdpMqi;
NETWORK
TITLE =Renseignement Etat Dialogue 1
//*ODIL_ID:1857_78*
L #Val_cal;
L 0;
==I;
SPBN _m1;
L #Val_api;
L B#16#1;
==I;
SPBNB _021;
L 1;
T #Diag.Ihmetatdial;
_021: L #Val_api;
L 2;
==I;
SPBNB _022;
L 2;
T #Diag.Ihmetatdial;
_022: L #Val_api;
L 3;
==I;
SPBNB _023;
L 3;
T #Diag.Ihmetatdial;
_023: L #Val_api;
L 4;
==I;
SPBNB _02b;
L 4;
T #Diag.Ihmetatdial;
_02b: L #Val_api;
L 5;
==I;
SPBNB _m1;
L 5;
T #Diag.Ihmetatdial;
NETWORK
TITLE =Renseignement Etat Dialogue 2
//*ODIL_ID:1857_79*
_m1: L #Val_api;
L 0;
==I;
SPBN _m2;
L #Val_cal;
L 1;
==I;
SPBNB _016;
L 6;
T #Diag.Ihmetatdial;
_016: L #Val_cal;
L 2;
==I;
SPBNB _017;
L 7;
T #Diag.Ihmetatdial;
_017: L #Val_cal;
L 4;
==I;
SPBNB _m2;
L 8;
T #Diag.Ihmetatdial;
_m2: NOP 0;
NETWORK
TITLE =Renseignement Etat Dialogue 3
//*ODIL_ID:1857_80*
U(;
L #Val_api;
L 0;
==I;
);
U(;
L #Val_cal;
L 0;
==I;
);
SPBNB _00d;
L 10;
T #Diag.Ihmetatdial;
_00d: NOP 0;
NETWORK
TITLE =Renseignement Etat Dialogue 4
//*ODIL_ID:1857_81*
U(;
O(;
L #Val_api;
L B#16#5;
>I;
);
O(;
L #Val_cal;
L B#16#5;
>I;
);
O;
U(;
L #Val_cal;
L B#16#0;
>I;
);
U(;
L #Val_api;
L B#16#0;
>I;
);
);
SPBNB _00e;
L 11;
T #Diag.Ihmetatdial;
_00e: NOP 0;
NETWORK
TITLE =Gestion : Injection, validation ou refus
//Voyant injection demandee par Siptol
//*ODIL_ID:1857_82*
//
U #Idopinj;
= #Diag.IhmVdinj;
= #Diag.IhmAtvinj;
= #Diag.IhmAtrinj;
NETWORK
TITLE =
//Voyant demande dinjection acceptee
//*ODIL_ID:1857_83*
//
U #Mdinj;
UN #Raz_mdec;
= #Diag.IhmVcinj;
= #Memdec.Mdinj;
NETWORK
TITLE =
//Voyant injection refusee
//*ODIL_ID:1857_84*
//
U #Dem_sip.dinjsip;
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Etflux;
L 8;
==I;
);
= #Diag.IhmVrinj;
NETWORK
TITLE =
//Voyant piece a retirer du tiroir E/S (Injection)
//*ODIL_ID:1857_85*
//
U #Idopinj;
U #Pfmtr;
= #Diag.IhmVdfce;
= #Vdfce;
NETWORK
TITLE =ECRAN DECALAGE DECISIONS OPERATEUR
//Gestion : Reintroduction, sortie piece, piece manquante et appel operateur
//Siptol
//*ODIL_ID:1857_86*
//
U #Idopdi;
= #Diag.IhmVdis;
= #Diag.IhmAtaos;
= #Diag.IhmAtdsp;
= #Diag.IhmAtdpm;
NETWORK
TITLE =
//Autorisation touche demande dintroduction (Discordance)
//*ODIL_ID:1857_87*
//
U #Idopdi;
UN #Idso;
= #Diag.IhmAtdint;
NETWORK
TITLE =
//Voyant appel operateur Siptol effectue (Discordance)
//*ODIL_ID:1857_88*
//
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Etflux;
L 32;
==I;
);
= #Diag.IhmVaosd;
NETWORK
TITLE =
//Voyant demande de sortie piece acceptee (Discordance)
//*ODIL_ID:1857_89*
//
U #Mdspdi;
UN #Raz_mdec;
= #Diag.IhmVdspd;
= #Memdec.Mdspdi;
= #Diag.IhmMdspdi;
NETWORK
TITLE =
//Voyant demande dintroduction piece acceptee (Discordance)
//*ODIL_ID:1857_90*
//
U #Mdedi;
UN #Raz_mdec;
= #Diag.IhmVintd;
= #Memdec.Mdedi;
= #Diag.IhmMdedi;
NETWORK
TITLE =
//Voyant declaration piece manquante enregistree (Discordance)
//*ODIL_ID:1857_91*
//
UN #Dem_sip.dsortsip;
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Etflux;
L 8;
==I;
);
= #Diag.IhmVmqd;
NETWORK
TITLE =
//Voyant piece a retirer du tiroir E/S (Discordance)
//*ODIL_ID:1857_92*
//
U #Idopdi;
U #Pfmtr;
= #Diag.IhmVdpie;
= #Vdpie;
NETWORK
TITLE =ECRAN OPERATEUR DECISION OPERATEUR
//Gestion : Demandes de substitution enregistrees
//*ODIL_ID:1857_93*
//
U #Mdesub;
UN #Mdsub;
= #Diag.IhmVsubb;
NETWORK
TITLE =
//voyant demande enregistree subs.piece loupee
//*ODIL_ID:1857_94*
//
U #Mdesul;
UN #Mdsul;
= #Diag.IhmVsubl;
NETWORK
TITLE =TABLE DE MOTS DE DIAGNOSTIC
//Informations de recalage
//Information presence ordre de fabrication
//*ODIL_ID:1857_95*
//
U #Ipof;
= #Inf_recal.Ipof;
= #Diag.IhmIpof;
NETWORK
TITLE =
//Information attente ordre de fabication
//*ODIL_ID:1857_96*
//
U #Iatof;
= #Inf_recal.Iatof;
NETWORK
TITLE =
//Attente de proposition du calculateur.
//*ODIL_ID:1857_97*
//
U #Atcal;
= #Inf_recal.Atcal;
NETWORK
TITLE =
//reponse de l'api val api=1 et Val cal =0
//*ODIL_ID:1857_98*
//
U #Valapiok;
= #Inf_recal.Valapiok;
= #Diag.IhmValapiok;
NETWORK
TITLE =
//Autorisation reponse au calculateur
//*ODIL_ID:1857_99*
//
U #AR;
= #Inf_recal.Ar;
NETWORK
TITLE =
//Autorisation de decision
//*ODIL_ID:1857_100*
//
U #Adec;
= #Inf_recal.Adec;
NETWORK
TITLE =
//Information demande d'injection Siptol
//*ODIL_ID:1857_101*
//
U #Idinj;
= #Inf_recal.Idinj;
NETWORK
TITLE =
//Information demande de sortie siptol
//*ODIL_ID:1857_102*
//
U #Idso;
= #Inf_recal.Idso;
NETWORK
TITLE =
//Information sortie unit seule ( vehicule annule)
//*ODIL_ID:1857_103*
//
U #Isunis;
= #Inf_recal.Isunis;
NETWORK
TITLE =
//Information fabrication sans piece au film
//*ODIL_ID:1857_104*
//
U #Ifabspf;
= #Inf_recal.Ifabspf;
NETWORK
TITLE =
//information appel operateur sur injection
//*ODIL_ID:1857_105*
//
U #Idopinj;
= #Inf_recal.Apopinj;
NETWORK
TITLE =Information appel operateur sur discordance
//*ODIL_ID:1857_106*
U #Idopdi;
= #Inf_recal.Apopdec;
NETWORK
TITLE =
//demande de visu table en cours sur ecran d'analyse
//*ODIL_ID:1857_107*
//
U #Pilot.Ihmtrafrai;
= #Inf_recal.Trafrai;
NETWORK
TITLE =Messages Etat cycle 1 Pupitre Operateur
//Pas de message a afficher
//*ODIL_ID:1857_108*
//
L 0;
T #Diag.Infocyop1;
NOP 0;
NETWORK
TITLE =
//Attente de reponse du calculateur (Val API=2)
//*ODIL_ID:1857_109*
//
U #Atcal;
SPBNB _00f;
L 1;
T #Diag.Infocyop1;
_00f: NOP 0;
NETWORK
TITLE =
//Demande dintervention de loperateur pour injection
//*ODIL_ID:1857_110*
//
U #Idopinj;
SPBNB _014;
L 2;
T #Diag.Infocyop1;
_014: NOP 0;
NETWORK
TITLE =
//Retrait piece tirroir E/S
//*ODIL_ID:1857_111*
//
U #Modcy.retptr;
SPBNB _015;
L 3;
T #Diag.Infocyop1;
_015: NOP 0;
NETWORK
TITLE =
//Demande dintervention de loperateur sur discordance
//*ODIL_ID:1857_112*
//
U #Idopdi;
SPBNB _018;
L 4;
T #Diag.Infocyop1;
_018: NOP 0;
NETWORK
TITLE =
//Injection impossible (mauvaise diversite placee sur le tiroir)
//*ODIL_ID:1857_113*
//
U #Idopinj;
U #Pfmtr;
SPBNB _019;
L 5;
T #Diag.Infocyop1;
_019: NOP 0;
NETWORK
TITLE =
//Substitution impossible (tiroir a vider)
//*ODIL_ID:1857_114*
//
U #Adec;
U #Rout_api.Raretam;
UN #Idinj;
U #Pfbam;
UN #Idso;
U #Pfmtr;
U #Mdesul;
SPBNB _01a;
L 6;
T #Diag.Infocyop1;
_01a: NOP 0;
NETWORK
TITLE =Voyant Substitution impossible (tiroir a vider)
//*ODIL_ID:1857_115*
L #Diag.Infocyop1;
L 6;
==I;
= #Diag.IhmVsublin;
NETWORK
TITLE =
//Diversite inconnue
//*ODIL_ID:1857_116*
//
U #Modcy.divinco;
SPBNB _01b;
L 7;
T #Diag.Infocyop1;
_01b: NOP 0;
NETWORK
TITLE =Messages etat cycle 2 : Pupitre operateur
//Pas de message a afficher
//*ODIL_ID:1857_117*
//
L 0;
T #Diag.Infocyop2;
NOP 0;
NETWORK
TITLE =
//Cycle dinjection en cours
//*ODIL_ID:1857_118*
//
U #Mdinj;
SPBNB _01c;
L 1;
T #Diag.Infocyop2;
_01c: NOP 0;
NETWORK
TITLE =
//Injection refusee par loperateur
//*ODIL_ID:1857_119*
//
U #Dem_sip.dinjsip;
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Etflux;
L 8;
==I;
);
SPBNB _01d;
L 2;
T #Diag.Infocyop2;
_01d: NOP 0;
NETWORK
TITLE =
//Piece en flux normal correctement realisee (travail au poste OK)
//*ODIL_ID:1857_120*
//
U #Mdfnor;
UN #Rout_api.Raretrb;
SPBNB _01e;
L 3;
T #Diag.Infocyop2;
_01e: NOP 0;
NETWORK
TITLE =
//Intervention operateur Siptol en cours
//*ODIL_ID:1857_121*
//
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Etflux;
L 32;
==I;
);
SPBNB _01f;
L 4;
T #Diag.Infocyop2;
_01f: NOP 0;
NETWORK
TITLE =
//Piece en cours de sortie sur decalage
//*ODIL_ID:1857_122*
//
U #Mdspdi;
SPBNB _020;
L 5;
T #Diag.Infocyop2;
_020: NOP 0;
NETWORK
TITLE =
//Piece en cours dintroduction sur decalage
//*ODIL_ID:1857_123*
//
U #Mdedi;
SPBNB _024;
L 6;
T #Diag.Infocyop2;
_024: NOP 0;
NETWORK
TITLE =
//Piece declaree manquante par loperateur sur decalage
//*ODIL_ID:1857_124*
//
UN #Dem_sip.dsortsip;
UN #Dem_sip.dinjsip;
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Etflux;
L 8;
==I;
);
SPBNB _025;
L 7;
T #Diag.Infocyop2;
_025: NOP 0;
NETWORK
TITLE =
//Piece declaree manquante attendue en sortie (Vehicule annule)
//*ODIL_ID:1857_125*
//
U #Dem_sip.dsortsip;
U #Dem_sip.sunissip;
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Etflux;
L 8;
==I;
);
SPBNB _026;
L 8;
T #Diag.Infocyop2;
_026: NOP 0;
NETWORK
TITLE =
//Piece declaree manquante attendue en sortie (Autres cas)
//*ODIL_ID:1857_126*
//
U #Dem_sip.dsortsip;
UN #Dem_sip.sunissip;
U(;
L #Val_api;
L 1;
==I;
);
U(;
L #Etflux;
L 8;
==I;
);
SPBNB _027;
L 9;
T #Diag.Infocyop2;
_027: NOP 0;
NETWORK
TITLE =
//Sortie demandee par Siptol en cours
//*ODIL_ID:1857_127*
//
U #Mdsor;
SPBNB _028;
L 10;
T #Diag.Infocyop2;
_028: NOP 0;
NETWORK
TITLE =
//Sortie demandee par Siptol en cours (Cas du vehicule annule)
//*ODIL_ID:1857_128*
//
U #Mdsorcv;
SPBNB _029;
L 11;
T #Diag.Infocyop2;
_029: NOP 0;
NETWORK
TITLE =
//Substitution piece bonne en cours
//*ODIL_ID:1857_129*
//
U #Mdsub;
SPBNB _02a;
L 12;
T #Diag.Infocyop2;
_02a: NOP 0;
NETWORK
TITLE =
//Substitution piece loupee en cours
//*ODIL_ID:1857_130*
//
U #Mdsul;
SPBNB _02c;
L 13;
T #Diag.Infocyop2;
_02c: NOP 0;
NETWORK
TITLE =
//Sortie piece loupee en cours
//*ODIL_ID:1857_131*
//
U(;
O #Mdsl;
O;
U #Mdfnor;
U #Rout_api.Raretrb;
);
SPBNB _02d;
L 14;
T #Diag.Infocyop2;
_02d: NOP 0;
NETWORK
TITLE =
//Sortie piece de MAP en cours
//*ODIL_ID:1857_132*
//
U #Mdsma;
SPBNB _02e;
L 15;
T #Diag.Infocyop2;
_02e: NOP 0;
NETWORK
TITLE =GENERATION DES MOTS SORTIES
//RESTITUTION DU MOT ETAT DES DIVERSITES PRESENTES AUX POSTES
//Piece a faire bonne sur table amont
//*ODIL_ID:1857_133*
//
U #Pfbam;
= #Etat_div.Pfbam;
= #Diag.IhmPfbam;
NETWORK
TITLE =
//Pece a faire mauvaise sur table amont
//*ODIL_ID:1857_134*
//
U #Pfmam;
= #Etat_div.Pfmam;
= #Diag.IhmPfmam;
NETWORK
TITLE =
//Piece a faire bonne tiroir E/S
//*ODIL_ID:1857_135*
//
U #Pfbtr;
= #Etat_div.Pfbtr;
= #Diag.IhmPfbtr;
NETWORK
TITLE =
//Piece a faire mauvaise tiroir E/S
//*ODIL_ID:1857_136*
//
U #Pfmtr;
= #Etat_div.Pfmtr;
= #Diag.IhmPfmtr;
NETWORK
TITLE =
//Info fabrication sans piece au film
//*ODIL_ID:1857_137*
//
U #Ifabspf;
= #Etat_div.Ifabspf;
= #Diag.IhmIfabspf;
NETWORK
TITLE =
//Information piece absente au tiroir E/S
//*ODIL_ID:1857_138*
//
U #Ipatr;
= #Etat_div.Ipatr;
= #Diag.IhmIpatr;
NETWORK
TITLE =
//Autorisation mise a jour mot piece
//*ODIL_ID:1857_139*
//
U #Autmajmp;
= #Etat_div.Majmp;
= #Diag.IhmMajmp;
NETWORK
TITLE =RESTITUTION DU MOT DEMANDE SUBSITUTION ANTICIPEE
//Memoire subs.piece bonne
//*ODIL_ID:1857_140*
//
U #Mdesub;
= #Memdec.Mdesub;
= #Diag.IhmMdesub;
NETWORK
TITLE =
//Memoire subs.piece loupee
//*ODIL_ID:1857_141*
//
U #Mdesul;
= #Memdec.Mdesul;
= #Diag.IhmMdesul;
NETWORK
TITLE =RESTITUTION DU MOT MEMOIRES DES DECISIONS
//Memoire decision prise
//*ODIL_ID:1857_142*
//
U #Mdec;
UN #Raz_mdec;
= #Memdec.Mdec;
= #Diag.IhmMdec;
NETWORK
TITLE =
//Memoire demande injection
//*ODIL_ID:1857_143*
//
U #Mdinj;
UN #Raz_mdec;
= #Memdec.Mdinj;
= #Diag.IhmMdinj;
NETWORK
TITLE =
//Memoire decision piece manquante sur injection
//*ODIL_ID:1857_144*
//
U #MdpMqi;
UN #Raz_mdec;
= #Memdec.Mdpmqi;
= #Diag.IhmMdpmqi;
NETWORK
TITLE =
//Memoire decision appel operateur siptol
//*ODIL_ID:1857_145*
//
U #Mdaoo;
UN #Raz_mdec;
= #Memdec.Mdaosip;
= #Diag.IhmMdaosip;
NETWORK
TITLE =
//Memoire demande de sortie (siptol)
//*ODIL_ID:1857_146*
//
U #Mdsor;
UN #Raz_mdec;
= #Memdec.Mdsor;
= #Diag.IhmMdsor;
NETWORK
TITLE =
//Memoire decision substitution piece bonne
//*ODIL_ID:1857_147*
//
U #Mdsub;
= #Memdec.Mdsub;
= #Diag.IhmMdsub;
NETWORK
TITLE =
//Memoire decision flux normal
//*ODIL_ID:1857_148*
//
U #Mdfnor;
UN #Raz_mdec;
= #Memdec.Mdfnor;
= #Diag.IhmMdfnor;
NETWORK
TITLE =
//Memoire decision substitution piece loupee
//*ODIL_ID:1857_149*
//
U #Mdsul;
= #Memdec.Mdsul;
= #Diag.IhmMdsul;
NETWORK
TITLE =
//Memoire decision sortie piece loupee
//*ODIL_ID:1857_150*
//
U #Mdsl;
UN #Raz_mdec;
= #Memdec.Mdsl;
= #Diag.IhmMdsl;
NETWORK
TITLE =
//Memoire decision sortie piece MAP
//*ODIL_ID:1857_151*
//
U #Mdsma;
UN #Raz_mdec;
= #Memdec.Mdsma;
= #Diag.IhmMdsma;
NETWORK
TITLE =
//Memoire decision manque piece sur decalage
//*ODIL_ID:1857_152*
//
U #Mdmqdi;
UN #Raz_mdec;
= #Memdec.Mdmqdi;
= #Diag.IhmMdmqdi;
NETWORK
TITLE =
//Memoire decision sortie piece Siptol + crochet vide
//*ODIL_ID:1857_153*
//
U #Mdsorcv;
UN #Raz_mdec;
= #Memdec.Mdsorcv;
= #Diag.IhmMdsorcv;
NETWORK
TITLE =
//Memoire decision piece attendue en sortie manquante + crochet Vide
//*ODIL_ID:1857_154*
//
U #Dmqscv;
UN #Raz_mdec;
= #Memdec.Dmqscv;
= #Diag.IhmDmqscv;
NETWORK
TITLE =
//Memoire decision attendue en sortie manquante sans crochet vide
//*ODIL_ID:1857_155*
//
U #Dmqsor;
UN #Raz_mdec;
= #Memdec.Dmqsor;
= #Diag.IhmDmqsor;
NETWORK
TITLE =
//validation de la diversite
//*ODIL_ID:1857_156*
//
U #Pilot.Ihmvaldi;
FP #FPIhmvaldi;
= #FmIhmvaldi;
U #FmIhmvaldi;
S #Ihm_div;
NETWORK
TITLE =
//RAZ des donnees de diversites en sortie de BF si les variables sont en entree
//de la BF ( Traitement externe necessaire)
//*ODIL_ID:1857_157*
U #Ihm_div;
U(;
L #Diag.IhmDiv_tr1;
L #Pilot.IhmDIV1;
==I;
);
U(;
L #Diag.IhmDiv_tr2;
L #Pilot.IhmDIV2;
==I;
);
U(;
L #Diag.IhmDiv_tr3;
L #Pilot.IhmDIV3;
==I;
);
U(;
L #Diag.IhmDiv_tr4;
L #Pilot.IhmDIV4;
==I;
);
SPBNB _032;
R #Ihm_div;
R #Pilot.Ihmvaldi;
L 0;
T #Pilot.IhmDIV1;
T #Pilot.IhmDIV2;
T #Pilot.IhmDIV3;
T #Pilot.IhmDIV4;
T #IhmDIV1;
T #IhmDIV2;
T #IhmDIV3;
T #IhmDIV4;
_032: NOP 0;
NETWORK
TITLE =
//mise a jour des valeurs rentree sur Ihm
//*ODIL_ID:1857_158*
//
U #FmIhmvaldi;
SPBNB _033;
L #Pilot.IhmDIV1;
T #IhmDIV1;
L #Pilot.IhmDIV2;
T #IhmDIV2;
L #Pilot.IhmDIV3;
T #IhmDIV3;
L #Pilot.IhmDIV4;
T #IhmDIV4;
_033: NOP 0;
NETWORK
TITLE =
//Image touche validation injection
//*ODIL_ID:1857_159*
//
U #Pilot.Ihmdovinj;
= #Dec_op.dovinj;
NETWORK
TITLE =
//Image confirmation refus injection
//*ODIL_ID:1857_160*
//
U #indorinj;
= #Dec_op.dorinj;
NETWORK
TITLE =
//Image touche demande de sortie sur decalage
//*ODIL_ID:1857_161*
//
U #Pilot.Ihmdosortd;
= #Dec_op.dosortd;
NETWORK
TITLE =
//Image touche demande d' intro sur decalage
//*ODIL_ID:1857_162*
//
U #Pilot.Ihmdointd;
= #Dec_op.dointd;
NETWORK
TITLE =
//Image touche confirmation piece manquante sur decalage
//*ODIL_ID:1857_163*
//
U #indomanqd;
= #Dec_op.domanqd;
NETWORK
TITLE =
//Image touche appel operateur sur decalage
//*ODIL_ID:1857_164*
//
U #Pilot.Ihmdoapos;
= #Dec_op.doapos;
NETWORK
TITLE =
//Image touche demande de substitution piece bonne
//*ODIL_ID:1857_165*
//
U #Pilot.Ihmdosubb;
= #Dec_op.dosubb;
NETWORK
TITLE =
//Image touche demande de substitution piece loupe
//*ODIL_ID:1857_166*
//
U #Pilot.Ihmdosubl;
= #Dec_op.dosubl;
NETWORK
TITLE =
//Declaration piece loupee pour Robot
//*ODIL_ID:1857_167*
//
U #Pilot.IhmDplr;
= #Dec_op.Dplr;
NETWORK
TITLE =
//retouche analyse sur la table amont
//*ODIL_ID:1857_168*
//
U #Rout_api.Raretam;
= #Diag.IhmRaretam;
NETWORK
TITLE =
//retouche analyse sur Robot
//*ODIL_ID:1857_169*
//
U #Rout_api.Raretrb;
= #Diag.IhmRaretrb;
NETWORK
TITLE =
//retouche analyse sur tiroir E/S
//*ODIL_ID:1857_170*
//
U #Rout_api.Rarettr;
= #Diag.IhmRarettr;
NETWORK
TITLE =
//*ODIL_ID:1857_171*
U #Rout_api.Rarettr;
= #Diag.IhmRarettr;
NETWORK
TITLE =
//Image des mots Diversite presente au tiroir dentrees sorties
//*ODIL_ID:1857_173*
U #Ba1i;
= L 46.0;
U L 46.0;
SPBNB _02f;
L #Div_tr1;
T #Diag.IhmDiv_tr1;
_02f: NOP 0;
U L 46.0;
SPBNB _030;
L #Div_tr2;
T #Diag.IhmDiv_tr2;
_030: NOP 0;
U L 46.0;
SPBNB _031;
L #Div_tr3;
T #Diag.IhmDiv_tr2;
_031: NOP 0;
U L 46.0;
SPBNB _034;
L #Div_tr4;
T #Diag.IhmDiv_tr3;
_034: NOP 0;
NETWORK
TITLE =
//Images des mots Val_cal / Val_api / Etat_flux
//*ODIL_ID:1857_177*
U #Ba1i;
= L 46.0;
U L 46.0;
SPBNB _035;
L #Val_cal;
T #Diag.Ihmval_cal;
_035: NOP 0;
U L 46.0;
SPBNB _036;
L #Val_api;
T #Diag.Ihmval_api;
_036: NOP 0;
U L 46.0;
SPBNB _037;
L #Etflux;
T #Diag.IhmEtflux;
_037: NOP 0;
NETWORK
TITLE =Restauration contexte
//*ODIL_ID:1857_180*
L #BCKP_AR2;
LAR2; // Restitution AR2
L #BCKP_AR1;
LAR1; //Restitution AR1
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_G120DS_V2"
TITLE =BF_G120DS_V2
//***************************************************************************
//*                           FB "G120DS_V2"                                  *
//*   ASSURE le PILOTAGE des FONCTIONS VARIATEUR de Manutention Standard    *
//*      INSURE the ORDER of the DRIVE FUNCTIONS of Standard Handling       *
//***************************************************************************
//ATTENTION La BF necessite au minimum:
//- une version de starter V4.1.2
//- l'utilisation des scripts variateur en V2
//- Une CPU 319F en version 3.2 mini et Step7 manager en version 5.5
//- une mise en oeuvre des BFS de type Safety_V2 (BFS_BSECTR1, BFS_CR1)
//
//WARNING this BF requires a minimal of
//- starter in V4.1.2
//- the use of drive scripts in V2
//- an CPU 319F in minimal version 3.2 of firmeware and Step7 manager in 5.5
//version
//- the implementation and using of Safety_V2 BFS type (BFS_BSECTR1, BFS_CR1)
//
//( In English further below)
//DESCRIPTION:
//************
//   - gestion de la fonction variateur G120D RENAULT
//   - gere 1 axe asservi avec les fonctionnements suivant :
//       Mode 0 = Frequence fixe et commande TOR par bus
//       Mode 1 = Consigne de frequence et commande TOR par bus
//       Mode 2 = Frequence fixe, commande TOR par bus et pre coupure dans le
//       variateur
//  - gere un deuxieme axe en option en pilotage TOR :
//   Le coffret variateur G120D permet de raccorder 2 detecteurs de positions.
//   Il y jusqu'a 4 ordres de mouvements possibles suivant les contraintes
//mecaniques de l'installation.
//
//MISE EN OEUVRE :
//***************
//Pour plus de details voir la documentation Word
//
// - configuration logiciel minimum :
//STEP 7 V5.5
//S7 Distributed SAFETY V5.4 SP3
//SIMATIC DRIVE ES BASIC V5.4 SP2
//STARTER V4.1.2
//SIMATIC WINCC FLEXIBLE 2005 SP1 HF7
//
//- Scripts moteur pour STARTER :
//   Mode 0 =  script 0_V2
//   Mode 1 =  script 1_V2
//   Mode 2 standard = script 2_V2
//
//Pour plus de renseignement voir votre charger d'affaire automatisme
//
// - Relais de ligne :
//  ce BF doit etre Associe au bloc SAFETY BFS_BSECTR1 ou BFS BSEC1 et BFS_CR1
//  pour assurer la gestion des relais de lignes :
//  RLV ( Relais de ligne Variateur) AXE1
//  RL (Relais de ligne) AXE2
//
// - Selection des vitesses :
//Cette fonction n'est valable que pour les MODES 0 et 2 de l'Axe1.
//Les entrees Pilotage BIT1VIT et BIT2VIT permettent de selectionner jusqu'a 3
//Vitesses sur le variateur pour l'axe 1
//L'utilisation des deux bool a Zero n'est pas preconisee.
//
//                              *Pilotage.BIT2VIT  * Pilotage.BIT1VIT
//****************************************************************************
//Vistesse 2 (exemple Grande vitesse)   *1        *   1
//****************************************************************************
//Vitesse  1 (exemple petite Vitesse)   *1        *   0
//****************************************************************************
//Vitesse pour Mouvement en Mode Manuel *0        *   1
//
//
//CODES des DEFAUTS:
//***********
//   Valeur associee a la sortie diag.codedef :
//1 = Defaut Frequence mini maxi
//2 =  Defaut RLV
//4  = Defaut Frein
//8 = Defaut RL
//16 = Defaut relais thermique
//32 = Defaut de parametrage temps de retombee trop long
//64 = Defaut pilotage variateur
//128= Defaut variateur non pret
//256 = Alarme RLV
//512 = Alarme RL
//1024 = Defaut entrainement
//2048 = Defaut disjoncteur
//4096 = Option selection Amont /Aval Rearment
//8192 = Defaut Variateur Indisponible
//16384 = Frequence Hors plage
//
//
//************************** ENGLISH INFORMATION  ****************************
//
//DESCRIPTION :
//**************
//- Management and Order of the RENAULT Drive G120D  function
//- Manages 1 axis controlled with the following functionings :
//       Mode 0 = fixed Frequency and command (orders) TOR by bus
//       Mode 1 = Setting of frequency and command (order) TOR by bus
//       Mode 2 = fixed Frequency, command (order) TOR by bus and Pre-cutout in
//
//    Drive (Variator)
//- Manage a second axis with TOR command in option.
//- G120D drive box allows to link 2 sensors of positions
//- It to has 4 orders of possible movements following the mechanical stresses of
//the installation.
//
//OPERATING :
//************
//For more details see the Word Documentation
//- Minimum software configuration:
//STEP 7 V5.5
//S7 Distributed SAFETY V5.4 SP3
//SIMATIC DRIVE ES BASIC V5.4 SP2
//STARTER V4.1.2
//SIMATIC WINCC FLEXIBLE 2005 SP1 HF7
//
//- Motor scripts for STARTER :
//   Mode 0 =  script 0_V2
//   Mode 1 =  script 1_V2
//   Mode 2 standard = script 2_V2
//
//For more information contact your Automatism Business charging (CAMI RENAULT)
//
//- Lines relays
//This Bf must be associated to the safety BF , BFS_BSECTR1 or BFS_BSEC1 and
//BFS_CR1 to insure the management and order off the lines relays :
//RLV ( Drive line relay) Axis 1
//RL (Line relay) Axis 2
//
//- Speeds Selection :
//This function can be used only for Axis 1 in MODE 0 or MODE 2
//Pilotage.BIT1VIT and BIT2VIT input allow to select up to 3 speeds on the Drive
//for the axis 1
//The use both bool in Zero is  no recommended
//
//                                *Pilotage.BIT2VIT  * Pilotage.BIT1VIT
//****************************************************************************
//Speed 2 ( High speed example)   *1                 *   1
//****************************************************************************
//Spped 1  ( Low speed example)   *1                 *   0
//****************************************************************************
//Speed for Manual movements      *0                 *   1
//
//FAULT CODE :
//*************
//Values of Diag.codedef output :
//
//1 = Min./max. Frequency Fault
//2 = Line relay Drive fault
//4 = Brake fault
//8 = Line relay fault
//16 = Thermal relay fault
//32 = Fall time too long setting fault
//64 = Drive Order running Fault
//128 = Drive not ready fault
//256 = Drive Line relay alarm
//512 = RL (line relay) alarm
//1024 = Drive fault
//2048 = Circuit-breaker fault
//4096 = Option Selection upstream /downstream Reset
//8192 = Drive Unavailable Fault
//16384 = Frequency Outside Range
//
//***************************** _ODIL_ID_ **********************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 60
//Dernier ID mis en oeuvre / Last ID implemented : 1853_61
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : sans objet
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'FONC_VAR'
VERSION : 1.3
VAR_INPUT
  ET200S_IO_adress : INT;	//Byte Address of ET200S (in HWconfig)/ Adresse de l'octet de l'ET200S (HWconfig)
  G120D_IO_adress : INT;	//Start Address space of Drive / debut plage Adresse du variateur (HWconfig)
  x_RLV : POINTER;	//Bit of instance location BESECTR1/Bit de localisation de l'instance BESECTR1
  x_CR : POINTER;	//Bit of instance location CR/Bit de localisation de l'instance CR
  x_RL : POINTER;	//Bit of instance location RL /Bit de localisation de l'instance RL
  Pilotage : STRUCT	//Drive and Second axis Control /Pilotage du Var et du 2eme Axe
    AXE2 : BOOL;	//2nd axis option / Option 2° axe
    AV1 : BOOL;	//Advance movement stop to sensor Number 1 / Avance arret sur capteur 1
    AV2 : BOOL;	//Advance movement stop to sensor Number 2 / Avance arret sur capteur 1
    AR1 : BOOL;	//Return movement stop to sensor Number 1 / Recul arret sur capteur 1
    AR2 : BOOL;	//Return movement stop to sensor Number 2 / Recul arret sur capteur 2
    OSAAM_AV : BOOL;	//Option Select. Stop zone upstream downstrea/Option select arret zone Amont aval
    OAV : BOOL;	//Advance Order / Ordre avance
    OAR : BOOL;	//Return Order / Ordre recul
    BIT1VIT : BOOL;	//1st speed selection bool / 1° Bit de selection vitesse
    BIT2VIT : BOOL;	//2nd speed selection bool / 2° Bit de selection vitesse
    FFR1 : BOOL;	//Brake forcing axis1 (Horizontal)/ Forcage frein axe1(Mvt horizontaux seulement)
    INIBH : BOOL;	//Disabling pre-cutout in mode 2 / Inhibition de la precoupure en mode 2
    CSG_FREQ : INT;	//G120D speed settings / Consigne de vitesse G120D
    C_MAX : INT  := 100;	//Torque restriction / Limitation de couple
    MODE : INT;	//Control Mode / Mode de pilotage
  END_STRUCT ;
  Iadf : BOOL;	//Fault Reset / Acquitement defauts
END_VAR
VAR_OUTPUT
  F_AR : BOOL;	//Drive line relay power cut with Resetting Info/Info. de coupure RLV avec rearm.
  Fonc_var_OK : BOOL;	//Drive function OK /Fonction variateur OK
  Torque_limit_active : BOOL;	//Torque limit effect / Limite de couple atteinte
  Def : BOOL;	//Fault / Defaut
  Ala : BOOL;	//Alarm / Alarme
  Diag : STRUCT	//Diagnostics Structure / Structure de diagnostic
    Def : BOOL;	//General fault bool for IHMP /Bit de defaut general pour IHMP
    Ala : BOOL;	//Alarm bool for IHMP / Bit d'alarme pour IHMP
    Numliste : INT  := 57;	//IHMP list number = 57 / N° de liste IHMP = 57
    Codedef : INT;	//Fault code /Code de defaut
    ZSW1 : STRUCT	//Drive Word status 1 / Mot d'etat 1 variateur
      Deviation_setp_act_value : BOOL;	//Setting / Measurement differnce / Ecart consigne / mesure
      PZD_control : BOOL;	//PZD control /commande PZD
      f_act_same_p1082 : BOOL;	//f_act(Actual frequency) >= p1082 (f_max)
      W_Motor_current_limit : BOOL;	//Warning: Motor current limit / Alarm : limite courant/couple du moteur
      Motor_holding_brake_act : BOOL;	//Motor Brake open / Frein moteur ouvert
      Motor_overload : BOOL;	//Motor overload / Surcharge moteur
      Motor_runs_right : BOOL;	//Motor runs right / Moteur fonctionne correctement
      Inverter_overload : BOOL;	//Inverter overload /surcharge variateur
      Drive_ready : BOOL;	//Drive ready /entrainement (variateur) pret
      Drive_ready_to_run : BOOL;	//Drive ready to run /entrainement (variateur) pret a fonctionner
      Drive_running : BOOL;	//Drive is running /entrainement (variateur)en fonctionnement
      Drive_fault_active : BOOL;	//Drive fault active / Defaut entrainement actif
      OFF2_aktive : BOOL;	//OFF2 is active /OFF2 Actif
      OFF3_aktive : BOOL;	//OFF3 is active /OFF3 Actif
      ON_inhibit_active : BOOL;	//ON inhibit is active /Blocage d'enclemchement actif
      Drive_warning_active : BOOL;	//Drive warning is active /Alarme d'entrainement active
    END_STRUCT ;
    Actual_frequency : INT;	//Actual frequency /Frequence en cours(-100.0 +100.0 Hz) (r021)
    Actual_current : INT;	//Actual current / Courent en coure
    Status_binary_inputs : STRUCT	//Drive Status binary inputs /Etat entree variateur (r722)
      Res_Bit_8 : BOOL;	//Reserved / reserve
      Res_Bit_9 : BOOL;	//Reserved / reserve
      Res_Bit_10 : BOOL;	//Reserved / reserve
      Res_Bit_11 : BOOL;	//Reserved / reserve
      Res_Bit_12 : BOOL;	//Reserved / reserve
      Res_Bit_13 : BOOL;	//Reserved / reserve
      Res_Bit_14 : BOOL;	//Reserved / reserve
      Res_Bit_15 : BOOL;	//Reserved / reserve
      DCGVA1 : BOOL;	//Digital Input 0 /Entree 0
      DAA1 : BOOL;	//Digital Input 1 /Entree 1
      DCGVR1 : BOOL;	//Digital Input 2 /Entree 2
      DAR1 : BOOL;	//Digital Input 3 /Entree 3
      DI_4 : BOOL;	//Digital Input 4 /Entree 4
      DI_5 : BOOL;	//Digital Input 5 /Entree 5
      Res_Bit_6 : BOOL;	//Reserved / reserve
      Res_Bit_7 : BOOL;	//Reserved / reserve
    END_STRUCT ;
    Drive_alarm_number : INT;	//Drive alarm number /Numero d'alarme en cours variateur (r2132)
    Drive_error_number : INT;	//Drive fault number /Numero de defaut variateur (r2131)
    Process_G120D : STRUCT	//Status Word 2 ZSW2 / mot d'etat 2 ZSW2
      Vdc_act_bigger_p2172 : BOOL;	//Reserve Vdc_act (r0026) > p2172 / Reserve
      Ramping_finished : BOOL;	//Ramping finished /Rampe terminee / Hoch-/Rücklauf ist beendet
      PID_min : BOOL;	//PID output r2294 == p2292 (PID min)/Sortie PID r2294 == p2292 (PID min)
      PID_max : BOOL;	//PID output r2294 == p2291 (PID max)/Sortie PID r2294 == p2291 (PID max)
      res_ZSW2_Bit12 : BOOL;	//spare / reserve
      res_ZSW2_Bit13 : BOOL;	//spare / reserve
      res_ZSW2_Bit14 : BOOL;	//Download Parameter set 0 from AOP/Telecharger le jeu de param0 depuis OAP
      res_ZSW2_Bit15 : BOOL;	//Download Parameter set 1 from AOP/Telecharger le jeu de param1 depuis OAP
      DC_brake_active : BOOL;	//Reserve DC_brake_active /Reserve /DC Bremse aktiv
      f_act_bigger_p2167 : BOOL;	//Actual frequency > p2167 (f_off)/Frequence mesuree > P2167 (f_off)
      f_act_bigger_p1080 : BOOL;	//Actual frequency > p1080 (f_min)/Frequence mesuree > P1080 (f_min)
      i_act_bigger_p2170 : BOOL;	//Actual current(r0027) >= p2170 / Mesure de courant >= P2170
      f_act_bigger_p2155 : BOOL;	//Actual frequency > p2155 (f_1) /Frequence mesuree > P2155 (f_1)
      f_act_slaller_p21551 : BOOL;	//Actual frequency <= p2155 (f_1) /Frequence mesuree <= P2155 (f_1)
      f_act_bigger_setpoint : BOOL;	//Actual frequency >= setpoint(f_csg) / Frequence mesuree >= consigne (f_csg)
      Vdc_act_smaller_p2172 : BOOL;	//Reserve, Actual Vdc (r0026) < p2172 / Vdc mesuree (r0026) < P2172
    END_STRUCT ;
    Stat2Ctrl : STRUCT	//Motor status word 2 / Mot d'etat 2 Moteur
      Upper_torque_limit_activ : BOOL;	//Upper torque limit activated / Limite de couple sup. active
      Lower_torque_limit_activ : BOOL;	//Lower torque limit activated / Limite de couple inf. active
      Droop_active : BOOL;	//Droop actived / statisme actif
      Bit11 : BOOL;	//spare / reserve
      Bit12 : BOOL;	//spare / reserve
      Bit13 : BOOL;	//spare / reserve
      Bit14 : BOOL;	//spare / reserve
      DDS_change_active : BOOL;	//DDS change activated / Changement DDS actif
      Vf_control_enabled : BOOL;	//V/F control activated / Commande V/F activee
      SLVC_enabled : BOOL;	//SLVC activated / SLVC activee
      Torque_control_enabled : BOOL;	//Torqu regulation activated / regulation du couple activee
      Bit03 : BOOL;	//spare / reserve
      Bit04 : BOOL;	//spare / reserve
      Stop_Icomp_speed_contr : BOOL;	//stop "i-comp" speed regulation / Arret regulation de viettes "i-comp"
      Set_Icomp_speed_contr : BOOL;	//set "i-comp" speed regulation / Regler regulation de vitesse "i-comp"
      Bit07 : BOOL;	//spare / reserve
    END_STRUCT ;
    STW1 : STRUCT	//Drive control word 1 / Mot de commande 1 Variateur
      JOG_right : BOOL;	//JOG to right / JOG a droite
      JOG_left : BOOL;	//JOG to left / JOG a gauche
      Control_from_PLC : BOOL;	//Control from PLC /Commande par API
      Reverse : BOOL;	//Reverse (setting) / inversion (consigne)
      res_STW1_Bit12 : BOOL;	//spare / reserve
      MOP_up : BOOL;	//Motor driven potentiometer increased /Potentiometre motorise augmenter
      MOP_down : BOOL;	//Motor driven potentiometer decreased /Potentiometre motorise diminuer
      CDS_Bit0 : BOOL;	//CDS_bit0 (manual/auto) / CDS_bit0 (manuel/auto)
      ON_OFF1 : BOOL;	//ON/OFF /Marche/arret
      OFF2 : BOOL;	//OFF2 (Electrical stop) / Arret electrique
      OFF3 : BOOL;	//OFF3 (Fast stop) /Arret rapide
      Pulse_enable : BOOL;	//Pulse released /Impulssion faite
      RFG_enable : BOOL;	//Peak generation activated / Activation generation rampe
      RFG_start : BOOL;	//Peak generation started / Demarage generation rampe
      Setpoint_enable : BOOL;	//Setpoint enable /liberation de la consigne
      Fault_acknowledge : BOOL;	//Fault reset /Acquittement defaut
    END_STRUCT ;
    Frequency_set : INT;	//Dive Frequency set /Consigne de frequance VAR [-100,0 ... 100,0%]
    Torque_set : INT;	//Drive current Torque set /consigne de courant (couple) VAR (0,0 ... 100,0%)
    STW2 : STRUCT	//Drive control word 2 / Mot de commande 2 Variateur
      Enable_PID : BOOL;	//PID activated / PID active
      Enable_DC_brake : BOOL;	//Enable DC brake (Reserved)/reserve frein
      res_STW2_Bit10 : BOOL;	//spare / reserve
      Enable_droop : BOOL;	//Droop activated /Statisme active
      Torque_control : BOOL;	//Torque control /Regulation de couple
      External_fault_1 : BOOL;	//External fault 1 /defaut externe 1
      res_STW2_Bit14 : BOOL;	//spare / reserve
      CDS_Bit1 : BOOL;	//Command data set bit 1 /
      FF_Bit0 : BOOL;	//Fixed frequency bool 0 /frequence fixe bit 0
      FF_Bit1 : BOOL;	//Fixed frequency bool 1 /frequence fixe bit 1
      FF_Bit2 : BOOL;	//Fixed frequency bool 2 /frequence fixe bit 2
      FF_Bit3 : BOOL;	//Fixed frequency bool 3 /frequence fixe bit 3
      DDS_Bit0 : BOOL;	//Set of drive setting bool 0 / jeu de parametre d'entrainement bit0
      DDS_Bit1 : BOOL;	//Set of drive setting bool 1 / jeu de parametre d'entrainement bit1
      res_STW2_Bit6 : BOOL;	//spare / reserve
      res_STW2_Bit7 : BOOL;	//spare / reserve
    END_STRUCT ;
    ET200S_IN : STRUCT	//ET200S Inputs / Entrees ET200S
      Q1OK : BOOL;	//Circuit-breaker return / retour disjoncteur
      RLVK1 : BOOL;	//Drive lien relay return / retour RLV
      RFRK2 : BOOL;	//Braking relay return / retour RFR
      OEM1 : BOOL;	//Free OEM1 / Libre OEM1
      OEM2 : BOOL;	//Free OEM2 / Libre OEM2
      OEM3 : BOOL;	//Free OEM3 / Libre OEM3
      OEM4 : BOOL;	//Free OEM4 / Libre OEM4
      RTH : BOOL;	//Thermal relay retun / retour RTH
      SPARE : BOOL;	//Free / libre
      RL : BOOL;	//Line relay return / retour RL
      AXIS2_LS1 : BOOL;	//End of stroke 1 axis 2 / Fin de course 1 axe2
      AXIS2_LS2 : BOOL;	//End of stroke 2 axis 2 / Fin de course 2 axe2
    END_STRUCT ;
    ET200S_OUT : STRUCT	//ET200S outputs / Sorties ET200S
      RA21 : BOOL;	//Advance Axis 2 stop sensor 1 / Axe2 Avance arret capteur 1
      RA22 : BOOL;	//Advance Axis 2 stop sensor 2 / Axe2 Avance arret capteur 2
      RR22 : BOOL;	//Return Axis 2 stop sensor2 / Axe2 recul arret capteur 2
      RR21 : BOOL;	//Return Axis 2 stop sensor1 / Axe2 recul arret capteur 1
      SPARE4 : BOOL;	//Free / libre
      SPARE5 : BOOL;	//Free / libre
      SPARE6 : BOOL;	//Free / libre
      SPARE7 : BOOL;	//Free / libre
    END_STRUCT ;
    IhmDefPara1 : BOOL;	//Setting fault 1 : safety_time max>2s/ Defaut de parametrage 1 :Tps_secu max> 2s
    IhmDefMinMax : BOOL;	//Frequency threshold fault /Defaut seuils de frequence
    IhmDefFreq : BOOL;	//Frequency out of range fault / Defaut frequence hors plage
    IhmVarindisp : BOOL;	//Drive unavailable / variateur indisponible
    IhmDefRl : BOOL;	//Line relay Fault / Defaut RL
    IhmAlaRl : BOOL;	//Line relay Alarm / Alarme a la montee du relais de ligne variateur
    IhmDefVar : BOOL;	//Drive Fault / Defaut variateur
    IhmDefRlv : BOOL;	//Drive line relay Fault / Defaut RLV
    IhmAlaRlv : BOOL;	//Drive line relay Fault / Alarme a la montee du relais de ligne variateur
    IhmDeffrein : BOOL;	//Brake relay fautl (RFR) / Defaut relais de frein (RFR)
    IhmDefFBpilotage : BOOL;	//FB Control drive order running Fault/ Defaut controle pilotage du var
    IhmDefCRpilotage : BOOL;	//Safety Control drive order running fault/defaut du ctrl pilotage du var du safe
    IhmDefVarReady : BOOL;	//drive not ready fault/defaut variateur non pret
  END_STRUCT ;
  F_CmdDrive : BOOL;	//drive order for Safety info /Info. pilotage variateur pour safety
END_VAR
VAR
  F_max : INT  := 1000;	//Maxi Frequency / Frequence maxi
  F_min : INT;	//Nin Frequency / Frequence mini
  T_RFR : TON;	//Brake relay timer / Tempo Relais frein
  Ala_rl : BOOL;	//Line relay alarm / Alarme RL
  T_OAVR : TON;	//control Feedback drive order timer / Tempo controle pilotage Variateur
  Def_rlv : BOOL;	//Driver line relay Fault / Defaut RLV
  Ala_rlv : BOOL;	//Driver line relay alarm / Alarme RLV
  Def_rl : BOOL;	//Line relay fault / defaut RL
END_VAR
VAR_TEMP
  SavAR2 : DINT;
  BSECTR : STRUCT	///!\ Safety Inputs information / entrees  des information de Securite
    DSecu : BOOL;	//Safety dependence/Dependance securite
    Cci : BOOL;	//Immediate cut-off conditions/Conditions coupure immediate
    CSecu0 : BOOL;	//Feedbacks check without control/Controle Retours sans pilotage
    CSecu1 : BOOL;	//Feedbacks check with control/Controle Retours avec Pilotage
    Iadf : BOOL;	//Fault reset/Annulation defaut
    Ir : BOOL;	//Function control on/Rearmement fonction
    Tps_secu : TIME;	//Relay deactivating time(Max.=2s)/Temps de retombee du relais (Maxi 2s
    DO_F : BOOL;	//F-DO output control/Commande sortie F-DO
    Secu : BOOL;	//Similar with DO-F/Identique a DO_F
    Secu_OK : BOOL;	//Safety loop correct/Boucle de securite valide
    Def : BOOL;	//Discrepancy fault in the deactivation/Defaut de discordance a la desactivation
  END_STRUCT ;
  STAT_X_RLV : STRUCT
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    IHMDef : BOOL;	//Discrepancy fault in the deactivation/Defaut de discordance a la desactivation
    IHMAla : BOOL;	//Discrepancy fault in the activation/Def de discordance a l'activation (Ala)
    xSecu : BOOL;	//Auxiliary bit/Bit auxiliaire
    M_ala : BOOL;	//Alarm memory/Memoire alarme
  END_STRUCT ;
  STAT_X_CR : STRUCT
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    IHMDef : BOOL;	//Discrepancy fault in the deactivation/Defaut de discordance a la desactivation
    IHMAla : BOOL;	//Discrepancy fault in the activation/Def de discordance a l'activation (Ala)
    xSecu : BOOL;	//Auxiliary bit/Bit auxiliaire
    M_ala : BOOL;	//Alarm memory/Memoire alarme
  END_STRUCT ;
  InRL : STRUCT	//Line relay inputs information / Entrees information relais de ligne
    DSecu : BOOL;	//Conditions with control on/Conditions avec rearmement
    CSecu0 : BOOL;	//Feedbacks check without control/Controle Retours sans pilotage
    CSecu1 : BOOL;	//Feedbacks check with control/Controle Retours avec Pilotage
    Iadf : BOOL;	//Fault reset/Annulation defaut
    Ir : BOOL;	//Function control on/Rearmement fonction
  END_STRUCT ;
  STAT_X_RL : STRUCT
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    IHMDef : BOOL;	//Discrepancy fault in the deactivation/Defaut de discordance a la desactivation
    IHMAla : BOOL;	//Discrepancy fault in the activation/Def de discordance a l'activation (Ala)
    xSecu : BOOL;	//Auxiliary bit/Bit auxiliaire
    M_ala : BOOL;	//Alarm memory/Memoire alarme
  END_STRUCT ;
  Akt_Frequenz : WORD;	//Actual frequency on G120D / Frequence en cours sur G120D
  MS_Ready_to_run : BOOL;	//Motor starter ready to run
  F_Tps_secu : TIME;	//Safety time of driver line relay used / F tps de secu maintien RLV papametre
  F_Rlv_Sc : BOOL;	//Sum of Cxx Drive line relay inputs / Somme des entres Cxx RLV
  F_Rlv : BOOL;	//Safety, Drive line relay Status /  F etat commande RLV
  F_Rl_Sc : BOOL;	//Sum of Cxx line relay inputs / Somme des entres Cxx RL
  CSecu0 : BOOL;	//Feedbacks check without control/Controle Retours sans pilotage
  F_Rl : BOOL;	//Safety, line relay Status /  F etat commande RL
  Df_para1 : BOOL;	//Parameter1 fault / Defaut de parametrage1 : temps de retombee du relais(2s max)
  Df_MinMax : BOOL;	//Min/Max Frequency Fault / Defaut frequence Mini/ maxi
  Df_Freq : BOOL;	//Frequency out of range / Frequence hors plage
  Freq_OK : BOOL;	//Frequency OK / Frequence OK
  Brake_command : BOOL;	//Brake command / Commde de frein
  on_off_forward : BOOL;	//forward order of drive /commande Marche avant du variateur
  on_off_rev : BOOL;	//reverse order of drive / commande Marche arriere du variateur
  Def_Cr : BOOL;	//control BFS_CR drive running fault/ defaut FBS_CR controle pilotage Var
  DBNR : INT;
END_VAR
BEGIN
NETWORK
TITLE =G120DS_V2
////==============================================================================
//                                      G120DS_V2
////==============================================================================
//*ODIL_ID:1853_1*
//

NETWORK
TITLE =Initialisation BFSBSECTR
//*ODIL_ID:1853_2*
TAR2 #SavAR2;
//------- Initialisation BFSTR
LAR1 AR2;
L P##x_RLV;
+AR1;
L DIW [AR1,P#0.0]; //!\POINTER: Data Block Number pointer de la variable x_RLV interface d'entree de la BF
T #DBNR;
AUF DB [#DBNR]; //Instance data block number of the F-Function Block
L DID [AR1,P#2.0]; //!\POINTER: Area - Address + 2 par rapport au numero de bloc
LAR2;
L L#-64; //!\ Decalage de 8 octets ( 8*n)
+AR2;
LAR1 P##BSECTR; //instance
//----------
L DBW [AR2,P#0.0]; //Instance data of the F-Function Block
T LW [AR1,P#0.0]; //!\ Structure InTr
L DBD [AR2,P#2.0]; //Instance data of the F-Function Block
T LD [AR1,P#2.0]; //!\ Structure Tps_secu
L DBW [AR2,P#6.0]; //Instance data of the F-Function Block
T LW [AR1,P#6.0]; //!\ Structure outTr
L DBW [AR2,P#8.0]; //Instance data of the F-Function Block
T LW [AR1,P#8.0]; //!\ Structure STAT_X_RLV
//-------
LAR2 #SavAR2;
NETWORK
TITLE =Initialisation CR
//------- Initialisation STAT CR
//*ODIL_ID:1853_3*
//
LAR1 AR2;
L P##x_CR;
+AR1;
L DIW [AR1,P#0.0]; //!\POINTER: Data Block Number pointer de la variable x_CR interface d'entree de la BF
T #DBNR;
AUF DB [#DBNR]; //Instance data block number of the F-Function Block
L DID [AR1,P#2.0]; //!\POINTER: Area - Address + 2 par rapport au numero de bloc
LAR2;
LAR1 P##STAT_X_CR; //instance
//-------
L DBW [AR2,P#0.0]; //Instance data of the F-Function Block
T LW [AR1,P#0.0]; //!\ Structure STAT_X_CR
//-------
LAR2 #SavAR2;
NETWORK
TITLE =Lecture et mise a disposition des informations F pour le diag
//Reading and provision of Safety information for diag
//*ODIL_ID:1853_4*
//
U #BSECTR.DSecu;
U #BSECTR.Cci;
= #F_Rlv_Sc;
U #BSECTR.Secu; // Pilotage RLV _ RLV order
= #F_Rlv;
L #BSECTR.Tps_secu; // Temps de maintien RLV _ RLV Dwell time
T #F_Tps_secu;
NETWORK
TITLE =Lecture du Diag de FBS_CR pour le controle du pilotage du Var
//Diag reading from FBS_CR for the drive Order control
//*ODIL_ID:1853_5*
//
U #STAT_X_CR.IHMDef;
= #Def_Cr;
NETWORK
TITLE =Defaut a la retombee
//Fault on the fallout
//*ODIL_ID:1853_6*
//
U #STAT_X_RLV.IHMDef;
UN #F_Rlv;
UN #Diag.ET200S_IN.RLVK1;
O;
U #Def_rlv;
UN #Iadf;
= #Def_rlv;
NETWORK
TITLE =Alarme a la montee
//Alarm on up
//*ODIL_ID:1853_7*
//
U #STAT_X_RLV.IHMAla;
U #F_Rlv;
U #Diag.ET200S_IN.RLVK1;
= #Ala_rlv;
NETWORK
TITLE =PARAMETRAGE DU TEMPS DE RETOMBEE DU RELAIS HORS LIMITES
//( 2 sec MAXI )
//Si le temps est superieur au temps maxi, celui-ci est considere comme nul
//
//PARAMETER SETTING OF the TIME OF FALLOUT OF the RELAY EXCEPT LIMITS
//(maxi 2 sec)
//If the time is upper than time maxi, this one is considere as 0
//*ODIL_ID:1853_8*
//
L #F_Tps_secu;
L T#2S;
>I;
= #Df_para1;
NETWORK
TITLE =Chargement des Mots d'etats
//Load status words
//*ODIL_ID:1853_9*
//
LAR1 AR2; //Multi Instance
L P##Diag;
+AR1;
//===============================================================================
L #G120D_IO_adress; //Adresse module G120D _ Modul adress G120D
SLD 3;
LAR2;
//===============================================================================
L EW [AR2,P#0.0];
T DIW [AR1,P#6.0]; // -> ZSW1
//===============================================================================
L EW [AR2,P#6.0];
T DIW [AR1,P#12.0]; // -> Status DI / -> Status DI
//===============================================================================
L EW [AR2,P#8.0];
T DIW [AR1,P#14.0]; // -> Numero alarme / -> Alarm number
//===============================================================================
L EW [AR2,P#10.0];
T DIW [AR1,P#16.0]; // -> Numero defaut /-> fault number
//===============================================================================
L EW [AR2,P#12.0];
T DIW [AR1,P#18.0]; // -> ZSW2
//===============================================================================
L EW [AR2,P#14.0];
T DIW [AR1,P#20.0]; // -> Stat 2 Ctrl
//===============================================================================
L EW [AR2,P#2.0];
T #Akt_Frequenz; //Frequence mesuree / Actual Frequency
//-------------------------------------------------------------------------------
SRW 12;
L W#16#8;
<=I; // pos. frequency ?
L #Akt_Frequenz;
SPB Ipos; // Oui -> Saut a Ipos / Yes -> jump to Ipos
//-------------------------------------------------------------------------------
NEGI; // Non -> Frequence neg. / No -> neg. frequency
DTR;
L 1.638400e+001; // Conversion en % / conver to %
/R;
RND;
NEGI;
SPA F_A;
//-------------------------------------------------------------------------------
Ipos: DTR;
L 1.638400e+001; // Conversion en % / conver to %
/R;
RND;
F_A: T DIW [AR1,P#8.0]; // #Diag.Actual_frequency -> Frequence en x.x% / -> Freqency in x.x%
//===============================================================================
L EW [AR2,P#4.0];
DTR;
L 2.338800e+001; // Conversion en % / conver to %
/R;
RND;
T DIW [AR1,P#10.0]; // #Diag.Actual_current -> Courant / -> Current
//===============================================================================
LAR2 #SavAR2; //Restauration de AR2
NETWORK
TITLE =Lecture entrees ET200S
//Reading ET200S input
//*ODIL_ID:1853_10*
//
LAR1 AR2; //Multi Instance
L P##Diag;
+AR1;
//===============================================================================
L #ET200S_IO_adress; // Modul adress ET200S
SLD 3;
LAR2;
//===============================================================================
L EB [AR2,P#0.0];
T DIB [AR1,P#30.0]; // ET200S_IN //modif
//===============================================================================
LAR2 #SavAR2; //Restauration de AR2
NETWORK
TITLE =invertion STWx.x
//Set inverter STWx.x
//*ODIL_ID:1853_11*
//
SET;
= #Diag.STW1.Control_from_PLC;
= #Diag.STW1.OFF3;
= #Diag.STW1.RFG_enable;
= #Diag.STW1.RFG_start;
= #Diag.STW1.Pulse_enable;
= #Diag.STW1.Setpoint_enable;
//===============================================================================
NETWORK
TITLE =Limites de frequence OK
//Frequency limits OK
//*ODIL_ID:1853_12*
//
O(;
L #F_max;
L 1000;
>D;
);
O(;
L #F_min;
L B#16#0;
<D;
);
O(;
L #F_max;
L #F_min;
<D;
);
= #Df_MinMax;
NETWORK
TITLE =Frequence hors plage
//Frequency out of range
//*ODIL_ID:1853_13*
//
O(;
L #Pilotage.CSG_FREQ;
L #F_max;
>D;
);
O(;
L #Pilotage.CSG_FREQ;
L #F_min;
<D;
);
= #Df_Freq;
NETWORK
TITLE =Frequence OK
//Frequency OK
//*ODIL_ID:1853_14*
//
U(;
L #Pilotage.MODE;
L 1;
==I;
);
UN #Df_MinMax;
UN #Df_Freq;
= #Freq_OK;
NETWORK
TITLE =Consigne de frequence et de couple
//Frequency and torque setpoint
//*ODIL_ID:1853_15*
//
L #Pilotage.CSG_FREQ;
DTR;
L 1.638400e+001;
*R;
RND;
T #Diag.Frequency_set; // -> Consigne frequence pour G120D /-> Frequency Setpoint for G120D
//===============================================================================
L #Pilotage.C_MAX;
DTR;
L 1.638400e+001;
*R;
RND;
T #Diag.Torque_set; // -> consigne de couple pour G120D /-> Torque Setpoint for G120D
//===============================================================================
NETWORK
TITLE =Ordre de marche
//Running Order
//*ODIL_ID:1853_16*
//
U #Diag.STW1.OFF2;
U #Diag.ZSW1.Drive_ready;
UN #Def;
U #F_Rlv_Sc;
U #Pilotage.OSAAM_AV;
U(;
O #Freq_OK;
O(;
L #Pilotage.MODE;
L 1;
<>I;
);
);
= L 32.0;
U L 32.0;
U #Pilotage.OAV;
UN #Pilotage.OAR;
= #on_off_forward;
U L 32.0;
U #Pilotage.OAR;
UN #Pilotage.OAV;
= #on_off_rev;
NETWORK
TITLE =ON/OFF 2
//*ODIL_ID:1853_17*
//
U #Diag.ET200S_IN.Q1OK;
UN #Diag.ET200S_IN.RLVK1;
= #Diag.STW1.OFF2;
NETWORK
TITLE =Commande Ordre d'avance
//Forward Order for drive
//*ODIL_ID:1853_18*
//
U #on_off_forward;
= #Diag.STW1.ON_OFF1;
NETWORK
TITLE =commande Ordre de recul
//reverse Order for Drive
//*ODIL_ID:1853_19*
//
U #on_off_rev;
= #Diag.STW1.Reverse;
NETWORK
TITLE =Fonction inhibition de la precoupure
//Disabling pre-cutout function
//*ODIL_ID:1853_20*
//
U #Pilotage.INIBH;
= #Diag.STW1.CDS_Bit0;
NETWORK
TITLE =Comamde de Frein
//Brake command
//*ODIL_ID:1853_21*
//
U #Pilotage.FFR1;
UN #Diag.STW1.ON_OFF1;
= #Diag.STW2.CDS_Bit1;
NETWORK
TITLE =Bit de vitesses fixes
//Bool of fixed speeds
//*ODIL_ID:1853_22*
//
L #Pilotage.MODE;
L 1;
<>I;
= L 32.0;
U L 32.0;
U #Pilotage.BIT1VIT;
= #Diag.STW2.FF_Bit0;
U L 32.0;
U #Pilotage.BIT2VIT;
= #Diag.STW2.FF_Bit1;
NETWORK
TITLE =Commande de Frein
//Brake command
//*ODIL_ID:1853_23*
//
U(;
O #Diag.ZSW1.Motor_holding_brake_act;
O #Pilotage.FFR1;
);
UN #Diag.IhmDeffrein;
= #Brake_command;
NETWORK
TITLE =Controle coherence commande et etat RFR
//Coherence Order and status of RFR (Brake relay) Check
//*ODIL_ID:1853_24*
//
U(;
U #Brake_command;
U #Diag.ET200S_IN.RFRK2;
O;
UN #Brake_command;
UN #Diag.ET200S_IN.RFRK2;
);
= L 32.0;
BLD 103;
CALL #T_RFR (
IN := L 32.0,
PT := T#300MS);
NOP 0;
NETWORK
TITLE =Commande drive pour programme safety
//Drive Order for safety control with feedback brake relay
//*ODIL_ID:1853_25*
//
O #on_off_forward;
O #on_off_rev;
O #Pilotage.FFR1;
O;
U(;
O #F_CmdDrive;
O;
UN #Diag.ZSW1.PZD_control;
U #Diag.ZSW1.Drive_running;
);
U #Brake_command;
= #F_CmdDrive;
NETWORK
TITLE =controle retour fonctionnement var / pilotage AV/AR
//Control forward / reverse Feedback drive order
//*ODIL_ID:1853_26*
//
UN #on_off_forward;
UN #on_off_rev;
U #Diag.ZSW1.Drive_running;
U #Diag.ZSW1.PZD_control;
= L 32.0;
BLD 103;
CALL #T_OAVR (
IN := L 32.0,
PT := T#300MS);
NOP 0;
NETWORK
TITLE =Limite de couple atteinte
//Reached limit of Torque
//*ODIL_ID:1853_27*
//
U #Diag.Stat2Ctrl.Upper_torque_limit_activ;
= #Torque_limit_active;
NETWORK
TITLE =Acquittement defaut
//Fault Reset
//*ODIL_ID:1853_28*
//
U #Iadf;
= #Diag.STW1.Fault_acknowledge;
NETWORK
TITLE =Envois mot de Controle
//Send control words
//*ODIL_ID:1853_29*
//
LAR1 AR2; //Multi Instance
L P##Diag;
+AR1;
//===============================================================================
L #G120D_IO_adress; // adresse Module G120D / Modul adress G120D
SLD 3;
LAR2;
//===============================================================================
L DIW [AR1,P#22.0]; //!\ Offset de STW1 dans Diag
T AW [AR2,P#0.0]; // Envois STW1 / Send STW1
//===============================================================================
L DIW [AR1,P#24.0]; //!\ Offset de Frequency_set dans Diag
T AW [AR2,P#2.0]; // Envois consigne Frequenc / Send frequency setpoint
//===============================================================================
L DIW [AR1,P#26.0]; //!\ Offset de Torque_set dans Diag
T AW [AR2,P#4.0]; // Envois consigne de couple
//===============================================================================
L DIW [AR1,P#28.0]; //!\ Offset de STW2 dans Diag
T AW [AR2,P#6.0]; // Envois STW2 / Send STW2
//===============================================================================
LAR2 #SavAR2; //Restauration de AR2
NETWORK
TITLE =Demarrage Moteur
//==============================================================================
//                            MOTOR STARTER
//==============================================================================
//*ODIL_ID:1853_30*
//
UN #Pilotage.AXE2;
R #Def_rl;
R #Ala_rl;
R #Diag.ET200S_OUT.RA22;
R #Diag.ET200S_OUT.RR21;
R #Diag.ET200S_OUT.RR22;
R #Diag.ET200S_OUT.RA21;
NETWORK
TITLE =saut si 2ieme axe n'est pas gere
//Jump if second axis is not used
//*ODIL_ID:1853_31*
//
UN #Pilotage.AXE2;
SPB NoMS;
NETWORK
TITLE =Lecture et mise a disposition des informations F pour le diag
//Reading and provision of safety information for Diag
//*ODIL_ID:1853_32*
//
//------- Initialisation BFSTR
LAR1 AR2;
L P##x_RL;
+AR1;
L DIW [AR1,P#0.0]; //!\POINTER: Data Block Number pointer de la variable x_RL interface d'entree de la BF
T #DBNR;
AUF DB [#DBNR]; //Instance data block number of the F-Function Block
L DID [AR1,P#2.0]; //!\POINTER: Area - Address + 2 par rapport au numero de bloc
LAR2;
L L#-32; //!\ Decalage de 4 octets ( 8*n)
+AR2;
LAR1 P##InRL; //instance
//----------
L DBW [AR2,P#0.0]; //Instance data of the F-Function Block
T LW [AR1,P#0.0]; //!\ Structure inRL
L DBW [AR2,P#4.0]; //Instance data of the F-Function Block
T LW [AR1,P#2.0]; //!\ Structure Stat_X_Rl
//-------
LAR2 #SavAR2;
U #InRL.DSecu; // Pilotage RL / Order RL
= #F_Rl;
NETWORK
TITLE =Defaut a la retombee
//Fault at the fallout
//*ODIL_ID:1853_33*
//
U #STAT_X_RL.IHMDef;
UN #F_Rl;
UN #Diag.ET200S_IN.RL;
O;
U #Def_rl;
UN #Iadf;
= #Def_rl;
NETWORK
TITLE =Alarme a la montee
//Alarm on up
//*ODIL_ID:1853_34*
//
U #STAT_X_RL.IHMAla;
U #F_Rl;
U #Diag.ET200S_IN.RL;
= #Ala_rl;
NETWORK
TITLE =Lecture entrees MS
//Reading MS inputs
//*ODIL_ID:1853_35*
//
LAR1 AR2; //Multi Instance
L P##Diag;
+AR1;
//===============================================================================
L #ET200S_IO_adress; // Adresse module / Modul adress MS
SLD 3;
LAR2;
L EB [AR2,P#1.0];
T DIB [AR1,P#31.0]; // -> Entrees MS / -> MS_Inputs
//===============================================================================
LAR2 #SavAR2; //Restauration de AR2
NETWORK
TITLE =Demarrage moteur pret a fonctionner
//Motor starter ready to run
//*ODIL_ID:1853_36*
//
U #Diag.ET200S_IN.Q1OK;
UN #Diag.ET200S_IN.RL;
UN #Diag.ET200S_IN.RTH;
U #Pilotage.OSAAM_AV;
UN #Def_rl;
U #F_Rl;
= #MS_Ready_to_run;
NETWORK
TITLE =Sorties Axe 2
//Axis 2 outputs
//*ODIL_ID:1853_37*
//
U #MS_Ready_to_run;
= L 32.0;
U L 32.0;
U #Pilotage.AV2;
UN #Pilotage.AR1;
UN #Pilotage.AR2;
UN #Diag.ET200S_IN.AXIS2_LS2;
= #Diag.ET200S_OUT.RA22;
U L 32.0;
U #Pilotage.AR1;
UN #Pilotage.AV1;
UN #Pilotage.AV2;
UN #Diag.ET200S_IN.AXIS2_LS1;
= #Diag.ET200S_OUT.RR21;
U L 32.0;
U #Pilotage.AV1;
UN #Pilotage.AR1;
UN #Pilotage.AR2;
UN #Diag.ET200S_IN.AXIS2_LS1;
= #Diag.ET200S_OUT.RA21;
U L 32.0;
U #Pilotage.AR2;
UN #Pilotage.AV1;
UN #Pilotage.AV2;
UN #Diag.ET200S_IN.AXIS2_LS2;
= #Diag.ET200S_OUT.RR22;
NETWORK
TITLE =Ecriture sorties MS
//Writing MS output
//*ODIL_ID:1853_38*
//
LAR1 AR2; //Multi Instance
L P##Diag;
+AR1;
//===============================================================================
L #ET200S_IO_adress; // Adresse module / Modul adress MS
SLD 3;
LAR2;
L DIB [AR1,P#32.0];
T AB [AR2,P#0.0]; // -> MS_Outputs
//===============================================================================
LAR2 #SavAR2; //Restauration de AR2
NETWORK
TITLE =DIAGNOSTIQUE
//==============================================================================
//                                 DIAGNOSTIC
//==============================================================================
//*ODIL_ID:1853_39*
//

NETWORK
TITLE =Defaut seuils de frequence
//Frequency Threshold Fault
//*ODIL_ID:1853_40*
//
NoMS: U #Df_MinMax;
= L 32.0;
U L 32.0;
BLD 102;
= #Diag.IhmDefMinMax;
U L 32.0;
SPBNB _001;
L 1;
T #Diag.Codedef;
_001: NOP 0;
NETWORK
TITLE =Defaut frequence hors plage
//Frequency out of range Faullt
//*ODIL_ID:1853_41*
//
U #Df_Freq;
= L 32.0;
U L 32.0;
BLD 102;
= #Diag.IhmDefFreq;
U L 32.0;
SPBNB _002;
L 16384;
T #Diag.Codedef;
_002: NOP 0;
NETWORK
TITLE =Variateur indisponible
//Driver Unavailable
//*ODIL_ID:1853_42*
//
UN #Diag.ZSW1.PZD_control;
= L 32.0;
U L 32.0;
BLD 102;
= #Diag.IhmVarindisp;
U L 32.0;
SPBNB _003;
L 8192;
T #Diag.Codedef;
_003: NOP 0;
NETWORK
TITLE =Option selection amont aval
//Selection downstream upstream option
//*ODIL_ID:1853_43*
//
UN #Pilotage.OSAAM_AV;
SPBNB _004;
L 4096;
T #Diag.Codedef;
_004: NOP 0;
NETWORK
TITLE =Defaut variateur
//Drive fault
//*ODIL_ID:1853_44*
//
U #Diag.ZSW1.Drive_fault_active;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmDefVar;
U L 32.0;
SPBNB _005;
L 1024;
T #Diag.Codedef;
_005: NOP 0;
NETWORK
TITLE =Alarme RL
//RL (Line relay) Alarm
//*ODIL_ID:1853_45*
//
U #Ala_rl;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmAlaRl;
U L 32.0;
SPBNB _006;
L 512;
T #Diag.Codedef;
_006: NOP 0;
NETWORK
TITLE =Alarme RLV
//RLV (Drive line relay) Alarm
//*ODIL_ID:1853_46*
//
U #Ala_rlv;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmAlaRlv;
U L 32.0;
SPBNB _007;
L 256;
T #Diag.Codedef;
_007: NOP 0;
NETWORK
TITLE =defaut var non pret
//Drive not ready fault
//*ODIL_ID:1853_61*
//
U #Diag.ZSW1.PZD_control;
UN #Diag.ZSW1.Drive_ready;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmDefVarReady;
U L 32.0;
SPBNB _008;
L 128;
T #Diag.Codedef;
_008: NOP 0;
NETWORK
TITLE =Defaut controle coherence pilotage Variateur
//control orders running Fault
//*ODIL_ID:1853_47*
//
U #T_OAVR.Q;
UN #Diag.IhmDeffrein;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmDefFBpilotage;
U L 32.0;
SPBNB _009;
L 64;
T #Diag.Codedef;
_009: NOP 0;
NETWORK
TITLE =Defaut controle coherence pilotage Variateur
//control orders running Fault
//*ODIL_ID:1853_48*
//
U #Def_Cr;
UN #Diag.IhmDeffrein;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmDefCRpilotage;
U L 32.0;
SPBNB _00a;
L 64;
T #Diag.Codedef;
_00a: NOP 0;
NETWORK
TITLE =Defaut parametrage temps de retombee RLV
//Fallout time parameter of RLV Fault
//*ODIL_ID:1853_49*
//
U #Df_para1;
= L 32.0;
U L 32.0;
BLD 102;
= #Diag.IhmDefPara1;
U L 32.0;
SPBNB _00b;
L 32;
T #Diag.Codedef;
_00b: NOP 0;
NETWORK
TITLE =Defaut RFR
//Brake relay Fault
//*ODIL_ID:1853_50*
//
U #T_RFR.Q;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmDeffrein;
U L 32.0;
SPBNB _00c;
L 4;
T #Diag.Codedef;
_00c: NOP 0;
NETWORK
TITLE =Defaut RL
//RL (Line Relay) Fault
//*ODIL_ID:1853_51*
//
U #Def_rl;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmDefRl;
U L 32.0;
SPBNB _00d;
L 8;
T #Diag.Codedef;
_00d: NOP 0;
NETWORK
TITLE =Defaut RLV
//RLV (Drive line relay) Fault
//*ODIL_ID:1853_52*
//
U #Def_rlv;
= L 32.0;
U L 32.0;
BLD 102;
S #Diag.IhmDefRlv;
U L 32.0;
SPBNB _00e;
L 2;
T #Diag.Codedef;
_00e: NOP 0;
NETWORK
TITLE =Defaut relais thermique
//Thermal relay fault
//*ODIL_ID:1853_53*
//
U #Diag.ET200S_IN.RTH;
SPBNB _00f;
L 16;
T #Diag.Codedef;
_00f: NOP 0;
NETWORK
TITLE =Defaut disjoncteur
//Circuit-breaker fault
//*ODIL_ID:1853_54*
//
UN #Diag.ET200S_IN.Q1OK;
SPBNB _010;
L 2048;
T #Diag.Codedef;
_010: NOP 0;
NETWORK
TITLE =Annulation defaut
//Fault Reset
//*ODIL_ID:1853_55*
//
U #Iadf;
SPBNB _011;
L 0;
T #Diag.Codedef;
_011: NOP 0;
NETWORK
TITLE =Defaut
//Fault
//*ODIL_ID:1853_56*
//
L #Diag.Codedef;
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
NETWORK
TITLE =RAZ DES MOTS DE DIAGNOSTIC
//Diagnotic information Reset
//*ODIL_ID:1853_57*
//
UN #Def;
SPBN NoDe;
SET;
R #Diag.IhmDefVar;
R #Diag.IhmAlaRl;
R #Diag.IhmAlaRlv;
R #Diag.IhmDeffrein;
R #Diag.IhmDefRl;
R #Diag.IhmDefRlv;
R #Diag.IhmDefCRpilotage;
R #Diag.IhmDefFBpilotage;
R #Diag.IhmDefVarReady;
NoDe: NOP 0;
NETWORK
TITLE =Alarme
//Alarm
//*ODIL_ID:1853_58*
//
O #Diag.ZSW1.Drive_warning_active;
ON #Diag.ZSW1.W_Motor_current_limit;
= #Ala;
= #Diag.Ala;
NETWORK
TITLE =Fonction variateur OK
//Drive function OK
//*ODIL_ID:1853_59*
//
U #Diag.ZSW1.Drive_ready;
UN #Def;
= #Fonc_var_OK;
NETWORK
TITLE =Ecriture sortie F_AR
//Writing F-AR outputs
//*ODIL_ID:1853_60*
//
U #Diag.ET200S_IN.Q1OK;
UN #Def_rlv;
UN #Diag.IhmDefFBpilotage;
UN #Diag.IhmDeffrein;
UN #Diag.ZSW1.Drive_fault_active;
U #Diag.ZSW1.Inverter_overload;
U #Diag.ZSW1.Motor_overload;
U(;
UN #Def_rl;
UN #Diag.ET200S_IN.RTH;
ON #Pilotage.AXE2;
);
= #F_AR;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_IHMAIR1"
TITLE =BF_IHMAIR1
//**********************************************************************
//*                           BF_IHMAIR1                              *
//**********************************************************************
//(in english further below)
//
//DESCRIPTION:
//************
//Ce FB met a disposition de l'IHM les informations issues du FB
//BFS_AIR1
//
//Il doit etre appele pour chaque instance du FB BFS_AIR1
//
//Parametres d'entree:
//x: doit etre renseigne avec le bit x de l'instance du FB a surveiller.
//Exemple "ITSZ1_AU_ES_FZ".Z1AIR.x
//
//Parametres de sortie:
//Def: Signale un défaut
//
//Diag:
//   CodeDef: Code de defaut
//      0 - Pas de defaut
//      1 - Defaut: commande EV7b et pas retour Cp7b
//      2 - Defaut: perte du Cp7b alors qu'EV7b toujours commande
//      4 - Defaut: pas de commande EV7b et retour Cp7b
//
//*************************English Information*******************************
//Description
//
//This FB serves for giving to IHMP the information of fault of the FB BFS_AIR1.
//
//It must be called for every instance of the BFS_AIR1
//
//Parameters of input:
//X: Must be informed with the bit x of the instance of the FB to watch.
//Example "ITSZ1_AU_ES_FZ".Z1AIR.x
//
//Parameters of output:
//Def: indicate a fault
//
//Diag:
//   CodeDef: Fault code
//        0 - No fault
//        1 - Fault: control of the EV7b and no CP7b
//        2 - Fault: deactivation of the Cp7b although the EV7b is always
//controlled
//        4 - Fault: no control of the EV7b and Cp7b feedback
//
//************************** _ODIL_ID_ *****************************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 2
//Dernier ID mis en oeuvre / Last ID implemented : 1931_2
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'IHMAIR1'
VERSION : 1.1
VAR_INPUT
  x : POINTER;	//Bit of instance location/Bit de localisation de l'instance
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Fault/Defaut
  Diag : STRUCT	//Diagnosis/Diagnostic
    Def : BOOL;	//Fault/Defaut
    Numliste : INT;	//List number/Numero liste
    Codedef : INT;	//Fault code/Code de defaut
  END_STRUCT ;
END_VAR
VAR
  XDef : BOOL;	//Fault mirror/Image de Def
END_VAR
VAR_TEMP
  STAT : STRUCT	//Identical to the struct.STAT of the BFS_AIR1/Ident.a la struct.STAT du BFS_AIR
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    IHMAla : BOOL;	//Air pressure alarm/Alarme air
    IHMDef : BOOL;	//Air pressure fault / Defaut Air
    MppT : BOOL;	//Gradual pressurising time elapsed/Mise en Pression progressive terminee
    Mcp7b : BOOL;	//Air pressure check memory/Memoire controle pression air
    M_ala : BOOL;	//Alarm memory/ Memoire alarme
  END_STRUCT ;
  DBNR : INT;	//DB number/Numero du DB
END_VAR
BEGIN
NETWORK
TITLE =Initialisation
//Initialization
//*ODIL_ID:1931_1*
//
L DIW [AR2,P#0.0];
T #DBNR;
AUF DB [#DBNR];
L DID [AR2,P#2.0];
LAR1;
//----------
L DBW [AR1,P#0.0];
T LW 0; //Struct STAT
NETWORK
TITLE =Informations de diagnostic
//Diagnostic data
//*ODIL_ID:1931_2*
//
UN #STAT.IHMAla;
UN #STAT.IHMDef;
L B#16#0;
SPB T; //Clear "Diag.Codedef"
L #Diag.Codedef;
<>D;
SPB T;
//-------
U #STAT.IHMAla;
L B#16#1; //Alarm: Air pressure missing
SPB T;
//-------
U #STAT.Mcp7b;
L B#16#2; //Error: Air pressure lost
SPB T;
//-------
L B#16#4; //Error: Unexpected air pressure
//-------
T: T #Diag.Codedef;
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_IHMCR1"
TITLE =BF_IHMCR1
//**********************************************************************
//*                           BF_IHMCR1                                *
//**********************************************************************
//
//(in english further below)
//
//DESCRIPTION:
//************
//Ce FB met a disposition de l'IHM les informations issues des FB BFS_BSEC1,
//BFS_BSECTR1 ou BFS_CR1.
//Il permet d'afficher un defaut relatif a la discordance entre la
//commande et l'etat d'un element d'une boucle de securite (contacteur, relais,
//tension ou relais F-RO).
//
//Il doit etre appele pour chacun des composants des boucles de
//securite (AU,ES,ESTR,FZ,RLV,SOP,SOPR) fournissant un retour.
//
//Parametres d'entree:
//Typ: 1 - Retour 24V
//     2 - Retour Contacteur ou Relais
//     3 - Retour FRO
//
//Def_Maj: Defaut majeur
//
//x: doit etre renseigne avec le bit x de l'instance du FB a surveiller.
//Exemple "ITSZ1_AU_ES_FZ".Z1AU.x
//
//CSecu: doit etre renseigne avec le retour a surveiller.
//
//Parametres de sortie:
//Def: Signale que le composant surveille est la cause du defaut ou de l'alarme
//detecte sur la boucle de securite.
//
//Diag:
//   CodeDef: Code de defaut
//      0 - Pas de defaut
//      1 - Erreur de parametrage
//      2 - Defaut: pas de pilotage et retour (24V)
//      4 - Alarme: pilotage et pas de retour (24V)
//      8 - Defaut: pas de pilotage et retour (Contacteur)
//     16 - Alarme: pilotage et pas de retour (Contacteur)
//     32 - Defaut: pas de pilotage et retour (FRO)
//     64 - Alarme: pilotage et pas de retour (FRO)
//
//*************************English Information*******************************
//Description
//
//This FB serves for giving to IHMP the information of fault of the FB BFS_BSEC1,
//BFS_BSECTR1 or BFS_CR1.
//
//It allows to display a fault concerning the discrepancy between the control and
//the state of an element of a safety loop (contactor, relay, voltage or relay F-
//RO).
//
//It must be called for every of the components of the safety loops
//(AU,ES,ESTR,FZ,RLV,SOP,SOPR) supplying a feedback.
//
//Parameters of input:
//Typ: 1 - 24V feedback
//     2 - Contactor or relay feedback
//     3 - FRO feedback
//
//Def_Maj: Major fault
//
//X: Must be informed with the bit x of the instance of the FB to watch.
//Example "ITSZ1_AU_ES_FZ".Z1AU.x
//
//CSecu: must be informed with feedback to watch.
//
//Parameters of output:
//Def: indicate that the watched component is the cause of the fault or the alarm
//detected on the safety loop.
//
//Diag:
//   CodeDef: Fault code
//        0 - No fault
//        1 - Error of parameter setting
//        2 - Fault: no control and feedback (24V)
//        4 - Alarm: control and no feedback (24V)
//        8 - Fault: no control and feedback (Contactor)
//        16 - Alarm: control and no feedback (Contactor)
//        32 - Fault: no control and feedback( FRO)
//        64 - Alarm control and no feedback( FRO)
//
//******************************* _ODIL_ID_***********************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 6
//Dernier ID mis en oeuvre / Last ID implemented : 1876_6
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'IHM_CR1'
VERSION : 1.2
VAR_INPUT
  Typ : INT;	//Type
  Def_Maj : BOOL;	//Major fault/Defaut majeur
  CSecu : BOOL;	//Feddback/Retour
  x : POINTER;	//Bit of instance location/Bit de localisation de l'instance
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Fault/Defaut
  Diag : STRUCT	//Diagnosis/Diagnostic
    Def : BOOL;	//Fault/Defaut
    Numliste : INT;	//List number/Numero liste
    Codedef : INT;	//Fault code/Code de défaut
  END_STRUCT ;
END_VAR
VAR
  x0 : BOOL;
  MDef : BOOL;	//Fault memory/Memoire defaut
  MAla : BOOL;	//Alarm memory/Memoire alarm
  x3 : BOOL;
  x4 : BOOL;
  x5 : BOOL;
  x6 : BOOL;
  x7 : BOOL;
  xDef : BOOL;	//Fault auxiliary bit/Bit auxilliaire defaut
  xAla : BOOL;	//Alarm auxiliary bit/Bit auxilliaire alarme
END_VAR
VAR_TEMP
  STAT : STRUCT	//Ident.to the struct.STAT of the BFS_BSEC1/Ident.a la struct.STAT du BFS_BSEC1
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    IHMDef : BOOL;	//Fault at the deactivation/Defaut a la retombee
    IHMAla : BOOL;	//Alarm at the activation/Alarme à la montee
  END_STRUCT ;
  DBNR : INT;	//DB Number/Numero du DB
  Sh : INT;	//Shift counter/Compteur de decalage
  In : BOOL;	//Formated feedback/Retour formate
END_VAR
BEGIN
NETWORK
TITLE =Initialization
//Initialization
//*ODIL_ID:1876_1*
//
L B#16#2; //Max - Min (3 - 1)
L #Typ; //Value: DestNum
+ -1; //Min (1)
T #Sh;
-D;
SPM PErr; //Parameterization Error
//-------
L DIW [AR2,P#4.0]; //!\POINTER: Data Block Number
T #DBNR;
AUF DB [#DBNR]; //Instance data block number of the F-Function Block
L DID [AR2,P#6.0]; //!\POINTER: Area - Address
LAR1;
//----------
L DBW [AR1,P#0.0]; //Instance data of the F-Function Block
T LW 0; //!\ Structure "Stat"
NETWORK
TITLE =Inversion en cas de type 2 (Contacteur ou relais -contact NC)
//Invert signal in case of type 2 (Contactor or Relay - Normally Closed contact)
//*ODIL_ID:1876_2*
//------- Input Signal
//
L #Typ;
L B#16#2;
==D;
X #CSecu;
= #In;
NETWORK
TITLE =Defaut -> retour non attendu
//Fault -> Unexpected Feedback
//*ODIL_ID:1876_3*
//
U #STAT.IHMDef;
FP #xDef;
UN #Def_Maj;
U #In;
O;
U #STAT.IHMDef;
U #MDef;
= #MDef;
NETWORK
TITLE =Alarme -> Manque retour
//Alarm -> Missing Feedback
//*ODIL_ID:1876_4*
//
U(;
U #STAT.IHMAla;
FP #xAla;
UN #Def_Maj;
UN #In;
O;
U #STAT.IHMAla;
U #MAla;
);
UN #MDef;
= #MAla;
NETWORK
TITLE =Mise a jour de Def et Diag.Def
//Update of Def and Diag.Def
//*ODIL_ID:1876_5*
//
L #Sh;
SLW 1; //Multiply by 2
L DIB [AR2,P#18.0]; //MDef & MAla
SLW;
TCD: T #Diag.Codedef;
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
BEA;
NETWORK
TITLE =Erreur de parametrage
//Parameterization Error
//*ODIL_ID:1876_6*
//
PErr: L B#16#1;
SPA TCD;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_IHMCAME_ROBOT1"
TITLE =BF_IHMCAME_ROBOT1
//**********************************************************************
//*                           BF_IHMCAME_ROBOT1                        *
//**********************************************************************
//English version further below
//
//DESCRIPTION:
//************
//Ce FB sert a mettre a disposition d'IHMP les informations de defaut du
//BFS_CAME_ROBOT1
//
//Il permet d'afficher un defaut concernant la discordance entre l'etat du
//controle came et l'etat attendu.
//
//Il doit etre appele pour chaque instance de la BFS CAME_ROBOT1
//
//Parametres d'entree:
//Def_maj: Defaut majeur
//x: doit etre renseigne avec le bit x de l'instance du FB a surveiller.
//Exemple "ITSZ1_SOPR".R1CAME.x
//
//Parametres de sortie:
//Def: Signale un defaut
//
//Diag:
//   CodeDef: Code de defaut
//      0 - Pas de defaut
//      1 - Defaut: Came a 0 et controle came (etat attendu) a 1
//      2 - Defaut: Came a 1 et controle came (etat attendu) a 0
//
//*************************English Information*******************************
//Description
//
//This FB serves for giving to IHMP the information of fault of the FB
//BFS_CAME_ROBOT1
//
//It allows to display a fault concerning the discrepancy between the check of
//the
//cam monitoring and expected state.
//
//It must be called for each instance of the BFS_CAME_ROBOT1
//
//Parameters of input:
//Def_maj: Major fault
//X: Must be informed with the bit x of the instance of the FB to watch.
//Example "ITSZ1_SOPR".R1CAME.x
//
//Parameters of output:
//Def: indicate a fault
//
//Diag:
//   CodeDef: Fault code
//        0 - No fault
//        1 - Fault: Cam input at 0 and cam check (expected state) at 1
//        2 - Fault: Cam input at 1 and cam check (expected state) at 0
//
//******************************* _ODIL_ID_***********************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 6
//Dernier ID mis en oeuvre / Last ID implemented : 1875_6
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'IHM_CAME'
VERSION : 1.1
VAR_INPUT
  Def_Maj : BOOL;	//Major fault/Defaut majeur
  x : POINTER;	//Bit of instance location/Bit de localisation de l'instance
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Fault/Defaut
  Diag : STRUCT	//Diagnosis/Diagnostic
    Def : BOOL;	//IHMP fault/Defaut IHMP
    Numliste : INT;	//IHMP list number/Numero liste IHMP
    Codedef : INT;	//IHMP fault code/Code defaut IHMP
  END_STRUCT ;
END_VAR
VAR
  xDef : BOOL;	//Auxiliary bit of the fault/ Bit auxiliaire de def
END_VAR
VAR_TEMP
  IN : STRUCT	//Ident.to the struct.IN of the BFS_CAME_ROBOT1/Ident.a la struct.IN du BFS_CAME_
    Val_Ctrl : BOOL;	//Validation controle
    Came : BOOL;	//Entree F came
    C_Came0 : BOOL;	//Controle came à 0
    C_Came1 : BOOL;	//Controle came à 1
    Iadf : BOOL;	//Annulation defaut
  END_STRUCT ;
  OUT : STRUCT	//Ident.to the struct.OUT of the BFS_CAME_ROBOT1/Ident.a la struct.IN du BFS_CAME
    Def : BOOL;	//Defaut Came
  END_STRUCT ;
  DBNR : INT;	//DB Number/Numero du DB
  rDef : BOOL;	//Rising edge of the fault/Front montant du defaut
END_VAR
BEGIN
NETWORK
TITLE =Initialisation
//Initialisation
//*ODIL_ID:1875_1*
//
L DIW [AR2,P#2.0]; //!\POINTER: Data Block Number
T #DBNR;
AUF DB [#DBNR]; //Instance data block number of the F-Function Block
L DID [AR2,P#4.0]; //!\POINTER: Area - Address
LAR1;
L L#-32; //Decrease AR1 to the first Byte of the Instance
+AR1;
L DBW [AR1,P#0.0];
T LW 0; //Struct IN
L DBW [AR1,P#2.0];
T LW 2; //Struct OUT
NETWORK
TITLE =Front montant du defaut filtre du Def_Maj
//Rising Edge of the fault filtered by Def_Maj
//*ODIL_ID:1875_2*
//
U #OUT.Def;
FP #xDef;
UN #Def_Maj;
= #rDef;
NETWORK
TITLE =Mise a 1 du Codedef
//Put in 1 of the Codedef
//*ODIL_ID:1875_3*
//
U #rDef;
U #IN.C_Came1;
UN #IN.Came;
SPBNB _001;
L B#16#1;
T #Diag.Codedef;
_001: NOP 0;
NETWORK
TITLE =Mise a 2 du Codedef
//Put in 2 of the Codedef
//*ODIL_ID:1875_4*
//
U #rDef;
U #IN.C_Came0;
U #IN.Came;
SPBNB _002;
L B#16#2;
T #Diag.Codedef;
_002: NOP 0;
NETWORK
TITLE =Raz du Codedef
//Reset of the Codedef
//*ODIL_ID:1875_5*
//
UN #OUT.Def;
SPBNB _003;
L B#16#0;
T #Diag.Codedef;
_003: NOP 0;
NETWORK
TITLE =Mise a jour Def et Diagdef
//Update of Def and Diagdef
//*ODIL_ID:1875_6*
//
L #Diag.Codedef;
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_IHMCRM1"
TITLE =BF_IHMCRM1
//**********************************************************************
//*                           BF_IHMCRM1                              *
//**********************************************************************
//(in english further below)
//
//DESCRIPTION:
//************
//Ce FB met a disposition de l'IHMP les informations de defaut du FB BFS_CRM1
//
//Il doit être appele pour chaque instance du FB BFS_CRM1
//
//Parametres d'entree:
//Def_Maj: Defaut majeur
//
//x: doit etre renseigne avec le bit x de l'instance du FB a surveiller.
//Exemple: "ITS0".I0CRM.x
//
//Parametres de sortie:
//Def: Signale que le composant surveille est la cause du defaut detecte sur la
//boucle de securite.
//
//Diag:
//   CodeDef: Code de defaut
//      0 - Pas de defaut
//      1 - Defaut: commande relais et pas de retour
//      2 - Defaut: pas de commande relais et retour actif
//
//*************************English Information*******************************
//Description
//
//This FB serves for giving to IHMP the information of fault of the FB BFS_CRM1.
//
//It must be called for every instance of the FB BFS_CRM1
//
//Parameters of input:
//Def_Maj: Major fault
//
//X: Must be informed with the bit x of the instance of the FB to watch.
//Example "ITS0".I0CRM.x
//
//Parameters of output:
//Def: indicate that the watched component is the cause of the fault detected on
//the safety loop.
//
//Diag:
//   CodeDef: Fault code
//        0 - No fault
//        1 - Fault: control relay and no feedback
//        2 - Fault: no control relay and activated feedback
//NB Reseaux BF 1er Version / Network Number in 1ft version : 5
//Dernier ID mis en oeuvre / Last ID implemented : 1877_5
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'IHM_CRM1'
VERSION : 1.1
VAR_INPUT
  Def_Maj : BOOL;	//Major fault/Defaut majeur
  x : POINTER;	//Bit of instance location/Bit de localisation de l'instance
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Fault/Defaut
  Diag : STRUCT	//Diagnosis/Diagnostic
    Def : BOOL;	//IHMP fault/Defaut IHMP
    Numliste : INT;	//IHMP list number/Numero liste IHMP
    Codedef : INT;	//IHMP fault code/Code defaut IHMP
  END_STRUCT ;
END_VAR
VAR
  xDef : BOOL;	//Fault auxiliary bit / Bit auxiliaire defaut
  xAla : BOOL;	//Alarm auxiliary bit / Bit auxiliaire alarme
END_VAR
VAR_TEMP
  STAT : STRUCT	//Ident.to the struct.STAT of the BFS_CRM1/Ident.a la struct.STAT du BFS_CRM1
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    IHMDef : BOOL;	//Fault at the deactivation/Defaut a la retombee
    IHMAla : BOOL;	//Alarm at the activation/Alarme à la montee
  END_STRUCT ;
  DBNR : INT;	//DB number/Numero du DB
END_VAR
BEGIN
NETWORK
TITLE =Initialisation
//Initialisation
//*ODIL_ID:1877_1*
//
L DIW [AR2,P#2.0]; //!\POINTER: Data Block Number
T #DBNR;
AUF DB [#DBNR]; //Instance data block number of the F-Function Block
L DID [AR2,P#4.0]; //!\POINTER: Area - Address
LAR1;
//----------
L DBW [AR1,P#0.0];
T LW 0; //STAT structure
NETWORK
TITLE =Mise a 1 du Codedef
//Put in 1 of the Codedef
//*ODIL_ID:1877_2*
//
U #STAT.IHMAla;
FP #xAla;
UN #Def_Maj;
SPBNB _001;
L B#16#1;
T #Diag.Codedef;
_001: NOP 0;
NETWORK
TITLE =Mise a 2 du Codedef
//Put in 2 of the Codedef
//*ODIL_ID:1877_3*
//
U #STAT.IHMDef;
FP #xDef;
UN #Def_Maj;
SPBNB _002;
L B#16#2;
T #Diag.Codedef;
_002: NOP 0;
NETWORK
TITLE =Raz du Codedef
//Reset of the Codedef
//*ODIL_ID:1877_4*
//
UN #STAT.IHMDef;
UN #STAT.IHMAla;
SPBNB _003;
L B#16#0;
T #Diag.Codedef;
_003: NOP 0;
NETWORK
TITLE =Mise a jour de Def et Diag.Def
//Upate of Def and Diag.Def
//*ODIL_ID:1877_5*
//
L #Diag.Codedef;
L B#16#0;
<>D;
= #Def;
= #Diag.Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_IHMMUT1"
TITLE =BF_IHMMUT1
//**********************************************************************
//*                           BF_IHMMUT1                               *
//**********************************************************************
//
//(in english further below)
//
//DESCRIPTION:
//************
//Ce FB sert a mettre a disposition d'IHMP les informations de defaut du FB
//BFS_MUT1
//
//Il permet d'afficher un defaut concernant l'intrusion
//
//Il doit etre appele pour chaque instance de la BFS MUT1
//
//Parametres d'entree:
//x: doit etre renseigne avec le bit x de l'instance du FB a surveiller.
//Exemple "ITSZ1_AU_ES_FZ".Z1ANT1.x
//
//Parametres de sortie:
//Def: Signale un defaut
//
//Diag:
//   CodeDef: Code de defaut
//      0 - Pas de defaut
//      1 - Intrusion detecte
//      2 - Defaut: equipement anti-intrusion
//      4 - Defaut: equipement anti-intrusion
//      8 - Defaut: cellule anti-intrusion 1
//      16 - Defaut: cellule anti-intrusion 2
//      32 - Defaut: detecteur de passage 1
//      64 - Defaut: detecteur de passage 2
//      128 - Defaut inconnu
//
//*************************English Information*******************************
//Description
//
//This FB serves for giving to IHMP the information of fault of the FB
//BFS_MUT1
//
//It allows to display a intrusion fault.
//
//It must be called for each instance of the BFS_MUT1
//
//Parameters of input:
//X: Must be informed with the bit x of the instance of the FB to watch.
//Example "ITSZ1_AU_ES_FZ".Z1ANT1.x
//
//Parameters of output:
//Def: indicate a fault
//
//Diag:
//   CodeDef: Fault code
//      0 - No fault
//      1 - Detected intrusion
//      2 - Anti-intrusion equipment fault
//      4 - Anti-intrusion equipment fault
//      8 - Anti-intrusion photocell 1 fault
//      16 - Anti-intrusion photocell 2 fault
//      32 - Dynamic movement sensor 1 fault
//      64 - Dynamic movement sensor 2 fault
//      128 - Unknown fault
//
//************************* _ODIL_ID_ *******************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 2
//Dernier ID mis en oeuvre / Last ID implemented : 1874_2
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'IHM_MUT'
VERSION : 1.1
VAR_INPUT
  x : POINTER;	//Bit of instance location/Bit de localisation de l'instance
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Fault/Defaut
  Diag : STRUCT	//Diagnosis/Diagnostic
    Def : BOOL;	//IHMP fault/Defaut IHMP
    Numliste : INT;	//Number of IHMP list/Numero liste IHMP
    Codedef : INT;	//IHMP fault code/Code defaut IHMP
  END_STRUCT ;
END_VAR
VAR
  xDef : BOOL;	//Auxiliary bit of the fault/Bit auxiliaire du defaut
END_VAR
VAR_TEMP
  IN : STRUCT	//Identical to the struct.IN of the BFS_MUT1/Identique a la struct.IN du BFS_MUT1
    CAINT1 : BOOL;	//Anti-intrusion sensor 1/Controle anti-intrusion 1
    CAINT2 : BOOL;	//Anti-intrusion sensor 2/Controle anti-intrusion 2
    DPAS1 : BOOL;	//Crossing sensor 1/Detecteur de passage 1
    DPAS2 : BOOL;	//Crossing sensor 2/Detecteur de passage 2
    CMUT : BOOL;	//Muting condition/Condition de muting
  END_STRUCT ;
  STAT : STRUCT	//Identical to the struct.STAT of the BFS_MUT1/Ident.a la struct.STAT du BFS_MUT1
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    IHMDef : BOOL;	//HMI fault/Defaut IHM
    MP0_AINT1 : BOOL;	//Anti-intrusion sensor 1 temp. reset memory/Mem.passage 0 ctl anti-intrusion 1
    MP0_AINT2 : BOOL;	//Anti-intrusion sensor 2 temp. reset memory/Mem.passage 0 ctl anti-intrusion 2
  END_STRUCT ;
  DBNR : INT;	//DB number/Numero du DB
END_VAR
BEGIN
NETWORK
TITLE =Initialisation
//Initialization
//*ODIL_ID:1874_1*
//
L DIW [AR2,P#0.0];
T #DBNR;
AUF DB [#DBNR];
L DID [AR2,P#2.0];
LAR1;
L L#-32;
+AR1;
//----------
L DBW [AR1,P#0.0];
T LW 0; //Struct IN
L DBW [AR1,P#4.0];
T LW 2; //Struct STAT
NETWORK
TITLE =Mise a jour de Def,Diag.Def et Diag.Codedef
//Update of the Def,Diag.Def et Diag.Codedef
//*ODIL_ID:1874_2*
//
U #STAT.IHMDef;
X #xDef; //Edge detection
SPBN E;
L B#16#0;
U #STAT.IHMDef; //Rising edge
= #xDef;
SPBN T;
//-------
U #IN.CMUT; //Muting requested
SPB M;
ON #IN.CAINT1;
ON #IN.CAINT2;
L B#16#1; //Violation
SPB T;
//-------
U #IN.DPAS1;
L B#16#20; //(32) Muting Ended with DPAS1
SPB T;
//-------
U #IN.DPAS2;
L B#16#40; //(64) Muting Ended with DPAS2
SPB T;
//-------
UN #STAT.MP0_AINT1;
L B#16#8; //Muting Ended without CAINT1 detection
SPB T;
//-------
UN #STAT.MP0_AINT2;
L B#16#10; //Muting Ended without CAINT2 detection
SPB T;
L B#16#80; //128
SPA T;
//-------
M: UN #IN.CAINT1;
L B#16#2; //Muting started without CAINT1
SPB T;
//-------
UN #IN.CAINT2;
L B#16#4; //Muting started without CAINT2
SPB T;
L B#16#80; //128
T: T #Diag.Codedef;
//-------
E: L #Diag.Codedef;
L 0;
<>D;
= #Def;
= #Diag.Def;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_IHMPORTE1"
TITLE =BF_IHMPORTE1
//**********************************************************************
//*                           BF_IHMPORTE1                             *
//**********************************************************************
//
//(in english further below)
//
//DESCRIPTION:
//************
//Ce FB met a disposition de l'IHM le defaut procedure d'intervention et les
//informations issues du FB BFS_PORTE1
//
//Il doit etre appele pour chaque instance du FB BFS_PORTE1
//
//Parametres d'entree:
//x: doit etre renseigne avec le bit x de l'instance du FB a surveiller.
//Exemple "ITSZ1_AU_ES_FZ".Z1PORTE1.x
//
//Parametres de sortie:
//Def: Signale un defaut de procedure d'intervention
//Diag:
//   CodeDef: Code de defaut
//        0 - Pas de defaut
//        1 - Defaut procedure d'intervention
//
//   Ihmcfp : BOOL ;//Controle fermeture porte
//   Ihmcses : BOOL ;//Controle selecteur en service
//   Ihmcss : BOOL ;//Controle selecteur de securite
//   Ihmmbfp : BOOL ;//Memoire bon fonctionnement portillon
//
//*************************English Information*******************************
//Description
//
//This FB serves for giving to IHMP the information of maintenance procedure
//fault
//and the informations of the FB BFS_PORTE1.
//
//It must be called for every instance of the FB BFS_PORTE1.
//
//Parameters of input:
//X: Must be informed with the bit x of the instance of the FB to watch.
//Example "ITSZ1_AU_ES_FZ".Z1PORTE1.x
//
//Parameters of output:
//Def: indicate a maintenance procedure fault
//Diag:
//   CodeDef: Fault code
//        0 - No fault
//        1 - Maintenance procedure fault
//
//   Ihmcfp : BOOL ;//Closed gate check
//   Ihmcses : BOOL ;//Power On switch check
//   Ihmcss : BOOL ;//Safety switch check
//   Ihmmbfp : BOOL ;//Memory of good working order of the gate
//
//************************** _ODIL_ID_ *****************************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 2
//Dernier ID mis en oeuvre / Last ID implemented : 1930_2
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'IHMPORTE'
VERSION : 1.1
VAR_INPUT
  x : POINTER;	//Bit of instance location/Bit de localisation de l'instance
END_VAR
VAR_OUTPUT
  Def : BOOL;	//Fault/Defaut
  Diag : STRUCT	//Diagnosis/Diagnostic
    Def : BOOL;	//Fault/Defaut
    Numliste : INT;	//List number/Numero liste
    Codedef : INT;	//Fault code/Code de defaut
    Ihmcfp : BOOL;	//Closed gate check/Ctrl fermeture portillon
    Ihmcses : BOOL;	//Safety switch check/Ctrl selecteur ES
    Ihmcss : BOOL;	//Power on switch check/Ctrl selecteur SS
    Ihmmbfp : BOOL;	//Memory of good working order of the gate/Memoire bon fonctionnement porte
  END_STRUCT ;
END_VAR
VAR_TEMP
  IN : STRUCT	//Identical to the struct.IN of the BFS_PORTE1/Ident.a la struct.IN du BFS_PORTE1
    Ss : BOOL;	//Safety switch/Selecteur de Securite
    Cfp : BOOL;	//Closed gate check/Controle Fermeture Portillon
    Spes : BOOL;	//Power on gate switch/Selecteur Portillon En Service
    Iadf : BOOL;	//Reset/Acquittement
  END_STRUCT ;
  STAT : STRUCT	//Ident.to the struct.STAT of the BFS_PORTE1/Ident.a la struct.STAT du BFS_PORTE1
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    DPI : BOOL;	//Maintenance procedure fault/Defaut procedure d'intervention
    DemOuv : BOOL;	//Request of the gate opening for check of the good working order of the gate
    XSel : BOOL;	//Edge auxiliary/Auxilliaire de front
  END_STRUCT ;
  DBNR : INT;	//DB Number/Numero du DB
END_VAR
BEGIN
NETWORK
TITLE =Initialisation
//Initialization
//*ODIL_ID:1930_1*
//
L DIW [AR2,P#0.0];
T #DBNR;
AUF DB [#DBNR];
L DID [AR2,P#2.0];
LAR1;
L L#-32;
+AR1;
//----------
L DBW [AR1,P#0.0];
T LW 0; //Struct IN
L DBW [AR1,P#4.0];
T LW 2; //Struct STAT
NETWORK
TITLE =Mise à jour des informations pour l'IHM
//Update of the informations for the HMI
//*ODIL_ID:1930_2*
//
L B#16#0;
U #STAT.DPI;
= #Def;
= #Diag.Def; // Defaut procédure d'intervention
SPBN NErr;
L B#16#1;
NErr: T #Diag.Codedef;
UN #IN.Cfp;
= #Diag.Ihmcfp; // Ctrl fermeture portillon
UN #IN.Spes;
UN #STAT.DemOuv;
= #Diag.Ihmcses; // Ctrl selecteur ES (FZ)
UN #IN.Ss;
UN #STAT.DemOuv;
= #Diag.Ihmcss; // Ctrl selecteur SS (ES)
U #STAT.DemOuv;
= #Diag.Ihmmbfp; // Memoire bon fonctionnement portillon
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_ZONE_MODE_IHM1"
TITLE =BF_ZONE_MODE_IHM1
//****************************************************************************
//*                           BF ZONE_MODES_IHM1 (SAFETY_V2)                  *
//
//*     ASSURE LA GESTION DES MODES MARCHE ET DE FONCTIONNEMENT D UNE ZONE    *
//*                           Sans UDT Lien_sec                               *
//*     ZONE OPERATING AND RUNNING MODES MANAGEMENT Without "Lien_sec" UDT    *
//****************************************************************************
//(in English further below)
//
//DESCRIPTION:
//******************
//LA BF ASSURE POUR LE TRAITEMENT D'UNE ZONE :
//
//- LA CREATION DU MODE MANUEL ZONE
//- LA CREATION DES MODES PAS A PAS ET ORIGINE DE CYCLE
//- LE CONTROLE DE LA COMMUNICATION AVEC LES PUPITRES IHM
//- LA DOCUMENTATON DU MOT LIEN_PUP UTILISE PAR LES FB MOUVEMENT (EX: MOUV2P)
//POUR LA DESCRIPTION DETAILLEE DE LA FB : VOIR GUIDE GE03FP274
//
//MISE EN OEUVRE :
//***************
//La BF peut gerer les 4 types de pupitre MOP,SOP,LOP,DLOP avec 1 BF Par zone.
//Limites pour Ilot avec MOP et SOP: 4 pupitres par Zone (MOP Compris)maxi 9 zones
//Limite pour Ilot avec LOP et DLOP: 1 pupitre par Zone (LOP ou DLOP)maxi 2 zones
//
//1) Blocs associees :
//-------------------
// UDT 1998 " lien_pup ", UDT 2004  " lien Ilot "
//
//2) Utilisations des commandes :
//------------------------------
//Les informations entre les ecrans IHM ( IHMP+ ou Wincc)et le Bloc sont assurees
//par l'entree Pilot et la sortie Diag.
//Pour assurer la mise en uvre automatique entre le programme API et Les ecrans
//les Noms d'instances du bloc doit suivre la regle suivante :
//<Z><Numero de zone><MODES>
//(Exemple : Z1MODES pour traitement des modes et pupitres de la Zone 1)
//
//Le Bloc doit obligatoirement être deposer dans les FB$00 (avec $ = au numero de
//la zone de 1 à 9)
//A ce FB doit être associe un DB d'instance DB$00 (avec $ = au numero de la zone
//de 1 à 9)
//Le nom symbolique du DB D'instance du FB$00 doit suivre la regle suivante :
//<Z><Numero de zone>
//(Exemple : Z1 pour le DB100 de la Zone 1)
//
//Suivant le type de composant gere dans la zone les informations peuvent venir
//ou
//être à destination soit :
//- d'unite de commande diametre 22 ( BP, selecteur, BPL, Voyant) = MOP, LOP, DLOP
//ou bien
//- de bouton ou voyant logiciel sur une IHM
//
//3) Forcage des modes de fonctionnement via programme :
//------------------------------------------------------
//L'entree "Prog_selmdf" permet de forcer les modes de fonctionnement avec les
//valeurs suivantes :
//1 = Normale
//2 = Vidage
//3 = Arret prehension vide
//8 = Retour en origine de cycle
//16 = Mode pas à pas
//
//En positionnant l'entree à une de ces valeurs le mode de pilotage sur l'ihm est
//charge à la valeur de Prog_selmdf.
//
//Le mode de fonctionnement ne peut être modifie via l'Ihm temps qu'une valeur
//connue est positionne en entre de Boite sur Prog_selmdf.
//
//Au niveau du programme il faut donc utiliser les sorties de la BF correspondant
//Z_mnorm, Z_mvid , Z_mapv, Z_mroc, et Z_mpap pour conditionner la mise à zero de
//l'entree prog_selmdf dans la section programme forçant la demande
//
//CODE DE DEFAUT/ALARME :
//**********************
//Valeur de Diag.codedef :
//1   : Attente validation mode de marche
//2   : Basculer le commutateur pup 1 sur AUTO
//4   : Basculer le commutateur pup 2 sur AUTO
//8   : Basculer le commutateur pup 3 sur AUTO
//16  : Basculer le commutateur pup 4 sur AUTO
//32  : Zone en Mode special
//64  : Appuyer sur le bouton marche cycle
//128: Blocage zone pour documentation de l'arrêt- apres documentation de l'arrêt
//appuyer sur rearmement
//256 : Arrêt zone suite a non engagement de la zone apres selection engagement
//zone appuyer sur le bouton rearmement
//
//
//
//
//
//*************************ENGLISH INFORMATION ***************************
//
//DESCRIPTION
//******************
//
//THE BF MANAGES FOR THE ZONE :
//
//- CREATION OF ZONE MANUAL MODE
//- CREATION OF STEP BY STEP MODE, HOME POSITION MODE
//- COMMUNICATION CONTROL WITH HMI OPERATOR PANELS
//- MODIFICATION OF THE LIEN_PUP UDT THAT IS USED BY MOVEMENT FBs (Ex: MOUV2P)
//FOR DETAILED DESCRIPTION, SEE FB GUIDE GE03FP274
//
//OPERATING :
//***********
//The BF can manage the four types of panels,MOP,SOP,LOP,DLOP with 1 BF by zone
//Limit for 1 facility with MOP and SOP: 4panels per zone(Mop including)9zones max
//limit for 1 facility with LOP and DLOP : 1panel per zone (LOP or DLOP)2zones max
//
//1)Associated blocks:
//-------------------
// UDT 1998 "Lien_pup", UDT 2004 "lien Ilot"
//
//2) Using for order :
//------------------
//The information exchanged between the HMI screens (IHMP+ or Wincc) and the
//Block
//are carried out by the Pilot input and the Diag output.
//To allow automatic implementation between the PLC program and the screens,
//the block instance names must observe the following rule:
//<Z><Zone number><MODES>
//(Example: Z1MODES for processing the modes and panels in Zone 1)
//
//The Block (BF) must be deposited in the FB$00 ($ = the number of the zone from
//1
//to 9)
//An instance DB DB$00 (where $ = the number of the zone from 1 to 9) must be
//associated with this FB
//The symbolic name of the FB$00 instance DB must observe the following rule:
//<Z><Zone number>
//(Example: Z1 for Zone 1's DB100)
//
//Depending on the type of components managed in the zone, the information can be
//incoming or outgoing either:
//- from the 22 mm diameter control unit (push button, selector, illuminated push
//button, Lamp) = MOP, LOP, DLOP
//or
//-from software buttons or lamps on a touch screen HMI  = SOP, LOP or DLOP
//
//3)Forcing of operating modes by program :
//----------------------------------------
//The input "Prog_selmdf" can be used to force the following operating modes
//with values:
//1 = Normal
//2 = Emptying
//4 = Empty Gripper Stop
//8 = Back to home position
//16 = step by step
//By positioning the input on one of these values, the control mode on the Hmi is
//loaded with the value Prog_selmdf.
//
//The operating mode cannot be modified via the Hmi until a known value is
//positioned on Prog_selmdf on the Unit input.
//
//On the program it is therefore necessary to use the outputs of the
//corresponding
//FB Z_mnorm, Z_mvid , Z_mapv, Z_mroc, and Z_mpap as a condition for the
//resetting
//the input Prog_selmdf to zero in the program section forcing the request
//
//ALARM / FAULT CODE :
//********************
//Diag.codedef values :
//1   : Waiting for Running mode Validation
//2   : Switch panel 1 selector to AUTO
//4   : Switch panel 2 selector to AUTO
//8   : Switch panel 3 selector to AUTO
//16  : Switch panel 4 selector to AUTO
//32  : Zone in Special Mode
//64  : Push Cycle start button
//128: Zone hold because stop log must be filled in - after filling the stop
//log in, push control on or cycle start button
//256 : Zone is stopped because SMP is not in service. after selecting "zone SMP
//in service", push control on or cycle start button
//
//********************************** _ODIL_ID_ **********************************
//
//NB Reseaux BF 1er Version / Network Number in 1ft version : 94
//Dernier ID mis en oeuvre / Last ID implemented : 1932_94
//Liste des ID supprimes (Num de reseau seul) / ID deleted list ( only network
//number)  : ....
//
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'ZMOD_IHM'
VERSION : 1.2
VAR_INPUT
  Def_maj : BOOL;	//Zone Major fault Information/Info de defaut majeur de la zone
  CS_Auto : BOOL;	//safety condition for automatic mode / Condition securite pour mode Auto
  CS_manu : BOOL;	//Safety condition for manual mode / Condition securite pour Mode manu
  lien_ilo : LIEN_ILOT;	//Facility link/Lien ILOT
  Z_sdv : BOOL;	//Zone Dry run Selector / Selecteur deverminage Zone
  Z_sdapp : BOOL;	//Learning Request Selector / Selecteur Demande Apprentissage
  Z_inbz : BOOL;	//Zone hold Inhibition / Inhibition Blocage Zone
  Z_marb : BOOL;	//Zone all robots AUTO mode/Marche Auto de Tous les Robots de la Zone
  Z_sneng : BOOL;	//Zone "SMP not in service" Selector/Selecteur Non Engagement Zone
  S_blz : BOOL;	//(SMP) Zone hold Information/Info Blocage Zone (SMP)
  Z_iap : BOOL;	//Zone Part Absence Information / Info Absence Piece Zone
  Z_cmdg : BOOL;	//Zone Degraded Mode Condition/Condition Marche Degrade Zone
  Z_ipa : BOOL;	//Zone Part Absence Information/ Info Absence Piece Zone
  Z_repli : BOOL;	//Zone Robots Home Position Information/Info Repli Robots de la Zone
  Z_bmcy : BOOL;	//Zone Cycle Start Button/Bouton Marche Cycle Zone
  Z_bacy : BOOL;	//Zone Cycle Stop Button/Bouton Arret Cycle Zone
  Nbrpup : INT;	//Number of Panels declared in Zone/Nombre de pupitre presents dans la zone
  Sma : BOOL;	//MOP AUTO mode selector/Selecteur mode automatique MOP
  Smm : BOOL;	//MOP MANU mode selector/Selecteur mode manuel MOP
  Z_badf : BOOL;	//MOP fault reset button/Bouton annulation defaut MOP
  prog_selmdf : WORD;	//Operating mode modified by prog./mode de fonctionnement modiifie par programme
  Pilot : STRUCT	//HMI to PLC exchange data/information dechange IHM vers API
    Ihmmcy : BOOL;	//HMI Cycle Start Information/Info marche cycle ihm
    Ihm1selmdm : WORD;	//Panel1 Manu/Auto information/info Manu/auto sur pupitre 1
    Ihm2selmdm : WORD;	//Panel2 Manu/Auto information/info Manu/auto sur pupitre 2
    Ihm3selmdm : WORD;	//Panel3 Manu/Auto information/info Manu/auto sur pupitre 3
    Ihm4selmdm : WORD;	//Panel4 Manu/Auto information/info Manu/auto sur pupitre 4
    Ihmselmdf : WORD;	//Zone Operating modes Information/Info mode de fonctionnement de la zone
    Ihmdacy : BOOL;	//HMI Cycle Stop Request Information/Info demande arret cycle IHM
    Ihmadf : BOOL;	//HMI Fault Reset Information/Info annulation defaut IHM
    Ihmtl : BOOL;	//HMI Test Lamp Information/Info test lampe IHM
    Ihm1vie : WORD;	//HMI 1 Heart Beat Word/Mot de vie IHM 1
    Ihm2vie : WORD;	//HMI 2 Heart Beat Word/Mot de vie IHM 2
    Ihm3vie : WORD;	//HMI 3 Heart Beat Word/Mot de vie IHM 3
    Ihm4vie : WORD;	//HMI 4 Heart Beat Word/Mot de vie IHM 4
    Ihmnmvt : INT;	//Selected movement number for Manual Cmd/Numero du mouvement en selection manuel
    Ihmnpage : INT;	//Movement screen number for Manual Cmd/Num page du mouvement en selection manuel
    Ihm1pm : BOOL;	//Panel 1 in Manual Commands/Pupitre 1 en pilotage manuel
    Ihm2pm : BOOL;	//Panel 2 in Manual Commands/Pupitre 2 en pilotage manuel
    Ihm3pm : BOOL;	//Panel 3 in Manual Commands/Pupitre 3 en pilotage manuel
    Ihm4pm : BOOL;	//Panel 4 in Manual Commands/Pupitre 4 en pilotage manuel
    Ihm1cns : BOOL;	//Panel 1 Instructions/consigne pupitre 1
    Ihm2cns : BOOL;	//Panel 2 Instructions/consigne pupitre 2
    Ihm3cns : BOOL;	//Panel 3 Instructions/consigne pupitre 3
    Ihm4cns : BOOL;	//Panel 4 Instructions/consigne pupitre 4
    Ihm1inf : BOOL;	//Panel 1 Information/Info pupitre 1
    Ihm2inf : BOOL;	//Panel 2 Information/Info pupitre 2
    Ihm3inf : BOOL;	//Panel 3 Information/Info pupitre 3
    Ihm4inf : BOOL;	//Panel 4 Information/Info pupitre 4
    Ihmsdv : BOOL;	//Zone Dry run Selector/Selecteur deverminage Zone
    Ihmsdapp : BOOL;	//Learning Request Selector/Selecteur Demande Apprentissage
    Ihminbz : BOOL;	//Zone Hold Inhibit/Inhibition Blocage Zone
    Ihmsneng : BOOL;	//Zone SMP not in service/Non engagement zone
    Ihm1def : BOOL;	//Panel 1 Fault Displayed/Defaut affiche sur pupitre 1
    Ihm2def : BOOL;	//Panel 2 Fault Displayed/Defaut affiche sur pupitre 2
    Ihm3def : BOOL;	//Panel 3 Fault Displayed/Defaut affiche sur pupitre 3
    Ihm4def : BOOL;	//Panel 4 Fault Displayed/Defaut affiche sur pupitre 4
  END_STRUCT ;
END_VAR
VAR_OUTPUT
  Z_ir : BOOL;	//Zone Control on Information/Info de Rearmement de Zone
  Z_iadf : BOOL;	//Zone Fault Reset Information/Info Annulation Defaut de Zone
  Z_mauto : BOOL;	//Zone AUTO mode/Marche Auto Zone
  Z_mnorm : BOOL;	//Zone Normal Operating Mode/Mode de Fonctionnement Normal Zone
  Z_mvid : BOOL;	//Zone Emptying Operating Mode/Mode de Fonctionnement Vidage Zone
  Z_mapv : BOOL;	//Zone Empty Gripper Stop Mode/Mode Arret Prehension Vide Zone
  Z_macy : BOOL;	//Cycle Stop Memory/Memoire Arret Cycle
  Z_mdv : BOOL;	//Zone Dry run Memory/Memoire Deverminage de Zone
  Z_ida : BOOL;	//Stop Request Information/Info Demande D'arret
  Z_drrb : BOOL;	//Robot Home position request/Demande de Repli Robot
  Z_irrb : BOOL;	//Robot Home position information/Info Repli Robot
  Z_vmcy : BOOL;	//Door Cycle Start Lamp/Voyant Marche Cycle (porte)
  Z_vacy : BOOL;	//Door Cycle Stop Lamp/Voyant Arret Cycle (porte)
  Z_manu : BOOL;	//Zone Manual mode/Marche manuelle zone
  Z_mpap : BOOL;	//Zone Step by step Mode/Mode pas a pas zone
  Z_mroc : BOOL;	//Zone Back to home position Mode/Mode retour origine machine zone
  Dcihm1 : BOOL;	//HMI1 Communication Fault/Defaut communication Ihm1
  Dcihm2 : BOOL;	//HMI2 Communication Fault/Defaut communication Ihm2
  Dcihm3 : BOOL;	//HMI3 Communication Fault/Defaut communication Ihm3
  Dcihm4 : BOOL;	//HMI4 Communication Fault/Defaut communication Ihm4
  S_neng : BOOL;	//Zone SMP not in service/Non engagement zone
  S_pmaz : BOOL;	//AUTO mode lost/Perte marche auto
  S_pmcyn : BOOL;	//Cycle Start mode lost / Perte marche cycle normal
  S_mvd : BOOL;	//Zone Dry run Mode/Marche a vide zone
  S_mdg : BOOL;	//Zone Degraded Mode/Marche degrade zone
  Ihm1pm : BOOL;	//Manual Control on Panel 1/Pupitre 1 en pilotage manuel
  Ihm2pm : BOOL;	//Manual Control on Panel 2/Pupitre 2 en pilotage manuel
  Ihm3pm : BOOL;	//Manual Control on Panel 3/Pupitre 3 en pilotage manuel
  Ihm4pm : BOOL;	//Manual Control on Panel 4/Pupitre 4 en pilotage manuel
  Ihmzdef : BOOL;	//Fault displayed on HMI Information/Info. presence d'un defaut sur IHM
  Num_page : INT;	//IHMP screen number/Numero de page IHMP
  Num_mvt : INT;	//Selected Movement Number/Numero du mouvement selectionne
  Lien_pup : LIEN_PUP;	//Panel Link/Lien Pupitre
  Ala : BOOL;	//Running or Operating Mode Alarm/Alarme mode de marche ou mode de fonctionnement
  Def : BOOL;	//Running or Operating Mode Fault/Defaut mode de marche ou mode de fonctionnement
  Diag : STRUCT	//HMI Diagnosis/Diagnostique IHM
    Def : BOOL;	//Fault/Defaut
    Ala : BOOL;	//Alarm/Alarme
    Numliste : INT;	//List Number/Numero liste
    Codedef : INT;	//Fault code/code du defaut
    Ihmmes1 : BOOL;	//Zone Special Mode/Zone en Mode special
    Ihmmes2 : BOOL;	//Press Start Cycle Button/Appuyer sur le bouton marche cycle
    Ihmmes3 : BOOL;	//Zone hold to fill in stop log /Blocage zone pour documentation de l'arret
    Ihmmes4 : BOOL;	//Zone Stopped - SMP not in service/Arret zone suite a non engagement de la zone
    IhmZ_manu : BOOL;	//Zone Panel Manu Mode/Marche Manuelle Pupitre de Zone
    IhmZ_mpap : BOOL;	//Zone Panel Step by Step Mode/Mode Pas a pas Pupitre de Zone
    IhmZ_mroc : BOOL;	//Zone Back to Home Position Mode/Mode Retour Origine de Cycle de Zone
    IhmZ_vmcy : BOOL;	//Start Cycle Lamp/Voyant Marche Cycle
    IhmZ_vacy : BOOL;	//Stop Cycle Lamp/Voyant Arret Cycle
    IhmZ_vmauto : BOOL;	//Zone AUTO mode Lamp/Voyant Marche Auto Zone
    IhmZ_vmanup : BOOL;	//Zone Panel MANU mode Lamp/Voyant Marche Manuelle Pupitre de Zone
    IhmZ_vmnorm : BOOL;	//Zone Normal ModeLamp /Voyant Mode de Fonctionnement Normal Zone
    IhmZ_vmvid : BOOL;	//Zone Emptying Operating Mode Lamp/Voyant Mode de Fonctionnement Vidage Zone
    IhmZ_vmapv : BOOL;	//Zone Empty Gripper Stop Mode Lamp/Voyant Mode Arret Prehension Vide Zone
    Attmdm : BOOL;	//Waiting for running mode validation/attente validation d'un mode de marche
    Attauto1 : BOOL;	//Waiting for panel selector on AUTO/attente commutateur pupitre sur mode auto
    Attauto2 : BOOL;	//Waiting for panel selector on AUTO/attente commutateur pupitre sur mode auto
    Attauto3 : BOOL;	//Waiting for panel selector on AUTO/attente commutateur pupitre sur mode auto
    Attauto4 : BOOL;	//Waiting for panel selector on AUTO/attente commutateur pupitre sur mode auto
    Ihm1dc : BOOL;	//Panel 1 Communication Fault/Defaut communication pupitre 1
    Ihm2dc : BOOL;	//Panel 2 Communication Fault/Defaut communication pupitre 2
    Ihm3dc : BOOL;	//Panel 3 Communication Fault/Defaut communication pupitre 3
    Ihm4dc : BOOL;	//Panel 4 Communication Fault/Defaut communication pupitre 4
    Ihm1cns : BOOL;	//Panel 1 Instruction/Consigne pupitre 1
    Ihm2cns : BOOL;	//Panel 2 Instruction/Consigne pupitre 2
    Ihm3cns : BOOL;	//Panel 3 Instruction/Consigne pupitre 3
    Ihm4cns : BOOL;	//Panel 4 Instruction/Consigne pupitre 4
    Ihm1inf : BOOL;	//Panel 1 Information/Info pupitre 1
    Ihm2inf : BOOL;	//Panel 2 Information/Info pupitre 2
    Ihm3inf : BOOL;	//Panel 3 Information/Info pupitre 3
    Ihm4inf : BOOL;	//Panel 4 Information/Info pupitre 4
    Ihmzmdv : BOOL;	//Dry run request Memory/Memoire demamde deverminage
    Ihmapc : BOOL;	//Learning mode request memory/Memoire demande apprentissage en cours
    Ihmcns : BOOL;	//There is 1 or more instruction/Presence d'au moins une consigne
    Ihminf : BOOL;	//There is 1 or more information/Presence d'au moins une information
  END_STRUCT ;
END_VAR
VAR
  Numok : BOOL;	//At least 1 Main Panel is present/Presence d au moins 1 pupitre principal
  Z_idapp : BOOL;	//Learning Request Information/Info demande d'apprentissage
  Z_vbz : BOOL;	//Zone hold Lamp/Voyant Blocage Zone
  Z_ibz : BOOL;	//Zone hold Information/Info blocage zone
  Z_mbz : BOOL;	//Zone hold Memory/memoire blocage zone
  Z_mneng : BOOL;	//SMP not in service memory/memoire non engagement
  Z_icyn : BOOL;	//Normal Cycle Information/Information cycle normal
  Z_smauto : BOOL;	//Panel Auto mode selected Information/Info select marche auto pupitre
  Imcy : BOOL;	//Cycle Start Information/Info marche cycle
  Iafj : BOOL;	//End of production Information/Info arret fin de journee
  Irrb : BOOL;	//Robot Home position Information/Info repli robot
  Isauto : BOOL;	//Auto mode selection information/Information selection mode auto
  Ismanu : BOOL;	//Manual mode selection information/Information selection mode manuel
  Ismnorm : BOOL;	//Normal mode selection information/Information selection mode normal
  Ismvid : BOOL;	//Emptying mode selection information/Information selection mode vidage
  Ismapv : BOOL;	//Emty Gripper Mode selection Info./Info selection mode arret prehension vide
  Ismroc : BOOL;	//Back to home position Mode sel. Info./Info selection mode retour origine cylcle
  Ismpap : BOOL;	//Step by step mode selection information/Information selection mode pas a pas
  Xfir : BOOL;	//Control on information rising edge/ Front montant info rearmement
  TONIRRB : TON;	//Robot Home position info. timer/Temporisation info repli robot
  TPMCY : TP;	//Cycle Start Timer/Temporisation marche cycle
  TPIADFP : TP;	//Panel Cancel fault timer/ Tempo annulation defaut pupitre
  TONIHM1 : TON;	//HMI 1 Heart Beat Check Timer/Tempo controle vie IHM1
  TONIHM2 : TON;	//HMI 2 Heart Beat Check Timer/Tempo controle vie IHM 2
  TONIHM3 : TON;	//HMI 3 Heart Beat Check Timer/Tempo controle vie IHM 3
  TONIHM4 : TON;	//HMI 4 Heart Beat Check Timer/Tempo controle vie IHM 4
  Iihm1 : WORD;	//HMI 1 Heart Beat Backup/sauvegarde mot de vie IHM 1
  Iihm2 : WORD;	//HMI 2 Heart Beat Backup/sauvegarde mot de vie IHM 2
  Iihm3 : WORD;	//HMI 3 Heart Beat Backup/sauvegarde mot de vie IHM 3
  Iihm4 : WORD;	//HMI 4 Heart Beat Backup/sauvegarde mot de vie IHM 4
  Iadfp : BOOL;	//Panel Fault Reset Information/Info Annulation Defaut Pupitre
  P_pup1 : BOOL;	//Panel 1 Presence/Presence pupitre 1
  P_pup2 : BOOL;	//Panel 2 Presence/Presence pupitre 2
  P_pup3 : BOOL;	//Panel 3 Presence/Presence pupitre 3
  P_pup4 : BOOL;	//Panel 4 Presence/Presence pupitre 4
  Def_com_ihm : BOOL;	//HMI communication fault/defaut de communication ihm
  Aux_selmdf : BOOL;	//Program operating mode selection info./info. selection MDF programme
END_VAR
VAR_TEMP
  Ba1i : BOOL;	//Bit always set/Bit toujours a 1
END_VAR
BEGIN
NETWORK
TITLE =
//*ODIL_ID:1932_1*
O #Ba1i;
ON #Ba1i;
= #Ba1i;
NETWORK
TITLE =Sub operator panel Nulber (from 1 to 4)
//Check Panel Number is >1 and <4
//*ODIL_ID:1932_2*
//
U(;
L #Nbrpup;
L 0;
>I;
);
U(;
L #Nbrpup;
L 5;
<I;
);
= #Numok;
NETWORK
TITLE =Presence oparetor panel from 1 to 4
//Operator Panel presence from 1 to 4
//*ODIL_ID:1932_3*
//
U #Numok;
= L 1.0;
U L 1.0;
U(;
L #Nbrpup;
L 1;
>=I;
);
= #P_pup1;
U L 1.0;
U(;
L #Nbrpup;
L 2;
>=I;
);
= #P_pup2;
U L 1.0;
U(;
L #Nbrpup;
L 3;
>=I;
);
= #P_pup3;
U L 1.0;
U(;
L #Nbrpup;
L 4;
==I;
);
= #P_pup4;
NETWORK
TITLE =Timer : 3 sec cycle start
//Cycle Start timer : 3 sec
//*ODIL_ID:1932_4*
//
U(;
O #Z_bmcy;
O #Pilot.Ihmmcy;
O #lien_ilo.IR;
);
U #Numok;
= L 1.0;
BLD 103;
CALL #TPMCY (
IN := L 1.0,
PT := T#3S,
Q := #Imcy);
NOP 0;
NETWORK
TITLE =INFO cancel failure PUPITRE
//Panel fault reset information
//*ODIL_ID:1932_5*
//
U(;
O #Z_badf;
O #Pilot.Ihmadf;
O #lien_ilo.IADF;
);
U #Numok;
= L 1.0;
BLD 103;
CALL #TPIADFP (
IN := L 1.0,
PT := T#1S,
Q := #Iadfp);
NOP 0;
NETWORK
TITLE =Panel selection data
//Operator Panel selection information
//*ODIL_ID:1932_6*
//
U #Numok;
U(;
O #Smm;
O(;
L #Pilot.Ihm1selmdm;
L 1;
==D;
);
O(;
L #Pilot.Ihm2selmdm;
L 1;
==D;
);
O(;
L #Pilot.Ihm3selmdm;
L 1;
==D;
);
O(;
L #Pilot.Ihm4selmdm;
L 1;
==D;
);
);
= #Ismanu;
NETWORK
TITLE =Panel selection data
//Operator Panel selection information
//*ODIL_ID:1932_7*
//
U #Numok;
U(;
O(;
L #Pilot.Ihm1selmdm;
L 2;
==D;
);
ON #P_pup1;
O #Sma;
);
U(;
O(;
L #Pilot.Ihm2selmdm;
L 2;
==D;
);
ON #P_pup2;
);
U(;
O(;
L #Pilot.Ihm3selmdm;
L 2;
==D;
);
ON #P_pup3;
);
U(;
O(;
L #Pilot.Ihm4selmdm;
L 2;
==D;
);
ON #P_pup4;
);
UN #Ismanu;
= #Isauto;
NETWORK
TITLE =Selection operating modes in program
//prise en compte de l'entree Prog_selmdf uniquement sur les valeur acceptees
//dans le code BF
//
//Program operating mode Selection
//Check Input Prog_selmdf has proper values. If OK, this can be processed in this
//FB
//*ODIL_ID:1932_8*
//
O(;
L #prog_selmdf;
L 1;
==I;
);
O(;
L #prog_selmdf;
L 2;
==I;
);
O(;
L #prog_selmdf;
L 4;
==I;
);
O(;
L #prog_selmdf;
L 8;
==I;
);
O(;
L #prog_selmdf;
L 16;
==I;
);
= #Aux_selmdf;
NETWORK
TITLE =transfert de l'entree Prog_selmdf dans pilot.Ihmselmdf
//Copy Prog_selmdf to pilot.Ihmselmdf if value is OK
//*ODIL_ID:1932_9*
//
UN #Aux_selmdf; // si pas Aux_selmdef
SPB saut; // aller a saut ( pas de transfert)
L #prog_selmdf; // chargement de l'entree prog_selmdf ( si Aux_selmdef =1)
T #Pilot.Ihmselmdf; // transfert de prog_selmdf dans pilot.selmdf
saut: NOP 0; // ne rien executer ( pas de modif de pilot.selmdf)
NETWORK
TITLE =Program or panel selection data
//MDF Normal
//
//Program or Panel Selection information:
//Normal Operating Mode
//*ODIL_ID:1932_10*
//
L #Pilot.Ihmselmdf;
L 1;
==D;
= #Ismnorm;
NETWORK
TITLE =Program or panel selection data
//MDF vidage
//
//Program or Panel Selection information:
//Emptying Operating Mode
//*ODIL_ID:1932_11*
//
L #Pilot.Ihmselmdf;
L 2;
==D;
= #Ismvid;
NETWORK
TITLE =Program or panel selection data
//MDF arret prehenseur vide
//
//Program or Panel Selection information:
//Empty Gripper Stop Operating Mode
//*ODIL_ID:1932_12*
//
L #Pilot.Ihmselmdf;
L 4;
==D;
= #Ismapv;
NETWORK
TITLE =Program or panel selection data
//MDF retour en origine de cycle
//
//Program or Panel Selection information:
//Back to Home position Operating Mode
//*ODIL_ID:1932_13*
//
L #Pilot.Ihmselmdf;
L 8;
==D;
= #Ismroc;
NETWORK
TITLE =Program or panel selection data
//MDF marche pas a pas
//
//Program or Panel Selection information:
//Step by Step Operating Mode
//*ODIL_ID:1932_14*
//
L #Pilot.Ihmselmdf;
L 16;
==D;
= #Ismpap;
NETWORK
TITLE =INFO Zone reset (zone acknowledgement)
//Zone Control On Information
//*ODIL_ID:1932_15*
//
U #Imcy;
= #Z_ir;
= #Lien_pup.Z_ir;
NETWORK
TITLE =INFO cancel failure DE ZONE
//Zone Fault or Failure Reset Information
//*ODIL_ID:1932_16*
//
U #Iadfp;
= #Z_iadf;
= #Lien_pup.Z_iadf;
NETWORK
TITLE =INFO Request for learning
//Learning Request Information
//*ODIL_ID:1932_17*
//
O #Z_sdapp;
O #Pilot.Ihmsdapp;
= #Z_idapp;
= #Diag.Ihmapc;
= #Lien_pup.Z_idapp;
NETWORK
TITLE =Follow up (SMP) : Blocked zone information
//SMP: Zone hold Information
//*ODIL_ID:1932_18*
//
U #S_blz;
UN #Z_inbz;
UN #Pilot.Ihminbz;
= #Z_ibz;
NETWORK
TITLE =Follow up (SMP) : Blocked Zone Lamp
//SMP: Zone hold Lamp
//*ODIL_ID:1932_19*
//
U(;
O #Z_inbz;
O #Pilot.Ihminbz;
);
U #lien_ilo.ICL;
O;
U #Z_ibz;
UN #Z_mdv;
O #lien_ilo.ITLG;
= #Z_vbz;
NETWORK
TITLE =Memory Zone blocked
//SMP: Zone hold Memory
//*ODIL_ID:1932_20*
//
U(;
U #S_blz;
UN #Z_inbz;
UN #Pilot.Ihminbz;
UN #Z_mdv;
O #Z_mbz;
);
UN #Z_ir;
= #Z_mbz;
NETWORK
TITLE =Memory ZONE non involvement
//SMP: Zone SMP not in service Memory
//*ODIL_ID:1932_21*
//
U(;
O #Z_sneng;
O #Pilot.Ihmsneng;
O #Z_mneng;
);
UN #Z_ir;
= #Z_mneng;
NETWORK
TITLE =INFO Srequest zone stop
//Zone Stop Request Information
//*ODIL_ID:1932_22*
//
O #Z_mbz;
O #Z_mneng;
= #Z_ida;
= #Lien_pup.Z_ida;
NETWORK
TITLE =INFO Selection of AUTO mode on operator panel
//Panel Auto mode selection Information
//*ODIL_ID:1932_23*
//
U #Isauto;
= #Z_smauto;
NETWORK
TITLE =AUTO MODE ZONE
//Zone Auto mode
//Network Modification (25-05-2011): Xfir added for Z_mauto set to 1
//*ODIL_ID:1932_24*
//
U(;
U #Z_ir;
FP #Xfir;
O #Z_mauto;
);
U #Z_smauto;
U #CS_Auto;
U #Z_marb;
= #Z_mauto;
= #Lien_pup.Z_mauto;
NETWORK
TITLE =authorization manual mode on operator panels
//Panels Manual mode Authorization
//*ODIL_ID:1932_25*
//
U #CS_manu;
U #Ismanu;
= #Z_manu;
= #Lien_pup.Z_manup;
= #Diag.IhmZ_manu;
NETWORK
TITLE =Panel selection data
//Panel selection information
//*ODIL_ID:1932_26*
//
U #Z_mauto;
= L 1.0;
U L 1.0;
U #Ismroc;
= #Z_mroc;
= #Lien_pup.Z_mrocp;
= #Diag.IhmZ_mroc;
U L 1.0;
U #Ismpap;
= #Z_mpap;
= #Lien_pup.Z_mpapp;
= #Diag.IhmZ_mpap;
NETWORK
TITLE =Start cycle lamp
//Cycle Start Lamp
//*ODIL_ID:1932_27*
//
U #Z_mauto;
U(;
O #Z_icyn;
O;
UN #Z_icyn;
U #lien_ilo.ICL;
);
O #Lien_pup.Itlp;
= #Z_vmcy;
= #Diag.IhmZ_vmcy;
NETWORK
TITLE =Stop cycle lamp
//Cycle Stop Lamp
//*ODIL_ID:1932_28*
//
UN #Z_mauto;
U(;
O #CS_Auto;
O #CS_manu;
);
U #lien_ilo.ICL;
O;
UN #CS_Auto;
UN #CS_manu;
O #Lien_pup.Itlp;
= #Z_vacy;
= #Diag.IhmZ_vacy;
NETWORK
TITLE =Operating mode ZONE : Normal
//Zone Operating Mode : Normal
//*ODIL_ID:1932_29*
//
U(;
O #Z_ir;
O #Z_mnorm;
);
U #Ismnorm;
U #Numok;
= #Z_mnorm;
= #Lien_pup.Z_mnorm;
NETWORK
TITLE =Operating mode ZONE : sweap out
//Zone Operating Mode : Emptying
//*ODIL_ID:1932_30*
//
U(;
O #Z_ir;
O #Z_mvid;
);
U #Ismvid;
U #Numok;
= #Z_mvid;
= #Lien_pup.Z_mvid;
NETWORK
TITLE =MODES DE FONCTIONNEMENT ZONE :  Arret prehension
//Zone Operating Modes : Stop Empty gripper
//*ODIL_ID:1932_31*
//
U(;
O #Z_ir;
O #Z_mapv;
);
U #Ismapv;
U #Numok;
= #Z_mapv;
= #Lien_pup.Z_mapv;
NETWORK
TITLE =Memory stop cycle
//Cycle Stop Memory
//*ODIL_ID:1932_32*
//
U(;
O #Z_bacy;
O #Pilot.Ihmdacy;
O #Z_macy;
);
U #Z_mauto;
UN #Z_ir;
= #Z_macy;
= #Lien_pup.Z_macy;
NETWORK
TITLE =INFO normal cycle
//Normal Cycle Information
//*ODIL_ID:1932_33*
//
U #Z_mnorm;
UN #Z_macy;
UN #Lien_pup.Z_ida;
= #Z_icyn;
NETWORK
TITLE =Memory Dry run
//Dry run Memory
//*ODIL_ID:1932_34*
//
U(;
O #Z_sdv;
O #Pilot.Ihmsdv;
);
U #Z_ipa;
U #Z_iap;
U #Z_ir;
S #Z_mdv;
UN #Pilot.Ihmsdv;
UN #Z_sdv;
U #Z_ipa;
U #Z_iap;
R #Z_mdv;
NOP 0;
NETWORK
TITLE =Memory Dry run
//Dry run Memory
//*ODIL_ID:1932_35*
//
U #Z_mdv;
= #Diag.Ihmzmdv;
NETWORK
TITLE =INFO zone end of day stop
//Zone End of production Information
//*ODIL_ID:1932_36*
//
U #Lien_pup.Mafj;
U #Z_ipa;
= #Iafj;
NETWORK
TITLE =Request for robot home position
//Robot Home Position Request
//*ODIL_ID:1932_37*
//
U #Iafj;
UN #Z_repli;
= #Z_drrb;
NETWORK
TITLE =INFO Robot in home position
//Robot Home Position Information
//*ODIL_ID:1932_38*
//
U #Iafj;
U #Z_repli;
= #Irrb;
NETWORK
TITLE =Timer : Robot home position information
//Robot Home Position Information Timer
//*ODIL_ID:1932_39*
//
U #Irrb;
= L 1.0;
BLD 103;
CALL #TONIRRB (
IN := L 1.0,
PT := T#2S,
Q := #Z_irrb);
NOP 0;
NETWORK
TITLE =Memory end of day stop
//End of production Memory
//*ODIL_ID:1932_40*
//
U #lien_ilo.MAFJ;
= #Lien_pup.Mafj;
NETWORK
TITLE =MASTER Failure
//Master fault
//*ODIL_ID:1932_41*
//
O #lien_ilo.DMAITRE;
O #Def_maj;
= #Lien_pup.Dmaitre;
NETWORK
TITLE =INFO Blinking
//Blinking Information
//*ODIL_ID:1932_42*
//
U #lien_ilo.ICL;
= #Lien_pup.Icl;
NETWORK
TITLE =INFO Lamp test
//Lamp test Information
//*ODIL_ID:1932_43*
//
O #lien_ilo.ITLG;
O #Pilot.Ihmtl;
= #Lien_pup.Itlp;
NETWORK
TITLE =AUTO mode zone lamp
//Zone AUTO mode Lamp
//*ODIL_ID:1932_44*
//
O #Z_mauto;
O;
U #Z_smauto;
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Diag.IhmZ_vmauto;
NETWORK
TITLE =MANUAL mode sub operator panel lamp
//Zone Operator Panel Manual Mode Lamp
//*ODIL_ID:1932_45*
//
O #Lien_pup.Z_manup;
O;
U #Ismanu;
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Diag.IhmZ_vmanup;
NETWORK
TITLE =Normal operating mode lamp
//Zone Normal Operating Mode Lamp
//*ODIL_ID:1932_46*
//
O #Z_mnorm;
O;
U #Ismnorm;
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Diag.IhmZ_vmnorm;
NETWORK
TITLE =Sweap out operating mode lamp
//Zone Emptying Operating Mode Lamp
//*ODIL_ID:1932_47*
//
O #Z_mvid;
O;
U #Ismvid;
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Diag.IhmZ_vmvid;
NETWORK
TITLE =Stop empty hanger operating mode lamp
//Zone Empty Gripper Stop Operating Mode Lamp
//*ODIL_ID:1932_48*
//
O #Z_mapv;
O;
U #Ismapv;
U #Lien_pup.Icl;
O #Lien_pup.Itlp;
= #Diag.IhmZ_vmapv;
NETWORK
TITLE =Non involvement ZONE
//Zone SMP not in service
//*ODIL_ID:1932_49*
//
O #Z_sneng;
O #Pilot.Ihmsneng;
= #S_neng;
NETWORK
TITLE =Follow up (SMP) : AUTO mode is lost
//SMP: AUTO mode lost
//*ODIL_ID:1932_50*
//
UN #Z_mauto;
= #S_pmaz;
NETWORK
TITLE =Follow up (SMP) : Normal cycle mode is lost
//SMP: Normal cycle mode lost
//*ODIL_ID:1932_51*
//
UN #Z_icyn;
= #S_pmcyn;
NETWORK
TITLE =Follow up (SMP) : Empty mode
//SMP: Empty Operating Mode
//*ODIL_ID:1932_52*
//
U #Z_mdv;
= #S_mvd;
NETWORK
TITLE =SUIVI : MARCHE DEGRADE ZONE
//SMP: Degraded Operating Mode
//*ODIL_ID:1932_53*
//
U #Z_cmdg;
= #S_mdg;
NETWORK
TITLE =Operating mode ZONE : Wait for validation
//IHM : ATTENTE VALIDATION MODE DE MARCHE
//
//Zone Operating Mode : Waiting for validation
//HMI : Waiting for operating mode validation
//*ODIL_ID:1932_54*
//
U #Ismnorm;
UN #Lien_pup.Z_mnorm;
O;
U #Ismvid;
UN #Lien_pup.Z_mvid;
O;
U #Ismapv;
UN #Lien_pup.Z_mapv;
= #Diag.Attmdm;
NETWORK
TITLE =IHM : switch selector to AUTO
//IHM : BASCULER LE COMMUTATEUR SUR AUTO (OU SELECTIONNER LE MODE AUTO)
//
//HMI: Switch AUTO/MANU selector to AUTO, or select AUTO mode on screen
//*ODIL_ID:1932_55*
//
U #Ba1i;
= L 1.0;
U L 1.0;
UN #Sma;
U(;
L #Pilot.Ihm1selmdm;
L 2;
<>D;
);
U #P_pup1;
= #Diag.Attauto1;
U L 1.0;
U(;
L #Pilot.Ihm2selmdm;
L 2;
<>D;
);
U #P_pup2;
= #Diag.Attauto2;
U L 1.0;
U(;
L #Pilot.Ihm3selmdm;
L 2;
<>D;
);
U #P_pup3;
= #Diag.Attauto3;
U L 1.0;
U(;
L #Pilot.Ihm4selmdm;
L 2;
<>D;
);
U #P_pup4;
= #Diag.Attauto4;
NETWORK
TITLE =IHM : display : Special mode
//HMI : Special mode (display)
//*ODIL_ID:1932_56*
//
ON #Lien_pup.Z_mnorm;
O #S_mdg;
ON #Z_mauto;
O #Z_mdv;
= #Diag.Ihmmes1;
NETWORK
TITLE =IHM : display : Push start cycle push button
//HMI: Display : Push Cycle Start button
//*ODIL_ID:1932_57*
//
ON #Z_mauto;
O;
U #Z_mauto;
U #Z_macy;
UN #S_blz;
= #Diag.Ihmmes2;
NETWORK
TITLE =IHM : display : zone is blocked for stop documentation
//apres documentation appuyer sur le bouton rearmement ou marche cycle
//
//HMI : Display : Zone hold because stop log must be filled in
//After filling the stop log in SMPLOC, push control on or cycle start button.
//*ODIL_ID:1932_58*
//
U #Z_mbz;
= #Diag.Ihmmes3;
NETWORK
TITLE =IHM : AFFICHAGE : arret zone suite a non engagement de la zone -
//apres selection engagement zone, appuyer sur le bouton rearmement ou marche
//cycle
//
//HMI : Display : Zone is stopped because SMP is not in service.
//After selecting "Zone SMP in service", push control on or cycle start button
//*ODIL_ID:1932_59*
//
U #Z_mneng;
= #Diag.Ihmmes4;
NETWORK
TITLE =diagnosis: Failure list number related to FB for IHMP
//Diagnosis : Fault Number List, specific to this FB on IHMP
//*ODIL_ID:1932_60*
//
L 0;
T #Diag.Numliste;
NOP 0;
NETWORK
TITLE =Failure indication
//(English further below)
//Code : N° de defaut ou dalarme en Decimal
//
//         1  :Attente validation mode de marche
//         2  :Basculer le commutateur du pup 1 sur auto
//         4  :Basculer le commutateur du pup 2 sur auto
//         8  :Basculer le commutateur du pup 3 sur auto
//         16 :Basculer le commutateur du pup 4 sur auto
//         32 :Zone en Mode special
//         64 :Appuyer sur le bouton marche cycle
//         128 :Blocage zone pour documentation de l'arret- apres documentation
//de l'arret appuyer sur rearmement
//         256 :Arret zone suite a non engagement de la zone-apres selection
//engagement zone appuyer sur le bouton rearmement
//         512 :
//         1024:
//         2048:
//         4096:
//         8192:
//         16384:
//         32768:
//*******************************************************************************
//Code : Fault or Alarm Number in DEC
//         1  :Waiting for Running mode Validation
//         2  :Switch Panel 1 Selector to AUTO
//         4  :Switch Panel 2 Selector to AUTO
//         8  :Switch Panel 3 Selector to AUTO
//         16 :Switch Panel 4 Selector to AUTO
//         32 :Zone in Special Mode
//         64 :Push Cycle Start button
//         128 :Zone hold because stop log must be filled in.
//After filling the stop log in SMPLOC, push control on or cycle start button.
//         256 :Zone is stopped because SMP is not in service.
//After selecting "Zone SMP in service", push control on or cycle start button
//         512 :
//         1024:
//         2048:
//         4096:
//         8192:
//         16384:
//         32768:
//*ODIL_ID:1932_61*
//

NETWORK
TITLE =Reset Failure code
//Fault code reset
//*ODIL_ID:1932_62*
//
UN #Z_mroc;
UN #Ala;
SPBNB _001;
L 0;
T #Diag.Codedef;
_001: NOP 0;
NETWORK
TITLE =Fill in Diagnosis information (Alerts)
//Management of HMI Alarm Information
//*ODIL_ID:1932_63*
//
O #Diag.Attauto1;
O #Diag.Attauto2;
O #Diag.Attauto3;
O #Diag.Attauto4;
O #Diag.Ihmmes1;
O #Diag.Attmdm;
O #Diag.Ihmmes2;
O #Diag.Ihmmes3;
O #Diag.Ihmmes4;
= #Ala;
= #Diag.Ala;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_64*
//
UN #Ba1i;
= #Def;
= #Diag.Def;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_65*
//
U #Diag.Attauto2;
SPBNB _002;
L 4;
T #Diag.Codedef;
_002: NOP 0;
NETWORK
TITLE =Fill in Diagnosis information
//Management of HMI Faults Information
//*ODIL_ID:1932_66*
//
U #Diag.Attauto1;
SPBNB _003;
L 2;
T #Diag.Codedef;
_003: NOP 0;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_67*
//
U #Diag.Attauto3;
SPBNB _004;
L 8;
T #Diag.Codedef;
_004: NOP 0;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_68*
//
U #Diag.Attauto4;
SPBNB _005;
L 16;
T #Diag.Codedef;
_005: NOP 0;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_69*
//
U #Diag.Ihmmes1;
SPBNB _006;
L 32;
T #Diag.Codedef;
_006: NOP 0;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_70*
//
U #Diag.Attmdm;
SPBNB _007;
L 1;
T #Diag.Codedef;
_007: NOP 0;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_71*
//
U #Diag.Ihmmes2;
SPBNB _008;
L 64;
T #Diag.Codedef;
_008: NOP 0;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_72*
//
U #Diag.Ihmmes3;
SPBNB _009;
L 128;
T #Diag.Codedef;
_009: NOP 0;
NETWORK
TITLE =Renseignement du diagnostic (Defauts)
//Management of HMI Faults Information
//*ODIL_ID:1932_73*
//
U #Diag.Ihmmes4;
SPBNB _00a;
L 256;
T #Diag.Codedef;
_00a: NOP 0;
NETWORK
TITLE =Communication control HMI1
//CONTROLE COMMUNICATION AUTOMATE <-> IHM (PUPITRE)
//A definir pour interface OPC avec IHM Siemens
//
//HMI 1 Communication Check
//Communication between PLC and HMI (Operator Panel) is checked.
//This must be defined for OPC server with Siemens HMI
//*ODIL_ID:1932_74*
//
U(;
L #Pilot.Ihm1vie;
L #Iihm1;
==D;
);
= L 1.0;
BLD 103;
CALL #TONIHM1 (
IN := L 1.0,
PT := T#10S);
NOP 0;
NETWORK
TITLE =Communication control HMI1
//HMI1 Communication Check
//*ODIL_ID:1932_75*
//
U #TONIHM1.Q;
= #Dcihm1;
= #Diag.Ihm1dc;
NETWORK
TITLE =Communication control HMI1
//HMI1 Communication Check
//*ODIL_ID:1932_76*
//
L #Pilot.Ihm1vie;
T #Iihm1;
NOP 0;
NETWORK
TITLE =Communication control HMI2
//CONTROLE COMMUNICATION AUTOMATE <-> IHM (PUPITRE)
//A definir pour interface OPC avec IHM Siemens
//
//HMI 2 Communication Check
//Communication between PLC and HMI (Operator Panel) is checked.
//This must be defined for OPC server with Siemens HMI
//*ODIL_ID:1932_77*
//
U(;
L #Pilot.Ihm2vie;
L #Iihm2;
==D;
);
= L 1.0;
BLD 103;
CALL #TONIHM2 (
IN := L 1.0,
PT := T#10S);
NOP 0;
NETWORK
TITLE =Communication control HMI2
//HMI2 Communication Check
//*ODIL_ID:1932_78*
//
U #TONIHM2.Q;
= #Dcihm2;
= #Diag.Ihm2dc;
NETWORK
TITLE =Communication control HMI2
//HMI2 Communication Check
//*ODIL_ID:1932_79*
//
L #Pilot.Ihm2vie;
T #Iihm2;
NOP 0;
NETWORK
TITLE =Communication control HMI3
//CONTROLE COMMUNICATION AUTOMATE <-> IHM (PUPITRE)
//A definir pour interface OPC avec IHM Siemens
//
//HMI 3 Communication Check
//Communication between PLC and HMI (Operator Panel) is checked.
//This must be defined for OPC server with Siemens HMI
//*ODIL_ID:1932_80*
//
U(;
L #Pilot.Ihm3vie;
L #Iihm3;
==D;
);
= L 1.0;
BLD 103;
CALL #TONIHM3 (
IN := L 1.0,
PT := T#10S);
NOP 0;
NETWORK
TITLE =Communication control HMI3
//HMI3 Communication Check
//*ODIL_ID:1932_81*
//
U #TONIHM3.Q;
= #Dcihm3;
= #Diag.Ihm3dc;
NETWORK
TITLE =Communication control HMI3
//HMI3 Communication Check
//*ODIL_ID:1932_82*
//
L #Pilot.Ihm3vie;
T #Iihm3;
NOP 0;
NETWORK
TITLE =Communication control HMI4
//CONTROLE COMMUNICATION AUTOMATE <-> IHM (PUPITRE)
//A definir pour interface OPC avec IHM Siemens
//
//HMI 4 Communication Check
//Communication between PLC and HMI (Operator Panel) is checked.
//This must be defined for OPC server with Siemens HMI
//*ODIL_ID:1932_83*
//
U(;
L #Pilot.Ihm4vie;
L #Iihm4;
==D;
);
= L 1.0;
BLD 103;
CALL #TONIHM4 (
IN := L 1.0,
PT := T#10S);
NOP 0;
NETWORK
TITLE =Communication control HMI4
//HMI4 Communication Check
//*ODIL_ID:1932_84*
//
U #TONIHM4.Q;
= #Dcihm4;
= #Diag.Ihm4dc;
NETWORK
TITLE =Communication control HMI4
//HMI4 Communication Check
//*ODIL_ID:1932_85*
//
L #Pilot.Ihm4vie;
T #Iihm4;
NOP 0;
NETWORK
TITLE =Panel 1
//Numero du pupitre en pilotage manuel , Consignes et infos pupitres
//
//PANEL 1
//Number of Panel in Manual mode, Panel instructions and information
//*ODIL_ID:1932_86*
//
UN #Dcihm1;
= L 1.0;
U L 1.0;
U #Pilot.Ihm1pm;
= #Ihm1pm;
U L 1.0;
U #Pilot.Ihm1cns;
= #Diag.Ihm1cns;
U L 1.0;
U #Pilot.Ihm1inf;
= #Diag.Ihm1inf;
NETWORK
TITLE =Panel 2
//Numero du pupitre en pilotage manuel , Consignes et infos pupitres
//
//PANEL 2
//Number of Panel in Manual mode, Panel instructions and information
//*ODIL_ID:1932_87*
//
UN #Dcihm2;
= L 1.0;
U L 1.0;
U #Pilot.Ihm2pm;
= #Ihm2pm;
U L 1.0;
U #Pilot.Ihm2cns;
= #Diag.Ihm2cns;
U L 1.0;
U #Pilot.Ihm2inf;
= #Diag.Ihm2inf;
NETWORK
TITLE =Panel 3
//Numero du pupitre en pilotage manuel , Consignes et infos pupitres
//
//PANEL 3
//Number of Panel in Manual mode, Panel instructions and information
//*ODIL_ID:1932_88*
//
UN #Dcihm3;
= L 1.0;
U L 1.0;
U #Pilot.Ihm3pm;
= #Ihm3pm;
U L 1.0;
U #Pilot.Ihm3cns;
= #Diag.Ihm3cns;
U L 1.0;
U #Pilot.Ihm3inf;
= #Diag.Ihm3inf;
NETWORK
TITLE =Panel 4
//Numero du pupitre en pilotage manuel , Consignes et infos pupitres
//
//PANEL 4
//Number of Panel in Manual mode, Panel instructions and information
//*ODIL_ID:1932_89*
//
UN #Dcihm4;
= L 1.0;
U L 1.0;
U #Pilot.Ihm4pm;
= #Ihm4pm;
U L 1.0;
U #Pilot.Ihm4cns;
= #Diag.Ihm4cns;
U L 1.0;
U #Pilot.Ihm4inf;
= #Diag.Ihm4inf;
NETWORK
TITLE =au moins 1 consigne pour bandeau superieur Winccflex
//There is at least 1 (or more) instruction on WinCC flexible status header
//*ODIL_ID:1932_90*
//
O #Pilot.Ihm1cns;
O #Pilot.Ihm2cns;
O #Pilot.Ihm3cns;
O #Pilot.Ihm4cns;
= #Diag.Ihmcns;
NETWORK
TITLE =au moins 1 info pour bandeau superieur Winccflex
//There is at least 1 (or more) information on WinCC flexible status header
//*ODIL_ID:1932_91*
//
O #Pilot.Ihm1inf;
O #Pilot.Ihm2inf;
O #Pilot.Ihm3inf;
O #Pilot.Ihm4inf;
= #Diag.Ihminf;
NETWORK
TITLE =Information presence d'un defaut affiche sur IHM
//There is at least 1 (or more) fault that is displayed on HMI
//*ODIL_ID:1932_92*
//
O #Pilot.Ihm1def;
O #Pilot.Ihm2def;
O #Pilot.Ihm3def;
O #Pilot.Ihm4def;
= #Ihmzdef;
NETWORK
TITLE =Spare if communication failure, internal processing is necessary
//Spare.
//Kept if communication fault information is necessary internally.
//*ODIL_ID:1932_93*
//
O #Dcihm1;
O #Dcihm2;
O #Dcihm3;
O #Dcihm4;
= #Def_com_ihm;
NETWORK
TITLE =Movement in progress Number
//Number of movement in progress
//*ODIL_ID:1932_94*
//
U(;
O #Ihm1pm;
O #Ihm2pm;
O #Ihm3pm;
O #Ihm4pm;
);
U #Z_manu;
= L 1.0;
U L 1.0;
SPBNB _00b;
L #Pilot.Ihmnmvt;
T #Num_mvt;
_00b: NOP 0;
U L 1.0;
SPBNB _00c;
L #Pilot.Ihmnpage;
T #Num_page;
_00c: NOP 0;
U L 1.0;
NOT;
= L 1.1;
U L 1.1;
SPBNB _00d;
L -1;
T #Num_mvt;
_00d: NOP 0;
U L 1.1;
SPBNB _00e;
L -1;
T #Num_page;
_00e: NOP 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "BF_G120S_V2"
TITLE =BF_G120S_V2
//********************************************************************************
//*                                 BF_G120_S                                    *
//*   ASSURE le PILOTAGE des FONCTIONS VARIATEUR G120 de Manutention Standard    *
//* MAKE the control and command of the G120 DRIVE FUNCTIONS of Standard Handling*
//*******************************************************************************
//( In English further below)
//
//DESCRIPTION:
//************
//Ce FB est associe au FB BFS_BSECTR qui pilote le RLV du variateur
//Le FB assure :
//Le pilotage du variateur
//Le diagnostic de la fonction
//Le diagnostic de la partie Fail Safe du programme
//Le diagnostic du RLV
//
//MISE EN OEUVRE :
//****************
//Le forcage frein est uniquement autorise que sur les axes horizontaux
//1) IN :
//------
//In_fonc = aux entree TOR de la fonction G120
//F_DBrlv_No = au numero du DB d'instance du bloc appelant le BFS_BSECTR qui
//
//       pilote le RLV
//FDBrlv_offset = l'adresse en octet de la fonction BSECTR dans le DB instance
//Safety.
//Tps_dece = Temps de deceleration reel du variateur :
//            (Valeur P1121 du Var * Frequence) / 100
//Pilotage = peut etre assure soit:
//- Par le programme d'animation
//- Par des pages ecrans Wincc Uniquement pour la maintenance.
//- Par la page ecran de pilotage manuel operateur.
//Au niveau mise en oeuvre sur un MOP il faut obligatoirement interdire le
//pilotage simultane des ecrans Wincc maintenance et des ecrans de pilotage
//manuel
//operateur (depuis un SOP distant).
//Sur un LOP se probleme n'existe pas vue qu'il ne peut y avoir qu'une seule page
//ecrans active sur l'afficheur de la zone en meme temps
//
//2) OUT :
//-------
//F_AR = utilise pour une coupure immediate du RLV.
//Elle est a raccorder sur la patte Cci (Condition de coupure immediate) du
//BFS_BSECTR qui pilote le RLV.
//Attention, on ne peut utiliser qu'un memento.
//La perte de F_AR necessite un rearmement de la fonction de securite.
//
//
//CODE de DEFAUT :
//****************
//Valeur de diag.codedef
//2 =  Defaut RLV
//4 =  Defaut Frein
//32 = Defaut parametrage temps de retombee trop long
//256 = Alarme RLV
//1024 = Defaut variateur
//4096 = Attente de rearmement zone aval/Amont
//8192 = Variateur indisponible ( variateur en mode local maintenance)
//
//************************** ENGLISH INFORMATION  ****************************
//
//DESCRIPTION :
//**************
//This FB is associated to BFS_BSECTR FB which controls the Drive line relay.
//The FB ensures:
//  - Control of the Drive
//  - Diagnosis of the function
//  - Diagnosis of the Fail Safe part of the program
//  - Diagnosis of the DLR ( Drive line relay, RLV in french)
//OPERATING :
//***********
//Brake forcing is only authorized on horizontal axis.
//1)FB IN :
//---------
//In_fonc = digital PLC input of the G120 function
//F_DBrlv_No = Safety instance DB Number which calls the BF_BSECTR  for the DLR
//function.
//F_DBrlv_Offset = Byte adress of BF_BSECTR in safety DB instance.
//TPS_dece = Real deceleration time of drive
//           value = (Drive P1121 parameter value * Frequency)/ 100
//Pilotage = can be executed by :
//- PLC programme
//- Maintenance screen with wincc
//- Manual operator control screen
//When implemented on an MOP the simultaneous control of Wincc maintenance
//screens
//and manual operator control screens from a remote SOP MUST be forbidden.
//This problem does not exist on an LOP because only one screen page may be
//activated on the zone display unit at any one time.
//
//2) FB OUT :
//----------
//F_AR = Used for DLR immadiate cut off
//It is connected on the Cci (Immediate cutoff condition) pin of the BFS_BSECTR
//which controls the DLR.
//Caution, only one memento can be used.
//The loss of F_AR requires control on of the safety function.
//
//CODE FAULT :
//************
//Diag.codedef values :
//2 = Drive Line relay  (RLV in French DLR in English) fault
//4 = Brake fault
//32 =  Configuration fault safety time too long
//256 = Drive Line relay (RLV) Alarm
//1024 = Drive fault
//4096 = waiting for Upstream / downstream control on
//8192 = Drive unavailable (Drive in maintenance local mode)
//*********************************ODIL_ID*************************************
//NB Reseaux BF 1er Version / Network Number in 1ft version : 31
//Dernier ID mis en oeuvre / Last ID implemented : 1854_31
//Liste des ID supprimes(Num de reseau)/ID deleted list (only network number): SO
//****************************************************************************
AUTHOR : SIEMENS
FAMILY : 'RENAULT'
NAME : 'FONC_VAR'
VERSION : 1.0
VAR_INPUT
  In_fonc : STRUCT	//Function input word / Mot d'entree de la fonction
    CFR1 : BOOL;	//Axis 1 brake relay check / Controle relais de frein axe 1
    VAROK : BOOL;	//Axis 1 drive OK / Variateur OK axe 1
    CRLV : BOOL;	//drive relay line check / Controle relais de ligne variateur
  END_STRUCT ;
  Def_maj : BOOL;	//Major Fault (External) / Defaut majeur (externe)
  Iadf : BOOL;	//Fault reset / Acquittement defaut
  Rear : BOOL;	//Control on / Rearmement
  x_RLV : POINTER;	//Bit of instance location BESECTR/Bit de localisation de l'instance BESECTR
  Pilotage : STRUCT	//drive control / Pilotage variateur
    OSAAM_AV : BOOL;	//Option up - downstream Stop zone selection/Option select arret zone Amont aval
    OAV : BOOL;	//Advance Order / Ordre avance
    OAR : BOOL;	//Return Order / Ordre recul
    BIT1VIT : BOOL;	//Speed selection first bool / 1er Bit de selection vitesse
    BIT2VIT : BOOL;	//Speed selection second bool / 2eme Bit de selection vitesse
    FFR1 : BOOL;	//Axis1 Brake forcing (Horizontal)/ Forcage frein axe1(Mvt horizontaux seulement)
  END_STRUCT ;
  Tps_dece : TIME  := T#1S;	//Movement deceleration time / Temps de decceleration du mvt
END_VAR
VAR_OUTPUT
  Out_Fonc : STRUCT	//function output word /Mot de sortie associe a la fonction
    OAV : BOOL;	//Advance Order / Ordre avance
    OAR : BOOL;	//Return Order / Ordre recul
    FFR1 : BOOL;	//Axis 1 brake forcing order / Forcage frein axe 1 (Mvt horizontaux seulement)
    BIT1VIT : BOOL;	//Speed select first bool/ 1er Bit de selection vitesse
    BIT2VIT : BOOL;	//Speed select second bool / 2eme Bit de selection vitesse
  END_STRUCT ;
  F_AR : BOOL;	//Drive line relay (RLV) cutoff information / Information de coupure RLV
  Def : BOOL;	//SMPLOC Fault bool / Bit de defaut general pour SMPLOC
  Ala : BOOL;	//SMPLOC Alarm bool / Bit d'alarme pour SMPLOC
  Diag : STRUCT	//Diagnosis structure / Structure de diagnostic
    Def : BOOL;	//IHMP Fault / Bit de defaut general pour IHMP
    Ala : BOOL;	//IHMP Alarm / Bit d'alarme pour IHMP
    Numliste : INT  := 57;	//IHMP List Number = 57 / N° de liste IHMP = 57
    Codedef : INT;	//IHMP Fault code / Code de defaut pour IHMP
    IhmInf0 : WORD;	//In_fonc copy / Copie de In_fonc
    IhmInf1 : WORD;	//Out_fonc copy / Copie de Out_fonc
    IhmDem_rear : BOOL;	//Control on Request / Demande de rearmement
    IhmMdefrlv : BOOL;	//drive line relay fault memory / Mem. defaut relais de ligne variateur
    IhmDeffrein : BOOL;	//drive brake relay fault memory / Mem. defaut relais de frein variateur
    IhmDf_para1 : BOOL;	//Parameter fault 1: safe time max> 2s / Defaut de param. 1 :Tps_secu max > 2 sec
    IhmAla_rlv : BOOL;	//Drive Line Relay activation Alarm / Alarme a la montee du relais de ligne var
    IhmInfonc_VAROK : BOOL;	//Varok (Drive Ok) loss memory / Mem. perte du Varok
    IhmIndisp : BOOL;	//Drive unavailable memory /Mem. variateur indisponible
    IhmInFonc_CRLV : BOOL;	//CRLV (Drive line relay check) fault memory / Mem. CRLV sur defaut
    IhmM_Rlv : BOOL;	//RLV (Drive line relay) ault memory /Mem. RLV sur defaut
  END_STRUCT ;
END_VAR
VAR
  Tr_frein : TIME  := T#200MS;	//Brake check delay time / Temps de retard  controle frein
  F_Tps_secu : TIME;	//Safety time parametrized / F tps de secu papametre
  Cfr : BOOL;	//In_fonc: axis 1 brake relay check / In_fonc:Controle relais de frein axe1
  F_Rlv_Sc : BOOL;	//Sum of Cxx DLR inputs / Somme des entres Cxx RLV
  F_Crlv : BOOL;	//In_fonc: axis 1 Drive line relay check / In_fonc:Controle relais ligne var axe1
  F_Rlv : BOOL;	//DLR order Safety status / F etat commande RLV
  F_Def_rlv : BOOL;	//Safety DLR fault / F defaut RLV
  F_Ala_rlv : BOOL;	//Safety DLR alarm / F alarme RLV
  Deffrein : BOOL;	//Brake contactor Fault / Defaut contacteur de frein
  Df_para1 : BOOL;	//Param1 fault: relay time Deactivat /Def de param 1:temps retomb.relais > 2s max
  Aux_fr : BOOL;	//Brake fault auxiliary / Auxilliaire defaut frein
  X_Indisp : BOOL;	//Drive Unavailable auxiliary / Bit intermediaire var indisponible
  Val_marche : BOOL;	//Start / Validation marche
  FP_Def : BOOL;	//Auxiliary edge fault / Auxiliaire front defaut
  Def_rlv : BOOL;	//DRL fault auxialiary / Auxiliaire defaut RLV
  Ala_rlv : BOOL;	//DRL alarm auxiliary / Auxiliaire Alarme RLV
  X_mdef : BOOL;	//Fault memory auxiliary / Auxiliaire memoire defaut
  Tpsfrein : TIME;	//Brake time check / Temps de controle du frein
  Tps_indisp : TIME  := T#500MS;	//Run Order time check / Temps de controle prise en compte ordres de marche
  Tps_val_marche : TIME  := T#600MS;	//Run delay time / Temps de retard validation marche
  T_frein : TON;	//Brake tempo / Tempo frein
  T_indisp : TON;	//Internal Tempo /Interne : tempo
  T_Valmarche : TOF;	//Internal tempo / Interne : tempo
END_VAR
VAR_TEMP
  SavAR2 : DINT;
  DBNR : INT;
  BSECTR : STRUCT	///!\ Safety Inputs information / entrees  des information de Securite
    DSecu : BOOL;	//Safety dependence/Dependance securite
    Cci : BOOL;	//Immediate cut-off conditions/Conditions coupure immediate
    CSecu0 : BOOL;	//Feedbacks check without control/Controle Retours sans pilotage
    CSecu1 : BOOL;	//Feedbacks check with control/Controle Retours avec Pilotage
    Iadf : BOOL;	//Fault reset/Annulation defaut
    Ir : BOOL;	//Function control on/Rearmement fonction
    Tps_secu : TIME;	//Relay deactivating time(Max.=2s)/Temps de retombee du relais (Maxi 2s
    DO_F : BOOL;	//F-DO output control/Commande sortie F-DO
    Secu : BOOL;	//Similar with DO-F/Identique a DO_F
    Secu_OK : BOOL;	//Safety loop correct/Boucle de securite valide
    Def : BOOL;	//Discrepancy fault in the deactivation/Defaut de discordance a la desactivation
  END_STRUCT ;
  STAT_X_RLV : STRUCT
    x : BOOL;	//Bit of instance location/Bit de localisation de l'instance
    IHMDef : BOOL;	//Discrepancy fault in the deactivation/Defaut de discordance a la desactivation
    IHMAla : BOOL;	//Discrepancy fault in the activation/Def de discordance a l'activation (Ala)
    xSecu : BOOL;	//Auxiliary bit/Bit auxiliaire
    M_ala : BOOL;	//Alarm memory/Memoire alarme
  END_STRUCT ;
END_VAR
BEGIN
NETWORK
TITLE =
//==============================================================================
//         RLV (Relais ligne variateur) / DLR (Drive line relay)
//==============================================================================
//*ODIL_ID:1854_1*
//

NETWORK
TITLE =Initialisation BFSBSECTR
//*ODIL_ID:1854_2*
TAR2 #SavAR2;
//------- Initialisation BFSTR
LAR1 AR2;
L P##x_RLV;
+AR1;
L DIW [AR1,P#0.0]; //!\POINTER: Data Block Number pointer de la variable x_RLV interface d'entree de la BF
T #DBNR;
AUF DB [#DBNR]; //Instance data block number of the F-Function Block
L DID [AR1,P#2.0]; //!\POINTER: Area - Address + 2 par rapport au numero de bloc
LAR2;
L L#-64; //!\ Decalage de 8 octets ( 8*n)
+AR2;
LAR1 P##BSECTR; //instance
//----------
L DBW [AR2,P#0.0]; //Instance data of the F-Function Block
T LW [AR1,P#0.0]; //!\ Structure InTr
L DBD [AR2,P#2.0]; //Instance data of the F-Function Block
T LD [AR1,P#2.0]; //!\ Structure Tps_secu
L DBW [AR2,P#6.0]; //Instance data of the F-Function Block
T LW [AR1,P#6.0]; //!\ Structure outTr
L DBW [AR2,P#8.0]; //Instance data of the F-Function Block
T LW [AR1,P#8.0]; //!\ Structure STAT_X_RLV
//-------
LAR2 #SavAR2;
NETWORK
TITLE =Lecture et mise a disposition des informations F pour le diag
//Reading and provision of Safety information for diag
//*ODIL_ID:1854_3*
U #BSECTR.DSecu;
U #BSECTR.Cci;
= #F_Rlv_Sc;
U #BSECTR.Secu; // Pilotage RLV _ RLV order
= #F_Rlv;
UN #BSECTR.CSecu0; // Retour RLV _ DLR information
= #F_Crlv;
U #STAT_X_RLV.IHMDef; // Defaut RLV _ DLR Fault
= #F_Def_rlv;
U #STAT_X_RLV.IHMAla; // Alarme RLV _ DLR Alarm
= #F_Ala_rlv;
L #BSECTR.Tps_secu; // Temps de maintien RLV _ RLV Dwell time
T #F_Tps_secu;
NETWORK
TITLE =Defaut a la retombee du RLV
//RLV Deactivation timer Fault
//*ODIL_ID:1854_4*
U #STAT_X_RLV.IHMDef;
UN #In_fonc.CRLV;
= #Def_rlv;
NETWORK
TITLE =Alarme a la montee du RLV
//RLV Activation timer Alarm
//*ODIL_ID:1854_5*
U #STAT_X_RLV.IHMAla;
U #In_fonc.CRLV;
= #Ala_rlv;
NETWORK
TITLE =
//==============================================================================
//                                VAR _drive
//==============================================================================
//*ODIL_ID:1854_6*

NETWORK
TITLE =Lecture de bits du mot d'entree
//Input word reading
//*ODIL_ID:1854_7*
U #In_fonc.CFR1;
NOT;
= #Cfr;
NETWORK
TITLE =(*Verification du contacteur de frein*)
//(*Brake contactor Check*)
//*ODIL_ID:1854_8*
U(;
ON #F_Crlv;
O;
UN #Pilotage.OAV;
UN #Pilotage.OAR;
UN #Pilotage.FFR1;
);
U #Cfr;
UN #Def_maj;
O;
U #Deffrein;
UN #Iadf;
= #Aux_fr;
NETWORK
TITLE =(*Verification du contacteur de frein*)
//(*Brake contactor Check*)
//*ODIL_ID:1854_9*
U(;
L #T_frein.ET;
L T#0MS;
==I;
);
SPBNB _001;
L #Tr_frein;
T #Tpsfrein;
_001: NOP 0;
NETWORK
TITLE =(*Verification du contacteur de frein*)
//(*Brake contactor Check*)
//*ODIL_ID:1854_10*
U #F_Crlv;
SPBNB _002;
L #Tps_dece;
L #Tr_frein;
+I;
T #Tpsfrein;
_002: NOP 0;
NETWORK
TITLE =(*Verification du contacteur de frein*)
//(*Brake contactor Check*)
//*ODIL_ID:1854_11*
U #Aux_fr;
= L 16.0;
BLD 103;
CALL #T_frein (
IN := L 16.0,
PT := #Tpsfrein,
Q := #Deffrein);
NOP 0;
NETWORK
TITLE =(*PARAMETRAGE DU TEMPS DE RETOMBEE DU RELAIS HORS LIMITES*)
//( 2 sec MAXI )
//Si le temps est superieur au temps maxi, celui-ci est considere comme nul
//
//(* DEACTIVATION RELAY OUT-RANGE TIME PARAMETER*)
//( Maxi 2 sec )
//If the time is longer than maxi time, it is considered as zero
//*ODIL_ID:1854_12*
L #F_Tps_secu;
L T#2S;
>I;
= #Df_para1;
NETWORK
TITLE =Controle prise en compte ordres de marche
//Orders check
//*ODIL_ID:1854_13*
U(;
O #Out_Fonc.OAV;
O #Out_Fonc.OAR;
);
U #In_fonc.CFR1;
= L 16.0;
BLD 103;
CALL #T_indisp (
IN := L 16.0,
PT := #Tps_indisp);
NOP 0;
NETWORK
TITLE =Var indisponible
//drive Unavailable
//*ODIL_ID:1854_14*
U #T_indisp.Q;
S #X_Indisp;
U #Iadf;
R #X_Indisp;
NOP 0;
NETWORK
TITLE =Temporisation validation marche
//Run delay timer
//*ODIL_ID:1854_15*
U #Iadf;
UN #Val_marche;
= L 16.0;
BLD 103;
CALL #T_Valmarche (
IN := L 16.0,
PT := #Tps_val_marche);
NOP 0;
NETWORK
TITLE =Validation marche
//run validation
//*ODIL_ID:1854_16*
O #T_Valmarche.Q;
ON #X_Indisp;
= #Val_marche;
NETWORK
TITLE =Ecriture sortie F_AR
//F_AR output writing
//*ODIL_ID:1854_17*
U #In_fonc.VAROK;
UN #Deffrein;
UN #Def;
= #F_AR;
NETWORK
TITLE =Sorties VAR
//Drive output
//*ODIL_ID:1854_18*
UN #F_Def_rlv;
UN #Deffrein;
U #F_Rlv;
U #F_Crlv;
U #Pilotage.OSAAM_AV;
U #F_Rlv_Sc;
= L 16.0;
U L 16.0;
U #Pilotage.BIT1VIT;
= #Out_Fonc.BIT1VIT;
U L 16.0;
U #Pilotage.BIT2VIT;
= #Out_Fonc.BIT2VIT;
U L 16.0;
U #Pilotage.OAV;
UN #Pilotage.OAR;
U #Val_marche;
= #Out_Fonc.OAV;
U L 16.0;
U #Pilotage.OAR;
UN #Pilotage.OAV;
U #Val_marche;
= #Out_Fonc.OAR;
NETWORK
TITLE =Sortie frein
//Brake output
//*ODIL_ID:1854_19*
UN #F_Def_rlv;
UN #Deffrein;
U #Pilotage.FFR1;
= #Out_Fonc.FFR1;
NETWORK
TITLE =
//==============================================================================
//                               DIAGNOSTIC _ DIAGNOSIS
//==============================================================================
//*ODIL_ID:1854_20*

NETWORK
TITLE =Defaut
//FAULT
//*ODIL_ID:1854_21*
U #Def_rlv;
U #F_Def_rlv;
O #Deffrein;
ON #In_fonc.VAROK;
O #X_Indisp;
O #Df_para1;
O;
U #Def;
UN #Iadf;
= L 16.0;
U L 16.0;
BLD 102;
= #Def;
U L 16.0;
BLD 102;
= #Diag.Def;
U L 16.0;
FP #FP_Def;
= #X_mdef;
NETWORK
TITLE =RAZ DES MOTS DE DIAGNOSTIC
//Diagnosis Reset
//*ODIL_ID:1854_22*
UN #Def;
SPBN NoDe;
SET;
R #Diag.IhmMdefrlv;
R #Diag.IhmDeffrein;
R #Diag.IhmInFonc_CRLV;
R #Diag.IhmM_Rlv;
L 0;
T #Diag.Codedef;
NoDe: NOP 0;
NETWORK
TITLE =Attente de Rearmement
//Waiting for control on
//*ODIL_ID:1854_23*
UN #F_Rlv;
UN #F_Def_rlv;
UN #F_Ala_rlv;
UN #Deffrein;
= #Diag.IhmDem_rear;
NETWORK
TITLE =Defaut var indisponible
//drive Unavailable  fault
//*ODIL_ID:1854_24*
U #X_Indisp;
= L 16.0;
U L 16.0;
BLD 102;
S #Diag.IhmIndisp;
U L 16.0;
SPBNB _003;
L 8192;
T #Diag.Codedef;
_003: NOP 0;
NETWORK
TITLE =Option selection amont / aval
//Upstream / Downstream selection option
//*ODIL_ID:1854_25*
UN #Pilotage.OSAAM_AV;
SPBNB _004;
L 4096;
T #Diag.Codedef;
_004: NOP 0;
NETWORK
TITLE =Defaut perte var OK
//drive OK loss Fault
//*ODIL_ID:1854_26*
UN #In_fonc.VAROK;
= L 16.0;
U L 16.0;
BLD 102;
= #Diag.IhmInfonc_VAROK;
U L 16.0;
SPBNB _005;
L 1024;
T #Diag.Codedef;
_005: NOP 0;
NETWORK
TITLE =Alarme RLV
//DLR Alarm
//*ODIL_ID:1854_27*
U #Ala_rlv;
= L 16.0;
U L 16.0;
BLD 102;
= #Diag.IhmAla_rlv;
U L 16.0;
SPBNB _006;
L 256;
T #Diag.Codedef;
_006: NOP 0;
NETWORK
TITLE =Defaut parametrage temps de retombee trop long
//Deactivation time too long parameter fault
//*ODIL_ID:1854_28*
U #Df_para1;
= L 16.0;
U L 16.0;
BLD 102;
= #Diag.IhmDf_para1;
U L 16.0;
SPBNB _007;
L 32;
T #Diag.Codedef;
_007: NOP 0;
NETWORK
TITLE =Defaut frein
//Brake Fault
//*ODIL_ID:1854_29*
U #Deffrein;
= L 16.0;
U L 16.0;
BLD 102;
S #Diag.IhmDeffrein;
U L 16.0;
SPBNB _008;
L 4;
T #Diag.Codedef;
_008: NOP 0;
NETWORK
TITLE =Defaut RLV
//DLR FAULT
//*ODIL_ID:1854_30*
U #Def_rlv;
U #F_Def_rlv;
= L 16.0;
U L 16.0;
BLD 102;
S #Diag.IhmMdefrlv;
U L 16.0;
SPBNB _009;
L 2;
T #Diag.Codedef;
_009: NOP 0;
NETWORK
TITLE =Sauvegarde des etats
//Status save
//*ODIL_ID:1854_31*
U #X_mdef;
= L 16.0;
U L 16.0;
U #In_fonc.CRLV;
S #Diag.IhmInFonc_CRLV;
U L 16.0;
U #F_Rlv;
S #Diag.IhmM_Rlv;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "0_01_ILOT"
TITLE =FACILITY CONTROL
VERSION : 0.1
VAR
  ILOT : BF_ILOT;	//FACILITY FUNCTION
  PROFINET_RUN : BOOL;	//FACILITY: INFORMATION PROFINET NETWORK OK
  S_VIEAPI : WORD;	//FACILITY: PLC HEART BEAT WORD
  S_DEFQUAL : BOOL;	//FACILITY: PROFINET NETWORK ALARM
  S_DFBUS : BOOL;	//FACILITY: PROFINET NETWORK FAULT
  S1DF_BUS : BOOL;	//ILOT: Def. barramento PROFINET
  S1DEF_QUAL : BOOL;	//ILOT: Alarme PROFINET
  S1DF_API : BOOL;	//ILOT: Def. CLP
  VAOP_X1 : BOOL;	//FACILITY: AUX1 OPERATOR CALLING TOWER LAMP
  VAOP_X2 : BOOL;	//FACILITY: AUX2 OPERATOR CALLING TOWER LAMP
END_VAR
BEGIN
NETWORK
TITLE =CALL OF PROFINET NETWORK DIAGNOSTIC
//APPEL DU FB DIAGNOSTIQUE RESEAU PROFINET
//*ODIL_ID:2_100*
//
U "IADF";
= L 1.0;
BLD 103;
U "BA1";
= L 1.1;
BLD 103;
CALL "BF_DIAG_PROFINET" , "DB_PN" (
D_pn := L 1.0,
P_IHMP := L 1.1,
DB_SFM := "SFM_PN",
Pn_run := #PROFINET_RUN,
Defaut := #S_DFBUS,
Alarme := #S_DEFQUAL);
NOP 0;
NETWORK
TITLE =UPDATE NETWORK ALARM INFORMATION FOR ALL ZONE
//SUIVI: RECOPIE DE L ALARME QUALITE PROFINET VERS LE SUIVI ZONES
//*ODIL_ID:2_101*
//
U #S_DEFQUAL;
= #S1DEF_QUAL;
NETWORK
TITLE =UPDATE NETWORK FAULT FOR ALL ZONE
//SUIVI: RECOPIE DU DEFAUT PROFINET VERS LE SUIVI ZONES
//*ODIL_ID:2_102*
//
U #S_DFBUS;
= #S1DF_BUS;
NETWORK
TITLE =FACILITY: MAJOR FAULT
//ILOT: INFORMATION DEFAUT MAJEUR (FILTRAGE DES DEFAUTS INDESIRABLES)
//DEF_MAJ = INHIBIT UNWANTED FAILURES
//*ODIL_ID:2_103*
//
UN #PROFINET_RUN;
= "IG".DEF_MAJ;
NETWORK
TITLE =FACILITY: FAULT PRESENT INFORMATION FROM ZONE HMI
//ILOT: INFORMATION DEFAUT PRESENT SUR L IHM
//*ODIL_ID:2_105*
//
U "Z1G".IHMDEF;
= #ILOT.Inf_def;
NETWORK
TITLE =FUNCTION FACILITY
//FB ILOT
//*ODIL_ID:2_106*
//
U "BRI";
= L 1.0;
BLD 103;
U "BADI";
= L 1.2;
BLD 103;
U "ICL080S";
= L 1.3;
BLD 103;
CALL #ILOT (
Bri := L 1.0,
Badi := L 1.2,
ICL_S := L 1.3,
Ir := "IR",
Iadf := "IADF",
S_vieapi := #S_VIEAPI,
Vdefi := "VADI",
Lien_ilo := "IG".LIEN_ILOT);
NOP 0;
NETWORK
TITLE =MONITORING: UPDATE PLC FAULT FOR OTHER ZONE
//SUIVI: RECOPIE DU DEFAUT API VERS LE SUIVI ZONES
//*ODIL_ID:2_107*
//
U #ILOT.Def_api;
= #S1DF_API;
NETWORK
TITLE =CALL OPERATOR TOWER LAMP: AUX 1
//AUXILLIAIRE 1: VERRINE APPEL OPERATEUR
//*ODIL_ID:2_108*
//
U "Z1G".DDO;
= #VAOP_X1;
NETWORK
TITLE =CALL OPERATOR TOWER LAMP: AUX 2
//AUXILLIAIRE 2: VERRINE APPEL OPERATEUR
//*ODIL_ID:2_109*
//
U "Z1G".DPR;
= #VAOP_X2;
NETWORK
TITLE =CALL OPERATOR: BLUE LAMP
//VERRINE APPEL OPERATEUR (FLASH BLEU SUR MOP)
//*ODIL_ID:2_110*
//
O #VAOP_X1;
O #VAOP_X2;
O #ILOT.Df_ilot;
O "IG".DEF_MAJ;
O "IG".LIEN_ILOT.ITLG;
= "VAOP";
END_FUNCTION_BLOCK

DATA_BLOCK "I01"
VERSION : 0.1
"0_01_ILOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "0_02_MMC"
TITLE =PLC DATA BACKUP MANAGEMENT / GESTION SAUVEGARDE DES DONNEES API
VERSION : 0.1
VAR
  MMC : BF_MMC;	//FACILITY: BACKUP/RESTITUTION FUNCTION ON MMC CARD / SAUV/RESTIT SUR CARTE MMC
  S1DFSBD : BOOL;	//DATA BASE BACKUP FAULT / DEFAUT SAUVEGARDE BASE DE DONNEE (MMC)
  S1DFRBD : BOOL;	//DATA BASE RESTORE FAULT / DEFAUT RESTITUTION BASE DE DONNEE (MMC)
  I_MANU : BOOL;	//RECETTE: INFORMATION ALL ZONE IN MANUAL MODE / INFO TOUTE LES ZONE EN MODE MANU
  START_TRANSFERT : WORD;	//RECETTE: INFORMATION START BACKUP FROM PLC TO PC / START SAUVEGARDE VERS LE PC
  TRANSFERT_PLC_PC : INT;	//RECETTE: STATE VALUE FOR TRANFERT FROM PLC TO PC / ETAT TRANSFERT VERS LE PC
  TRANSFERT_PC_PLC : INT;	//RECETTE: STATE VALUE FOR TRANFERT FROM PC TO PLC / ETAT TRANSFERT VERS L API
  XF_MPP_A0 : BOOL;	//RECETTE: EDGE AUXILLIARY FOR MEMORY PART PRESENT / BIT POUR CREATION D UN FRONT
  XF_MPP_T0C : BOOL;	//RECETTE: EDGE AUXILLIARY FOR MEMORY PART PRESENT / BIT POUR CREATION D UN FRONT
  XF_MPP_G0W : BOOL;	//RECETTE: EDGE AUXILLIARY FOR MEMORY PART PRESENT / BIT POUR CREATION D UN FRONT
  IRECTA : BOOL;	//RECETTE: TRANSFERT ENABLE (FREE OF USE) / AUTORISATION TRANSFERT
  IRECTEC : BOOL;	//RECETTE: TRANSFERT IN PROGRESS / TRANSFERT DE DONNEES EN COURS
  IRECFTOK : BOOL;	//RECETTE: END OF TRANSFERT OK / FIN DE TRANSFERT DES DONNEES OK
  IRECFTNOK : BOOL;	//RECETTE: END OF TRANSFERT NOK / FIN DE TRANSFERT DES DONNEES NOK
  X_START : BOOL;	//RECETTE: START AUXILLIARY / AUXILLIAIRE START TRANSFERT
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                PLC PRODUCTION DATA MANUAL BACKUP ON MMC CARD              **
//*******************************************************************************
//*ODIL_ID:2_200*
//

NETWORK
TITLE =MANUAL MODE SELECT ON ALL ZONE FOR MMC TREATMENT
//TOUTES LES ZONES DE L ILOT EN MARCHE MANUEL POUR AUTORISER LA SAUVEGARDE SUR
//MMC
//*ODIL_ID:2_201*
//
U "Z1G".LIEN_PUP.Z_manup;
= #I_MANU;
NETWORK
TITLE =BACKUP CONTROL AND DATA RESTITUTION ON EXTERNAL MMC CARD
//GESTION DE LA SAUVERGARDE DES DONNEES API VERS LA CARTE MMC DE LA CPU
//*ODIL_ID:2_202*
//
U "IADF";
= L 1.0;
BLD 103;
U #I_MANU;
= L 1.1;
BLD 103;
CALL #MMC (
Iadf := L 1.0,
Mmanu := L 1.1,
Def_Sauv := #S1DFSBD,
Def_Rest := #S1DFRBD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**         AUTOMATIC PRODUCTION DATA BACKUP AND MANUAL RESTIT ON MOP PC      **
//*******************************************************************************
//*ODIL_ID:2_203*
//

NETWORK
TITLE =AUTOMATIC BACKUP FOR PRODUCTION DATA (IIT+SIP1+BDD+ZZXT)
//UPDATE DATA ON MEMORY PART PRESENT POSITIVE EDGE
//FRONT POUR DECLENCHEMENT LA SAUVEGARDE AUTOMATIQUE VERS LE PC DU MOP(POSER LA
//MPP DU PREMIER
//POSTE DE TRAVAIL ET LA MPP DU TRANSIT DERNIER POSTE DE TRAVAIL DE L ILOT)
//*ODIL_ID:2_204*
//
UN #I_MANU;
U(;
L #TRANSFERT_PLC_PC;
L 0;
==I;
);
U(;
O(;
U "IIT".A0.MP.MPP;
U "IIT".T0C.MP.MPP;
BLD 100;
FP #XF_MPP_A0;
FP #XF_MPP_T0C;
);
O(;
U "IIT".G0.MP.MPP;
BLD 100;
FP #XF_MPP_G0W;
);
);
= #X_START;
NETWORK
TITLE =START BACKUP TRANSFERT FROM PLC TO MOP PC
//LANCER LE TRANSFERT DE L API VERS LE PC DU MOP
//*ODIL_ID:2_205*
//
U #X_START;
SPBNB _001;
L 1;
T #START_TRANSFERT;
_001: NOP 0;
NETWORK
TITLE =END OF TRANSFERT FROM PLC TO PC
//FIN DE TRANSFERT DE L API VERS LE PC DU MOP
//*ODIL_ID:2_206*
//
L #TRANSFERT_PLC_PC;
L 4;
==I;
= L 1.0;
U L 1.0;
SPBNB _002;
L 0;
T #START_TRANSFERT;
_002: NOP 0;
U L 1.0;
SPBNB _003;
L 0;
T #TRANSFERT_PLC_PC;
_003: NOP 0;
NETWORK
TITLE =DATA RESTIT STATUS
//STATE RETURN VALUE / ETAT DU TRANSFERT DE DONNEES API / PC:
//0 = TRANSFERT ENABLE (FREE OF USE) / AUTORISATION DE TRANSFERT
//2 = TRANSFERT IN PROGRESS / TRANSFERT EN COURS
//4 = END OF TRANSFERT OK / FIN DE TRANSFERT OK
//12 = END OF TRANSFERT NOK / FIN DE TRANSFERT NOK
//*ODIL_ID:2_207*
//
U "BA1LIEN";
= L 1.0;
U L 1.0;
U(;
L #TRANSFERT_PC_PLC;
L 0;
==I;
);
= #IRECTA;
U L 1.0;
U(;
L #TRANSFERT_PC_PLC;
L 2;
==I;
);
= #IRECTEC;
U L 1.0;
U(;
L #TRANSFERT_PC_PLC;
L 4;
==I;
);
= #IRECFTOK;
U L 1.0;
U(;
L #TRANSFERT_PC_PLC;
L 12;
==I;
);
= #IRECFTNOK;
END_FUNCTION_BLOCK

DATA_BLOCK "I02"
VERSION : 0.1
"0_02_MMC"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "0_03_XOP"
TITLE =MOP/LOP HMI SCREEN MANAGEMENT
VERSION : 0.1
BEGIN
NETWORK
TITLE =PAGE NUMBER MANAGEMENT AND DATE/HOUR MOP PANEL
//GESTION ECHANGES DU NUMERO DE PAGE EN COURS SUR L IHM + DATE ET HEURE
//*ODIL_ID:2_300*
//
CALL "BF_IHM_WINCC" , "DB_IHM_WINCC";
NOP 0;
END_FUNCTION_BLOCK

DATA_BLOCK "I03"
VERSION : 0.1
"0_03_XOP"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "0_04_COM"
TITLE =FB4 COM ETABLISSEMENT DE LA LIAISON DE COMMUNICATION AVEC N2
//**************************************************************************
//*                   TCPIP CONNECTION FOR SIPTOL                          *
//*     ETABLISSEMENT DE LA COMMUNICATION TCPIP POUR LES LIAISONS SIPTOL   *
//**************************************************************************
//
//WARNING :
//*********
//THIS FB USING NEED A HARDWARE IMPLEMENTATION AND PLC COMUNICATION CARD SETTINGS
//WITH HWCONFIG AND THE  FLOW CONTROL LEVEL 2 NETWORK IMPLEMENTATION IN NETPRO
//
//BF IMPLEMENTATION (FB1961):
//*****************************
//1 FB BY CP 343-1 LEAN CARD IN PLC
//NO LIMIT ON THE NUMBER OF FRAME EXCEPT TO THE CARD USING  THE FIRMWARE P2.1.5
//WHERE THE NUMBER OF CONECTION IS LIMITED TO 8 /CARD
//
//A) FB SETTINGS IN REGARDS TO THE HARDWARE :
//- CPADDRESS = VALUE OF ENTRY STARTS IN CP SETTING ADRESS TAB IN HWCONFIG
//- ID = ID IN THE TCP LINKS PROPERTIES IN GENERAL CP TAB IN NETPRO
//- MODDBNR = NUMBER OF SIP DB USED
//- MODBASEREG = OFFSET OF THE SIPTOL DATAS OF THE PROJECT ( TO BE CONFIRMED BY
//THE RENAULT PROJECT MANAGER)
//
//B) FB SETTINGS / PLC PROGRAM :
//-MODDBNR = NUMBER OF "SIP" DB ASSOCIATED TO CARTE CP 343-1 LEAN CARD IN PLC
//AVEC
//1ST ETH CP343 CARD   = 89 (SYMBOLIC NAME = SIP1)
//2ND ETH CP343 CARD   = 88 (SYMBOLIC NAME = SIP2)
//3RD ETH CP343 CARD   = 87 (SYMBOLIC NAME = SIP3)
//4TH ETH CP343 CARD   = 86 (SYMBOLIC NAME = SIP4)
//5TH ETH CP343 CARD   = 85 (SYMBOLIC NAME = SIP5)
//6TH ETH CP343 CARD   = 84 (SYMBOLIC NAME = SIP6)
//
//VARRIABLES TO ADD IN GLOBAL DB IG :
//***********************************
//IF CARD FAULT USED IN PLC PROGRAM :
//IG.DFCCOM1 = BOOL= ETH 1 CONNECTION CARD FAULT
//IG.DFCCOM2 = BOOL= ETH 2 CONNECTION CARD FAULT
//IG.DFCCOM3 = BOOL= ETH 3 CONNECTION CARD FAULT
//
//********************* FRENCH INFORMATION ****************************
//ATTENTION:
//**********
//L'UTILISATION DE CE FB NECESSISTE UNE MISE EN OEUVRE MATERIELLE ET UN
//PARAMETRAGE SUR LE COUPLEUR DE COMMUNICATION SOUS HWCONFIG. ET LA DECALARATION
//DU RESEAU DE NIVEAU 2 DE PILOTAGE SOUS NETPRO
//
//MISE EN OEUVRE DU BF (FB1961):
//*****************************
//1 FB PAR CARTE DE COMMUNICATION CP 343-1 LEAN SUR L'API
//PAS DE LIMITE SUR LE NOMBRE DE TRAME SAUF POUR LES COUPLEURS UTILISANT LE
//FIRMWARE P2.1.5 OU LE NOMBRE DE CONNEXION EST LIMITE A 8 /CARTE
//
//A)PARRAMETRAGE DU FB PAR RAPPORT A LA CONFIGURATION MATERIELLE :
//- CPADDRESS = VALEUR DE DEBUT D'ENTREE DANS ONGLET ADRESSE DES PROPRIETE DU CP
//              SOUS HWCONFIG
//- ID = ID DANS PROPRIETE LIAISON TCP ONGLET GENERAL DU CP SOUS NETPRO
//- MODDBNR = N° DE DB SIP
//- MODBASEREG = OFFSET DES INFORMATION COTE SIPTOL POUR LA LIGNE ( A CONFIRMER
//               PAR CHEF DE PROJET RENAULT)
//B) PARAMETRAGE DU FB / PROGRAMME API :
//-MODDBNR = N° DU DB SIP ASSOCIE A LA CARTE CP 343-1 LEAN SUR L'API
//AVEC
//1ER CARTE ETH CP343  = 89 (NOM SYMBOLIQUE = SIP1)
//2EME CARTE ETH CP343 = 88 (NOM SYMBOLIQUE = SIP2)
//3EME CARTE ETH CP343 = 87 (NOM SYMBOLIQUE = SIP3)
//4EME CARTE ETH CP343 = 86 (NOM SYMBOLIQUE = SIP4)
//5EME CARTE ETH CP343 = 85 (NOM SYMBOLIQUE = SIP5)
//6EME CARTE ETH CP343 = 84 (NOM SYMBOLIQUE = SIP6)
//
//INFORMATIONS A RAJOUTER DANS LE DB GLOBAL IG :
//*********************************************
//SI BESOIN DES INFORMATIONS DEFAUT CARTE AU NIVEAU DU PROGRAMME
//IG.DFCCOM1 = BOOL= DEFAUT DE CARTE DE COMMUNICATION ETH 1
//IG.DFCCOM2 = BOOL= DEFAUT DE CARTE DE COMMUNICATION ETH 2
//IG.DFCCOM3 = BOOL= DEFAUT DE CARTE DE COMMUNICATION ETH 3
//
VERSION : 0.1
VAR
  COMTCPS1_N2PILOT : BF_MODBUS_TCPIP_SLAVE;	//SIPTOL CONNECTION CARD 1 / LIAISON SIPTOL CARTE 1
  S1DFCCOM1 : BOOL;	//SIPTOL CONNECTION ETH CARD 1 FAULT / DEFAUT CARTE 1 ETH LIAISON SIPTOL
END_VAR
BEGIN
NETWORK
TITLE =SIPTOL CARD 1 CONNECTION
//ETABLISSEMENT LIAISON SIPTOL CARTE 1
//VERIFIER LE PARAMETRAGE DU BLOC EN FONCTION DE VOTRE CONFIGURATION MATERIELLE
//*ODIL_ID:2_400*
//
CALL #COMTCPS1_N2PILOT (
CPAddress := 3216,
ID := 2,
ModDBNR := 89,
ModBaseReg := 0);
NOP 0;
NETWORK
TITLE =SIPTOL MONITORING AND CARD 1 EXCHANGE OF DATA WITH BLOCK
//SUIVI SIPTOL ET ECHANGE D'INFORMATION CARTE 1 AVEC BLOC
//*ODIL_ID:2_401*
//
U #COMTCPS1_N2PILOT.Def;
= #S1DFCCOM1;
END_FUNCTION_BLOCK

DATA_BLOCK "I04"
VERSION : 0.1
"0_04_COM"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_00_ZONE1"
TITLE =ZONE 1
VERSION : 0.1
VAR
  Z1CRM : BF_IHMCRM1;	//Z1ZB:  DEF. RELE TERRA
  Z1RES : BF_IHMCR1;	//Z1ZB:  DEF. COMUM SEGURANCA ES (ES)
  Z1RFZ : BF_IHMCR1;	//Z1ZB:  DEF. COMUM SEGURANCA FZ (FZ)
  Z1AIR : BF_IHMAIR1;	//Z1ZB:  DEF. SEGURANCA AR
  Z1PORTE1 : BF_IHMPORTE1;	//Z1: DOOR 1 DIAGNOSIS
  Z1PORTE2 : BF_IHMPORTE1;	//Z1: DOOR 2 DIAGNOSIS
  Z1PORTE3 : BF_IHMPORTE1;	//Z1: DOOR 3 DIAGNOSIS
  Z1PORTE4 : BF_IHMPORTE1;	//Z1: DOOR 4 DIAGNOSIS
  Z1MODES : BF_ZONE_MODE_IHM1;	//Z1: ZONE FUNCTION
  S1TCA : DINT;	//Z1: PRODUCTION RATE TIME / TEMPS CADENCE ZONE
  S1PUP1DC : BOOL;	//Z1: COMMUNICATION FAULT DESK MOP / DEFAUT COMMUNICATION PUPITRE MOP
  S1PUP2DC : BOOL;	//Z1: COMMUNICATION FAULT DESK Z1SOP2 / DEFAUT COMMUNICATION PUPITRE Z1SOP2
  S1PUP3DC : BOOL;	//Z1: COMMUNICATION FAULT DESK Z1SOP3 / DEFAUT COMMUNICATION PUPITRE Z1SOP3
  S1PUP4DC : BOOL;	//Z1: COMMUNICATION FAULT DESK Z1SOP4 / DEFAUT COMMUNICATION PUPITRE Z1SOP4
  S1NENG : BOOL;	//Z1: SMP NOT ENGAGED / SUIVI SMP NON ENGAGE
  S1PMAZ : BOOL;	//Z1: AUTO MODE LOST / PERTE MARCHE AUTO
  S1PMCY : BOOL;	//Z1: CYCLE START LOST / PERTE MARCHE CYCLE ZONE
  S1MVD : BOOL;	//Z1: DRY RUN MODE / MODE DEVERMINAGE
  S1MDG : BOOL;	//Z1: DEGRADED MODE / MARCHE DEGRADEE
  S1RAZ : BOOL;	//Z1: RESET PRODUCTION PART COUNTER / RAZ COMPTEUR DE PRODUCTION ZONE
  S1BLZ : BOOL;	//Z1: HOLD ZONE / BLOCAGE ZONE
  S1DDO : BOOL;	//Z1: REQUEST FILLING OUT STOP LOG / DEMANDE DOCUMENTATION ZONE
  S1DPR : BOOL;	//Z1: REQUEST PREVENTIVE ZONE / DEMANDE PREVENTIF ZONE
  S1ITR : BOOL;	//Z1: REQUISITE TIME INFORMATION / INFORMATION TEMPS REQUIS
  S1Z1RB71DF24VR : BOOL;	//Z1RB71: DEF. ALIMENTACÃO REDE 24V
  S1Z1RB71DF24VZ : BOOL;	//Z1RB71: DEF. ALIMENTACÃO 24V ZONA
  S1Z1RB71DCSEC : BOOL;	//Z1RB71: DEF. CARTA DE SEGURANCA
  S1Z1RB72DF24VR : BOOL;	//Z1RB72: DEF. ALIMENTACÃO REDE 24V
  S1Z1RB72DF24VZ : BOOL;	//Z1RB72: DEF. ALIMENTACÃO 24V ZONA
  S1Z1RB72DCSEC : BOOL;	//Z1RB72: DEF. CARTA DE SEGURANCA
  S1Z1ZBDF24VR : BOOL;	//Z1ZB: DEF. ALIMENTACÃO REDE 24V
  S1Z1ZBDF24VZ : BOOL;	//Z1ZB: DEF. ALIMENTACÃO 24V ZONA
  S1Z1ZBDFSC : BOOL;	//Z1ZB: RETORNO CONTROLE DISJUNTOR 24V (SC)
  S1Z1ZBDCRM : BOOL;	//Z1ZB: DEF. RELE TERRA
  S1Z1ZBDAIR : BOOL;	//Z1ZB: DEF. SEGURANCA AR
  S1Z1ZBDCES : BOOL;	//Z1ZB: DEF. COMUM SEGURANCA ES (ES)
  S1Z1ZBDCFZ : BOOL;	//Z1ZB: DEF. COMUM SEGURANCA FZ (FZ)
  S1Z1ZBDCSEC : BOOL;	//Z1ZB: DEF. CARTA DE SEGURANCA
  S1P1DPI : BOOL;	//Z1: DOOR 1 MAINTENANCE PROCEDURE FAULT / DEFAUT PROCEDURE INTERVENTION
  S1Z1SPA1DCSEC : BOOL;	//Z1SPA1: DEF. CARTA DE SEGURANCA
  S1P2DPI : BOOL;	//Z1: DOOR 2 MAINTENANCE PROCEDURE FAULT / DEFAUT PROCEDURE INTERVENTION
  S1Z1SPA2DCSEC : BOOL;	//Z1SPA2: DEF. CARTA DE SEGURANCA
  S1P3DPI : BOOL;	//Z1: DOOR 3 MAINTENANCE PROCEDURE FAULT / DEFAUT PROCEDURE INTERVENTION
  S1Z1SPA3DCSEC : BOOL;	//Z1SPA3: DEF. CARTA DE SEGURANCA
  S1P4DPI : BOOL;	//Z1: DOOR 4 MAINTENANCE PROCEDURE FAULT / DEFAUT PROCEDURE INTERVENTION
  S1Z1SPA4DCSEC : BOOL;	//Z1SPA4: DEF. CARTA DE SEGURANCA
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:76_0*
//

NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:246_12*
//
U(;
ON "Z1CCB24R";
O;
U #S1Z1ZBDF24VR;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1ZBDF24VR;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:248_12*
//
U(;
ON "Z1CCB24Z";
O;
U #S1Z1ZBDF24VZ;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1ZBDF24VZ;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:250_12*
//
U(;
ON "Z1CCB24SC";
O;
U #S1Z1ZBDFSC;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1ZBDFSC;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:31922_12*
//
U(;
ON "Z1RB71CCB24R";
O;
U #S1Z1RB71DF24VR;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1RB71DF24VR;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:31924_12*
//
U(;
ON "Z1RB71CCB24Z";
O;
U #S1Z1RB71DF24VZ;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1RB71DF24VZ;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:32003_12*
//
U(;
ON "Z1RB72CCB24R";
O;
U #S1Z1RB72DF24VR;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1RB72DF24VR;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:32005_12*
//
U(;
ON "Z1RB72CCB24Z";
O;
U #S1Z1RB72DF24VZ;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1RB72DF24VZ;
NETWORK
TITLE =PANEL Z1ZB SAFETY CARD FAULT
//Z1ZB: DEF. CARTA DE SEGURANCA
//*ODIL_ID:291_13*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1ZBDCSEC;
NETWORK
TITLE =PANEL Z1RB71 SAFETY CARD FAULT
//Z1RB71: DEF. CARTA DE SEGURANCA
//*ODIL_ID:31964_13*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1RB71DCSEC;
NETWORK
TITLE =PANEL Z1RB72 SAFETY CARD FAULT
//Z1RB72: DEF. CARTA DE SEGURANCA
//*ODIL_ID:32045_13*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1RB72DCSEC;
NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:76_11*
//

NETWORK
TITLE =GROUND RELAY CHECK DIAGNOSIS
//DIAGNOSTIC CONTROLE RELAIS MASSE
//*ODIL_ID:252_12*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U "PERSO";
SPBNB _501;
CALL #Z1CRM (
Def_Maj := L 0.0,
Def := #S1Z1ZBDCRM);
_501: NOP 0;
NETWORK
TITLE =SAFETY LOOP HMI / DIAGNOSTIQUE BOUCLE DE SECURITE
//Z1ZB:  DEF. COMUM SEGURANCA ES (ES)
//*ODIL_ID:262_13*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U "Z1CCES";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _502;
CALL #Z1RES(
Typ := 2,
Def_Maj := L 0.0,
CSecu := L 0.1,
Def := #S1Z1ZBDCES);
_502: NOP 0;
NETWORK
TITLE =SAFETY LOOP HMI / DIAGNOSTIQUE BOUCLE DE SECURITE
//Z1ZB:  DEF. COMUM SEGURANCA FZ (FZ)
//*ODIL_ID:264_13*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U "Z1CCFZ";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _503;
CALL #Z1RFZ(
Typ := 2,
Def_Maj := L 0.0,
CSecu := L 0.1,
Def := #S1Z1ZBDCFZ);
_503: NOP 0;
NETWORK
TITLE =AIR DIAGNOSIS
//DIAGNOSTIC EV AIR
//*ODIL_ID:254_16*
//
U "PERSO";
SPBNB _504;
CALL #Z1AIR (
Def := #S1Z1ZBDAIR);
_504: NOP 0;
NETWORK
TITLE =DOOR 1 DIAGNOSIS
//DIAGNOSTIC PORTE 1
//*ODIL_ID:584_141*
//
U "PERSO";
SPBNB _505;
CALL #Z1PORTE1 (
Def := #S1P1DPI);
_505: NOP 0;
NETWORK
TITLE =PANEL Z1SPA1 SAFETY CARD FAULT
//Z1SPA1: DEF. CARTA DE SEGURANCA
//*ODIL_ID:773_13*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1SPA1DCSEC;
NETWORK
TITLE =DOOR 2 DIAGNOSIS
//DIAGNOSTIC PORTE 2
//*ODIL_ID:783_142*
//
U "PERSO";
SPBNB _506;
CALL #Z1PORTE2 (
Def := #S1P2DPI);
_506: NOP 0;
NETWORK
TITLE =PANEL Z1SPA2 SAFETY CARD FAULT
//Z1SPA2: DEF. CARTA DE SEGURANCA
//*ODIL_ID:972_13*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1SPA2DCSEC;
NETWORK
TITLE =DOOR 3 DIAGNOSIS
//DIAGNOSTIC PORTE 3
//*ODIL_ID:982_143*
//
U "PERSO";
SPBNB _507;
CALL #Z1PORTE3 (
Def := #S1P3DPI);
_507: NOP 0;
NETWORK
TITLE =PANEL Z1SPA3 SAFETY CARD FAULT
//Z1SPA3: DEF. CARTA DE SEGURANCA
//*ODIL_ID:1171_13*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1SPA3DCSEC;
NETWORK
TITLE =DOOR 4 DIAGNOSIS
//DIAGNOSTIC PORTE 4
//*ODIL_ID:1181_144*
//
U "PERSO";
SPBNB _508;
CALL #Z1PORTE4 (
Def := #S1P4DPI);
_508: NOP 0;
NETWORK
TITLE =PANEL Z1SPA4 SAFETY CARD FAULT
//Z1SPA4: DEF. CARTA DE SEGURANCA
//*ODIL_ID:1370_13*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1SPA4DCSEC;
NETWORK
TITLE =
//*******************************************************************************
//**                                  MONITORING                               **
//*******************************************************************************
//*ODIL_ID:76_7*
//

NETWORK
TITLE =RESET RESET PRODUCTION COUNTER FROM MONITORING
//RETOMBEE RAZ COMPTEUR PRODUCTION ZONE
//*ODIL_ID:76_71*
//
U "Z1G".RAZ;
R #S1RAZ;
NETWORK
TITLE =RESET PRODUCTION COUNTER FROM MONITORING
//RAZ COMPTEUR PRODUCTION ZONE
//*ODIL_ID:76_70*
//
U #S1RAZ;
= "Z1G".RAZ;
NETWORK
TITLE =MONITORING ZONE 1: REQUEST FILLING OUT ZONE STOP LOGS
//DEMANDE DOCUMENTATION ZONE 1
//*ODIL_ID:76_8*
//
U #S1DDO;
= "Z1G".DDO;
NETWORK
TITLE =MONITORING ZONE 1: REQUEST ZONE PREVENTIVE
//DEMANDE PREVENTIF ZONE
//*ODIL_ID:76_9*
//
U #S1DPR;
= "Z1G".DPR;
NETWORK
TITLE =ZONE 1: MAJOR FAULT
//DEFAUT MAJEUR
//*ODIL_ID:76_10*
//
O "PERSO";
O #S1Z1ZBDF24VR;
O #S1Z1ZBDF24VZ;
O #S1Z1ZBDFSC;
O #S1Z1RB71DF24VR;
O #S1Z1RB71DF24VZ;
O #S1Z1RB72DF24VR;
O #S1Z1RB72DF24VZ;
O "IG".DEF_MAJ;
= "Z1DEF_MAJ";
NETWORK
TITLE =
//*******************************************************************************
//**                      RUNNING MODE AND ZONE OPERATION                      **
//*******************************************************************************
//*ODIL_ID:76_18*
//

NETWORK
TITLE =PART ABSENCE INFORMATION FOR DRY RUN
//INFORMATION ABSENCE PIECE POUR DEVERMINAGE
//CONTROLE DE L'ABSCENCE DE TOUS LES DETECTEURS PIECES DES MONTAGES.
//-POUR LES ROBOTS DE MANUT, ON CONTROLE L'INFO PIECE ABSENTE SHUNTE PAR LA Z*MDV)
//-POUR LES PERIMETRES FLEXIBLES, ON CONTROLE L'ABSCENCE DE PALETTE PAR LES
//DETECTEURS D'ARRET ROTATION, D'ARRET GV ET DE POSITION.
//ALL STAGE OF ZONE MUST APPEAR IN THIS RUNG.YOU HAVE ONE INFORMATION "IAP" BY
// STAGE.
//*ODIL_ID:76_19*
//
U "Z1G".A0.IAP;
U "Z1G".A01.IAP;
U "Z1G".A02.IAP;
U "Z1G".B01.IAP;
U "Z1G".B02.IAP;
U "Z1G".C01.IAP;
U "Z1G".C02.IAP;
U "Z1G".D01.IAP;
U "Z1G".E0.IAP;
U "Z1G".F01.IAP;
U "Z1G".F9.IAP;
U "Z1G".G0.IAP;
U "Z1G".H01.IAP;
U "Z1G".T0C.IAP;
U "Z1G".T0D.IAP;
U "Z1G".U01.IAP;
U "Z1G".U02.IAP;
U "Z1G".U9.IAP;
= #Z1MODES.Z_iap;
NETWORK
TITLE =ABSENT PART INFORMATION
//INFORMATION PIECE ABSENTE
//ALL STAGE OF ZONE MUST APPEAR IN THIS RUNG.YOU HAVE ONE INFORMATION "IPA" BY
//STAGE.
//*ODIL_ID:76_20*
//
U "Z1G".A0.IPA;
U "Z1G".A01.IPA;
U "Z1G".A02.IPA;
U "Z1G".B01.IPA;
U "Z1G".B02.IPA;
U "Z1G".C01.IPA;
U "Z1G".C02.IPA;
U "Z1G".D01.IPA;
U "Z1G".E0.IPA;
U "Z1G".F01.IPA;
U "Z1G".F9.IPA;
U "Z1G".G0.IPA;
U "Z1G".H01.IPA;
U "Z1G".T0C.IPA;
U "Z1G".T0D.IPA;
U "Z1G".U01.IPA;
U "Z1G".U02.IPA;
U "Z1G".U9.IPA;
= #Z1MODES.Z_ipa;
NETWORK
TITLE =ZONE ALL ROBOTS AUTOMATIC MODE SELECT
//INFORMATION ZONE TOUS LES ROBOTS EN AUTOMATIQUE
//*ODIL_ID:76_200*
//
U "B0AUTO";
U "C1AUTO";
U "C3AUTO";
U "D0AUTO";
U "E1AUTO";
U "E2AUTO";
U "F0AUTO";
U "G1AUTO";
U "G2AUTO";
U "G3AUTO";
U "G4AUTO";
U "H0AUTO";
U "U0AUTO";
= #Z1MODES.Z_marb;
NETWORK
TITLE =ZONE ALL ROBOT IN FALLBACK POSITION
//INFORMATION TOUS LES ROBOTS DE LA ZONE AU REPLI
//*ODIL_ID:76_201*
//
U "B0REPLI";
U "C1REPLI";
U "C3REPLI";
U "D0REPLI";
U "E1REPLI";
U "E2REPLI";
U "F0REPLI";
U "G1REPLI";
U "G2REPLI";
U "G3REPLI";
U "G4REPLI";
U "H0REPLI";
U "U0REPLI";
= #Z1MODES.Z_repli;
NETWORK
TITLE =INIT AUTOMATIC MODE ON SOP AND ZONE NORMAL MODE
//INITIALISATION DU MODE AUTO POUR LES SOP ET FORCAGE MODE NORMAL SI AUCUN MODE
//SELECTIONNE
//*ODIL_ID:76_38*
//
U "BA1LIEN";
= L 3.0;
U L 3.0;
U(;
L "Z1".z1modes.Pilot.Ihm2selmdm;
L 0;
==I;
);
SPBNB _509;
L 2;
T "Z1".z1modes.Pilot.Ihm2selmdm;
_509: NOP 0;
U L 3.0;
U(;
L "Z1".z1modes.Pilot.Ihm3selmdm;
L 0;
==I;
);
SPBNB _510;
L 2;
T "Z1".z1modes.Pilot.Ihm3selmdm;
_510: NOP 0;
U L 3.0;
U(;
L "Z1".Z1MODES.Pilot.Ihm4selmdm;
L 0;
==I;
);
SPBNB _511;
L 2;
T "Z1".Z1MODES.Pilot.Ihm4selmdm;
_511: NOP 0;
U L 3.0;
U(;
L "Z1".Z1MODES.Pilot.IhmSelMDF;
L 0;
==I;
);
SPBNB _512;
L 1;
T "Z1".Z1MODES.Pilot.IhmSelMDF;
_512: NOP 0;
NETWORK
TITLE =PANEL CONTROL, RUNNING MODE AND ZONE OPERATION
//GESTION PUPITRE, MODE DE MARCHE ET OPERATION ZONE
//*ODIL_ID:76_21*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U #S1BLZ;
= L 0.6;
BLD 103;
O "BMCY";
O "Z1BMCY";
O "Z1SPA1BMCY";
O "Z1SPA2BMCY";
O "Z1SPA3BMCY";
O "Z1SPA4BMCY";
= L 1.3;
BLD 103;
O "Z1SPA1BDACY";
O "Z1SPA2BDACY";
O "Z1SPA3BDACY";
O "Z1SPA4BDACY";
= L 1.4;
BLD 103;
U "SMA";
= L 1.5;
BLD 103;
U "SMM";
= L 1.6;
BLD 103;
U "IADF";
= L 1.7;
BLD 103;
U "PERSO";
SPBNB _513;
CALL #Z1MODES (
Def_maj := L 0.0,
lien_ilo := "IG".LIEN_ILOT,
S_blz := L 0.6,
Z_bmcy := L 1.3,
Z_bacy := L 1.4,
Nbrpup := 4,
Sma := L 1.5,
Smm := L 1.6,
Z_badf := L 1.7,
prog_selmdf := "Z1G".PROG_SELMDF,
Z_ir := "Z1IR",
Z_iadf := "Z1IADF",
Z_mauto := "Z1MAUTO",
Dcihm1 := #S1PUP1DC,
Dcihm2 := #S1PUP2DC,
Dcihm3 := #S1PUP3DC,
Dcihm4 := #S1PUP4DC,
S_neng := #S1NENG,
S_pmaz := #S1PMAZ,
S_pmcyn := #S1PMCY,
S_mvd := #S1MVD,
S_mdg := #S1MDG,
Ihm1pm := "Z1G".IHM1PM,
Ihm2pm := "Z1G".IHM2PM,
Ihm3pm := "Z1G".IHM3PM,
Ihm4pm := "Z1G".IHM4PM,
Ihmzdef := "Z1G".IHMDEF,
Num_page := "Z1G".NUM_PAGE,
Num_mvt := "Z1G".NUM_MVT,
Lien_pup := "Z1G".LIEN_PUP);
_513: NOP 0;
NETWORK
TITLE =ZONE 1: CYCLE START LAMP
//VOYANT DEPART CYCLE
//*ODIL_ID:76_23*
//
U #Z1MODES.Z_vmcy;
= "VMCY";
= "Z1VMCY";
= "Z1SPA1VMCY";
= "Z1SPA2VMCY";
= "Z1SPA3VMCY";
= "Z1SPA4VMCY";
NETWORK
TITLE =ZONE 1: CYCLE STOP LAMP
//VOYANT ARRET CYCLE SUR PORTE
//*ODIL_ID:76_24*
//
U #Z1MODES.Z_vacy;
= "Z1SPA1VDACY";
= "Z1SPA2VDACY";
= "Z1SPA3VDACY";
= "Z1SPA4VDACY";
NETWORK
TITLE =ZONE 1: COMMUNICATION FAULT PANEL 1
//DEFAUT COMMUNICATION PUPITRE 1
//*ODIL_ID:369_25*
//
U #S1PUP1DC;
= "Z1G".PUP1DC;
NETWORK
TITLE =ZONE 1: COMMUNICATION FAULT PANEL 2
//DEFAUT COMMUNICATION PUPITRE 2
//*ODIL_ID:29820_25*
//
U #S1PUP2DC;
= "Z1G".PUP2DC;
NETWORK
TITLE =ZONE 1: COMMUNICATION FAULT PANEL 3
//DEFAUT COMMUNICATION PUPITRE 3
//*ODIL_ID:29936_25*
//
U #S1PUP3DC;
= "Z1G".PUP3DC;
NETWORK
TITLE =ZONE 1: COMMUNICATION FAULT PANEL 4
//DEFAUT COMMUNICATION PUPITRE 4
//*ODIL_ID:30052_25*
//
U #S1PUP4DC;
= "Z1G".PUP4DC;
NETWORK
TITLE =ZONE 1: AUTO MODE LOST
//PERTE MARCHE AUTO
//*ODIL_ID:76_26*
//
U #S1PMAZ;
= "Z1G".PMAZ;
NETWORK
TITLE =ZONE 1: CYCLE START LOST
//PERTE MARCHE CYCLE
//*ODIL_ID:76_27*
//
U #S1PMCY;
= "Z1G".PMCY;
NETWORK
TITLE =ALL ROBOT CYCLE START MODE
//MARCHE CYCLE DE TOUT LES ROBOTS
//*ODIL_ID:76_270*
//
U(;
O "Z1G".LIEN_PUP.Z_mnorm;
O "Z1G".LIEN_PUP.Z_mvid;
);
UN "Z1G".LIEN_PUP.Z_macy;
UN "Z1G".LIEN_PUP.Z_ida;
= "Z1G".MCYRB;
NETWORK
TITLE =PRODUCTION END OF DAY INFORMATION (SAFETY)
//INFORMATION ARRET FIN DE JOURNEE POUR COUPURE MISE EN SERVICE ZONE DANS LE
//PROGRAMME SAFETY
//*ODIL_ID:76_271*
//
U "IG".LIEN_ILOT.MAFJ;
U #Z1MODES.Irrb;
= "Z1IAFJ";
NETWORK
TITLE =ZONE 1: RATE TIME ZONE
//TEMPS CADENCE ZONE
//*ODIL_ID:76_28*
//
L #S1TCA;
T "Z1G".TCA;
NOP 0;
NETWORK
TITLE =ZONE 1: REQUISITE TIME INFORMATION
//INFORMATION TEMPS REQUIS
//*ODIL_ID:76_29*
//
U #S1ITR;
= "Z1G".ITR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1"
VERSION : 0.1
"1_00_ZONE1"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_A0_MONTAGE"
TITLE =MONTAGE
VERSION : 0.1
VAR
  S1A0DIV : INT;	//A0 - DIVERSITY / DIVERSITE
  A0RETVAL : INT;	//A0 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  A0TDFPC : TON;	//A0 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1A0DPIEC : BOOL;	//A0 - PART FAULT / DEFAUT PIECE
  NUM_MVT : INT;	//A0 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:64523_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:64523_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:64523_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:64523_217*
//
UN "IIT".A0.MS.MSP;
SPBNB _501;
L 0;
T #S1A0DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:64523_218*
//
U "IIT".A0.MS.MSP;
SPBNB _502;
L 1;
T #S1A0DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:64523_18*
//

NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:64523_55*
//

NETWORK
TITLE =CREATE MEMORY PART PRESENT OK
//CREATION MEMOIRE PRESENCE PIECE BONNE
//(RECOPIE BLOC ACQUISITION SIPTOL DANS LA TABLE LOCALE)
//*ODIL_ID:64523_340*
//
U "IIT".A0.MP.MPP;
U(;
O "Z1G".A0L.ECHG_A0.IFC;
O "Z1G".MDV;
);
S "IIT".A0.MP.MPLNOR;
R "IIT".A0.MP.MPLNOK;
NETWORK
TITLE =CREATE MEMORY PART PRESENT NOT OK
//CREATION MEMOIRE PRESENCE PIECE MAUVAISE
//*ODIL_ID:64523_524*
//
U "IIT".A0.MP.MPP;
U "Z1G".A0L.ECHG_A0.PFM;
S "IIT".A0.MP.MPLNOK;
R "IIT".A0.MP.MPLNOR;
NETWORK
TITLE =CREATE SUPPORT PRESENCE MEMORY
//CREATION MEMOIRE SUPPORT PRESENT
//*ODIL_ID:64523_282*
//
U(;
O "Z1G".A0L.ECHG_A0.IPOF;
O "Z1G".A0L.ECHG_A0.MAP;
);
U(;
ON "Z1G".A0.IAP;
O "Z1G".A0L.ECHG_A0.FABSP;
);
S "IIT".A0.MS.MSP;
NETWORK
TITLE =PART PRESENCE MEMORY
//MEMOIRE PIECE PRESENTE
//*ODIL_ID:64523_58*
//
U "PERSO";
UN "Z1G".A0.IAP;
= "IIT".A0.MP.MPP;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:64523_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:64523_82*
//
U "PERSO";
= "Z1G".A0.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:64523_83*
//
U "PERSO";
= "Z1G".A0.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:64523_84*
//
U "Z1G".A0.IAP;
UN "IIT".A0.MS.MSP;
UN "IIT".A0.MP.MPP;
= "Z1G".A0.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:64523_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".A0.IPP;
UN "Z1G".A0.IPA;
= L 4.0;
BLD 103;
CALL #A0TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:64523_86*
//
U #A0TDFPC.Q;
S #S1A0DPIEC;
U(;
O "Z1G".A0.IPP;
O "Z1G".A0.IPA;
);
R #S1A0DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                      LAUNCHING POINT EXCHANGES 03.11
//**
//*******************************************************************************
//*ODIL_ID:64523_260*
//

NETWORK
TITLE =AUTORISATION DE COMPARAISON
//AUTORISATION DE COMPARAISON
//*ODIL_ID:64523_261*
//
UN "Z1G".MDV;
U "PERSO";
U "IIT".A0.MP.MPP;
UN "IIT".A0.MP.MPLNOR;
UN "Z1G".A0L.ECHG_A0.IFC;
= "Z1G".A0.ECHG_A0L.AC;
NETWORK
TITLE =AUTORISATION DE REPONSE
//AUTORISATION DE REPONSE
//*ODIL_ID:64523_262*
//
UN "Z1G".MDV;
U "PERSO";
UN "IIT".A0.MP.MPP;
= "Z1G".A0.ECHG_A0L.AR;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:64523_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:64523_177*
//
U "IIT".A0_TT.MFT.MFT1;
U "IIT".A0_TT.MFT.MFT2;
U "PERSO";
S "IIT".A0.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:64523_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1A0"
VERSION : 0.1
"1_A0_MONTAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_A1_OP_BPVAL"
TITLE =OPERATOR
VERSION : 0.1
VAR
  A1CSOP : BF_IHMCR1;	//A1OPB:  DEF. COMUM SEGURANCA SOP (SOP)
  S1A1OPBDF24VR : BOOL;	//A1OPB: DEF. ALIMENTACÃO REDE 24V
  S1A1OPBDF24VZ : BOOL;	//A1OPB: DEF. ALIMENTACÃO 24V ZONA
  S1A1OPBDCSOP : BOOL;	//A1OPB: DEF. COMUM SEGURANCA SOP (SOP)
  S1A1OPBDCSEC : BOOL;	//A1OPB: DEF. CARTA DE SEGURANCA
  A1TATOP : TON;	//A1_OP: OPERATOR WAITING TIMER / TEMPO ATTENTE OPERATEUR
  A1FTOPDV : TON;	//A1_OP: END OF WORK TEMPORISED FOR DRY RUN MODE / TEMPS ATTENTE DEVERMINAGE
  A1TDRBV : TON;	//A1_OP: DESACTIVATION VALIDATION PUSH BUTTON TIMER / TEMPO RELACHE BP VALIDAT
  A1TATOP_PT : TIME;	//A1_OP: OPERATOR WORK THRESHOLD WAITING TIME / SEUIL TEMPS ATTENTE OPERATEUR
  TAO : INT;	//A1_OP: OPERATOR WORK THRESHOLD WAITING TIME / SEUIL TEMPS ATTENTE OPERATEUR
  S1A1AIO : BOOL;	//A1_OP: OPERATOR INDUCED STOPPAGE / ARRET INDUIT OPERATEUR
  S1A1DBVOP : BOOL;	//A1_OP: FAULT DESACTIVATION VALIDATION PUSH BUTTON / DEF RETOMBEE BP VALIDATI
  A1MTOP : BOOL;	//A1_OP: MEMORY THROUGH OPERATOR / MEMOIRE TRAVERSEE OPERATEUR
  A1MRBV : BOOL;	//A1_OP: VALIDATION BUTTON RELEASE MEMORY / MEMOIRE RETOMBE BOUTON OPERATEUR
  A1MBVOP : BOOL;	//A1_OP: OPERATOR VALIDATION BUTTON MEMORY / MEMOIRE VALIDATION OPERATEUR
  A1SECU : BOOL;	//A1 - OPERATOR ASSOCIATE LASER SCAN / SCRUTATEUR LASER ASSOCIE A L OPERATEUR
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:4169_309*
//

NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:4230_310*
//
U(;
ON "A1CCB24R";
O;
U #S1A1OPBDF24VR;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1A1OPBDF24VR;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:4232_310*
//
U(;
ON "A1CCB24Z";
O;
U #S1A1OPBDF24VZ;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1A1OPBDF24VZ;
NETWORK
TITLE =PANEL A1OPB SAFETY CARD FAULT
//A1OPB: DEF. CARTA DE SEGURANCA
//*ODIL_ID:4261_311*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1A1OPBDCSEC;
NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:4169_312*
//

NETWORK
TITLE =SAFETY LOOP HMI / DIAGNOSTIQUE BOUCLE DE SECURITE
//A1OPB:  DEF. COMUM SEGURANCA SOP (SOP)
//*ODIL_ID:4234_314*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U "A1CCSOP";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _501;
CALL #A1CSOP(
Typ := 1,
Def_Maj := L 0.0,
CSecu := L 0.1,
Def := #S1A1OPBDCSOP);
_501: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                               SAFETY CONDITIONS                           **
//*******************************************************************************
//*ODIL_ID:4169_1027*
//

NETWORK
TITLE =OPERATOR ASSOCIATE LASER SCANNER
//SCRUTATEUR LASER ASSOCIE A L OPERATEUR
//*ODIL_ID:4169_1028*
//
U "PERSO";
= #A1SECU;
NETWORK
TITLE =
//*******************************************************************************
//**                           MONITORING / SUIVI                              **
//*******************************************************************************
//*ODIL_ID:4169_1029*
//

NETWORK
TITLE =LOADING OPERATOR THRESHOLD WAITING TIME VALUE
//VALEUR SEUIL TEMPS D ATTENTE OPERATEUR : CONVERSION DE FORMAT "INT" VERS FORMAT
//"TIME"
//*ODIL_ID:4169_1030*
//
L #TAO;
L 100;
*I;
T #A1TATOP_PT;
NOP 0;
NETWORK
TITLE =OPERATOR WAITING TIME CONTROL
//CONTROLE TEMPS D ATTENTE OPERATEUR
//*ODIL_ID:4169_1031*
//
U "A01_AT_A1";
U "Z1G".ITR;
= L 3.0;
BLD 103;
CALL #A1TATOP (
IN := L 3.0,
PT := #A1TATOP_PT);
NOP 0;
NETWORK
TITLE =OPERATOR INDUCED STOPPAGE
//ARRET INDUIT OPERATEUR
//*ODIL_ID:4169_1032*
//
UN "A01_AT_A1";
UN "A1CRSA01";
O #A1TATOP.Q;
= #S1A1AIO;
NETWORK
TITLE =FAULT DESACTIVATION VALIDATION PUSH BUTTON TIMER
//TEMPORISATION RETOMBE BOUTON DE VALIDATION
//*ODIL_ID:4169_1047*
//
U "Z1G".LIEN_PUP.Z_mauto;
U "A1VAL1";
UN #A1MRBV;
U "A01_AT_A1";
= L 0.0;
BLD 103;
CALL #A1TDRBV (
IN := L 0.0,
PT := T#30S);
NOP 0;
NETWORK
TITLE =FAULT DESACTIVATION VALIDATION PUSH BUTTON
//DEFAUT RETOMBEE BOUTON DE VALIDATION OPERATEUR
//*ODIL_ID:4169_1033*
//
U #A1TDRBV.Q;
S #S1A1DBVOP;
UN "A1VAL1";
R #S1A1DBVOP;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                            DRY RUN / DEVERMINAGE                          **
//*******************************************************************************
//*ODIL_ID:4169_1034*
//

NETWORK
TITLE =OPERATEUR END OF WORK TEMPORISED
//FIN DE TRAVAIL OPERATEUR TEMPORISE POUR LE MODE DEVERMINAGE
//*ODIL_ID:4169_1035*
//
U(;
O "Z1G".MDV;
O "Z1G".A01.MDV;
);
U "A01_AT_A1";
= L 3.0;
BLD 103;
CALL #A1FTOPDV (
IN := L 3.0,
PT := T#10S);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                            OPERATOR MEMORIES                              **
//*******************************************************************************
//*ODIL_ID:4169_1036*
//

NETWORK
TITLE =MEMORY THROUGH OPERATOR
//MEMOIRE TRAVERSEE OPERATEUR
//*ODIL_ID:4169_1037*
//
UN #A1SECU;
U "A01_AT_A1";
S #A1MTOP;
U "A01_ET_A1";
R #A1MTOP;
NOP 0;
NETWORK
TITLE =MEMORY RELEASE OF VALIDATION BUTTON
//MEMOIRE RETOMBEE DU BOUTON DE VALIDATION
//*ODIL_ID:4169_1038*
//
U "A01_AT_A1";
UN "A1VAL1";
S #A1MRBV;
U "A01_ET_A1";
R #A1MRBV;
NOP 0;
NETWORK
TITLE =OPERATOR VALIDATION PUSH BUTTON MEMORY
//MEMOIRE BOUTON DE VALIDATION OPERATEUR
//*ODIL_ID:4169_1039*
//
U(;
O "A1VAL1";
O #A1MBVOP;
);
U #A1MTOP;
U #A1SECU;
= #A1MBVOP;
NETWORK
TITLE =
//*******************************************************************************
//**                       OPERATOR EXCHANGES WITH STAGE                       **
//*******************************************************************************
//*ODIL_ID:4169_1040*
//

NETWORK
TITLE =END OF WORK OPERATOR
//FIN DE TRAVAIL OPERATEUR
//*ODIL_ID:4169_1041*
//
U(;
UN "Z1G".MDV;
UN "Z1G".A01.MDV;
U #A1MBVOP;
U #A1MTOP;
U #A1MRBV;
O;
U #A1FTOPDV.Q;
U "A01_AT_A1";
);
UN "A01_ET_A1";
= "Z1G".A1.ECHG_A01.FT1;
NETWORK
TITLE =OPERATOR BACKWARD SAFETY (EXCHANGES WITH STAGE)
//SECURITE ARRIERE OPERATEUR
//*ODIL_ID:4169_1042*
//
U #A1SECU;
U "A1CRSA01";
UN #A1MTOP;
UN #A1MRBV;
= "Z1G".A1.ECHG_A01.SA;
NETWORK
TITLE =CONDITION SAFETY RESET (MEMENTO FOR SAFETY PROGRAM USE)
//CONDITION DE REARMEMENT SECURITE
//*ODIL_ID:4169_1043*
//
U #A1SECU;
U(;
O #A1MBVOP;
O;
UN "A01_AT_A1";
U(;
O "A1VAL1";
O "A1CRSA01";
);
);
= "A1CRSA01";
NETWORK
TITLE =
//*******************************************************************************
//**                          TOWER LAMP MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:4169_1044*
//

NETWORK
TITLE =OPERATOR TOWER LAMP: WORK PROHIBITION (RED)
//VERRINE INTERDICTION DE TRAVAIL OPERATEUR
//*ODIL_ID:4169_1045*
//
U "Z1G".A1.ECHG_A01.SA;
UN "A01_AT_A1";
O "IG".LIEN_ILOT.ITLG;
= "A1VIT";
NETWORK
TITLE =OPERATOR TOWER LAMP: WORK AUTHORIZATION (GREEN)
//VERRINE AUTORISATION DE TRAVAIL OPERATEUR
//*ODIL_ID:4169_1046*
//
UN "Z1G".A1.ECHG_A01.SA;
U "A01_AT_A1";
O;
UN "Z1G".A1.ECHG_A01.SA;
U "IG".LIEN_ILOT.ICL;
O "IG".LIEN_ILOT.ITLG;
= "A1VAT";
END_FUNCTION_BLOCK

DATA_BLOCK "Z1A1"
VERSION : 0.1
"1_A1_OP_BPVAL"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_A2_OP_BPVAL"
TITLE =OPERATOR
VERSION : 0.1
VAR
  A2CSOP : BF_IHMCR1;	//A2OPB:  DEF. COMUM SEGURANCA SOP (SOP)
  S1A2OPBDF24VR : BOOL;	//A2OPB: DEF. ALIMENTACÃO REDE 24V
  S1A2OPBDF24VZ : BOOL;	//A2OPB: DEF. ALIMENTACÃO 24V ZONA
  S1A2OPBDCSOP : BOOL;	//A2OPB: DEF. COMUM SEGURANCA SOP (SOP)
  S1A2OPBDCSEC : BOOL;	//A2OPB: DEF. CARTA DE SEGURANCA
  A2TATOP : TON;	//A2_OP: OPERATOR WAITING TIMER / TEMPO ATTENTE OPERATEUR
  A2FTOPDV : TON;	//A2_OP: END OF WORK TEMPORISED FOR DRY RUN MODE / TEMPS ATTENTE DEVERMINAGE
  A2TDRBV : TON;	//A2_OP: DESACTIVATION VALIDATION PUSH BUTTON TIMER / TEMPO RELACHE BP VALIDAT
  A2TATOP_PT : TIME;	//A2_OP: OPERATOR WORK THRESHOLD WAITING TIME / SEUIL TEMPS ATTENTE OPERATEUR
  TAO : INT;	//A2_OP: OPERATOR WORK THRESHOLD WAITING TIME / SEUIL TEMPS ATTENTE OPERATEUR
  S1A2AIO : BOOL;	//A2_OP: OPERATOR INDUCED STOPPAGE / ARRET INDUIT OPERATEUR
  S1A2DBVOP : BOOL;	//A2_OP: FAULT DESACTIVATION VALIDATION PUSH BUTTON / DEF RETOMBEE BP VALIDATI
  A2MTOP : BOOL;	//A2_OP: MEMORY THROUGH OPERATOR / MEMOIRE TRAVERSEE OPERATEUR
  A2MRBV : BOOL;	//A2_OP: VALIDATION BUTTON RELEASE MEMORY / MEMOIRE RETOMBE BOUTON OPERATEUR
  A2MBVOP : BOOL;	//A2_OP: OPERATOR VALIDATION BUTTON MEMORY / MEMOIRE VALIDATION OPERATEUR
  A2SECU : BOOL;	//A2 - OPERATOR ASSOCIATE LASER SCAN / SCRUTATEUR LASER ASSOCIE A L OPERATEUR
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:4523_309*
//

NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:4584_310*
//
U(;
ON "A2CCB24R";
O;
U #S1A2OPBDF24VR;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1A2OPBDF24VR;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:4586_310*
//
U(;
ON "A2CCB24Z";
O;
U #S1A2OPBDF24VZ;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1A2OPBDF24VZ;
NETWORK
TITLE =PANEL A2OPB SAFETY CARD FAULT
//A2OPB: DEF. CARTA DE SEGURANCA
//*ODIL_ID:4615_311*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1A2OPBDCSEC;
NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:4523_312*
//

NETWORK
TITLE =SAFETY LOOP HMI / DIAGNOSTIQUE BOUCLE DE SECURITE
//A2OPB:  DEF. COMUM SEGURANCA SOP (SOP)
//*ODIL_ID:4588_314*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U "A2CCSOP";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _501;
CALL #A2CSOP(
Typ := 1,
Def_Maj := L 0.0,
CSecu := L 0.1,
Def := #S1A2OPBDCSOP);
_501: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                               SAFETY CONDITIONS                           **
//*******************************************************************************
//*ODIL_ID:4523_1027*
//

NETWORK
TITLE =OPERATOR ASSOCIATE LASER SCANNER
//SCRUTATEUR LASER ASSOCIE A L OPERATEUR
//*ODIL_ID:4523_1028*
//
U "PERSO";
= #A2SECU;
NETWORK
TITLE =
//*******************************************************************************
//**                           MONITORING / SUIVI                              **
//*******************************************************************************
//*ODIL_ID:4523_1029*
//

NETWORK
TITLE =LOADING OPERATOR THRESHOLD WAITING TIME VALUE
//VALEUR SEUIL TEMPS D ATTENTE OPERATEUR : CONVERSION DE FORMAT "INT" VERS FORMAT
//"TIME"
//*ODIL_ID:4523_1030*
//
L #TAO;
L 100;
*I;
T #A2TATOP_PT;
NOP 0;
NETWORK
TITLE =OPERATOR WAITING TIME CONTROL
//CONTROLE TEMPS D ATTENTE OPERATEUR
//*ODIL_ID:4523_1031*
//
U "A02_AT_A2";
U "Z1G".ITR;
= L 3.0;
BLD 103;
CALL #A2TATOP (
IN := L 3.0,
PT := #A2TATOP_PT);
NOP 0;
NETWORK
TITLE =OPERATOR INDUCED STOPPAGE
//ARRET INDUIT OPERATEUR
//*ODIL_ID:4523_1032*
//
UN "A02_AT_A2";
UN "A2CRSA02";
O #A2TATOP.Q;
= #S1A2AIO;
NETWORK
TITLE =FAULT DESACTIVATION VALIDATION PUSH BUTTON TIMER
//TEMPORISATION RETOMBE BOUTON DE VALIDATION
//*ODIL_ID:4523_1047*
//
U "Z1G".LIEN_PUP.Z_mauto;
U "A2VAL1";
UN #A2MRBV;
U "A02_AT_A2";
= L 0.0;
BLD 103;
CALL #A2TDRBV (
IN := L 0.0,
PT := T#30S);
NOP 0;
NETWORK
TITLE =FAULT DESACTIVATION VALIDATION PUSH BUTTON
//DEFAUT RETOMBEE BOUTON DE VALIDATION OPERATEUR
//*ODIL_ID:4523_1033*
//
U #A2TDRBV.Q;
S #S1A2DBVOP;
UN "A2VAL1";
R #S1A2DBVOP;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                            DRY RUN / DEVERMINAGE                          **
//*******************************************************************************
//*ODIL_ID:4523_1034*
//

NETWORK
TITLE =OPERATEUR END OF WORK TEMPORISED
//FIN DE TRAVAIL OPERATEUR TEMPORISE POUR LE MODE DEVERMINAGE
//*ODIL_ID:4523_1035*
//
U(;
O "Z1G".MDV;
O "Z1G".A02.MDV;
);
U "A02_AT_A2";
= L 3.0;
BLD 103;
CALL #A2FTOPDV (
IN := L 3.0,
PT := T#10S);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                            OPERATOR MEMORIES                              **
//*******************************************************************************
//*ODIL_ID:4523_1036*
//

NETWORK
TITLE =MEMORY THROUGH OPERATOR
//MEMOIRE TRAVERSEE OPERATEUR
//*ODIL_ID:4523_1037*
//
UN #A2SECU;
U "A02_AT_A2";
S #A2MTOP;
U "A02_ET_A2";
R #A2MTOP;
NOP 0;
NETWORK
TITLE =MEMORY RELEASE OF VALIDATION BUTTON
//MEMOIRE RETOMBEE DU BOUTON DE VALIDATION
//*ODIL_ID:4523_1038*
//
U "A02_AT_A2";
UN "A2VAL1";
S #A2MRBV;
U "A02_ET_A2";
R #A2MRBV;
NOP 0;
NETWORK
TITLE =OPERATOR VALIDATION PUSH BUTTON MEMORY
//MEMOIRE BOUTON DE VALIDATION OPERATEUR
//*ODIL_ID:4523_1039*
//
U(;
O "A2VAL1";
O #A2MBVOP;
);
U #A2MTOP;
U #A2SECU;
= #A2MBVOP;
NETWORK
TITLE =
//*******************************************************************************
//**                       OPERATOR EXCHANGES WITH STAGE                       **
//*******************************************************************************
//*ODIL_ID:4523_1040*
//

NETWORK
TITLE =END OF WORK OPERATOR
//FIN DE TRAVAIL OPERATEUR
//*ODIL_ID:4523_1041*
//
U(;
UN "Z1G".MDV;
UN "Z1G".A02.MDV;
U #A2MBVOP;
U #A2MTOP;
U #A2MRBV;
O;
U #A2FTOPDV.Q;
U "A02_AT_A2";
);
UN "A02_ET_A2";
= "Z1G".A2.ECHG_A02.FT1;
NETWORK
TITLE =OPERATOR BACKWARD SAFETY (EXCHANGES WITH STAGE)
//SECURITE ARRIERE OPERATEUR
//*ODIL_ID:4523_1042*
//
U #A2SECU;
U "A2CRSA02";
UN #A2MTOP;
UN #A2MRBV;
= "Z1G".A2.ECHG_A02.SA;
NETWORK
TITLE =CONDITION SAFETY RESET (MEMENTO FOR SAFETY PROGRAM USE)
//CONDITION DE REARMEMENT SECURITE
//*ODIL_ID:4523_1043*
//
U #A2SECU;
U(;
O #A2MBVOP;
O;
UN "A02_AT_A2";
U(;
O "A2VAL1";
O "A2CRSA02";
);
);
= "A2CRSA02";
NETWORK
TITLE =
//*******************************************************************************
//**                          TOWER LAMP MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:4523_1044*
//

NETWORK
TITLE =OPERATOR TOWER LAMP: WORK PROHIBITION (RED)
//VERRINE INTERDICTION DE TRAVAIL OPERATEUR
//*ODIL_ID:4523_1045*
//
U "Z1G".A2.ECHG_A02.SA;
UN "A02_AT_A2";
O "IG".LIEN_ILOT.ITLG;
= "A2VIT";
NETWORK
TITLE =OPERATOR TOWER LAMP: WORK AUTHORIZATION (GREEN)
//VERRINE AUTORISATION DE TRAVAIL OPERATEUR
//*ODIL_ID:4523_1046*
//
UN "Z1G".A2.ECHG_A02.SA;
U "A02_AT_A2";
O;
UN "Z1G".A2.ECHG_A02.SA;
U "IG".LIEN_ILOT.ICL;
O "IG".LIEN_ILOT.ITLG;
= "A2VAT";
END_FUNCTION_BLOCK

DATA_BLOCK "Z1A2"
VERSION : 0.1
"1_A2_OP_BPVAL"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_B0_ROBOT"
TITLE =ROBOT B0 MANAGEMENT
//GESTION DU ROBOT B0
VERSION : 0.1
VAR
  B0CSOPR : BF_IHMCR1;	//Z1RB11:  DEF. COMUM SEGURANCA SOPR (SOPR)
  S1Z1RB11DF24VR : BOOL;	//Z1RB11: DEF. ALIMENTACÃO REDE 24V
  S1Z1RB11DF24VZ : BOOL;	//Z1RB11: DEF. ALIMENTACÃO 24V ZONA
  S1Z1RB11DCSOPR : BOOL;	//Z1RB11: DEF. COMUM SEGURANCA SOPR (SOPR)
  S1Z1RB11DCSEC : BOOL;	//Z1RB11: DEF. CARTA DE SEGURANCA
  B0ROBOT : BF_ROBOT;	//B0: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  B0SUIVI : BF_TCY_SUIV;	//B0: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  B0CODE : WORD;	//B0: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//B0: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//B0: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1B0DIV : INT;	//B0: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1B0TCP : INT;	//B0: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1B0TCT : INT;	//B0: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1B0NCY : INT;	//B0: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1B0NDR : WORD;	//B0: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1B0APP : BOOL;	//B0: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1B0APE : BOOL;	//B0: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1B0APF : BOOL;	//B0: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1B0ALR : BOOL;	//B0: OPERATOR CALL / APPEL OPERATEUR
  S1B0AR : BOOL;	//B0: STOP ROBOT / ARRET ROBOT
  S1B0ATT : BOOL;	//B0: ROBOT WAITING / ROBOT EN ATTENTE
  S1B0TOPCY : BOOL;	//B0: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1B0AIA : BOOL;	//B0: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1B0HPR : BOOL;	//B0: NOT IN SERVICE / HORS PRODUCTION
  S1B0DER : BOOL;	//B0: ROBOT DERIVE / DERIVE ROBOT
  S1B0DTC : BOOL;	//B0: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1B0DT2 : BOOL;	//B0: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  B0XCODE : BOOL;	//B0: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:4876_309*
//

NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:5805_310*
//
U(;
ON "B0CCB24R";
O;
U #S1Z1RB11DF24VR;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1RB11DF24VR;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:5807_310*
//
U(;
ON "B0CCB24Z";
O;
U #S1Z1RB11DF24VZ;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1RB11DF24VZ;
NETWORK
TITLE =PANEL Z1RB11 SAFETY CARD FAULT
//Z1RB11: DEF. CARTA DE SEGURANCA
//*ODIL_ID:5831_311*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1RB11DCSEC;
NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:4876_312*
//

NETWORK
TITLE =SAFETY LOOP HMI / DIAGNOSTIQUE BOUCLE DE SECURITE
//Z1RB11:  DEF. COMUM SEGURANCA SOPR (SOPR)
//*ODIL_ID:5809_314*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U "B0CCSOPR";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _501;
CALL #B0CSOPR(
Typ := 1,
Def_Maj := L 0.0,
CSecu := L 0.1,
Def := #S1Z1RB11DCSOPR);
_501: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:4876_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:4876_1025*
//
U "PERSO";
U #S1B0TOPCY;
SPBNB _502;
L 1;
T #S1B0DIV;
_502: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:4876_1026*
//
U #S1B0AR;
= L 1.0;
BLD 103;
U #S1B0ATT;
= L 1.1;
BLD 103;
U #S1B0TOPCY;
= L 1.2;
BLD 103;
CALL #B0SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1B0DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1B0TCP,
S_tct := #S1B0TCT,
S_numcyc := #S1B0NCY,
S_dtc := #S1B0DTC,
S_fint2 := #S1B0DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE A01                                  **
//*******************************************************************************
//*ODIL_ID:71383_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:71383_1005*
//
U "B0OR1";
U "PERSO";
= "Z1G".B0.ECHG_A01.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE A01
//*ODIL_ID:71383_1006*
//
U(;
O "B0OR16";
O "B0REPLI";
);
U "PERSO";
= "Z1G".B0.ECHG_A01.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE A02                                  **
//*******************************************************************************
//*ODIL_ID:75620_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:75620_1005*
//
U "B0OR1";
U "PERSO";
= "Z1G".B0.ECHG_A02.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE A02
//*ODIL_ID:75620_1006*
//
U(;
O "B0OR16";
O "B0REPLI";
);
U "PERSO";
= "Z1G".B0.ECHG_A02.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE C01                                  **
//*******************************************************************************
//*ODIL_ID:64336_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:64336_1005*
//
U "B0OR1";
U "PERSO";
= "Z1G".B0.ECHG_C01.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE C01
//*ODIL_ID:64336_1006*
//
U(;
O "B0OR16";
O "B0REPLI";
);
U "PERSO";
= "Z1G".B0.ECHG_C01.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE C02                                  **
//*******************************************************************************
//*ODIL_ID:84814_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:84814_1005*
//
U "B0OR1";
U "PERSO";
= "Z1G".B0.ECHG_C02.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE C02
//*ODIL_ID:84814_1006*
//
U(;
O "B0OR16";
O "B0REPLI";
);
U "PERSO";
= "Z1G".B0.ECHG_C02.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:4876_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:4876_1009*
//
L 0;
T #B0CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:4876_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #B0XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:64336_1011_1*
//
U #B0XCODE;
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
SPBNB _503;
L 1;
T #B0CODE;
_503: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 2
//CYCLE ROBOT NUMERO 2
//*ODIL_ID:71383_1011_2*
//
U #B0XCODE;
U "Z1G".A01.IPP;
UN "IIT".A01.MP.MPT;
SPBNB _504;
L 2;
T #B0CODE;
_504: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 3
//CYCLE ROBOT NUMERO 3
//*ODIL_ID:75620_1011_3*
//
U #B0XCODE;
U "Z1G".A02.IPP;
UN "IIT".A02.MP.MPT;
SPBNB _505;
L 3;
T #B0CODE;
_505: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 4
//CYCLE ROBOT NUMERO 4
//*ODIL_ID:84814_1011_4*
//
U #B0XCODE;
U "Z1G".C02.IPP;
UN "IIT".C02.MP.MPT;
SPBNB _506;
L 4;
T #B0CODE;
_506: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:4876_1014*
//

NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:4876_1017*
//
U "Z1G".DRRB;
SPBNB _507;
L 255;
T #B0CODE;
_507: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:4876_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:4876_1019*
//
O "Z1G".MDV;
O "Z1G".C01.MDV;
O "Z1G".A01.MDV;
O "Z1G".A02.MDV;
O "Z1G".C02.MDV;
= #B0ROBOT.Dever;
NETWORK
TITLE =ROBOT B0
//ROBOT B0
//*ODIL_ID:4876_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #B0ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #B0CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "B0RBMS1",
Iw_rbe2 := "B0RBMS2",
Iw_rbe3 := "B0RBMS3",
Iw_rbe4 := "B0RBMS4",
Iw_rbe5 := "B0RBMS5",
Iw_rbe6 := "B0RBMS6",
Def_rb := #S1B0APP,
Appel_op := #S1B0ALR,
S_ar_rb := #S1B0AR,
S_att_rb := #S1B0ATT,
S_top_cy := #S1B0TOPCY,
S_hpr := #S1B0HPR,
S_de := #S1B0DER,
S_ai := #S1B0AIA,
S_ape := #S1B0APE,
S_apf := #S1B0APF,
S_com := #S1B0NDR,
Qw_rbs1 := "B0RBME1",
Qw_rbs2 := "B0RBME2",
Qw_rbs3 := "B0RBME3",
Qw_rbs4 := "B0RBME4",
Qw_rbs5 := "B0RBME5",
Qw_rbs6 := "B0RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:4876_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:4876_1022*
//
L 0;
T "B0RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:4876_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "B0MANU";
= L 1.0;
U L 1.0;
U "Z1G".A01.ECHG_B0.AT1;
= "B0EV1";
U L 1.0;
U "Z1G".A01.ECHG_B0.ART1;
= "B0EV2";
U L 1.0;
U "Z1G".A02.ECHG_B0.AT1;
= "B0EV3";
U L 1.0;
U "Z1G".A02.ECHG_B0.ART1;
= "B0EV4";
U L 1.0;
U "Z1G".B0R.ECHG_B0.AT1;
= "B0EV5";
U L 1.0;
U "Z1G".B0R.ECHG_B0.ART1;
= "B0EV6";
U L 1.0;
U "Z1G".C01.ECHG_B0.AT1;
= "B0EV7";
U L 1.0;
U "Z1G".C01.ECHG_B0.ART1;
= "B0EV8";
U L 1.0;
U "Z1G".C02.ECHG_B0.AT1;
= "B0EV9";
U L 1.0;
U "Z1G".C02.ECHG_B0.ART1;
= "B0EV10";
END_FUNCTION_BLOCK

DATA_BLOCK "Z1B0"
VERSION : 0.1
"1_B0_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_C0_FERRAMENTA"
TITLE =FERRAMENTA
VERSION : 0.1
VAR
  S1C0DIV : INT;	//C0 - DIVERSITY / DIVERSITE
  C0RETVAL : INT;	//C0 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  C0TDFPC : TON;	//C0 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1C0DPIEC : BOOL;	//C0 - PART FAULT / DEFAUT PIECE
  NUM_MVT : INT;	//C0 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:5930_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:5930_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:5930_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:5930_217*
//
U "PERSO";
SPBNB _501;
L 0;
T #S1C0DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:5930_218*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:5930_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1C0"
VERSION : 0.1
"1_C0_FERRAMENTA"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_C1_ROBOT"
TITLE =ROBOT C1 MANAGEMENT
//GESTION DU ROBOT C1
VERSION : 0.1
VAR
  C1ROBOT : BF_ROBOT;	//C1: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  C1SUIVI : BF_TCY_SUIV;	//C1: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  C1CODE : WORD;	//C1: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//C1: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//C1: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1C1DIV : INT;	//C1: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1C1TCP : INT;	//C1: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1C1TCT : INT;	//C1: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1C1NCY : INT;	//C1: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1C1NDR : WORD;	//C1: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1C1APP : BOOL;	//C1: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1C1APE : BOOL;	//C1: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1C1APF : BOOL;	//C1: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1C1ALR : BOOL;	//C1: OPERATOR CALL / APPEL OPERATEUR
  S1C1AR : BOOL;	//C1: STOP ROBOT / ARRET ROBOT
  S1C1ATT : BOOL;	//C1: ROBOT WAITING / ROBOT EN ATTENTE
  S1C1TOPCY : BOOL;	//C1: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1C1AIA : BOOL;	//C1: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1C1HPR : BOOL;	//C1: NOT IN SERVICE / HORS PRODUCTION
  S1C1DER : BOOL;	//C1: ROBOT DERIVE / DERIVE ROBOT
  S1C1DTC : BOOL;	//C1: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1C1DT2 : BOOL;	//C1: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  C1XCODE : BOOL;	//C1: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  C1CHGELEC : BF_RB_SERVICE;	//C1: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  C1RODAGE : BF_RB_SERVICE;	//C1: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  C1RAZROD : BOOL;	//C1: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  C1NBCHE : WORD;	//C1: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  C1MROD : WORD;	//C1: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  C1MROD2 : WORD;	//C1: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  C1NBROD : WORD;	//C1: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  C1ALRCF : WORD;	//C1: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  C1DEMCF : WORD;	//C1: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  C1DROD : BOOL;	//C1: TIP DRESS REQUEST / DEMANDE RODAGE
  C1ALROD : BOOL;	//C1: TIP DRESS ALARM / ALARME RODAGE
  S1C1ACFR : BOOL;	//C1: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1C1DCFR : BOOL;	//C1: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1C1AACE : BOOL;	//C1: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1C1ACE : BOOL;	//C1: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1C1DCE : BOOL;	//C1: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:7224_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:7224_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:7224_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:7224_1025*
//
U "PERSO";
U #S1C1TOPCY;
SPBNB _501;
L 1;
T #S1C1DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:7224_1026*
//
U #S1C1AR;
= L 1.0;
BLD 103;
U #S1C1ATT;
= L 1.1;
BLD 103;
U #S1C1TOPCY;
= L 1.2;
BLD 103;
CALL #C1SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1C1DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1C1TCP,
S_tct := #S1C1TCT,
S_numcyc := #S1C1NCY,
S_dtc := #S1C1DTC,
S_fint2 := #S1C1DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE C01                                  **
//*******************************************************************************
//*ODIL_ID:64336_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:64336_1005*
//
U "C1OR1";
U "PERSO";
= "Z1G".C1.ECHG_C01.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE C01
//*ODIL_ID:64336_1006*
//
U(;
O "C1OR16";
O "C1REPLI";
);
U "PERSO";
= "Z1G".C1.ECHG_C01.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE C02                                  **
//*******************************************************************************
//*ODIL_ID:84814_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:84814_1005*
//
U "C1OR1";
U "PERSO";
= "Z1G".C1.ECHG_C02.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE C02
//*ODIL_ID:84814_1006*
//
U(;
O "C1OR16";
O "C1REPLI";
);
U "PERSO";
= "Z1G".C1.ECHG_C02.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:7224_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:7224_1009*
//
L 0;
T #C1CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:7224_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #C1XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:64336_1011_1*
//
U #C1XCODE;
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
SPBNB _502;
L 1;
T #C1CODE;
_502: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 2
//CYCLE ROBOT NUMERO 2
//*ODIL_ID:84814_1011_2*
//
U #C1XCODE;
U "Z1G".C02.IPP;
UN "IIT".C02.MP.MPT;
SPBNB _503;
L 2;
T #C1CODE;
_503: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:7224_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:7224_1015*
//
U "Z1G".MCYRB;
U #C1DROD;
SPBNB _504;
L 253;
T #C1CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:7224_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _505;
L 254;
T #C1CODE;
_505: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:7224_1017*
//
U "Z1G".DRRB;
SPBNB _506;
L 255;
T #C1CODE;
_506: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:7224_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:7224_1019*
//
O "Z1G".MDV;
O "Z1G".C01.MDV;
O "Z1G".C02.MDV;
= #C1ROBOT.Dever;
NETWORK
TITLE =ROBOT C1
//ROBOT C1
//*ODIL_ID:7224_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #C1ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #C1CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "C1RBMS1",
Iw_rbe2 := "C1RBMS2",
Iw_rbe3 := "C1RBMS3",
Iw_rbe4 := "C1RBMS4",
Iw_rbe5 := "C1RBMS5",
Iw_rbe6 := "C1RBMS6",
Def_rb := #S1C1APP,
Appel_op := #S1C1ALR,
S_ar_rb := #S1C1AR,
S_att_rb := #S1C1ATT,
S_top_cy := #S1C1TOPCY,
S_hpr := #S1C1HPR,
S_de := #S1C1DER,
S_ai := #S1C1AIA,
S_ape := #S1C1APE,
S_apf := #S1C1APF,
S_com := #S1C1NDR,
Qw_rbs1 := "C1RBME1",
Qw_rbs2 := "C1RBME2",
Qw_rbs3 := "C1RBME3",
Qw_rbs4 := "C1RBME4",
Qw_rbs5 := "C1RBME5",
Qw_rbs6 := "C1RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:7224_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:7224_1022*
//
L 0;
T "C1RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:7224_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "C1MANU";
= L 1.0;
U L 1.0;
U "Z1G".C01.ECHG_C1.AT1;
= "C1EV1";
U L 1.0;
U "Z1G".C01.ECHG_C1.ART1;
= "C1EV2";
U L 1.0;
U "Z1G".C02.ECHG_C1.AT1;
= "C1EV3";
U L 1.0;
U "Z1G".C02.ECHG_C1.ART1;
= "C1EV4";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:7224_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:7224_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:7224_1032*
//
L #C1NBROD;
L #C1ALRCF;
>I;
= #S1C1ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:7224_1033*
//
L #C1NBROD;
L #C1DEMCF;
>I;
= #S1C1DCFR;
= "Z1G".C1.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:7224_1034*
//
U #C1RAZROD;
= L 0.0;
U L 0.0;
SPBNB _507;
L 0;
T #C1NBROD;
_507: NOP 0;
U L 0.0;
BLD 102;
R #C1RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:7224_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #C1RODAGE (
Iw_rbe6 := "C1RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #C1DROD,
Alarm := #C1ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #C1NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:7224_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:7224_1037*
//
U(;
L #C1MROD;
L "Z1G".CHELM.EALR;
-I;
T #C1MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".C1.NBCHE;
L #C1MROD2;
>=I;
);
= #S1C1AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:7224_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #C1CHGELEC (
Iw_rbe6 := "C1RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1C1DCE,
Alarm := #S1C1ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #C1NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:7224_1039*
//
U #S1C1DCE;
= "Z1G".C1.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:7224_1040*
//
U(;
O "Z1G".C1.DCHE;
O "Z1G".C1.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".C1.PCHE;
S "Z1G".C1.CCAS;
U "Z1G".C1.CCAS;
UN "Z1G".C1.PCHE;
R "Z1G".C1.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:7224_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:7224_1042*
//
U "Z1G".C1.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".C1.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:7224_1043*
//
U "Z1G".C1.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".C1.CCAS;
= "Z1G".C1.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1C1"
VERSION : 0.1
"1_C1_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_C3_ROBOT"
TITLE =ROBOT C3 MANAGEMENT
//GESTION DU ROBOT C3
VERSION : 0.1
VAR
  C3ROBOT : BF_ROBOT;	//C3: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  C3SUIVI : BF_TCY_SUIV;	//C3: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  C3CODE : WORD;	//C3: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//C3: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//C3: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1C3DIV : INT;	//C3: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1C3TCP : INT;	//C3: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1C3TCT : INT;	//C3: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1C3NCY : INT;	//C3: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1C3NDR : WORD;	//C3: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1C3APP : BOOL;	//C3: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1C3APE : BOOL;	//C3: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1C3APF : BOOL;	//C3: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1C3ALR : BOOL;	//C3: OPERATOR CALL / APPEL OPERATEUR
  S1C3AR : BOOL;	//C3: STOP ROBOT / ARRET ROBOT
  S1C3ATT : BOOL;	//C3: ROBOT WAITING / ROBOT EN ATTENTE
  S1C3TOPCY : BOOL;	//C3: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1C3AIA : BOOL;	//C3: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1C3HPR : BOOL;	//C3: NOT IN SERVICE / HORS PRODUCTION
  S1C3DER : BOOL;	//C3: ROBOT DERIVE / DERIVE ROBOT
  S1C3DTC : BOOL;	//C3: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1C3DT2 : BOOL;	//C3: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  C3XCODE : BOOL;	//C3: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  C3CHGELEC : BF_RB_SERVICE;	//C3: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  C3RODAGE : BF_RB_SERVICE;	//C3: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  C3RAZROD : BOOL;	//C3: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  C3NBCHE : WORD;	//C3: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  C3MROD : WORD;	//C3: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  C3MROD2 : WORD;	//C3: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  C3NBROD : WORD;	//C3: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  C3ALRCF : WORD;	//C3: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  C3DEMCF : WORD;	//C3: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  C3DROD : BOOL;	//C3: TIP DRESS REQUEST / DEMANDE RODAGE
  C3ALROD : BOOL;	//C3: TIP DRESS ALARM / ALARME RODAGE
  S1C3ACFR : BOOL;	//C3: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1C3DCFR : BOOL;	//C3: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1C3AACE : BOOL;	//C3: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1C3ACE : BOOL;	//C3: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1C3DCE : BOOL;	//C3: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:8278_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:8278_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:8278_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:8278_1025*
//
U "PERSO";
U #S1C3TOPCY;
SPBNB _501;
L 1;
T #S1C3DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:8278_1026*
//
U #S1C3AR;
= L 1.0;
BLD 103;
U #S1C3ATT;
= L 1.1;
BLD 103;
U #S1C3TOPCY;
= L 1.2;
BLD 103;
CALL #C3SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1C3DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1C3TCP,
S_tct := #S1C3TCT,
S_numcyc := #S1C3NCY,
S_dtc := #S1C3DTC,
S_fint2 := #S1C3DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE C01                                  **
//*******************************************************************************
//*ODIL_ID:64336_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:64336_1005*
//
U "C3OR1";
U "PERSO";
= "Z1G".C3.ECHG_C01.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE C01
//*ODIL_ID:64336_1006*
//
U(;
O "C3OR16";
O "C3REPLI";
);
U "PERSO";
= "Z1G".C3.ECHG_C01.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE C02                                  **
//*******************************************************************************
//*ODIL_ID:84814_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:84814_1005*
//
U "C3OR1";
U "PERSO";
= "Z1G".C3.ECHG_C02.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE C02
//*ODIL_ID:84814_1006*
//
U(;
O "C3OR16";
O "C3REPLI";
);
U "PERSO";
= "Z1G".C3.ECHG_C02.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:8278_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:8278_1009*
//
L 0;
T #C3CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:8278_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #C3XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:64336_1011_1*
//
U #C3XCODE;
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
SPBNB _502;
L 1;
T #C3CODE;
_502: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 2
//CYCLE ROBOT NUMERO 2
//*ODIL_ID:84814_1011_2*
//
U #C3XCODE;
U "Z1G".C02.IPP;
UN "IIT".C02.MP.MPT;
SPBNB _503;
L 2;
T #C3CODE;
_503: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:8278_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:8278_1015*
//
U "Z1G".MCYRB;
U #C3DROD;
SPBNB _504;
L 253;
T #C3CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:8278_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _505;
L 254;
T #C3CODE;
_505: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:8278_1017*
//
U "Z1G".DRRB;
SPBNB _506;
L 255;
T #C3CODE;
_506: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:8278_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:8278_1019*
//
O "Z1G".MDV;
O "Z1G".C01.MDV;
O "Z1G".C02.MDV;
= #C3ROBOT.Dever;
NETWORK
TITLE =ROBOT C3
//ROBOT C3
//*ODIL_ID:8278_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #C3ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #C3CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "C3RBMS1",
Iw_rbe2 := "C3RBMS2",
Iw_rbe3 := "C3RBMS3",
Iw_rbe4 := "C3RBMS4",
Iw_rbe5 := "C3RBMS5",
Iw_rbe6 := "C3RBMS6",
Def_rb := #S1C3APP,
Appel_op := #S1C3ALR,
S_ar_rb := #S1C3AR,
S_att_rb := #S1C3ATT,
S_top_cy := #S1C3TOPCY,
S_hpr := #S1C3HPR,
S_de := #S1C3DER,
S_ai := #S1C3AIA,
S_ape := #S1C3APE,
S_apf := #S1C3APF,
S_com := #S1C3NDR,
Qw_rbs1 := "C3RBME1",
Qw_rbs2 := "C3RBME2",
Qw_rbs3 := "C3RBME3",
Qw_rbs4 := "C3RBME4",
Qw_rbs5 := "C3RBME5",
Qw_rbs6 := "C3RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:8278_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:8278_1022*
//
L 0;
T "C3RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:8278_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "C3MANU";
= L 1.0;
U L 1.0;
U "Z1G".C01.ECHG_C3.AT1;
= "C3EV1";
U L 1.0;
U "Z1G".C01.ECHG_C3.ART1;
= "C3EV2";
U L 1.0;
U "Z1G".C02.ECHG_C3.AT1;
= "C3EV3";
U L 1.0;
U "Z1G".C02.ECHG_C3.ART1;
= "C3EV4";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:8278_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:8278_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:8278_1032*
//
L #C3NBROD;
L #C3ALRCF;
>I;
= #S1C3ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:8278_1033*
//
L #C3NBROD;
L #C3DEMCF;
>I;
= #S1C3DCFR;
= "Z1G".C3.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:8278_1034*
//
U #C3RAZROD;
= L 0.0;
U L 0.0;
SPBNB _507;
L 0;
T #C3NBROD;
_507: NOP 0;
U L 0.0;
BLD 102;
R #C3RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:8278_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #C3RODAGE (
Iw_rbe6 := "C3RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #C3DROD,
Alarm := #C3ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #C3NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:8278_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:8278_1037*
//
U(;
L #C3MROD;
L "Z1G".CHELM.EALR;
-I;
T #C3MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".C3.NBCHE;
L #C3MROD2;
>=I;
);
= #S1C3AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:8278_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #C3CHGELEC (
Iw_rbe6 := "C3RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1C3DCE,
Alarm := #S1C3ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #C3NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:8278_1039*
//
U #S1C3DCE;
= "Z1G".C3.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:8278_1040*
//
U(;
O "Z1G".C3.DCHE;
O "Z1G".C3.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".C3.PCHE;
S "Z1G".C3.CCAS;
U "Z1G".C3.CCAS;
UN "Z1G".C3.PCHE;
R "Z1G".C3.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:8278_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:8278_1042*
//
U "Z1G".C3.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".C3.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:8278_1043*
//
U "Z1G".C3.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".C3.CCAS;
= "Z1G".C3.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1C3"
VERSION : 0.1
"1_C3_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_D0_ROBOT"
TITLE =ROBOT D0 MANAGEMENT
//GESTION DU ROBOT D0
VERSION : 0.1
VAR
  D0ROBOT : BF_ROBOT;	//D0: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  D0SUIVI : BF_TCY_SUIV;	//D0: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  D0CODE : WORD;	//D0: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//D0: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//D0: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1D0DIV : INT;	//D0: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1D0TCP : INT;	//D0: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1D0TCT : INT;	//D0: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1D0NCY : INT;	//D0: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1D0NDR : WORD;	//D0: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1D0APP : BOOL;	//D0: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1D0APE : BOOL;	//D0: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1D0APF : BOOL;	//D0: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1D0ALR : BOOL;	//D0: OPERATOR CALL / APPEL OPERATEUR
  S1D0AR : BOOL;	//D0: STOP ROBOT / ARRET ROBOT
  S1D0ATT : BOOL;	//D0: ROBOT WAITING / ROBOT EN ATTENTE
  S1D0TOPCY : BOOL;	//D0: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1D0AIA : BOOL;	//D0: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1D0HPR : BOOL;	//D0: NOT IN SERVICE / HORS PRODUCTION
  S1D0DER : BOOL;	//D0: ROBOT DERIVE / DERIVE ROBOT
  S1D0DTC : BOOL;	//D0: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1D0DT2 : BOOL;	//D0: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  D0XCODE : BOOL;	//D0: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  D0CHGELEC : BF_RB_SERVICE;	//D0: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  D0RODAGE : BF_RB_SERVICE;	//D0: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  D0RAZROD : BOOL;	//D0: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  D0NBCHE : WORD;	//D0: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  D0MROD : WORD;	//D0: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  D0MROD2 : WORD;	//D0: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  D0NBROD : WORD;	//D0: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  D0ALRCF : WORD;	//D0: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  D0DEMCF : WORD;	//D0: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  D0DROD : BOOL;	//D0: TIP DRESS REQUEST / DEMANDE RODAGE
  D0ALROD : BOOL;	//D0: TIP DRESS ALARM / ALARME RODAGE
  S1D0ACFR : BOOL;	//D0: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1D0DCFR : BOOL;	//D0: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1D0AACE : BOOL;	//D0: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1D0ACE : BOOL;	//D0: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1D0DCE : BOOL;	//D0: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:9332_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:9332_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:9332_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:9332_1025*
//
U "PERSO";
U #S1D0TOPCY;
SPBNB _501;
L 1;
T #S1D0DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:9332_1026*
//
U #S1D0AR;
= L 1.0;
BLD 103;
U #S1D0ATT;
= L 1.1;
BLD 103;
U #S1D0TOPCY;
= L 1.2;
BLD 103;
CALL #D0SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1D0DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1D0TCP,
S_tct := #S1D0TCT,
S_numcyc := #S1D0NCY,
S_dtc := #S1D0DTC,
S_fint2 := #S1D0DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE C01                                  **
//*******************************************************************************
//*ODIL_ID:64336_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:64336_1005*
//
U "D0OR1";
U "PERSO";
= "Z1G".D0.ECHG_C01.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE C01
//*ODIL_ID:64336_1006*
//
U(;
O "D0OR16";
O "D0REPLI";
);
U "PERSO";
= "Z1G".D0.ECHG_C01.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE C02                                  **
//*******************************************************************************
//*ODIL_ID:84814_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:84814_1005*
//
U "D0OR1";
U "PERSO";
= "Z1G".D0.ECHG_C02.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE C02
//*ODIL_ID:84814_1006*
//
U(;
O "D0OR16";
O "D0REPLI";
);
U "PERSO";
= "Z1G".D0.ECHG_C02.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE E0                                  **
//*******************************************************************************
//*ODIL_ID:11659_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:11659_1005*
//
U "D0OR1";
U "PERSO";
= "Z1G".D0.ECHG_E0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE E0
//*ODIL_ID:11659_1006*
//
U(;
O "D0OR16";
O "D0REPLI";
);
U "PERSO";
= "Z1G".D0.ECHG_E0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:9332_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:9332_1009*
//
L 0;
T #D0CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:9332_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #D0XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:11659_1011_1*
//
U #D0XCODE;
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
SPBNB _502;
L 1;
T #D0CODE;
_502: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 2
//CYCLE ROBOT NUMERO 2
//*ODIL_ID:64336_1011_2*
//
U #D0XCODE;
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
SPBNB _503;
L 2;
T #D0CODE;
_503: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 3
//CYCLE ROBOT NUMERO 3
//*ODIL_ID:84814_1011_3*
//
U #D0XCODE;
U "Z1G".C02.IPP;
UN "IIT".C02.MP.MPT;
SPBNB _504;
L 3;
T #D0CODE;
_504: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:9332_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:9332_1015*
//
U "Z1G".MCYRB;
U #D0DROD;
SPBNB _505;
L 253;
T #D0CODE;
_505: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:9332_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _506;
L 254;
T #D0CODE;
_506: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:9332_1017*
//
U "Z1G".DRRB;
SPBNB _507;
L 255;
T #D0CODE;
_507: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:9332_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:9332_1019*
//
O "Z1G".MDV;
O "Z1G".E0.MDV;
O "Z1G".C01.MDV;
O "Z1G".C02.MDV;
= #D0ROBOT.Dever;
NETWORK
TITLE =ROBOT D0
//ROBOT D0
//*ODIL_ID:9332_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #D0ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #D0CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "D0RBMS1",
Iw_rbe2 := "D0RBMS2",
Iw_rbe3 := "D0RBMS3",
Iw_rbe4 := "D0RBMS4",
Iw_rbe5 := "D0RBMS5",
Iw_rbe6 := "D0RBMS6",
Def_rb := #S1D0APP,
Appel_op := #S1D0ALR,
S_ar_rb := #S1D0AR,
S_att_rb := #S1D0ATT,
S_top_cy := #S1D0TOPCY,
S_hpr := #S1D0HPR,
S_de := #S1D0DER,
S_ai := #S1D0AIA,
S_ape := #S1D0APE,
S_apf := #S1D0APF,
S_com := #S1D0NDR,
Qw_rbs1 := "D0RBME1",
Qw_rbs2 := "D0RBME2",
Qw_rbs3 := "D0RBME3",
Qw_rbs4 := "D0RBME4",
Qw_rbs5 := "D0RBME5",
Qw_rbs6 := "D0RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:9332_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:9332_1022*
//
L 0;
T "D0RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:9332_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "D0MANU";
= L 1.0;
U L 1.0;
U "Z1G".C01.ECHG_D0.AT1;
= "D0EV1";
U L 1.0;
U "Z1G".C01.ECHG_D0.ART1;
= "D0EV2";
U L 1.0;
U "Z1G".C02.ECHG_D0.AT1;
= "D0EV3";
U L 1.0;
U "Z1G".C02.ECHG_D0.ART1;
= "D0EV4";
U L 1.0;
U "Z1G".E0.ECHG_D0.AT1;
= "D0EV5";
U L 1.0;
U "Z1G".E0.ECHG_D0.ART1;
= "D0EV6";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:9332_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:9332_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:9332_1032*
//
L #D0NBROD;
L #D0ALRCF;
>I;
= #S1D0ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:9332_1033*
//
L #D0NBROD;
L #D0DEMCF;
>I;
= #S1D0DCFR;
= "Z1G".D0.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:9332_1034*
//
U #D0RAZROD;
= L 0.0;
U L 0.0;
SPBNB _508;
L 0;
T #D0NBROD;
_508: NOP 0;
U L 0.0;
BLD 102;
R #D0RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:9332_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #D0RODAGE (
Iw_rbe6 := "D0RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #D0DROD,
Alarm := #D0ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #D0NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:9332_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:9332_1037*
//
U(;
L #D0MROD;
L "Z1G".CHELM.EALR;
-I;
T #D0MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".D0.NBCHE;
L #D0MROD2;
>=I;
);
= #S1D0AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:9332_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #D0CHGELEC (
Iw_rbe6 := "D0RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1D0DCE,
Alarm := #S1D0ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #D0NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:9332_1039*
//
U #S1D0DCE;
= "Z1G".D0.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:9332_1040*
//
U(;
O "Z1G".D0.DCHE;
O "Z1G".D0.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".D0.PCHE;
S "Z1G".D0.CCAS;
U "Z1G".D0.CCAS;
UN "Z1G".D0.PCHE;
R "Z1G".D0.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:9332_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:9332_1042*
//
U "Z1G".D0.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".D0.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:9332_1043*
//
U "Z1G".D0.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".D0.CCAS;
= "Z1G".D0.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1D0"
VERSION : 0.1
"1_D0_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_E0_MONTAGE"
TITLE =MONTAGE
VERSION : 0.1
VAR
  S1E0DIV : INT;	//E0 - DIVERSITY / DIVERSITE
  D01_TF_TP_E0 : BF_TF_TP;	//E0 - TRANSFER PART WORD: D01 -> E0 / TRANSFERT TABLE PIECE D01 -> E0
  E0RETVAL : INT;	//E0 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  E0TDFPC : TON;	//E0 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1E0DPIEC : BOOL;	//E0 - PART FAULT / DEFAUT PIECE
  E0CAD : BF_MOUV2P1;	//TYPE_ELEMENT CAD
  S1E0DCAD : BOOL;	//CAD MOVEMENT FAULT / DEFAUT MOUVEMENT CAD
  E0CAE : BF_MOUV2P1;	//TYPE_ELEMENT CAE
  S1E0DCAE : BOOL;	//CAE MOVEMENT FAULT / DEFAUT MOUVEMENT CAE
  E0CAF : BF_MOUV2P1;	//TYPE_ELEMENT CAF
  S1E0DCAF : BOOL;	//CAF MOVEMENT FAULT / DEFAUT MOUVEMENT CAF
  E0PLA : BF_MOUV2P1;	//TYPE_ELEMENT PLA
  S1E0DPLA : BOOL;	//PLA MOVEMENT FAULT / DEFAUT MOUVEMENT PLA
  E0SRB : BF_MOUV2P1;	//TYPE_ELEMENT SRB
  S1E0DSRB : BOOL;	//SRB MOVEMENT FAULT / DEFAUT MOUVEMENT SRB
  E0SRC : BF_MOUV2P1;	//TYPE_ELEMENT SRC
  S1E0DSRC : BOOL;	//SRC MOVEMENT FAULT / DEFAUT MOUVEMENT SRC
  E0SRG : BF_MOUV2P1;	//TYPE_ELEMENT SRG
  S1E0DSRG : BOOL;	//SRG MOVEMENT FAULT / DEFAUT MOUVEMENT SRG
  E0SRH : BF_MOUV2P1;	//TYPE_ELEMENT SRH
  S1E0DSRH : BOOL;	//SRH MOVEMENT FAULT / DEFAUT MOUVEMENT SRH
  NUM_MVT : INT;	//E0 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:10386_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:10386_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:10386_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:10386_217*
//
UN "IIT".E0.MS.MSP;
SPBNB _501;
L 0;
T #S1E0DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:10386_218*
//
U "IIT".E0.MS.MSP;
SPBNB _502;
L 1;
T #S1E0DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:10386_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: D01 -> E0
//TRANSFERT DE LA TABLE PIECE D01 VERS E0
//*ODIL_ID:54867_20*
//
U "IIT".D01.MS.MSP;
UN "IIT".E0.MS.MSP;
U "IIT".E0.MP.MPT;
= L 4.0;
BLD 103;
CALL #D01_TF_TP_E0 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".D01,
Dest := "IIT".E0);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:10386_55*
//

NETWORK
TITLE =PART PRESENCE MEMORY
//MEMOIRE PIECE PRESENTE
//*ODIL_ID:10386_58*
//
U "PERSO";
UN "Z1G".E0.IAP;
= "IIT".E0.MP.MPP;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:10386_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:10386_82*
//
U "PERSO";
= "Z1G".E0.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:10386_83*
//
UN "E01DPP1";
UN "E01DPP2";
= "Z1G".E0.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:10386_84*
//
U "Z1G".E0.IAP;
UN "IIT".E0.MS.MSP;
UN "IIT".E0.MP.MPP;
= "Z1G".E0.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:10386_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".E0.IPP;
UN "Z1G".E0.IPA;
= L 4.0;
BLD 103;
CALL #E0TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:10386_86*
//
U #E0TDFPC.Q;
S #S1E0DPIEC;
U(;
O "Z1G".E0.IPP;
O "Z1G".E0.IPA;
);
R #S1E0DPIEC;
NOP 0;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT D0                      **
//******************************************************************************
//*ODIL_ID:10362_190_D0*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:10362_19D0*
//
U "IIT".E0.MP.MPP;
U "IIT".E0.MP.MPAT;
U "Z1G".E0.IPP;
UN "IIT".E0_TT.MFT.MFT1;
UN "Z1G".D0.ECHG_E0.FT1;
= "Z1G".E0.ECHG_D0.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:10362_20D0*
//
U "IIT".E0.MP.MPP;
U "IIT".E0.MP.MPAT;
U "Z1G".E0.IPP;
U "IIT".E0_TT.MFT.MFT1;
UN "Z1G".D0.ECHG_E0.SA;
= "Z1G".E0.ECHG_D0.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT E1                      **
//******************************************************************************
//*ODIL_ID:12710_190_E1*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:12710_19E1*
//
U "IIT".E0.MP.MPP;
U "IIT".E0.MP.MPAT;
U "Z1G".E0.IPP;
UN "IIT".E0_TT.MFT.MFT1;
UN "Z1G".E1.ECHG_E0.FT1;
= "Z1G".E0.ECHG_E1.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:12710_20E1*
//
U "IIT".E0.MP.MPP;
U "IIT".E0.MP.MPAT;
U "Z1G".E0.IPP;
U "IIT".E0_TT.MFT.MFT1;
UN "Z1G".E1.ECHG_E0.SA;
= "Z1G".E0.ECHG_E1.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT E2                      **
//******************************************************************************
//*ODIL_ID:13764_190_E2*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:13764_19E2*
//
U "IIT".E0.MP.MPP;
U "IIT".E0.MP.MPAT;
U "Z1G".E0.IPP;
UN "IIT".E0_TT.MFT.MFT1;
UN "Z1G".E2.ECHG_E0.FT1;
= "Z1G".E0.ECHG_E2.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:13764_20E2*
//
U "IIT".E0.MP.MPP;
U "IIT".E0.MP.MPAT;
U "Z1G".E0.IPP;
U "IIT".E0_TT.MFT.MFT1;
UN "Z1G".E2.ECHG_E0.SA;
= "Z1G".E0.ECHG_E2.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT F0                      **
//******************************************************************************
//*ODIL_ID:14818_190_F0*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:14818_19F0*
//
U "IIT".E0.MP.MPP;
U "IIT".E0.MP.MPAT;
U "Z1G".E0.IPP;
UN "IIT".E0_TT.MFT.MFT1;
UN "Z1G".F0.ECHG_E0.FT1;
= "Z1G".E0.ECHG_F0.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:14818_20F0*
//
U "IIT".E0.MP.MPP;
U "IIT".E0.MP.MPAT;
U "Z1G".E0.IPP;
U "IIT".E0_TT.MFT.MFT1;
UN "Z1G".F0.ECHG_E0.SA;
= "Z1G".E0.ECHG_F0.ART1;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:10386_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:10386_177*
//
U "IIT".E0_TT.MFT.MFT1;
U "IIT".E0_TT.MFT.MFT2;
U "PERSO";
S "IIT".E0.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:10386_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:10386_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 110;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         CAD                                   **
//*******************************************************************************
//*ODIL_ID:50356_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:50356_1*
//
U "PERSO";
= #E0CAD.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:50356_2*
//
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
U "PERSO";
= #E0CAD.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:50356_3*
//
U "E0DACAD1";
U "E0DACAD2";
UN "E0DRCAD1";
UN "E0DRCAD2";
= #E0CAD.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:50356_4*
//
U "PERSO";
= #E0CAD.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:50356_5*
//
U(;
U "Z1G".E0.IPP;
U "IIT".E0.MP.MPT;
O "Z1G".E0.IPA;
);
U "PERSO";
= #E0CAD.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:50356_6*
//
UN "E0DACAD1";
UN "E0DACAD2";
U "E0DRCAD1";
U "E0DRCAD2";
= #E0CAD.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:50356_7*
//
L #NUM_MVT;
L 4;
==I;
= #E0CAD.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:50356_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #E0CAD (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "E0EACAD",
Ormv := "E0ERCAD",
Def := S1E0DCAD,
Mvec := "Z1G".MVEC,
Tref := "Z1T".E0.CAD_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         CAE                                   **
//*******************************************************************************
//*ODIL_ID:50514_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:50514_1*
//
U "PERSO";
= #E0CAE.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:50514_2*
//
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
U "PERSO";
= #E0CAE.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:50514_3*
//
U "E0DACAE1";
U "E0DACAE2";
UN "E0DRCAE1";
UN "E0DRCAE2";
= #E0CAE.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:50514_4*
//
U "PERSO";
= #E0CAE.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:50514_5*
//
U(;
U "Z1G".E0.IPP;
U "IIT".E0.MP.MPT;
O "Z1G".E0.IPA;
);
U "PERSO";
= #E0CAE.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:50514_6*
//
UN "E0DACAE1";
UN "E0DACAE2";
U "E0DRCAE1";
U "E0DRCAE2";
= #E0CAE.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:50514_7*
//
L #NUM_MVT;
L 5;
==I;
= #E0CAE.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:50514_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #E0CAE (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "E0EACAE",
Ormv := "E0ERCAE",
Def := S1E0DCAE,
Mvec := "Z1G".MVEC,
Tref := "Z1T".E0.CAE_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         CAF                                   **
//*******************************************************************************
//*ODIL_ID:77509_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:77509_1*
//
U "PERSO";
= #E0CAF.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:77509_2*
//
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
U "PERSO";
= #E0CAF.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:77509_3*
//
U "E0DACAF1";
U "E0DACAF2";
UN "E0DRCAF1";
UN "E0DRCAF2";
= #E0CAF.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:77509_4*
//
U "PERSO";
= #E0CAF.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:77509_5*
//
U(;
U "Z1G".E0.IPP;
U "IIT".E0.MP.MPT;
O "Z1G".E0.IPA;
);
U "PERSO";
= #E0CAF.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:77509_6*
//
UN "E0DACAF1";
UN "E0DACAF2";
U "E0DRCAF1";
U "E0DRCAF2";
= #E0CAF.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:77509_7*
//
L #NUM_MVT;
L 6;
==I;
= #E0CAF.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:77509_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #E0CAF (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "E0EACAF",
Ormv := "E0ERCAF",
Def := S1E0DCAF,
Mvec := "Z1G".MVEC,
Tref := "Z1T".E0.CAF_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLA                                   **
//*******************************************************************************
//*ODIL_ID:49882_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:49882_1*
//
U "PERSO";
= #E0PLA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:49882_2*
//
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
U "PERSO";
= #E0PLA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:49882_3*
//
U "E0DAPLA1";
U "E0DAPLA2";
UN "E0DRPLA1";
UN "E0DRPLA2";
= #E0PLA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:49882_4*
//
U "PERSO";
= #E0PLA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:49882_5*
//
U(;
U "Z1G".E0.IPP;
U "IIT".E0.MP.MPT;
O "Z1G".E0.IPA;
);
U "PERSO";
= #E0PLA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:49882_6*
//
UN "E0DAPLA1";
UN "E0DAPLA2";
U "E0DRPLA1";
U "E0DRPLA2";
= #E0PLA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:49882_7*
//
L #NUM_MVT;
L 1;
==I;
= #E0PLA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:49882_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #E0PLA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "E0EAPLA",
Ormv := "E0ERPLA",
Def := S1E0DPLA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".E0.PLA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRB                                   **
//*******************************************************************************
//*ODIL_ID:50040_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:50040_1*
//
U "PERSO";
= #E0SRB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:50040_2*
//
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
U "PERSO";
= #E0SRB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:50040_3*
//
U "E0DASRB1";
U "E0DASRB2";
UN "E0DRSRB1";
UN "E0DRSRB2";
= #E0SRB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:50040_4*
//
U "PERSO";
= #E0SRB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:50040_5*
//
U(;
U "Z1G".E0.IPP;
U "IIT".E0.MP.MPT;
O "Z1G".E0.IPA;
);
U "PERSO";
= #E0SRB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:50040_6*
//
UN "E0DASRB1";
UN "E0DASRB2";
U "E0DRSRB1";
U "E0DRSRB2";
= #E0SRB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:50040_7*
//
L #NUM_MVT;
L 2;
==I;
= #E0SRB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:50040_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #E0SRB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "E0ERSRB",
Ormv := "E0EASRB",
Def := S1E0DSRB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".E0.SRB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRC                                   **
//*******************************************************************************
//*ODIL_ID:50198_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:50198_1*
//
U "PERSO";
= #E0SRC.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:50198_2*
//
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
U "PERSO";
= #E0SRC.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:50198_3*
//
U "E0DASRC1";
U "E0DASRC2";
UN "E0DRSRC1";
UN "E0DRSRC2";
= #E0SRC.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:50198_4*
//
U "PERSO";
= #E0SRC.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:50198_5*
//
U(;
U "Z1G".E0.IPP;
U "IIT".E0.MP.MPT;
O "Z1G".E0.IPA;
);
U "PERSO";
= #E0SRC.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:50198_6*
//
UN "E0DASRC1";
UN "E0DASRC2";
U "E0DRSRC1";
U "E0DRSRC2";
= #E0SRC.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:50198_7*
//
L #NUM_MVT;
L 3;
==I;
= #E0SRC.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:50198_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #E0SRC (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "E0EASRC",
Ormv := "E0ERSRC",
Def := S1E0DSRC,
Mvec := "Z1G".MVEC,
Tref := "Z1T".E0.SRC_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRG                                   **
//*******************************************************************************
//*ODIL_ID:77678_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:77678_1*
//
U "PERSO";
= #E0SRG.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:77678_2*
//
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
U "PERSO";
= #E0SRG.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:77678_3*
//
U "E0DASRG1";
U "E0DASRG2";
UN "E0DRSRG1";
UN "E0DRSRG2";
= #E0SRG.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:77678_4*
//
U "PERSO";
= #E0SRG.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:77678_5*
//
U(;
U "Z1G".E0.IPP;
U "IIT".E0.MP.MPT;
O "Z1G".E0.IPA;
);
U "PERSO";
= #E0SRG.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:77678_6*
//
UN "E0DASRG1";
UN "E0DASRG2";
U "E0DRSRG1";
U "E0DRSRG2";
= #E0SRG.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:77678_7*
//
L #NUM_MVT;
L 7;
==I;
= #E0SRG.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:77678_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #E0SRG (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "E0ERSRG",
Ormv := "E0EASRG",
Def := S1E0DSRG,
Mvec := "Z1G".MVEC,
Tref := "Z1T".E0.SRG_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRH                                   **
//*******************************************************************************
//*ODIL_ID:77847_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:77847_1*
//
U "PERSO";
= #E0SRH.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:77847_2*
//
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
U "PERSO";
= #E0SRH.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:77847_3*
//
U "E0DASRH1";
U "E0DASRH2";
UN "E0DRSRH1";
UN "E0DRSRH2";
= #E0SRH.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:77847_4*
//
U "PERSO";
= #E0SRH.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:77847_5*
//
U(;
U "Z1G".E0.IPP;
U "IIT".E0.MP.MPT;
O "Z1G".E0.IPA;
);
U "PERSO";
= #E0SRH.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:77847_6*
//
UN "E0DASRH1";
UN "E0DASRH2";
U "E0DRSRH1";
U "E0DRSRH2";
= #E0SRH.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:77847_7*
//
L #NUM_MVT;
L 8;
==I;
= #E0SRH.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:77847_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #E0SRH (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "E0ERSRH",
Ormv := "E0EASRH",
Def := S1E0DSRH,
Mvec := "Z1G".MVEC,
Tref := "Z1T".E0.SRH_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:10386_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:10386_181*
//
U #E0CAD.MF.IA;
U #E0CAE.MF.IA;
U #E0CAF.MF.IA;
U #E0PLA.MF.IA;
U #E0SRB.MF.IA;
U #E0SRC.MF.IA;
U #E0SRG.MF.IA;
U #E0SRH.MF.IA;
U "PERSO";
= "Z1G".E0.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:10386_182*
//
U #E0CAD.MF.IR;
U #E0CAE.MF.IR;
U #E0CAF.MF.IR;
U #E0PLA.MF.IR;
U #E0SRB.MF.IR;
U #E0SRC.MF.IR;
U #E0SRG.MF.IR;
U #E0SRH.MF.IR;
U "PERSO";
= "Z1G".E0.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1E0"
VERSION : 0.1
"1_E0_MONTAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_E1_ROBOT"
TITLE =ROBOT E1 MANAGEMENT
//GESTION DU ROBOT E1
VERSION : 0.1
VAR
  E1ROBOT : BF_ROBOT;	//E1: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  E1SUIVI : BF_TCY_SUIV;	//E1: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  E1CODE : WORD;	//E1: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//E1: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//E1: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1E1DIV : INT;	//E1: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1E1TCP : INT;	//E1: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1E1TCT : INT;	//E1: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1E1NCY : INT;	//E1: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1E1NDR : WORD;	//E1: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1E1APP : BOOL;	//E1: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1E1APE : BOOL;	//E1: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1E1APF : BOOL;	//E1: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1E1ALR : BOOL;	//E1: OPERATOR CALL / APPEL OPERATEUR
  S1E1AR : BOOL;	//E1: STOP ROBOT / ARRET ROBOT
  S1E1ATT : BOOL;	//E1: ROBOT WAITING / ROBOT EN ATTENTE
  S1E1TOPCY : BOOL;	//E1: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1E1AIA : BOOL;	//E1: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1E1HPR : BOOL;	//E1: NOT IN SERVICE / HORS PRODUCTION
  S1E1DER : BOOL;	//E1: ROBOT DERIVE / DERIVE ROBOT
  S1E1DTC : BOOL;	//E1: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1E1DT2 : BOOL;	//E1: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  E1XCODE : BOOL;	//E1: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  E1CHGELEC : BF_RB_SERVICE;	//E1: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  E1RODAGE : BF_RB_SERVICE;	//E1: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  E1RAZROD : BOOL;	//E1: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  E1NBCHE : WORD;	//E1: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  E1MROD : WORD;	//E1: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  E1MROD2 : WORD;	//E1: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  E1NBROD : WORD;	//E1: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  E1ALRCF : WORD;	//E1: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  E1DEMCF : WORD;	//E1: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  E1DROD : BOOL;	//E1: TIP DRESS REQUEST / DEMANDE RODAGE
  E1ALROD : BOOL;	//E1: TIP DRESS ALARM / ALARME RODAGE
  S1E1ACFR : BOOL;	//E1: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1E1DCFR : BOOL;	//E1: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1E1AACE : BOOL;	//E1: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1E1ACE : BOOL;	//E1: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1E1DCE : BOOL;	//E1: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:11680_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:11680_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:11680_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:11680_1025*
//
U "PERSO";
U #S1E1TOPCY;
SPBNB _501;
L 1;
T #S1E1DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:11680_1026*
//
U #S1E1AR;
= L 1.0;
BLD 103;
U #S1E1ATT;
= L 1.1;
BLD 103;
U #S1E1TOPCY;
= L 1.2;
BLD 103;
CALL #E1SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1E1DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1E1TCP,
S_tct := #S1E1TCT,
S_numcyc := #S1E1NCY,
S_dtc := #S1E1DTC,
S_fint2 := #S1E1DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE E0                                  **
//*******************************************************************************
//*ODIL_ID:11659_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:11659_1005*
//
U "E1OR1";
U "PERSO";
= "Z1G".E1.ECHG_E0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE E0
//*ODIL_ID:11659_1006*
//
U(;
O "E1OR16";
O "E1REPLI";
);
U "PERSO";
= "Z1G".E1.ECHG_E0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:11680_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:11680_1009*
//
L 0;
T #E1CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:11680_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #E1XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:11659_1011_1*
//
U #E1XCODE;
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
SPBNB _502;
L 1;
T #E1CODE;
_502: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:11680_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:11680_1015*
//
U "Z1G".MCYRB;
U #E1DROD;
SPBNB _503;
L 253;
T #E1CODE;
_503: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:11680_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _504;
L 254;
T #E1CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:11680_1017*
//
U "Z1G".DRRB;
SPBNB _505;
L 255;
T #E1CODE;
_505: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:11680_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:11680_1019*
//
O "Z1G".MDV;
O "Z1G".E0.MDV;
= #E1ROBOT.Dever;
NETWORK
TITLE =ROBOT E1
//ROBOT E1
//*ODIL_ID:11680_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #E1ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #E1CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "E1RBMS1",
Iw_rbe2 := "E1RBMS2",
Iw_rbe3 := "E1RBMS3",
Iw_rbe4 := "E1RBMS4",
Iw_rbe5 := "E1RBMS5",
Iw_rbe6 := "E1RBMS6",
Def_rb := #S1E1APP,
Appel_op := #S1E1ALR,
S_ar_rb := #S1E1AR,
S_att_rb := #S1E1ATT,
S_top_cy := #S1E1TOPCY,
S_hpr := #S1E1HPR,
S_de := #S1E1DER,
S_ai := #S1E1AIA,
S_ape := #S1E1APE,
S_apf := #S1E1APF,
S_com := #S1E1NDR,
Qw_rbs1 := "E1RBME1",
Qw_rbs2 := "E1RBME2",
Qw_rbs3 := "E1RBME3",
Qw_rbs4 := "E1RBME4",
Qw_rbs5 := "E1RBME5",
Qw_rbs6 := "E1RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:11680_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:11680_1022*
//
L 0;
T "E1RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:11680_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "E1MANU";
= L 1.0;
U L 1.0;
U "Z1G".E0.ECHG_E1.AT1;
= "E1EV1";
U L 1.0;
U "Z1G".E0.ECHG_E1.ART1;
= "E1EV2";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:11680_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:11680_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:11680_1032*
//
L #E1NBROD;
L #E1ALRCF;
>I;
= #S1E1ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:11680_1033*
//
L #E1NBROD;
L #E1DEMCF;
>I;
= #S1E1DCFR;
= "Z1G".E1.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:11680_1034*
//
U #E1RAZROD;
= L 0.0;
U L 0.0;
SPBNB _506;
L 0;
T #E1NBROD;
_506: NOP 0;
U L 0.0;
BLD 102;
R #E1RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:11680_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #E1RODAGE (
Iw_rbe6 := "E1RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #E1DROD,
Alarm := #E1ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #E1NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:11680_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:11680_1037*
//
U(;
L #E1MROD;
L "Z1G".CHELM.EALR;
-I;
T #E1MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".E1.NBCHE;
L #E1MROD2;
>=I;
);
= #S1E1AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:11680_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #E1CHGELEC (
Iw_rbe6 := "E1RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1E1DCE,
Alarm := #S1E1ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #E1NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:11680_1039*
//
U #S1E1DCE;
= "Z1G".E1.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:11680_1040*
//
U(;
O "Z1G".E1.DCHE;
O "Z1G".E1.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".E1.PCHE;
S "Z1G".E1.CCAS;
U "Z1G".E1.CCAS;
UN "Z1G".E1.PCHE;
R "Z1G".E1.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:11680_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:11680_1042*
//
U "Z1G".E1.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".E1.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:11680_1043*
//
U "Z1G".E1.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".E1.CCAS;
= "Z1G".E1.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1E1"
VERSION : 0.1
"1_E1_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_E2_ROBOT"
TITLE =ROBOT E2 MANAGEMENT
//GESTION DU ROBOT E2
VERSION : 0.1
VAR
  E2ROBOT : BF_ROBOT;	//E2: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  E2SUIVI : BF_TCY_SUIV;	//E2: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  E2CODE : WORD;	//E2: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//E2: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//E2: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1E2DIV : INT;	//E2: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1E2TCP : INT;	//E2: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1E2TCT : INT;	//E2: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1E2NCY : INT;	//E2: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1E2NDR : WORD;	//E2: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1E2APP : BOOL;	//E2: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1E2APE : BOOL;	//E2: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1E2APF : BOOL;	//E2: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1E2ALR : BOOL;	//E2: OPERATOR CALL / APPEL OPERATEUR
  S1E2AR : BOOL;	//E2: STOP ROBOT / ARRET ROBOT
  S1E2ATT : BOOL;	//E2: ROBOT WAITING / ROBOT EN ATTENTE
  S1E2TOPCY : BOOL;	//E2: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1E2AIA : BOOL;	//E2: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1E2HPR : BOOL;	//E2: NOT IN SERVICE / HORS PRODUCTION
  S1E2DER : BOOL;	//E2: ROBOT DERIVE / DERIVE ROBOT
  S1E2DTC : BOOL;	//E2: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1E2DT2 : BOOL;	//E2: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  E2XCODE : BOOL;	//E2: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  E2CHGELEC : BF_RB_SERVICE;	//E2: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  E2RODAGE : BF_RB_SERVICE;	//E2: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  E2RAZROD : BOOL;	//E2: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  E2NBCHE : WORD;	//E2: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  E2MROD : WORD;	//E2: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  E2MROD2 : WORD;	//E2: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  E2NBROD : WORD;	//E2: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  E2ALRCF : WORD;	//E2: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  E2DEMCF : WORD;	//E2: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  E2DROD : BOOL;	//E2: TIP DRESS REQUEST / DEMANDE RODAGE
  E2ALROD : BOOL;	//E2: TIP DRESS ALARM / ALARME RODAGE
  S1E2ACFR : BOOL;	//E2: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1E2DCFR : BOOL;	//E2: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1E2AACE : BOOL;	//E2: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1E2ACE : BOOL;	//E2: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1E2DCE : BOOL;	//E2: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:12734_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:12734_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:12734_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:12734_1025*
//
U "PERSO";
U #S1E2TOPCY;
SPBNB _501;
L 1;
T #S1E2DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:12734_1026*
//
U #S1E2AR;
= L 1.0;
BLD 103;
U #S1E2ATT;
= L 1.1;
BLD 103;
U #S1E2TOPCY;
= L 1.2;
BLD 103;
CALL #E2SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1E2DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1E2TCP,
S_tct := #S1E2TCT,
S_numcyc := #S1E2NCY,
S_dtc := #S1E2DTC,
S_fint2 := #S1E2DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE E0                                  **
//*******************************************************************************
//*ODIL_ID:11659_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:11659_1005*
//
U "E2OR1";
U "PERSO";
= "Z1G".E2.ECHG_E0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE E0
//*ODIL_ID:11659_1006*
//
U(;
O "E2OR16";
O "E2REPLI";
);
U "PERSO";
= "Z1G".E2.ECHG_E0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:12734_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:12734_1009*
//
L 0;
T #E2CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:12734_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #E2XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:11659_1011_1*
//
U #E2XCODE;
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
SPBNB _502;
L 1;
T #E2CODE;
_502: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:12734_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:12734_1015*
//
U "Z1G".MCYRB;
U #E2DROD;
SPBNB _503;
L 253;
T #E2CODE;
_503: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:12734_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _504;
L 254;
T #E2CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:12734_1017*
//
U "Z1G".DRRB;
SPBNB _505;
L 255;
T #E2CODE;
_505: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:12734_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:12734_1019*
//
O "Z1G".MDV;
O "Z1G".E0.MDV;
= #E2ROBOT.Dever;
NETWORK
TITLE =ROBOT E2
//ROBOT E2
//*ODIL_ID:12734_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #E2ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #E2CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "E2RBMS1",
Iw_rbe2 := "E2RBMS2",
Iw_rbe3 := "E2RBMS3",
Iw_rbe4 := "E2RBMS4",
Iw_rbe5 := "E2RBMS5",
Iw_rbe6 := "E2RBMS6",
Def_rb := #S1E2APP,
Appel_op := #S1E2ALR,
S_ar_rb := #S1E2AR,
S_att_rb := #S1E2ATT,
S_top_cy := #S1E2TOPCY,
S_hpr := #S1E2HPR,
S_de := #S1E2DER,
S_ai := #S1E2AIA,
S_ape := #S1E2APE,
S_apf := #S1E2APF,
S_com := #S1E2NDR,
Qw_rbs1 := "E2RBME1",
Qw_rbs2 := "E2RBME2",
Qw_rbs3 := "E2RBME3",
Qw_rbs4 := "E2RBME4",
Qw_rbs5 := "E2RBME5",
Qw_rbs6 := "E2RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:12734_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:12734_1022*
//
L 0;
T "E2RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:12734_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "E2MANU";
= L 1.0;
U L 1.0;
U "Z1G".E0.ECHG_E2.AT1;
= "E2EV1";
U L 1.0;
U "Z1G".E0.ECHG_E2.ART1;
= "E2EV2";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:12734_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:12734_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:12734_1032*
//
L #E2NBROD;
L #E2ALRCF;
>I;
= #S1E2ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:12734_1033*
//
L #E2NBROD;
L #E2DEMCF;
>I;
= #S1E2DCFR;
= "Z1G".E2.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:12734_1034*
//
U #E2RAZROD;
= L 0.0;
U L 0.0;
SPBNB _506;
L 0;
T #E2NBROD;
_506: NOP 0;
U L 0.0;
BLD 102;
R #E2RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:12734_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #E2RODAGE (
Iw_rbe6 := "E2RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #E2DROD,
Alarm := #E2ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #E2NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:12734_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:12734_1037*
//
U(;
L #E2MROD;
L "Z1G".CHELM.EALR;
-I;
T #E2MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".E2.NBCHE;
L #E2MROD2;
>=I;
);
= #S1E2AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:12734_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #E2CHGELEC (
Iw_rbe6 := "E2RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1E2DCE,
Alarm := #S1E2ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #E2NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:12734_1039*
//
U #S1E2DCE;
= "Z1G".E2.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:12734_1040*
//
U(;
O "Z1G".E2.DCHE;
O "Z1G".E2.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".E2.PCHE;
S "Z1G".E2.CCAS;
U "Z1G".E2.CCAS;
UN "Z1G".E2.PCHE;
R "Z1G".E2.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:12734_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:12734_1042*
//
U "Z1G".E2.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".E2.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:12734_1043*
//
U "Z1G".E2.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".E2.CCAS;
= "Z1G".E2.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1E2"
VERSION : 0.1
"1_E2_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_F0_ROBOT"
TITLE =ROBOT F0 MANAGEMENT
//GESTION DU ROBOT F0
VERSION : 0.1
VAR
  F0ROBOT : BF_ROBOT;	//F0: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  F0SUIVI : BF_TCY_SUIV;	//F0: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  F0CODE : WORD;	//F0: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//F0: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//F0: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1F0DIV : INT;	//F0: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1F0TCP : INT;	//F0: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1F0TCT : INT;	//F0: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1F0NCY : INT;	//F0: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1F0NDR : WORD;	//F0: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1F0APP : BOOL;	//F0: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1F0APE : BOOL;	//F0: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1F0APF : BOOL;	//F0: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1F0ALR : BOOL;	//F0: OPERATOR CALL / APPEL OPERATEUR
  S1F0AR : BOOL;	//F0: STOP ROBOT / ARRET ROBOT
  S1F0ATT : BOOL;	//F0: ROBOT WAITING / ROBOT EN ATTENTE
  S1F0TOPCY : BOOL;	//F0: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1F0AIA : BOOL;	//F0: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1F0HPR : BOOL;	//F0: NOT IN SERVICE / HORS PRODUCTION
  S1F0DER : BOOL;	//F0: ROBOT DERIVE / DERIVE ROBOT
  S1F0DTC : BOOL;	//F0: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1F0DT2 : BOOL;	//F0: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  F0XCODE : BOOL;	//F0: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  F0CHGELEC : BF_RB_SERVICE;	//F0: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  F0RODAGE : BF_RB_SERVICE;	//F0: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  F0RAZROD : BOOL;	//F0: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  F0NBCHE : WORD;	//F0: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  F0MROD : WORD;	//F0: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  F0MROD2 : WORD;	//F0: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  F0NBROD : WORD;	//F0: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  F0ALRCF : WORD;	//F0: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  F0DEMCF : WORD;	//F0: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  F0DROD : BOOL;	//F0: TIP DRESS REQUEST / DEMANDE RODAGE
  F0ALROD : BOOL;	//F0: TIP DRESS ALARM / ALARME RODAGE
  S1F0ACFR : BOOL;	//F0: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1F0DCFR : BOOL;	//F0: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1F0AACE : BOOL;	//F0: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1F0ACE : BOOL;	//F0: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1F0DCE : BOOL;	//F0: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:13788_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:13788_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:13788_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:13788_1025*
//
U "PERSO";
U #S1F0TOPCY;
SPBNB _501;
L 1;
T #S1F0DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:13788_1026*
//
U #S1F0AR;
= L 1.0;
BLD 103;
U #S1F0ATT;
= L 1.1;
BLD 103;
U #S1F0TOPCY;
= L 1.2;
BLD 103;
CALL #F0SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1F0DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1F0TCP,
S_tct := #S1F0TCT,
S_numcyc := #S1F0NCY,
S_dtc := #S1F0DTC,
S_fint2 := #S1F0DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE E0                                  **
//*******************************************************************************
//*ODIL_ID:11659_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:11659_1005*
//
U "F0OR1";
U "PERSO";
= "Z1G".F0.ECHG_E0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE E0
//*ODIL_ID:11659_1006*
//
U(;
O "F0OR16";
O "F0REPLI";
);
U "PERSO";
= "Z1G".F0.ECHG_E0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE F9                                  **
//*******************************************************************************
//*ODIL_ID:83351_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:83351_1005*
//
U "F0OR1";
U "PERSO";
= "Z1G".F0.ECHG_F9.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE F9
//*ODIL_ID:83351_1006*
//
U(;
O "F0OR16";
O "F0REPLI";
);
U "PERSO";
= "Z1G".F0.ECHG_F9.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE G0                                  **
//*******************************************************************************
//*ODIL_ID:16115_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:16115_1005*
//
U "F0OR1";
U "PERSO";
= "Z1G".F0.ECHG_G0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE G0
//*ODIL_ID:16115_1006*
//
U(;
O "F0OR16";
O "F0REPLI";
);
U "PERSO";
= "Z1G".F0.ECHG_G0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:13788_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:13788_1009*
//
L 0;
T #F0CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:13788_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #F0XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:11659_1011_1*
//
U #F0XCODE;
U "Z1G".E0.IPP;
UN "IIT".E0.MP.MPT;
SPBNB _502;
L 1;
T #F0CODE;
_502: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 2
//CYCLE ROBOT NUMERO 2
//*ODIL_ID:16115_1011_2*
//
U #F0XCODE;
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
SPBNB _503;
L 2;
T #F0CODE;
_503: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 3
//CYCLE ROBOT NUMERO 3
//*ODIL_ID:83351_1011_3*
//
U #F0XCODE;
U "Z1G".F9.IPP;
UN "IIT".F9.MP.MPT;
SPBNB _504;
L 3;
T #F0CODE;
_504: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:13788_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:13788_1015*
//
U "Z1G".MCYRB;
U #F0DROD;
SPBNB _505;
L 253;
T #F0CODE;
_505: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:13788_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _506;
L 254;
T #F0CODE;
_506: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:13788_1017*
//
U "Z1G".DRRB;
SPBNB _507;
L 255;
T #F0CODE;
_507: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:13788_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:13788_1019*
//
O "Z1G".MDV;
O "Z1G".E0.MDV;
O "Z1G".G0.MDV;
O "Z1G".F9.MDV;
= #F0ROBOT.Dever;
NETWORK
TITLE =ROBOT F0
//ROBOT F0
//*ODIL_ID:13788_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #F0ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #F0CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "F0RBMS1",
Iw_rbe2 := "F0RBMS2",
Iw_rbe3 := "F0RBMS3",
Iw_rbe4 := "F0RBMS4",
Iw_rbe5 := "F0RBMS5",
Iw_rbe6 := "F0RBMS6",
Def_rb := #S1F0APP,
Appel_op := #S1F0ALR,
S_ar_rb := #S1F0AR,
S_att_rb := #S1F0ATT,
S_top_cy := #S1F0TOPCY,
S_hpr := #S1F0HPR,
S_de := #S1F0DER,
S_ai := #S1F0AIA,
S_ape := #S1F0APE,
S_apf := #S1F0APF,
S_com := #S1F0NDR,
Qw_rbs1 := "F0RBME1",
Qw_rbs2 := "F0RBME2",
Qw_rbs3 := "F0RBME3",
Qw_rbs4 := "F0RBME4",
Qw_rbs5 := "F0RBME5",
Qw_rbs6 := "F0RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:13788_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:13788_1022*
//
L 0;
T "F0RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:13788_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "F0MANU";
= L 1.0;
U L 1.0;
U "Z1G".E0.ECHG_F0.AT1;
= "F0EV1";
U L 1.0;
U "Z1G".E0.ECHG_F0.ART1;
= "F0EV2";
U L 1.0;
U "Z1G".F9.ECHG_F0.AT1;
= "F0EV3";
U L 1.0;
U "Z1G".F9.ECHG_F0.ART1;
= "F0EV4";
U L 1.0;
U "Z1G".G0.ECHG_F0.AT1;
= "F0EV5";
U L 1.0;
U "Z1G".G0.ECHG_F0.ART1;
= "F0EV6";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:13788_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:13788_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:13788_1032*
//
L #F0NBROD;
L #F0ALRCF;
>I;
= #S1F0ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:13788_1033*
//
L #F0NBROD;
L #F0DEMCF;
>I;
= #S1F0DCFR;
= "Z1G".F0.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:13788_1034*
//
U #F0RAZROD;
= L 0.0;
U L 0.0;
SPBNB _508;
L 0;
T #F0NBROD;
_508: NOP 0;
U L 0.0;
BLD 102;
R #F0RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:13788_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #F0RODAGE (
Iw_rbe6 := "F0RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #F0DROD,
Alarm := #F0ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #F0NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:13788_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:13788_1037*
//
U(;
L #F0MROD;
L "Z1G".CHELM.EALR;
-I;
T #F0MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".F0.NBCHE;
L #F0MROD2;
>=I;
);
= #S1F0AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:13788_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #F0CHGELEC (
Iw_rbe6 := "F0RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1F0DCE,
Alarm := #S1F0ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #F0NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:13788_1039*
//
U #S1F0DCE;
= "Z1G".F0.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:13788_1040*
//
U(;
O "Z1G".F0.DCHE;
O "Z1G".F0.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".F0.PCHE;
S "Z1G".F0.CCAS;
U "Z1G".F0.CCAS;
UN "Z1G".F0.PCHE;
R "Z1G".F0.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:13788_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:13788_1042*
//
U "Z1G".F0.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".F0.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:13788_1043*
//
U "Z1G".F0.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".F0.CCAS;
= "Z1G".F0.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1F0"
VERSION : 0.1
"1_F0_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_F9_MONTAGE"
TITLE =MONTAGE
VERSION : 0.1
VAR
  S1F9DIV : INT;	//F9 - DIVERSITY / DIVERSITE
  F01_TF_TP_F9 : BF_TF_TP;	//F9 - TRANSFER PART WORD: F01 -> F9 / TRANSFERT TABLE PIECE F01 -> F9
  F9RETVAL : INT;	//F9 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  F9TDFPC : TON;	//F9 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1F9DPIEC : BOOL;	//F9 - PART FAULT / DEFAUT PIECE
  NUM_MVT : INT;	//F9 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:82078_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:82078_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:82078_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:82078_217*
//
UN "IIT".F9.MS.MSP;
SPBNB _501;
L 0;
T #S1F9DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:82078_218*
//
U "IIT".F9.MS.MSP;
SPBNB _502;
L 1;
T #S1F9DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:82078_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: F01 -> F9
//TRANSFERT DE LA TABLE PIECE F01 VERS F9
//*ODIL_ID:55464_20*
//
U "IIT".F01.MS.MSP;
UN "IIT".F9.MS.MSP;
U "IIT".F9.MP.MPT;
= L 4.0;
BLD 103;
CALL #F01_TF_TP_F9 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".F01,
Dest := "IIT".F9);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:82078_55*
//

NETWORK
TITLE =PART PRESENCE MEMORY
//MEMOIRE PIECE PRESENTE
//*ODIL_ID:82078_58*
//
U "PERSO";
UN "Z1G".F9.IAP;
= "IIT".F9.MP.MPP;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:82078_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:82078_82*
//
U "PERSO";
= "Z1G".F9.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:82078_83*
//
U "PERSO";
= "Z1G".F9.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:82078_84*
//
U "Z1G".F9.IAP;
UN "IIT".F9.MS.MSP;
UN "IIT".F9.MP.MPP;
= "Z1G".F9.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:82078_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".F9.IPP;
UN "Z1G".F9.IPA;
= L 4.0;
BLD 103;
CALL #F9TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:82078_86*
//
U #F9TDFPC.Q;
S #S1F9DPIEC;
U(;
O "Z1G".F9.IPP;
O "Z1G".F9.IPA;
);
R #S1F9DPIEC;
NOP 0;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT F0                      **
//******************************************************************************
//*ODIL_ID:14818_190_F0*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:14818_19F0*
//
U "IIT".F9.MP.MPP;
U "IIT".F9.MP.MPAT;
U "Z1G".F9.IPP;
UN "IIT".F9_TT.MFT.MFT1;
UN "Z1G".F0.ECHG_F9.FT1;
= "Z1G".F9.ECHG_F0.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:14818_20F0*
//
U "IIT".F9.MP.MPP;
U "IIT".F9.MP.MPAT;
U "Z1G".F9.IPP;
U "IIT".F9_TT.MFT.MFT1;
UN "Z1G".F0.ECHG_F9.SA;
= "Z1G".F9.ECHG_F0.ART1;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:82078_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:82078_177*
//
U "IIT".F9_TT.MFT.MFT1;
U "IIT".F9_TT.MFT.MFT2;
U "PERSO";
S "IIT".F9.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:82078_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1F9"
VERSION : 0.1
"1_F9_MONTAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_G0_MONTAGE"
TITLE =MONTAGE
VERSION : 0.1
VAR
  S1G0DIV : INT;	//G0 - DIVERSITY / DIVERSITE
  F01_TF_TP_G0 : BF_TF_TP;	//G0 - TRANSFER PART WORD: F01 -> G0 / TRANSFERT TABLE PIECE F01 -> G0
  U01_TF_TP_G0 : BF_TF_TP;	//G0 - TRANSFER PART WORD: U01 -> G0 / TRANSFERT TABLE PIECE U01 -> G0
  U02_TF_TP_G0 : BF_TF_TP;	//G0 - TRANSFER PART WORD: U02 -> G0 / TRANSFERT TABLE PIECE U02 -> G0
  G0RETVAL : INT;	//G0 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  G0TDFPC : TON;	//G0 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1G0DPIEC : BOOL;	//G0 - PART FAULT / DEFAUT PIECE
  G0CAA : BF_MOUV2P1;	//TYPE_ELEMENT CAA
  S1G0DCAA : BOOL;	//CAA MOVEMENT FAULT / DEFAUT MOUVEMENT CAA
  G0CAC : BF_MOUV2P1;	//TYPE_ELEMENT CAC
  S1G0DCAC : BOOL;	//CAC MOVEMENT FAULT / DEFAUT MOUVEMENT CAC
  G0PLE : BF_MOUV2P1;	//TYPE_ELEMENT PLE
  S1G0DPLE : BOOL;	//PLE MOVEMENT FAULT / DEFAUT MOUVEMENT PLE
  G0PLF : BF_MOUV2P1;	//TYPE_ELEMENT PLF
  S1G0DPLF : BOOL;	//PLF MOVEMENT FAULT / DEFAUT MOUVEMENT PLF
  G0PLI : BF_MOUV2P1;	//TYPE_ELEMENT PLI
  S1G0DPLI : BOOL;	//PLI MOVEMENT FAULT / DEFAUT MOUVEMENT PLI
  G0SRB : BF_MOUV2P1;	//TYPE_ELEMENT SRB
  S1G0DSRB : BOOL;	//SRB MOVEMENT FAULT / DEFAUT MOUVEMENT SRB
  G0SRD : BF_MOUV2P1;	//TYPE_ELEMENT SRD
  S1G0DSRD : BOOL;	//SRD MOVEMENT FAULT / DEFAUT MOUVEMENT SRD
  G0SRG : BF_MOUV2P1;	//TYPE_ELEMENT SRG
  S1G0DSRG : BOOL;	//SRG MOVEMENT FAULT / DEFAUT MOUVEMENT SRG
  G0SRH : BF_MOUV2P1;	//TYPE_ELEMENT SRH
  S1G0DSRH : BOOL;	//SRH MOVEMENT FAULT / DEFAUT MOUVEMENT SRH
  G01_LIEN : WORD;	//LINK BETWEEN POSITIONS ORDERS / LIEN ENTRE LES COMMANDES DE POSITIONS
  NUM_MVT : INT;	//G0 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:14842_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:14842_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:14842_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:14842_217*
//
UN "IIT".G0.MS.MSP;
SPBNB _501;
L 0;
T #S1G0DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:14842_218*
//
U "IIT".G0.MS.MSP;
SPBNB _502;
L 1;
T #S1G0DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:14842_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: F01 -> G0
//TRANSFERT DE LA TABLE PIECE F01 VERS G0
//*ODIL_ID:55464_20*
//
U "IIT".F01.MS.MSP;
UN "IIT".G0.MS.MSP;
U "IIT".G0.MP.MPT;
= L 4.0;
BLD 103;
CALL #F01_TF_TP_G0 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".F01,
Dest := "IIT".G0);
NOP 0;
NETWORK
TITLE =TRANSFER PART TABLE: U01 -> G0
//TRANSFERT DE LA TABLE PIECE U01 VERS G0
//*ODIL_ID:56827_20*
//
U "IIT".U01.MS.MSP;
UN "IIT".G0.MS.MSP;
U "IIT".G0.MP.MPT;
= L 4.0;
BLD 103;
CALL #U01_TF_TP_G0 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".U01,
Dest := "IIT".G0);
NOP 0;
NETWORK
TITLE =TRANSFER PART TABLE: U02 -> G0
//TRANSFERT DE LA TABLE PIECE U02 VERS G0
//*ODIL_ID:84879_20*
//
U "IIT".U02.MS.MSP;
UN "IIT".G0.MS.MSP;
U "IIT".G0.MP.MPT;
= L 4.0;
BLD 103;
CALL #U02_TF_TP_G0 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".U02,
Dest := "IIT".G0);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:14842_55*
//

NETWORK
TITLE =PART MEMORY TO MATCH / TO EVACUATE
//MEMOIRES PIECE A MARIER / A EVACUER
//*ODIL_ID:14842_308*
//
U "IIT".G0.MP.MPP;
= L 0.0;
U L 0.0;
U "Z1G".G0M.DEC_MAR.MAR_OK;
UN "IIT".G0.MP.MPAE;
= "IIT".G0.MP.MPAM;
U L 0.0;
U "Z1G".G0M.DEC_MAR.SORT_G0;
UN "IIT".G0.MP.MPAM;
= "IIT".G0.MP.MPAE;
NETWORK
TITLE =PART PRESENCE MEMORY
//MEMOIRE PIECE PRESENTE
//*ODIL_ID:14842_58*
//
U "PERSO";
UN "Z1G".G0.IAP;
= "IIT".G0.MP.MPP;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:14842_81*
//

NETWORK
TITLE =AUXILIARY PRESENT PART INFORMATION 1 IN STAGE
//AUXILLIAIRE INFORMATION PIECE PRESENTE AU POSTE
//"PERSO": HAD STAGE SENSOR FOR DIVERSITY 1
//*ODIL_ID:79760_91*
//
UN "Z1G".G0.MDV;
U "G0DPP1";
UN "G0DPP2";
UN "G0DPP3";
UN "G0DPP4";
UN "G0DPP5";
UN "G0DPP6";
UN "G0DPP7";
UN "G0DPP8";
UN "G0DPP9";
UN "G0DPP10";
UN "G0DPP11";
UN "G0DPP12";
UN "G0DPP13";
UN "G0DPP14";
O;
U "Z1G".G0.MDV;
U "Z1G".G0.IAP;
= "Z1G".G0.XIPP[1];
NETWORK
TITLE =PRESENCE PART INFORMATION TYPE 1
//INFORMATION PIECE PRESENTE TYPE 1
//"PERSO": REPLACE IN2 VALUE WITH CORRECT PROCESS CODE ACCORDING TO THE
//CORRESPONDING VEHICULE
//*ODIL_ID:79760_111*
//
U "IIT".G0.MS.MSP;
U "Z1G".G0.XIPP[1];
U "IIT".G0.MP.MPP;
U "PERSO";
= "Z1G".G0.IPP1;
NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:14842_82*
//
U "PERSO";
= "Z1G".G0.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:14842_83*
//
UN "G0DPP1";
UN "G0DPP2";
UN "G0DPP3";
UN "G0DPP4";
UN "G0DPP5";
UN "G0DPP6";
UN "G0DPP7";
UN "G0DPP8";
UN "G0DPP9";
UN "G0DPP10";
UN "G0DPP11";
UN "G0DPP12";
UN "G0DPP13";
UN "G0DPP14";
= "Z1G".G0.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:14842_84*
//
U "Z1G".G0.IAP;
UN "IIT".G0.MS.MSP;
UN "IIT".G0.MP.MPP;
= "Z1G".G0.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:14842_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".G0.IPP;
UN "Z1G".G0.IPA;
= L 4.0;
BLD 103;
CALL #G0TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:14842_86*
//
U #G0TDFPC.Q;
S #S1G0DPIEC;
U(;
O "Z1G".G0.IPP;
O "Z1G".G0.IPA;
);
R #S1G0DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                      RECYCLING POINT EXCHANGE   03.13
//**
//*******************************************************************************
//*ODIL_ID:14842_270*
//

NETWORK
TITLE =COMPARE AUTORIZATION
//AUTORISATION DE COMPARAISON
//*ODIL_ID:14842_271*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPT;
UN "Z1G".G0R.MEMDEC.MDEC;
U "PERSO";
UN "Z1G".MDV;
= "Z1G".G0.ECHG_G0R.AC;
NETWORK
TITLE =ANSWER AUTORIZATION
//AUTORISATION DE REPONSE
//*ODIL_ID:14842_272*
//
U(;
U "Z1G".G0R.MEMDEC.MDFNOR;
UN "IIT".G0.MS.MSP;
O;
U(;
O "Z1G".G0R.MEMDEC.MDINJ;
O "Z1G".G0R.MEMDEC.MDPMQI;
O "Z1G".G0R.MEMDEC.MDEDI;
O "Z1G".G0R.MEMDEC.MDMQDI;
O "Z1G".G0R.MEMDEC.DMQSCV;
);
U "PERSO";
);
UN "Z1G".MDV;
= "Z1G".G0.ECHG_G0R.AR;
NETWORK
TITLE =
//*******************************************************************************
//**                       MATCHING POINT EXCHANGES 03.61                      **
//*******************************************************************************
//*ODIL_ID:14842_305*
//

NETWORK
TITLE =AUTHORIZATION OF NEUTRALIZATION
//AUTORISATION DE NEUTRALISATION
//*ODIL_ID:14842_306*
//
U "Z1G".G0.IPA;
= "Z1G".G0.ECHG_G0M.AN;
NETWORK
TITLE =AUTHORIZATION OF MARIAGE
//AUTORISATION DE MARIAGE
//*ODIL_ID:14842_307*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPAM;
UN "IIT".G0.MP.MPAE;
= "Z1G".G0.ECHG_G0M.AM;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT F0                      **
//******************************************************************************
//*ODIL_ID:14818_190_F0*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:14818_19F0*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
UN "IIT".G0_TT.MFT.MFT1;
UN "Z1G".F0.ECHG_G0.FT1;
= "Z1G".G0.ECHG_F0.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:14818_20F0*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
U "IIT".G0_TT.MFT.MFT1;
UN "Z1G".F0.ECHG_G0.SA;
= "Z1G".G0.ECHG_F0.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT G1                      **
//******************************************************************************
//*ODIL_ID:17166_190_G1*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:17166_19G1*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
UN "IIT".G0_TT.MFT.MFT1;
UN "Z1G".G1.ECHG_G0.FT1;
= "Z1G".G0.ECHG_G1.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:17166_20G1*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
U "IIT".G0_TT.MFT.MFT1;
UN "Z1G".G1.ECHG_G0.SA;
= "Z1G".G0.ECHG_G1.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT G2                      **
//******************************************************************************
//*ODIL_ID:19274_190_G2*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:19274_19G2*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
UN "IIT".G0_TT.MFT.MFT1;
UN "Z1G".G2.ECHG_G0.FT1;
= "Z1G".G0.ECHG_G2.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:19274_20G2*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
U "IIT".G0_TT.MFT.MFT1;
UN "Z1G".G2.ECHG_G0.SA;
= "Z1G".G0.ECHG_G2.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT G3                      **
//******************************************************************************
//*ODIL_ID:18220_190_G3*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:18220_19G3*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
UN "IIT".G0_TT.MFT.MFT1;
UN "Z1G".G3.ECHG_G0.FT1;
= "Z1G".G0.ECHG_G3.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:18220_20G3*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
U "IIT".G0_TT.MFT.MFT1;
UN "Z1G".G3.ECHG_G0.SA;
= "Z1G".G0.ECHG_G3.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT G4                      **
//******************************************************************************
//*ODIL_ID:20328_190_G4*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:20328_19G4*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
UN "IIT".G0_TT.MFT.MFT1;
UN "Z1G".G4.ECHG_G0.FT1;
= "Z1G".G0.ECHG_G4.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:20328_20G4*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
U "IIT".G0_TT.MFT.MFT1;
UN "Z1G".G4.ECHG_G0.SA;
= "Z1G".G0.ECHG_G4.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT H0                      **
//******************************************************************************
//*ODIL_ID:21382_190_H0*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:21382_19H0*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
UN "IIT".G0_TT.MFT.MFT1;
UN "Z1G".H0.ECHG_G0.FT1;
= "Z1G".G0.ECHG_H0.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:21382_20H0*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
U "IIT".G0_TT.MFT.MFT1;
UN "Z1G".H0.ECHG_G0.SA;
= "Z1G".G0.ECHG_H0.ART1;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT U0                      **
//******************************************************************************
//*ODIL_ID:22436_190_U0*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:22436_19U0*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
UN "IIT".G0_TT.MFT.MFT1;
UN "Z1G".U0.ECHG_G0.FT1;
= "Z1G".G0.ECHG_U0.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:22436_20U0*
//
U "IIT".G0.MP.MPP;
U "IIT".G0.MP.MPAT;
U "Z1G".G0.IPP;
U "IIT".G0_TT.MFT.MFT1;
UN "Z1G".U0.ECHG_G0.SA;
= "Z1G".G0.ECHG_U0.ART1;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:14842_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:14842_177*
//
U "IIT".G0_TT.MFT.MFT1;
U "IIT".G0_TT.MFT.MFT2;
U "PERSO";
S "IIT".G0.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:14842_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:14842_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 115;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         CAA                                   **
//*******************************************************************************
//*ODIL_ID:78210_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:78210_1*
//
U "PERSO";
= #G0CAA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:78210_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0CAA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:78210_3*
//
U "G0DACAA1";
UN "G0DRCAA1";
= #G0CAA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:78210_4*
//
U "PERSO";
= #G0CAA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:78210_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0CAA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:78210_6*
//
UN "G0DACAA1";
U "G0DRCAA1";
= #G0CAA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:78210_7*
//
L #NUM_MVT;
L 4;
==I;
= #G0CAA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:78210_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0CAA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0EACAA",
Ormv := "G0ERCAA",
Def := S1G0DCAA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.CAA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         CAC                                   **
//*******************************************************************************
//*ODIL_ID:78548_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:78548_1*
//
U "PERSO";
= #G0CAC.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:78548_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0CAC.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:78548_3*
//
U "G0DACAC1";
U "G0DACAC2";
UN "G0DRCAC1";
UN "G0DRCAC2";
= #G0CAC.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:78548_4*
//
U "PERSO";
= #G0CAC.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:78548_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0CAC.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:78548_6*
//
UN "G0DACAC1";
UN "G0DACAC2";
U "G0DRCAC1";
U "G0DRCAC2";
= #G0CAC.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:78548_7*
//
L #NUM_MVT;
L 1;
==I;
= #G0CAC.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:78548_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0CAC (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0EACAC",
Ormv := "G0ERCAC",
Def := S1G0DCAC,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.CAC_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLE                                   **
//*******************************************************************************
//*ODIL_ID:78886_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:78886_1*
//
U "PERSO";
= #G0PLE.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:78886_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0PLE.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:78886_3*
//
U "G0DAPLE1";
U "G0DAPLE2";
U "G0DAPLE3";
U "G0DAPLE4";
UN "G0DRPLE1";
UN "G0DRPLE2";
UN "G0DRPLE3";
UN "G0DRPLE4";
= #G0PLE.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:78886_4*
//
U "PERSO";
= #G0PLE.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:78886_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0PLE.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:78886_6*
//
UN "G0DAPLE1";
UN "G0DAPLE2";
UN "G0DAPLE3";
UN "G0DAPLE4";
U "G0DRPLE1";
U "G0DRPLE2";
U "G0DRPLE3";
U "G0DRPLE4";
= #G0PLE.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:78886_7*
//
L #NUM_MVT;
L 5;
==I;
= #G0PLE.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:78886_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0PLE (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0EAPLE",
Ormv := "G0ERPLE",
Def := S1G0DPLE,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.PLE_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLF                                   **
//*******************************************************************************
//*ODIL_ID:79059_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:79059_1*
//
U "PERSO";
= #G0PLF.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:79059_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0PLF.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:79059_3*
//
U "G0DAPLF1";
U "G0DAPLF2";
U "G0DAPLF3";
UN "G0DRPLF1";
UN "G0DRPLF2";
UN "G0DRPLF3";
= #G0PLF.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:79059_4*
//
U "PERSO";
= #G0PLF.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:79059_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0PLF.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:79059_6*
//
UN "G0DAPLF1";
UN "G0DAPLF2";
UN "G0DAPLF3";
U "G0DRPLF1";
U "G0DRPLF2";
U "G0DRPLF3";
= #G0PLF.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:79059_7*
//
L #NUM_MVT;
L 6;
==I;
= #G0PLF.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:79059_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0PLF (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0EAPLF",
Ormv := "G0ERPLF",
Def := S1G0DPLF,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.PLF_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLI                                   **
//*******************************************************************************
//*ODIL_ID:79576_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:79576_1*
//
U "PERSO";
= #G0PLI.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:79576_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0PLI.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:79576_3*
//
U "G0DAPLI1";
U "G0DAPLI2";
UN "G0DRPLI1";
UN "G0DRPLI2";
= #G0PLI.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:79576_4*
//
U "PERSO";
= #G0PLI.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:79576_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0PLI.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:79576_6*
//
UN "G0DAPLI1";
UN "G0DAPLI2";
U "G0DRPLI1";
U "G0DRPLI2";
= #G0PLI.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:79576_7*
//
L #NUM_MVT;
L 9;
==I;
= #G0PLI.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:79576_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0PLI (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0EAPLI",
Ormv := "G0ERPLI",
Def := S1G0DPLI,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.PLI_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRB                                   **
//*******************************************************************************
//*ODIL_ID:78379_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:78379_1*
//
U "PERSO";
= #G0SRB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:78379_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0SRB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:78379_3*
//
U "G0DASRB1";
UN "G0DRSRB1";
= #G0SRB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:78379_4*
//
U "PERSO";
= #G0SRB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:78379_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0SRB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:78379_6*
//
UN "G0DASRB1";
U "G0DRSRB1";
= #G0SRB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:78379_7*
//
L #NUM_MVT;
L 2;
==I;
= #G0SRB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:78379_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0SRB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0ERSRB",
Ormv := "G0EASRB",
Def := S1G0DSRB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.SRB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRD                                   **
//*******************************************************************************
//*ODIL_ID:78717_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:78717_1*
//
U "PERSO";
= #G0SRD.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:78717_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0SRD.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:78717_3*
//
U "G0DASRD1";
U "G0DASRD2";
UN "G0DRSRD1";
UN "G0DRSRD2";
= #G0SRD.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:78717_4*
//
U "PERSO";
= #G0SRD.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:78717_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0SRD.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:78717_6*
//
UN "G0DASRD1";
UN "G0DASRD2";
U "G0DRSRD1";
U "G0DRSRD2";
= #G0SRD.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:78717_7*
//
L #NUM_MVT;
L 3;
==I;
= #G0SRD.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:78717_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0SRD (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0ERSRD",
Ormv := "G0EASRD",
Def := S1G0DSRD,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.SRD_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRG                                   **
//*******************************************************************************
//*ODIL_ID:79232_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:79232_1*
//
U "PERSO";
= #G0SRG.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:79232_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0SRG.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:79232_3*
//
U "G0DASRG1";
U "G0DASRG2";
U "G0DASRG3";
U "G0DASRG4";
U "G0DASRG5";
UN "G0DRSRG1";
UN "G0DRSRG2";
UN "G0DRSRG3";
UN "G0DRSRG4";
UN "G0DRSRG5";
= #G0SRG.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:79232_4*
//
U "PERSO";
= #G0SRG.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:79232_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0SRG.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:79232_6*
//
UN "G0DASRG1";
UN "G0DASRG2";
UN "G0DASRG3";
UN "G0DASRG4";
UN "G0DASRG5";
U "G0DRSRG1";
U "G0DRSRG2";
U "G0DRSRG3";
U "G0DRSRG4";
U "G0DRSRG5";
= #G0SRG.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:79232_7*
//
L #NUM_MVT;
L 7;
==I;
= #G0SRG.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:79232_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0SRG (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0ERSRG",
Ormv := "G0EASRG",
Def := S1G0DSRG,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.SRG_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRH                                   **
//*******************************************************************************
//*ODIL_ID:79407_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:79407_1*
//
U "PERSO";
= #G0SRH.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:79407_2*
//
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
U "PERSO";
= #G0SRH.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:79407_3*
//
U "G0DASRH1";
U "G0DASRH2";
UN "G0DRSRH1";
UN "G0DRSRH2";
= #G0SRH.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:79407_4*
//
U "PERSO";
= #G0SRH.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:79407_5*
//
U(;
U "Z1G".G0.IPP;
U "IIT".G0.MP.MPT;
O "Z1G".G0.IPA;
);
U "PERSO";
= #G0SRH.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:79407_6*
//
UN "G0DASRH1";
UN "G0DASRH2";
U "G0DRSRH1";
U "G0DRSRH2";
= #G0SRH.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:79407_7*
//
L #NUM_MVT;
L 8;
==I;
= #G0SRH.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:79407_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #G0SRH (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "G0ERSRH",
Ormv := "G0EASRH",
Def := S1G0DSRH,
Mvec := "Z1G".MVEC,
Tref := "Z1T".G0.SRH_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:14842_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:14842_181*
//
U #G0CAA.MF.IA;
U #G0CAC.MF.IA;
U #G0PLE.MF.IA;
U #G0PLF.MF.IA;
U #G0PLI.MF.IA;
U #G0SRB.MF.IA;
U #G0SRD.MF.IA;
U #G0SRG.MF.IA;
U #G0SRH.MF.IA;
U "PERSO";
= "Z1G".G0.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:14842_182*
//
U #G0CAA.MF.IR;
U #G0CAC.MF.IR;
U #G0PLE.MF.IR;
U #G0PLF.MF.IR;
U #G0PLI.MF.IR;
U #G0SRB.MF.IR;
U #G0SRD.MF.IR;
U #G0SRG.MF.IR;
U #G0SRH.MF.IR;
U "PERSO";
= "Z1G".G0.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1G0"
VERSION : 0.1
"1_G0_MONTAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_G1_ROBOT"
TITLE =ROBOT G1 MANAGEMENT
//GESTION DU ROBOT G1
VERSION : 0.1
VAR
  G1ROBOT : BF_ROBOT;	//G1: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  G1SUIVI : BF_TCY_SUIV;	//G1: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  G1CODE : WORD;	//G1: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//G1: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//G1: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1G1DIV : INT;	//G1: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1G1TCP : INT;	//G1: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1G1TCT : INT;	//G1: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1G1NCY : INT;	//G1: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1G1NDR : WORD;	//G1: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1G1APP : BOOL;	//G1: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1G1APE : BOOL;	//G1: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1G1APF : BOOL;	//G1: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1G1ALR : BOOL;	//G1: OPERATOR CALL / APPEL OPERATEUR
  S1G1AR : BOOL;	//G1: STOP ROBOT / ARRET ROBOT
  S1G1ATT : BOOL;	//G1: ROBOT WAITING / ROBOT EN ATTENTE
  S1G1TOPCY : BOOL;	//G1: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1G1AIA : BOOL;	//G1: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1G1HPR : BOOL;	//G1: NOT IN SERVICE / HORS PRODUCTION
  S1G1DER : BOOL;	//G1: ROBOT DERIVE / DERIVE ROBOT
  S1G1DTC : BOOL;	//G1: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1G1DT2 : BOOL;	//G1: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  G1XCODE : BOOL;	//G1: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  G1CHGELEC : BF_RB_SERVICE;	//G1: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  G1RODAGE : BF_RB_SERVICE;	//G1: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  G1RAZROD : BOOL;	//G1: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  G1NBCHE : WORD;	//G1: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  G1MROD : WORD;	//G1: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  G1MROD2 : WORD;	//G1: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  G1NBROD : WORD;	//G1: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  G1ALRCF : WORD;	//G1: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  G1DEMCF : WORD;	//G1: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  G1DROD : BOOL;	//G1: TIP DRESS REQUEST / DEMANDE RODAGE
  G1ALROD : BOOL;	//G1: TIP DRESS ALARM / ALARME RODAGE
  S1G1ACFR : BOOL;	//G1: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1G1DCFR : BOOL;	//G1: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1G1AACE : BOOL;	//G1: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1G1ACE : BOOL;	//G1: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1G1DCE : BOOL;	//G1: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:16136_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:16136_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:16136_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:16136_1025*
//
U "PERSO";
U #S1G1TOPCY;
SPBNB _501;
L 1;
T #S1G1DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:16136_1026*
//
U #S1G1AR;
= L 1.0;
BLD 103;
U #S1G1ATT;
= L 1.1;
BLD 103;
U #S1G1TOPCY;
= L 1.2;
BLD 103;
CALL #G1SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1G1DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1G1TCP,
S_tct := #S1G1TCT,
S_numcyc := #S1G1NCY,
S_dtc := #S1G1DTC,
S_fint2 := #S1G1DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE G0                                  **
//*******************************************************************************
//*ODIL_ID:16115_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:16115_1005*
//
U "G1OR1";
U "PERSO";
= "Z1G".G1.ECHG_G0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE G0
//*ODIL_ID:16115_1006*
//
U(;
O "G1OR16";
O "G1REPLI";
);
U "PERSO";
= "Z1G".G1.ECHG_G0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:16136_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:16136_1009*
//
L 0;
T #G1CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:16136_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #G1XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:16115_1011_1*
//
U #G1XCODE;
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
SPBNB _502;
L 1;
T #G1CODE;
_502: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:16136_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:16136_1015*
//
U "Z1G".MCYRB;
U #G1DROD;
SPBNB _503;
L 253;
T #G1CODE;
_503: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:16136_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _504;
L 254;
T #G1CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:16136_1017*
//
U "Z1G".DRRB;
SPBNB _505;
L 255;
T #G1CODE;
_505: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:16136_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:16136_1019*
//
O "Z1G".MDV;
O "Z1G".G0.MDV;
= #G1ROBOT.Dever;
NETWORK
TITLE =ROBOT G1
//ROBOT G1
//*ODIL_ID:16136_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #G1ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #G1CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "G1RBMS1",
Iw_rbe2 := "G1RBMS2",
Iw_rbe3 := "G1RBMS3",
Iw_rbe4 := "G1RBMS4",
Iw_rbe5 := "G1RBMS5",
Iw_rbe6 := "G1RBMS6",
Def_rb := #S1G1APP,
Appel_op := #S1G1ALR,
S_ar_rb := #S1G1AR,
S_att_rb := #S1G1ATT,
S_top_cy := #S1G1TOPCY,
S_hpr := #S1G1HPR,
S_de := #S1G1DER,
S_ai := #S1G1AIA,
S_ape := #S1G1APE,
S_apf := #S1G1APF,
S_com := #S1G1NDR,
Qw_rbs1 := "G1RBME1",
Qw_rbs2 := "G1RBME2",
Qw_rbs3 := "G1RBME3",
Qw_rbs4 := "G1RBME4",
Qw_rbs5 := "G1RBME5",
Qw_rbs6 := "G1RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:16136_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:16136_1022*
//
L 0;
T "G1RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:16136_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "G1MANU";
= L 1.0;
U L 1.0;
U "Z1G".G0.ECHG_G1.AT1;
= "G1EV1";
U L 1.0;
U "Z1G".G0.ECHG_G1.ART1;
= "G1EV2";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:16136_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:16136_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:16136_1032*
//
L #G1NBROD;
L #G1ALRCF;
>I;
= #S1G1ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:16136_1033*
//
L #G1NBROD;
L #G1DEMCF;
>I;
= #S1G1DCFR;
= "Z1G".G1.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:16136_1034*
//
U #G1RAZROD;
= L 0.0;
U L 0.0;
SPBNB _506;
L 0;
T #G1NBROD;
_506: NOP 0;
U L 0.0;
BLD 102;
R #G1RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:16136_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #G1RODAGE (
Iw_rbe6 := "G1RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #G1DROD,
Alarm := #G1ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #G1NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:16136_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:16136_1037*
//
U(;
L #G1MROD;
L "Z1G".CHELM.EALR;
-I;
T #G1MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".G1.NBCHE;
L #G1MROD2;
>=I;
);
= #S1G1AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:16136_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #G1CHGELEC (
Iw_rbe6 := "G1RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1G1DCE,
Alarm := #S1G1ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #G1NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:16136_1039*
//
U #S1G1DCE;
= "Z1G".G1.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:16136_1040*
//
U(;
O "Z1G".G1.DCHE;
O "Z1G".G1.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".G1.PCHE;
S "Z1G".G1.CCAS;
U "Z1G".G1.CCAS;
UN "Z1G".G1.PCHE;
R "Z1G".G1.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:16136_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:16136_1042*
//
U "Z1G".G1.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".G1.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:16136_1043*
//
U "Z1G".G1.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".G1.CCAS;
= "Z1G".G1.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1G1"
VERSION : 0.1
"1_G1_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_G2_ROBOT"
TITLE =ROBOT G2 MANAGEMENT
//GESTION DU ROBOT G2
VERSION : 0.1
VAR
  G2ROBOT : BF_ROBOT;	//G2: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  G2SUIVI : BF_TCY_SUIV;	//G2: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  G2CODE : WORD;	//G2: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//G2: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//G2: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1G2DIV : INT;	//G2: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1G2TCP : INT;	//G2: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1G2TCT : INT;	//G2: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1G2NCY : INT;	//G2: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1G2NDR : WORD;	//G2: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1G2APP : BOOL;	//G2: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1G2APE : BOOL;	//G2: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1G2APF : BOOL;	//G2: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1G2ALR : BOOL;	//G2: OPERATOR CALL / APPEL OPERATEUR
  S1G2AR : BOOL;	//G2: STOP ROBOT / ARRET ROBOT
  S1G2ATT : BOOL;	//G2: ROBOT WAITING / ROBOT EN ATTENTE
  S1G2TOPCY : BOOL;	//G2: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1G2AIA : BOOL;	//G2: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1G2HPR : BOOL;	//G2: NOT IN SERVICE / HORS PRODUCTION
  S1G2DER : BOOL;	//G2: ROBOT DERIVE / DERIVE ROBOT
  S1G2DTC : BOOL;	//G2: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1G2DT2 : BOOL;	//G2: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  G2XCODE : BOOL;	//G2: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  G2CHGELEC : BF_RB_SERVICE;	//G2: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  G2RODAGE : BF_RB_SERVICE;	//G2: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  G2RAZROD : BOOL;	//G2: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  G2NBCHE : WORD;	//G2: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  G2MROD : WORD;	//G2: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  G2MROD2 : WORD;	//G2: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  G2NBROD : WORD;	//G2: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  G2ALRCF : WORD;	//G2: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  G2DEMCF : WORD;	//G2: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  G2DROD : BOOL;	//G2: TIP DRESS REQUEST / DEMANDE RODAGE
  G2ALROD : BOOL;	//G2: TIP DRESS ALARM / ALARME RODAGE
  S1G2ACFR : BOOL;	//G2: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1G2DCFR : BOOL;	//G2: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1G2AACE : BOOL;	//G2: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1G2ACE : BOOL;	//G2: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1G2DCE : BOOL;	//G2: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:18244_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:18244_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:18244_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:18244_1025*
//
U "PERSO";
U #S1G2TOPCY;
SPBNB _501;
L 1;
T #S1G2DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:18244_1026*
//
U #S1G2AR;
= L 1.0;
BLD 103;
U #S1G2ATT;
= L 1.1;
BLD 103;
U #S1G2TOPCY;
= L 1.2;
BLD 103;
CALL #G2SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1G2DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1G2TCP,
S_tct := #S1G2TCT,
S_numcyc := #S1G2NCY,
S_dtc := #S1G2DTC,
S_fint2 := #S1G2DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE G0                                  **
//*******************************************************************************
//*ODIL_ID:16115_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:16115_1005*
//
U "G2OR1";
U "PERSO";
= "Z1G".G2.ECHG_G0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE G0
//*ODIL_ID:16115_1006*
//
U(;
O "G2OR16";
O "G2REPLI";
);
U "PERSO";
= "Z1G".G2.ECHG_G0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:18244_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:18244_1009*
//
L 0;
T #G2CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:18244_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #G2XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:16115_1011_1*
//
U #G2XCODE;
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
SPBNB _502;
L 1;
T #G2CODE;
_502: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:18244_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:18244_1015*
//
U "Z1G".MCYRB;
U #G2DROD;
SPBNB _503;
L 253;
T #G2CODE;
_503: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:18244_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _504;
L 254;
T #G2CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:18244_1017*
//
U "Z1G".DRRB;
SPBNB _505;
L 255;
T #G2CODE;
_505: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:18244_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:18244_1019*
//
O "Z1G".MDV;
O "Z1G".G0.MDV;
= #G2ROBOT.Dever;
NETWORK
TITLE =ROBOT G2
//ROBOT G2
//*ODIL_ID:18244_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #G2ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #G2CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "G2RBMS1",
Iw_rbe2 := "G2RBMS2",
Iw_rbe3 := "G2RBMS3",
Iw_rbe4 := "G2RBMS4",
Iw_rbe5 := "G2RBMS5",
Iw_rbe6 := "G2RBMS6",
Def_rb := #S1G2APP,
Appel_op := #S1G2ALR,
S_ar_rb := #S1G2AR,
S_att_rb := #S1G2ATT,
S_top_cy := #S1G2TOPCY,
S_hpr := #S1G2HPR,
S_de := #S1G2DER,
S_ai := #S1G2AIA,
S_ape := #S1G2APE,
S_apf := #S1G2APF,
S_com := #S1G2NDR,
Qw_rbs1 := "G2RBME1",
Qw_rbs2 := "G2RBME2",
Qw_rbs3 := "G2RBME3",
Qw_rbs4 := "G2RBME4",
Qw_rbs5 := "G2RBME5",
Qw_rbs6 := "G2RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:18244_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:18244_1022*
//
L 0;
T "G2RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:18244_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "G2MANU";
= L 1.0;
U L 1.0;
U "Z1G".G0.ECHG_G2.AT1;
= "G2EV1";
U L 1.0;
U "Z1G".G0.ECHG_G2.ART1;
= "G2EV2";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:18244_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:18244_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:18244_1032*
//
L #G2NBROD;
L #G2ALRCF;
>I;
= #S1G2ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:18244_1033*
//
L #G2NBROD;
L #G2DEMCF;
>I;
= #S1G2DCFR;
= "Z1G".G2.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:18244_1034*
//
U #G2RAZROD;
= L 0.0;
U L 0.0;
SPBNB _506;
L 0;
T #G2NBROD;
_506: NOP 0;
U L 0.0;
BLD 102;
R #G2RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:18244_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #G2RODAGE (
Iw_rbe6 := "G2RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #G2DROD,
Alarm := #G2ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #G2NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:18244_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:18244_1037*
//
U(;
L #G2MROD;
L "Z1G".CHELM.EALR;
-I;
T #G2MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".G2.NBCHE;
L #G2MROD2;
>=I;
);
= #S1G2AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:18244_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #G2CHGELEC (
Iw_rbe6 := "G2RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1G2DCE,
Alarm := #S1G2ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #G2NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:18244_1039*
//
U #S1G2DCE;
= "Z1G".G2.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:18244_1040*
//
U(;
O "Z1G".G2.DCHE;
O "Z1G".G2.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".G2.PCHE;
S "Z1G".G2.CCAS;
U "Z1G".G2.CCAS;
UN "Z1G".G2.PCHE;
R "Z1G".G2.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:18244_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:18244_1042*
//
U "Z1G".G2.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".G2.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:18244_1043*
//
U "Z1G".G2.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".G2.CCAS;
= "Z1G".G2.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1G2"
VERSION : 0.1
"1_G2_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_G3_ROBOT"
TITLE =ROBOT G3 MANAGEMENT
//GESTION DU ROBOT G3
VERSION : 0.1
VAR
  G3ROBOT : BF_ROBOT;	//G3: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  G3SUIVI : BF_TCY_SUIV;	//G3: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  G3CODE : WORD;	//G3: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//G3: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//G3: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1G3DIV : INT;	//G3: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1G3TCP : INT;	//G3: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1G3TCT : INT;	//G3: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1G3NCY : INT;	//G3: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1G3NDR : WORD;	//G3: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1G3APP : BOOL;	//G3: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1G3APE : BOOL;	//G3: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1G3APF : BOOL;	//G3: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1G3ALR : BOOL;	//G3: OPERATOR CALL / APPEL OPERATEUR
  S1G3AR : BOOL;	//G3: STOP ROBOT / ARRET ROBOT
  S1G3ATT : BOOL;	//G3: ROBOT WAITING / ROBOT EN ATTENTE
  S1G3TOPCY : BOOL;	//G3: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1G3AIA : BOOL;	//G3: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1G3HPR : BOOL;	//G3: NOT IN SERVICE / HORS PRODUCTION
  S1G3DER : BOOL;	//G3: ROBOT DERIVE / DERIVE ROBOT
  S1G3DTC : BOOL;	//G3: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1G3DT2 : BOOL;	//G3: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  G3XCODE : BOOL;	//G3: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  G3CHGELEC : BF_RB_SERVICE;	//G3: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  G3RODAGE : BF_RB_SERVICE;	//G3: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  G3RAZROD : BOOL;	//G3: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  G3NBCHE : WORD;	//G3: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  G3MROD : WORD;	//G3: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  G3MROD2 : WORD;	//G3: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  G3NBROD : WORD;	//G3: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  G3ALRCF : WORD;	//G3: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  G3DEMCF : WORD;	//G3: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  G3DROD : BOOL;	//G3: TIP DRESS REQUEST / DEMANDE RODAGE
  G3ALROD : BOOL;	//G3: TIP DRESS ALARM / ALARME RODAGE
  S1G3ACFR : BOOL;	//G3: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1G3DCFR : BOOL;	//G3: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1G3AACE : BOOL;	//G3: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1G3ACE : BOOL;	//G3: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1G3DCE : BOOL;	//G3: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:17190_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:17190_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:17190_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:17190_1025*
//
U "PERSO";
U #S1G3TOPCY;
SPBNB _501;
L 1;
T #S1G3DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:17190_1026*
//
U #S1G3AR;
= L 1.0;
BLD 103;
U #S1G3ATT;
= L 1.1;
BLD 103;
U #S1G3TOPCY;
= L 1.2;
BLD 103;
CALL #G3SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1G3DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1G3TCP,
S_tct := #S1G3TCT,
S_numcyc := #S1G3NCY,
S_dtc := #S1G3DTC,
S_fint2 := #S1G3DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE G0                                  **
//*******************************************************************************
//*ODIL_ID:16115_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:16115_1005*
//
U "G3OR1";
U "PERSO";
= "Z1G".G3.ECHG_G0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE G0
//*ODIL_ID:16115_1006*
//
U(;
O "G3OR16";
O "G3REPLI";
);
U "PERSO";
= "Z1G".G3.ECHG_G0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:17190_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:17190_1009*
//
L 0;
T #G3CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:17190_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #G3XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:16115_1011_1*
//
U #G3XCODE;
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
SPBNB _502;
L 1;
T #G3CODE;
_502: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:17190_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:17190_1015*
//
U "Z1G".MCYRB;
U #G3DROD;
SPBNB _503;
L 253;
T #G3CODE;
_503: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:17190_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _504;
L 254;
T #G3CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:17190_1017*
//
U "Z1G".DRRB;
SPBNB _505;
L 255;
T #G3CODE;
_505: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:17190_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:17190_1019*
//
O "Z1G".MDV;
O "Z1G".G0.MDV;
= #G3ROBOT.Dever;
NETWORK
TITLE =ROBOT G3
//ROBOT G3
//*ODIL_ID:17190_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #G3ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #G3CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "G3RBMS1",
Iw_rbe2 := "G3RBMS2",
Iw_rbe3 := "G3RBMS3",
Iw_rbe4 := "G3RBMS4",
Iw_rbe5 := "G3RBMS5",
Iw_rbe6 := "G3RBMS6",
Def_rb := #S1G3APP,
Appel_op := #S1G3ALR,
S_ar_rb := #S1G3AR,
S_att_rb := #S1G3ATT,
S_top_cy := #S1G3TOPCY,
S_hpr := #S1G3HPR,
S_de := #S1G3DER,
S_ai := #S1G3AIA,
S_ape := #S1G3APE,
S_apf := #S1G3APF,
S_com := #S1G3NDR,
Qw_rbs1 := "G3RBME1",
Qw_rbs2 := "G3RBME2",
Qw_rbs3 := "G3RBME3",
Qw_rbs4 := "G3RBME4",
Qw_rbs5 := "G3RBME5",
Qw_rbs6 := "G3RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:17190_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:17190_1022*
//
L 0;
T "G3RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:17190_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "G3MANU";
= L 1.0;
U L 1.0;
U "Z1G".G0.ECHG_G3.AT1;
= "G3EV1";
U L 1.0;
U "Z1G".G0.ECHG_G3.ART1;
= "G3EV2";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:17190_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:17190_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:17190_1032*
//
L #G3NBROD;
L #G3ALRCF;
>I;
= #S1G3ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:17190_1033*
//
L #G3NBROD;
L #G3DEMCF;
>I;
= #S1G3DCFR;
= "Z1G".G3.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:17190_1034*
//
U #G3RAZROD;
= L 0.0;
U L 0.0;
SPBNB _506;
L 0;
T #G3NBROD;
_506: NOP 0;
U L 0.0;
BLD 102;
R #G3RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:17190_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #G3RODAGE (
Iw_rbe6 := "G3RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #G3DROD,
Alarm := #G3ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #G3NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:17190_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:17190_1037*
//
U(;
L #G3MROD;
L "Z1G".CHELM.EALR;
-I;
T #G3MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".G3.NBCHE;
L #G3MROD2;
>=I;
);
= #S1G3AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:17190_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #G3CHGELEC (
Iw_rbe6 := "G3RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1G3DCE,
Alarm := #S1G3ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #G3NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:17190_1039*
//
U #S1G3DCE;
= "Z1G".G3.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:17190_1040*
//
U(;
O "Z1G".G3.DCHE;
O "Z1G".G3.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".G3.PCHE;
S "Z1G".G3.CCAS;
U "Z1G".G3.CCAS;
UN "Z1G".G3.PCHE;
R "Z1G".G3.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:17190_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:17190_1042*
//
U "Z1G".G3.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".G3.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:17190_1043*
//
U "Z1G".G3.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".G3.CCAS;
= "Z1G".G3.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1G3"
VERSION : 0.1
"1_G3_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_G4_ROBOT"
TITLE =ROBOT G4 MANAGEMENT
//GESTION DU ROBOT G4
VERSION : 0.1
VAR
  G4ROBOT : BF_ROBOT;	//G4: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  G4SUIVI : BF_TCY_SUIV;	//G4: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  G4CODE : WORD;	//G4: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//G4: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//G4: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1G4DIV : INT;	//G4: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1G4TCP : INT;	//G4: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1G4TCT : INT;	//G4: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1G4NCY : INT;	//G4: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1G4NDR : WORD;	//G4: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1G4APP : BOOL;	//G4: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1G4APE : BOOL;	//G4: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1G4APF : BOOL;	//G4: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1G4ALR : BOOL;	//G4: OPERATOR CALL / APPEL OPERATEUR
  S1G4AR : BOOL;	//G4: STOP ROBOT / ARRET ROBOT
  S1G4ATT : BOOL;	//G4: ROBOT WAITING / ROBOT EN ATTENTE
  S1G4TOPCY : BOOL;	//G4: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1G4AIA : BOOL;	//G4: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1G4HPR : BOOL;	//G4: NOT IN SERVICE / HORS PRODUCTION
  S1G4DER : BOOL;	//G4: ROBOT DERIVE / DERIVE ROBOT
  S1G4DTC : BOOL;	//G4: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1G4DT2 : BOOL;	//G4: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  G4XCODE : BOOL;	//G4: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  G4CHGELEC : BF_RB_SERVICE;	//G4: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  G4RODAGE : BF_RB_SERVICE;	//G4: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  G4RAZROD : BOOL;	//G4: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  G4NBCHE : WORD;	//G4: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  G4MROD : WORD;	//G4: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  G4MROD2 : WORD;	//G4: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  G4NBROD : WORD;	//G4: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  G4ALRCF : WORD;	//G4: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  G4DEMCF : WORD;	//G4: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  G4DROD : BOOL;	//G4: TIP DRESS REQUEST / DEMANDE RODAGE
  G4ALROD : BOOL;	//G4: TIP DRESS ALARM / ALARME RODAGE
  S1G4ACFR : BOOL;	//G4: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1G4DCFR : BOOL;	//G4: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1G4AACE : BOOL;	//G4: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1G4ACE : BOOL;	//G4: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1G4DCE : BOOL;	//G4: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:19298_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:19298_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:19298_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:19298_1025*
//
U "PERSO";
U #S1G4TOPCY;
SPBNB _501;
L 1;
T #S1G4DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:19298_1026*
//
U #S1G4AR;
= L 1.0;
BLD 103;
U #S1G4ATT;
= L 1.1;
BLD 103;
U #S1G4TOPCY;
= L 1.2;
BLD 103;
CALL #G4SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1G4DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1G4TCP,
S_tct := #S1G4TCT,
S_numcyc := #S1G4NCY,
S_dtc := #S1G4DTC,
S_fint2 := #S1G4DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE G0                                  **
//*******************************************************************************
//*ODIL_ID:16115_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:16115_1005*
//
U "G4OR1";
U "PERSO";
= "Z1G".G4.ECHG_G0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE G0
//*ODIL_ID:16115_1006*
//
U(;
O "G4OR16";
O "G4REPLI";
);
U "PERSO";
= "Z1G".G4.ECHG_G0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:19298_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:19298_1009*
//
L 0;
T #G4CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:19298_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #G4XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:16115_1011_1*
//
U #G4XCODE;
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
SPBNB _502;
L 1;
T #G4CODE;
_502: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:19298_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:19298_1015*
//
U "Z1G".MCYRB;
U #G4DROD;
SPBNB _503;
L 253;
T #G4CODE;
_503: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:19298_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _504;
L 254;
T #G4CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:19298_1017*
//
U "Z1G".DRRB;
SPBNB _505;
L 255;
T #G4CODE;
_505: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:19298_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:19298_1019*
//
O "Z1G".MDV;
O "Z1G".G0.MDV;
= #G4ROBOT.Dever;
NETWORK
TITLE =ROBOT G4
//ROBOT G4
//*ODIL_ID:19298_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #G4ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #G4CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "G4RBMS1",
Iw_rbe2 := "G4RBMS2",
Iw_rbe3 := "G4RBMS3",
Iw_rbe4 := "G4RBMS4",
Iw_rbe5 := "G4RBMS5",
Iw_rbe6 := "G4RBMS6",
Def_rb := #S1G4APP,
Appel_op := #S1G4ALR,
S_ar_rb := #S1G4AR,
S_att_rb := #S1G4ATT,
S_top_cy := #S1G4TOPCY,
S_hpr := #S1G4HPR,
S_de := #S1G4DER,
S_ai := #S1G4AIA,
S_ape := #S1G4APE,
S_apf := #S1G4APF,
S_com := #S1G4NDR,
Qw_rbs1 := "G4RBME1",
Qw_rbs2 := "G4RBME2",
Qw_rbs3 := "G4RBME3",
Qw_rbs4 := "G4RBME4",
Qw_rbs5 := "G4RBME5",
Qw_rbs6 := "G4RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:19298_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:19298_1022*
//
L 0;
T "G4RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:19298_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "G4MANU";
= L 1.0;
U L 1.0;
U "Z1G".G0.ECHG_G4.AT1;
= "G4EV1";
U L 1.0;
U "Z1G".G0.ECHG_G4.ART1;
= "G4EV2";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:19298_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:19298_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:19298_1032*
//
L #G4NBROD;
L #G4ALRCF;
>I;
= #S1G4ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:19298_1033*
//
L #G4NBROD;
L #G4DEMCF;
>I;
= #S1G4DCFR;
= "Z1G".G4.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:19298_1034*
//
U #G4RAZROD;
= L 0.0;
U L 0.0;
SPBNB _506;
L 0;
T #G4NBROD;
_506: NOP 0;
U L 0.0;
BLD 102;
R #G4RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:19298_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #G4RODAGE (
Iw_rbe6 := "G4RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #G4DROD,
Alarm := #G4ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #G4NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:19298_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:19298_1037*
//
U(;
L #G4MROD;
L "Z1G".CHELM.EALR;
-I;
T #G4MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".G4.NBCHE;
L #G4MROD2;
>=I;
);
= #S1G4AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:19298_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #G4CHGELEC (
Iw_rbe6 := "G4RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1G4DCE,
Alarm := #S1G4ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #G4NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:19298_1039*
//
U #S1G4DCE;
= "Z1G".G4.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:19298_1040*
//
U(;
O "Z1G".G4.DCHE;
O "Z1G".G4.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".G4.PCHE;
S "Z1G".G4.CCAS;
U "Z1G".G4.CCAS;
UN "Z1G".G4.PCHE;
R "Z1G".G4.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:19298_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:19298_1042*
//
U "Z1G".G4.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".G4.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:19298_1043*
//
U "Z1G".G4.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".G4.CCAS;
= "Z1G".G4.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1G4"
VERSION : 0.1
"1_G4_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_H0_ROBOT"
TITLE =ROBOT H0 MANAGEMENT
//GESTION DU ROBOT H0
VERSION : 0.1
VAR
  H0CSOPR : BF_IHMCR1;	//Z1RB12:  DEF. COMUM SEGURANCA SOPR (SOPR)
  S1Z1RB12DF24VR : BOOL;	//Z1RB12: DEF. ALIMENTACÃO REDE 24V
  S1Z1RB12DF24VZ : BOOL;	//Z1RB12: DEF. ALIMENTACÃO 24V ZONA
  S1Z1RB12DCSOPR : BOOL;	//Z1RB12: DEF. COMUM SEGURANCA SOPR (SOPR)
  S1Z1RB12DCSEC : BOOL;	//Z1RB12: DEF. CARTA DE SEGURANCA
  H0ROBOT : BF_ROBOT;	//H0: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  H0SUIVI : BF_TCY_SUIV;	//H0: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  H0CODE : WORD;	//H0: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//H0: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//H0: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1H0DIV : INT;	//H0: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1H0TCP : INT;	//H0: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1H0TCT : INT;	//H0: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1H0NCY : INT;	//H0: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1H0NDR : WORD;	//H0: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1H0APP : BOOL;	//H0: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1H0APE : BOOL;	//H0: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1H0APF : BOOL;	//H0: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1H0ALR : BOOL;	//H0: OPERATOR CALL / APPEL OPERATEUR
  S1H0AR : BOOL;	//H0: STOP ROBOT / ARRET ROBOT
  S1H0ATT : BOOL;	//H0: ROBOT WAITING / ROBOT EN ATTENTE
  S1H0TOPCY : BOOL;	//H0: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1H0AIA : BOOL;	//H0: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1H0HPR : BOOL;	//H0: NOT IN SERVICE / HORS PRODUCTION
  S1H0DER : BOOL;	//H0: ROBOT DERIVE / DERIVE ROBOT
  S1H0DTC : BOOL;	//H0: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1H0DT2 : BOOL;	//H0: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  H0XCODE : BOOL;	//H0: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
  H0CHGELEC : BF_RB_SERVICE;	//H0: TIP CHANGE CONTROL / GESTION CHANGEMENT ELECTRODE
  H0RODAGE : BF_RB_SERVICE;	//H0: TIP DRESS CONTROL / GESTION RODAGE ELECTRODE
  H0RAZROD : BOOL;	//H0: RESET TIP DRESS COUNTER / RAZ COMPTEUR RODAGE
  H0NBCHE : WORD;	//H0: TIP CHANGE COUNTER / COMPTEUR DE CHANGEMENT ELECTRODE
  H0MROD : WORD;	//H0: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  H0MROD2 : WORD;	//H0: MAXIMUM TIP DRESS NUMBER / NOMBRE RODAGE MAX
  H0NBROD : WORD;	//H0: TIP DRESS COUNTER / COMPTEUR DE RODAGE ELECTRODE
  H0ALRCF : WORD;	//H0: TIP DRESSER CHANGE ALARM THRESHOLD VALUE / VALEUR SEUIL ALARM CHGT FRAISE
  H0DEMCF : WORD;	//H0: TIP DRESSER CHANGE FAULT THRESHOLD VALUE / VALEUR SEUIL DEFAUT CHGT FRAISE
  H0DROD : BOOL;	//H0: TIP DRESS REQUEST / DEMANDE RODAGE
  H0ALROD : BOOL;	//H0: TIP DRESS ALARM / ALARME RODAGE
  S1H0ACFR : BOOL;	//H0: TIP DRESSER CHANGE ALARM / ALARME CHANGEMENT DE FRAISE
  S1H0DCFR : BOOL;	//H0: TIP DRESSER CHANGE REQUEST / DEMANDE CHANGEMENT DE FRAISE
  S1H0AACE : BOOL;	//H0: TIP CHANGE WARNING BEFORE ALARM / ALARME AVANT CHANGEMENT ELECTRODE
  S1H0ACE : BOOL;	//H0: TIP CHANGE ALARM / ALARME CHANGEMENT ELECTRODE
  S1H0DCE : BOOL;	//H0: TIP CHANGE REQUEST / DEMANDE CHANGEMENT ELECTRODE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:20352_309*
//

NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:21281_310*
//
U(;
ON "H0CCB24R";
O;
U #S1Z1RB12DF24VR;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1RB12DF24VR;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:21283_310*
//
U(;
ON "H0CCB24Z";
O;
U #S1Z1RB12DF24VZ;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1Z1RB12DF24VZ;
NETWORK
TITLE =PANEL Z1RB12 SAFETY CARD FAULT
//Z1RB12: DEF. CARTA DE SEGURANCA
//*ODIL_ID:21307_311*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1Z1RB12DCSEC;
NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:20352_312*
//

NETWORK
TITLE =SAFETY LOOP HMI / DIAGNOSTIQUE BOUCLE DE SECURITE
//Z1RB12:  DEF. COMUM SEGURANCA SOPR (SOPR)
//*ODIL_ID:21285_314*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U "H0CCSOPR";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _501;
CALL #H0CSOPR(
Typ := 1,
Def_Maj := L 0.0,
CSecu := L 0.1,
Def := #S1Z1RB12DCSOPR);
_501: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:20352_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:20352_1025*
//
U "PERSO";
U #S1H0TOPCY;
SPBNB _502;
L 1;
T #S1H0DIV;
_502: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:20352_1026*
//
U #S1H0AR;
= L 1.0;
BLD 103;
U #S1H0ATT;
= L 1.1;
BLD 103;
U #S1H0TOPCY;
= L 1.2;
BLD 103;
CALL #H0SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1H0DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1H0TCP,
S_tct := #S1H0TCT,
S_numcyc := #S1H0NCY,
S_dtc := #S1H0DTC,
S_fint2 := #S1H0DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE G0                                  **
//*******************************************************************************
//*ODIL_ID:16115_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:16115_1005*
//
U "H0OR1";
U "PERSO";
= "Z1G".H0.ECHG_G0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE G0
//*ODIL_ID:16115_1006*
//
U(;
O "H0OR16";
O "H0REPLI";
);
U "PERSO";
= "Z1G".H0.ECHG_G0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:20352_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:20352_1009*
//
L 0;
T #H0CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:20352_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #H0XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:16115_1011_1*
//
U #H0XCODE;
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
SPBNB _503;
L 1;
T #H0CODE;
_503: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:20352_1014*
//

NETWORK
TITLE =REQUEST FOR TIP DRESSING (WELDING ROBOT)
//DEMANDE DE RODAGE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:20352_1015*
//
U "Z1G".MCYRB;
U #H0DROD;
SPBNB _504;
L 253;
T #H0CODE;
_504: NOP 0;
NETWORK
TITLE =REQUEST FOR TIP REPLACEMENT (WELDING ROBOT)
//DEMANDE DE CHANGEMENT D'ELECTRODE DISTANT (ROBOT SOUDURE)
//*ODIL_ID:20352_1016*
//
U "Z1G".MCYRB;
U "Z1G".DCHEG;
U "PERSO";
SPBNB _505;
L 254;
T #H0CODE;
_505: NOP 0;
NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:20352_1017*
//
U "Z1G".DRRB;
SPBNB _506;
L 255;
T #H0CODE;
_506: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:20352_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:20352_1019*
//
O "Z1G".MDV;
O "Z1G".G0.MDV;
= #H0ROBOT.Dever;
NETWORK
TITLE =ROBOT H0
//ROBOT H0
//*ODIL_ID:20352_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #H0ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #H0CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "H0RBMS1",
Iw_rbe2 := "H0RBMS2",
Iw_rbe3 := "H0RBMS3",
Iw_rbe4 := "H0RBMS4",
Iw_rbe5 := "H0RBMS5",
Iw_rbe6 := "H0RBMS6",
Def_rb := #S1H0APP,
Appel_op := #S1H0ALR,
S_ar_rb := #S1H0AR,
S_att_rb := #S1H0ATT,
S_top_cy := #S1H0TOPCY,
S_hpr := #S1H0HPR,
S_de := #S1H0DER,
S_ai := #S1H0AIA,
S_ape := #S1H0APE,
S_apf := #S1H0APF,
S_com := #S1H0NDR,
Qw_rbs1 := "H0RBME1",
Qw_rbs2 := "H0RBME2",
Qw_rbs3 := "H0RBME3",
Qw_rbs4 := "H0RBME4",
Qw_rbs5 := "H0RBME5",
Qw_rbs6 := "H0RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:20352_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:20352_1022*
//
L 0;
T "H0RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:20352_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "H0MANU";
= L 1.0;
U L 1.0;
U "Z1G".G0.ECHG_H0.AT1;
= "H0EV1";
U L 1.0;
U "Z1G".G0.ECHG_H0.ART1;
= "H0EV2";
NETWORK
TITLE =
//*******************************************************************************
//**                  RODAGE ET CHANGEMENT ELECTRODES                          **
//*******************************************************************************
//*ODIL_ID:20352_1030*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              RODAGE  CENTRALISE                           **
//*******************************************************************************
//*ODIL_ID:20352_1031*
//

NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//(valeurs de seuil paramétrable sur page écran)
//*ODIL_ID:20352_1032*
//
L #H0NBROD;
L #H0ALRCF;
>I;
= #S1H0ACFR;
NETWORK
TITLE =MONITORING: TIP DRESSER CHANGE ALARM / REQUEST
//SUIVI: ALARME / DEMANDE CHANGEMENT DE FRAISE
//*ODIL_ID:20352_1033*
//
L #H0NBROD;
L #H0DEMCF;
>I;
= #S1H0DCFR;
= "Z1G".H0.DCFR;
NETWORK
TITLE =RESET TIP DRESS COUNTER
//RAZ NOMBRE DE RODAGE
//*ODIL_ID:20352_1034*
//
U #H0RAZROD;
= L 0.0;
U L 0.0;
SPBNB _507;
L 0;
T #H0NBROD;
_507: NOP 0;
U L 0.0;
BLD 102;
R #H0RAZROD;
NETWORK
TITLE =ROBOT TIP DRESS CONTROL (FROM PLC)
//GESTION DU RODAGE ROBOT PAR L'AUTOMATE
//*ODIL_ID:20352_1035*
//
U "BA1LIEN";
= L 0.0;
BLD 103;
CALL #H0RODAGE (
Iw_rbe6 := "H0RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".ROD.GR1,
GR2 := "Z1G".ROD.GR2,
GR3 := "Z1G".ROD.GR3,
GR4 := "Z1G".ROD.GR4,
Dtsr := #H0DROD,
Alarm := #H0ALROD,
Mdsv := "Z1G".RODM.RBMDR,
Mfsv := "Z1G".RODM.RBMFR,
Nbrs := #H0NBROD);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                  CHANGEMENT ELECTRODES CENTRALISE                         **
//*******************************************************************************
//*ODIL_ID:20352_1036*
//

NETWORK
TITLE =MONITORING: TIP CHANGE ALARM
//SUIVI: ALARME AVANT CHANGEMENT ELECTRODES
//*ODIL_ID:20352_1037*
//
U(;
L #H0MROD;
L "Z1G".CHELM.EALR;
-I;
T #H0MROD2;
UN OV;
SAVE;
CLR;
U BIE;
);
U(;
L "Z1G".H0.NBCHE;
L #H0MROD2;
>=I;
);
= #S1H0AACE;
NETWORK
TITLE =ROBOT TIP CHANGE CONTROL (FROM PLC)
//GESTION DU CHANGEMENT ELECTRODES PAR L'AUTOMATE
//*ODIL_ID:20352_1038*
//
U "BA0";
= L 0.0;
BLD 103;
CALL #H0CHGELEC (
Iw_rbe6 := "H0RBME6",
Rd_che := L 0.0,
Num_rb := 2,
GR1 := "Z1G".CHELA.GR1,
GR2 := "Z1G".CHELA.GR2,
GR3 := "Z1G".CHELA.GR3,
GR4 := "Z1G".CHELA.GR4,
Dtsr := #S1H0DCE,
Alarm := #S1H0ACE,
Mdsv := "Z1G".CHELM.RBMDC,
Mfsv := "Z1G".CHELM.RBMFC,
Nbrs := #H0NBCHE);
NOP 0;
NETWORK
TITLE =MONITORING: TIP CHANGE REQUEST
//SUIVI: DEMANDE CHANGEMENT ELECTRODES
//*ODIL_ID:20352_1039*
//
U #S1H0DCE;
= "Z1G".H0.DCHE;
NETWORK
TITLE =ROBOT SERVO OFF CHECK
//CONTROLE COUPURE ASSERVISSEMENT DU ROBOT
//*ODIL_ID:20352_1040*
//
U(;
O "Z1G".H0.DCHE;
O "Z1G".H0.DCHEL;
O "Z1G".CHELM.DCHE;
);
U "PERSO";
U "Z1G".H0.PCHE;
S "Z1G".H0.CCAS;
U "Z1G".H0.CCAS;
UN "Z1G".H0.PCHE;
R "Z1G".H0.CCAS;
NOP 0;
NETWORK
TITLE =
//********************************************************************************
//**                  DEMANDE DE CHANGEMENT D'ELECTRODES LOCAL                  **
//********************************************************************************
//*ODIL_ID:20352_1041*
//

NETWORK
TITLE =TIP CHANGE LOCAL REQUEST
//DEMANDE LOCALE DE CHANGEMENT ELECTRODES
//*ODIL_ID:20352_1042*
//
U "Z1G".H0.PCHE;
UN "Z1G".CHELM.DCHE;
= "Z1G".H0.DCHEL;
NETWORK
TITLE =END OF TIP CHANGE (LOCAL REQUEST)
//FIN DE CHANGEMENT ELECTRODES (DEMANDE LOCALE)
//*ODIL_ID:20352_1043*
//
U "Z1G".H0.PCHE;
UN "Z1G".CHELM.DCHE;
U "Z1G".H0.CCAS;
= "Z1G".H0.FCHEL;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1H0"
VERSION : 0.1
"1_H0_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_T0C_CHGT_MEUBLE"
TITLE =CHGT_MEUBLE
VERSION : 0.1
VAR
  S1T0CSUP : INT;	//T0C - SUPPORT NUMBER / NUMERO SUPPORT
  T0C_ECRRF300 : BF_IDENT;	//T0C RFID WRITING / ECRITURE RFID
  T0C_LECRF300 : BF_IDENT;	//T0C RFID READING / LECTURE RFID
  S1T0CDLRFID : BOOL;	//T0C RFID READING FAULT / DEFAUT LECTURE RFID
  S1T0CDERFID : BOOL;	//T0C RFID WRITING FAULT / DEFAUT ECRITURE RFID
  T0CIDENTLOCK : BYTE;	//T0C RFID SYNCHRONISATION / SYNCHRO PLOT IDENT
  T0CRETVAL : INT;	//T0C - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  T0CTDFPC : TON;	//T0C - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1T0CDPIEC : BOOL;	//T0C - PART FAULT / DEFAUT PIECE
  NUM_MVT : INT;	//T0C - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
  T0C_BUTEE1 : BF_MB_BUTEE1;	//T0C - STOPPER 1 MANAGEMENT / GESTION DE LA BUTEE 1
  S1T0CAIM : BOOL;	//T0C - MISSING SUPPLY / MANQUE APPRO
  S1T0CDB1 : BOOL;	//T0C - STOPPER 1 FAULT / DEFAUT BUTEE 1
  S1T0CB1MDG : BOOL;	//T0C - STOPPER 1 DEGRADED MODE / MARCHE DEGRADEE BUTEE 1
  T0CX1COABB1 : BOOL;	//T0C - STOPPER1 OPENING ORDER AUXILIARY / AUX COMMANDE OUVERTURE BUTEE1
  T0CB1ISA : BOOL;	//T0C - STOPPER 1 ABSENT SUPPORT INFORMATION / INFO SUPPORT ABSENT BUTEE 1
  T0CB1ISP : BOOL;	//T0C - STOPPER 1 PRESENT SUPPORT INFORMATION / INFO SUPPORT PRESENT BUTEE 1
  S1T0CDVCH : BOOL;	//T0C - LOADING CURVE FAULT / DEFAUT VIRAGE AU CHARGEMENT
  T0C_BUTEE2 : BF_MB_BUTEE1;	//T0C - STOPPER 2 MANAGEMENT / GESTION DE LA BUTEE 2
  S1T0CDB2 : BOOL;	//T0C - STOPPER 2 FAULT / DEFAUT BUTEE 2
  S1T0CB2MDG : BOOL;	//T0C - STOPPER 2 DEGRADED MODE / MARCHE DEGRADEE BUTEE 2
  T0C_2_BVP : BOOL;	//T0C - STOPPER 2 EMPTY AND READY / BUTEE 2 VIDE ET PRETE
  T0CX1COABB2 : BOOL;	//T0C STOPPER2 OPENING ORDER AUXILIARY / AUX COMMANDE OUVERTURE BUTEE2
  T0CB2ISA : BOOL;	//T0C - STOPPER 2 ABSENT SUPPORT INFORMATION / INFO SUPPORT ABSENT BUTEE 2
  T0CB2ISP : BOOL;	//T0C - STOPPER 2 PRESENT SUPPORT INFORMATION / INFO SUPPORT PRESENT BUTEE 2
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:29062_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:29062_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:29062_216*
//

NETWORK
TITLE =MONITORING SUPPORT NUMBER
//NUMERO DE SUPPORT POUR LE SUIVI SMPLOC
//*ODIL_ID:29062_337*
//
U(;
U "PERSO";
U "IIS".T0C_2.MSLRFID;
SPBNB _501;
L "IDENT".T0C.ID.DVEH.NSUP;
T "IIT".T0C.NSUP;
SET;
SAVE;
CLR;
_501: U BIE;
);
SPBNB _502;
L "IIT".T0C.NSUP;
T #S1T0CSUP;
SET;
SAVE;
CLR;
_502: U BIE;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:29062_18*
//

NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:29062_55*
//

NETWORK
TITLE =CREATE MEMORY PART PRESENT OK
//CREATION MEMOIRE PRESENCE PIECE BONNE
//(RECOPIE BLOC ACQUISITION SIPTOL DANS LA TABLE LOCALE)
//*ODIL_ID:29062_340*
//
U "IIT".T0C.MP.MPP;
U(;
O "Z1G".T0CL.ECHG_T0C.IFC;
O "Z1G".MDV;
);
S "IIT".T0C.MP.MPLNOR;
R "IIT".T0C.MP.MPLNOK;
NETWORK
TITLE =CREATE MEMORY PART PRESENT NOT OK
//CREATION MEMOIRE PRESENCE PIECE MAUVAISE
//*ODIL_ID:29062_524*
//
U "IIT".T0C.MP.MPP;
U "Z1G".T0CL.ECHG_T0C.PFM;
S "IIT".T0C.MP.MPLNOK;
R "IIT".T0C.MP.MPLNOR;
NETWORK
TITLE =CREATE SUPPORT PRESENCE MEMORY
//CREATION MEMOIRE SUPPORT PRESENT
//*ODIL_ID:29062_282*
//
U(;
O "Z1G".T0CL.ECHG_T0C.IPOF;
O "Z1G".T0CL.ECHG_T0C.MAP;
);
U(;
ON "Z1G".T0C.IAP;
O "Z1G".T0CL.ECHG_T0C.FABSP;
);
S "IIT".T0C.MS.MSP;
NETWORK
TITLE =PART PRESENCE MEMORY
//MEMOIRE PIECE PRESENTE
//*ODIL_ID:29062_58*
//
U "PERSO";
UN "Z1G".T0C.IAP;
= "IIT".T0C.MP.MPP;
NETWORK
TITLE =
//*******************************************************************************
//**                   PLOT LECTURE RFID / READING RFID LABEL                  **
//*******************************************************************************
//*ODIL_ID:29062_2000*
//

NETWORK
TITLE =READING AUTHORIZATION OF RFID LABEL
//AUTORISATION DE LA LECTURE ETIQUETTE RFID
//*ODIL_ID:29062_2001*
//
U "PERSO";
U "IIS".T0C_2.MSP;
UN "IIT".T0C.MP.MPP;
UN "Z1G".T0C.IDVM;
UN "IIS".T0C_2.MSLRFID;
UN #S1T0CDLRFID;
UN "Z1G".MDV;
= #T0C_LECRF300.Val;
NETWORK
TITLE =RF300 READING
//LECTURE RF300
//*ODIL_ID:29062_2002*
//
U "IADF";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _503;
CALL #T0C_LECRF300 (
ASMAddr := 1903,
ASMChannel := 1,
Module := 0,
Reset := L 0.1,
Mode := 1,
Address := 3,
Len := 97,
DBNR := 93,
Offset := 6,
Def := #S1T0CDLRFID,
Lock := #T0CIDENTLOCK);
_503: NOP 0;
NETWORK
TITLE =SUPPORT MEMORY READING RFID LABEL OK
//MEMOIRE SUPPORT LECTURE RFID OK
//*ODIL_ID:29062_2003*
//
U #T0C_LECRF300.Ok;
S "IIS".T0C_2.MSLRFID;
NETWORK
TITLE =
//*******************************************************************************
//**                        WRITING RFID / ECRITURE RFID                       **
//*******************************************************************************
//*ODIL_ID:29062_2007*
//

NETWORK
TITLE =RFID WRITING REQUEST
//AUTORISATION D'ECRITURE RFID
//*ODIL_ID:29062_2009*
//
U "PERSO";
U "IIS".T0C_2.MSP;
U "IIS".T0C_2.MSLRFID;
UN "IIS".T0C_2.MSERFID;
UN #S1T0CDERFID;
UN "Z1G".T0C.IDVM;
= #T0C_ECRRF300.Val;
NETWORK
TITLE =WRITING RFID RF300
//ECRITURE ETIQUETTE RFID
//*ODIL_ID:29062_2010*
//
U "IADF";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _504;
CALL #T0C_ECRRF300 (
ASMAddr := 1903,
ASMChannel := 1,
Module := 0,
Reset := L 0.1,
Mode := 2,
Address := 3,
Len := 97,
DBNR := 93,
Offset := 6,
Def := #S1T0CDERFID,
Lock := #T0CIDENTLOCK);
_504: NOP 0;
NETWORK
TITLE =RFID WRITING SUPPORT MEMORY OK
//MEMOIRE SUPPORT ECRITURE RFID OK
//*ODIL_ID:29062_2011*
//
U #T0C_ECRRF300.Ok;
S "IIS".T0C_2.MSERFID;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:29062_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:29062_82*
//
U "PERSO";
= "Z1G".T0C.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:29062_83*
//
U "PERSO";
= "Z1G".T0C.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:29062_84*
//
U "Z1G".T0C.IAP;
UN "IIT".T0C.MS.MSP;
UN "IIT".T0C.MP.MPP;
= "Z1G".T0C.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:29062_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".T0C.IPP;
UN "Z1G".T0C.IPA;
= L 4.0;
BLD 103;
CALL #T0CTDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:29062_86*
//
U #T0CTDFPC.Q;
S #S1T0CDPIEC;
U(;
O "Z1G".T0C.IPP;
O "Z1G".T0C.IPA;
);
R #S1T0CDPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                      LAUNCHING POINT EXCHANGES 03.12
//**
//*******************************************************************************
//*ODIL_ID:29062_260*
//

NETWORK
TITLE =AUTORISATION DE COMPARAISON
//AUTORISATION DE COMPARAISON
//*ODIL_ID:29062_261*
//
UN "Z1G".MDV;
U "PERSO";
U "IIT".T0C.MP.MPP;
UN "IIT".T0C.MP.MPLNOR;
UN "Z1G".T0CL.ECHG_T0C.IFC;
= "Z1G".T0C.ECHG_T0CL.AC;
NETWORK
TITLE =AUTORISATION DE REPONSE
//AUTORISATION DE REPONSE
//*ODIL_ID:29062_262*
//
UN "Z1G".MDV;
U "PERSO";
UN "IIT".T0C.MP.MPP;
= "Z1G".T0C.ECHG_T0CL.AR;
NETWORK
TITLE =
//*******************************************************************************
//**                         OPERATOR T1 EXCHANGES                          **
//*******************************************************************************
//*ODIL_ID:29786_T1_1330*
//

NETWORK
TITLE =OPERATOR T1 WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1 OPERATEUR T1
//*ODIL_ID:29786_T1_134*
//
U(;
O "Z1G".T0CL.ECHG_T0C.IPOF;
O "Z1G".T0CL.ECHG_T0C.MAP;
O "Z1G".T0C.MDV;
);
U "PERSO";
U "Z1G".T0C.IPP;
UN "IIT".T0C.MP.MPT;
UN "IIT".T0C_TT.MFT.MFT1;
UN "Z1G".T1.ECHG_T0C.FT1;
= "T0C_AT_T1";
NETWORK
TITLE =OPERATOR T1 COMPLETION 1
//ENREGISTREMENT DE TRAVAIL 1 OPERATEUR T1
//*ODIL_ID:29786_T1_135*
//
U "PERSO";
U "Z1G".T0C.IPP;
UN "IIT".T0C.MP.MPT;
U "IIT".T0C_TT.MFT.MFT1;
UN "Z1G".T1.ECHG_T0C.SA;
= "T0C_ET_T1";
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:29062_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:29062_177*
//
U "IIT".T0C_TT.MFT.MFT1;
U "IIT".T0C_TT.MFT.MFT2;
U "PERSO";
S "IIT".T0C.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                            STOPPER 1 / BUTEE 1                            **
//*******************************************************************************
//*ODIL_ID:29062_1026*
//

NETWORK
TITLE =STOPPER OPENING ORDER AUXILIARY 1
//AUXILIAIRE 1 COMMANDE D'OUVERTURE BUTEE
//*ODIL_ID:29062_1027*
//
U "PERSO";
UN "Z1G".MDV;
U(;
ON "Z1G".LIEN_PUP.Z_mvid;
O "IIT".T0C.MS.MSP;
);
= #T0CX1COABB1;
NETWORK
TITLE =STOPPER  MANAGEMENT
//GESTION DE LA BUTEE
//*ODIL_ID:29062_1028*
//
U "PERSO";
= L 0.0;
BLD 103;
U #T0CX1COABB1;
= L 0.1;
BLD 103;
U "T0CDSPB1";
= L 0.2;
BLD 103;
U "T0CDFB1";
= L 0.3;
BLD 103;
U "T0CDOB1";
= L 0.4;
BLD 103;
U "BA1";
= L 0.5;
BLD 103;
U "IIS".T0C_1.MSP;
= L 0.6;
BLD 103;
U #T0C_2_BVP;
= L 0.7;
BLD 103;
CALL #T0C_BUTEE1 (
Com := L 0.0,
Caob := L 0.1,
Dsp := L 0.2,
Dfb := L 0.3,
Dob := L 0.4,
Msea := L 0.5,
Cev := L 0.6,
Bvvp := L 0.7,
MSP := "IIS".T0C_1,
POS_MSE := 2,
Eob := "T0CEOB1",
efb := "T0CEFB1",
Isp := #T0CB1ISP,
Isa := #T0CB1ISA);
NOP 0;
NETWORK
TITLE =MONITORING : DEGRADED MODE
//SUIVI : MARCHE DEGRADEE
//*ODIL_ID:29062_1029*
//
U #T0C_BUTEE1.Def;
UN #S1T0CDB1;
= #S1T0CB1MDG;
NETWORK
TITLE =MONITORING : STOPPER FAULT
//SUIVI : DEFAUT BUTEE
//*ODIL_ID:29062_1030*
//
U #T0C_BUTEE1.Def;
U #S1T0CAIM;
= #S1T0CDB1;
NETWORK
TITLE =
//*******************************************************************************
//**                            STOPPER 2 / BUTEE 2                            **
//*******************************************************************************
//

NETWORK
TITLE =STOPPER OPENING ORDER AUXILIARY 1
//AUXILIAIRE 1 COMMANDE D'OUVERTURE BUTEE
//*ODIL_ID:29062_1031*
//
U "Z1G".T0C.IPA;
U "IIS".T0C_2.MSP;
U "IIS".T0C_2.MSVIDE;
U "IIS".T0C_2.MSERFID;
O;
U "PERSO";
U "Z1G".T0C.IAP;
= #T0CX1COABB2;
NETWORK
TITLE =STOPPER  MANAGEMENT
//GESTION DE LA BUTEE
//*ODIL_ID:29062_1032*
//
U "PERSO";
= L 0.0;
BLD 103;
U #T0CX1COABB2;
= L 0.1;
BLD 103;
U "T0CDSPB2";
= L 0.2;
BLD 103;
U "T0CDFB2";
= L 0.3;
BLD 103;
U "T0CDOB2";
= L 0.4;
BLD 103;
U "IIS".T0C_1.MSE;
= L 0.5;
BLD 103;
U "T0CDDZB2";
= L 0.6;
BLD 103;
U "BA1";
= L 0.7;
BLD 103;
CALL #T0C_BUTEE2 (
Com := L 0.0,
Caob := L 0.1,
Dsp := L 0.2,
Dfb := L 0.3,
Dob := L 0.4,
Msea := L 0.5,
Cev := L 0.6,
Bvvp := L 0.7,
MSP := "IIS".T0C_2.MSP,
POS_MSE := 2,
Eob := "T0CEOB2",
efb := "T0CEFB2",
Isp := #T0CB2ISP,
Isa := #T0CB2ISA);
NOP 0;
NETWORK
TITLE =STOPPER 2 : EMPTY AND READY
//BUTEE 2 : VIDE ET PRETE
//*ODIL_ID:29062_1033*
//
U #T0C_BUTEE2.Bvp;
= #T0C_2_BVP;
NETWORK
TITLE =MONITORING : DEGRADED MODE
//SUIVI : MARCHE DEGRADEE
//*ODIL_ID:29062_1034*
//
U #T0C_BUTEE2.Def;
UN #S1T0CDB2;
= #S1T0CB2MDG;
NETWORK
TITLE =MONITORING : STOPPER 2 FAULT
//SUIVI : DEFAUT BUTEE 2
//*ODIL_ID:29062_1035*
//
U #T0C_BUTEE2.Def;
U #S1T0CAIM;
= #S1T0CDB2;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:29062_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1T0C"
VERSION : 0.1
"1_T0C_CHGT_MEUBLE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_T0D_DCHGT_MEUBL"
VERSION : 0.1
VAR
  T0DCHAINE : BF_MB_CHAINE1;	//T0D - RACK CHAIN MANAGEMENT / GESTION DE LA CHAINE DU MEUBLE
  T0D_BUTEE8 : BF_MB_BUTEE1;	//T0D - STOPPER 8 MANAGEMENT / GESTION DE LA BUTEE 8
  T0D_BUTEE9 : BF_MB_BUTEE1;	//T0D - STOPPER 9 MANAGEMENT / GESTION DE LA BUTEE 9
  T0DTCAMAP : TON;	//T0D - SHORTAGE PART TIMER / TEMPORISTION DE CADENCE MANQUE APPRO
  T0D9TDP : TON;	//T0D - STOPPER 9 FAULT PART(S) TIMER / TEMPO DEFAUT PIECE(S) BUTEE B9
  S1DDM1 : BOOL;	//T0DDM1: PARTIDA DO MOTOR EM FALHA
  S1ALDM1 : BOOL;	//T0DDM1: PARTIDA DO MOTOR EM ALARME
  S1T0DSUP : INT;	//T0D - SUPPORT NUMBER / NUMERO SUPPORT
  T0D_ECRRF300 : BF_IDENT;	//T0D RFID WRITING / ECRITURE RFID
  T0D_LECRF300 : BF_IDENT;	//T0D RFID READING / LECTURE RFID
  S1T0DDLRFID : BOOL;	//T0D RFID READING FAULT / DEFAUT LECTURE RFID
  S1T0DDERFID : BOOL;	//T0D RFID WRITING FAULT / DEFAUT ECRITURE RFID
  T0DIDENTLOCK : BYTE;	//T0D RFID SYNCHRONISATION / SYNCHRO PLOT IDENT
  T0DTR : BOOL;	//ONE SHOT DATAS TRANSFER / VERROU CYCLE TRANSFERT DONNEES
  T0DAUXTR : BOOL;	//TABLE TRANSFER AUXILLIARY / AUXILLIAIRE TRANSFERT TABLE
  T0DRETVAL : INT;	//T0D - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  T0DTDFPC : TON;	//T0D - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1T0DDPIEC : BOOL;	//T0D - PART FAULT / DEFAUT PIECE
  NUM_MVT : INT;	//T0D - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
  S1T0DSSC : BOOL;	//T0D - LOADING SAFETY SWITCH / SELECTEUR DE SECURITE CHARGEMENT (AIA)
  S1T0DSSD : BOOL;	//T0D - UNLOADING SAFETY SWITCH / SELECTEUR DE SECURITE DECHARGEMENT (APE)
  S1T0DAIM : BOOL;	//T0D - MISSING SUPPLY / MANQUE APPRO
  S1T0DALR : BOOL;	//T0D - RACK MINI THERSHOLD ALARM / ALERTE SEUIL MINI MEUBLE
  S1T0DDPIEB9 : BOOL;	//T0D - STOPPER 9 PART(S)FAULT /DEFAUT PIECE(S) BUTEE 9
  S1T0DDEF : BOOL;	//T0D - RACK SAFETY FAULT / DEFAUT DE SECURITE MEUBLE
  S1T0DDB8 : BOOL;	//T0D - STOPPER 8 FAULT / DEFAUT BUTEE 8
  S1T0DDB9 : BOOL;	//T0D - STOPPER 9 FAULT / DEFAUT BUTEE 9
  S1T0DB8MDG : BOOL;	//T0D - STOPPER 8 DEGRADED MODE / MARCHE DEGRADEE BUTEE 8
  S1T0DB9MDG : BOOL;	//T0D - STOPPER 9 DEGRADED MODE / MARCHE DEGRADEE BUTEE 9
  S1T0DDSIL : BOOL;	//T0D - SHAPE FAULT / DEFAUT SILHOUETTE
  S1T0DALR_M : BOOL;	//T0D - FB MB_CHAIN1 ALARM / ALARME FB MB_CHAINE1
  T0D_9_BVP : BOOL;	//T0D - STOPPER 9 EMPTY AND READY / BUTEE 9 VIDE ET PRETE
  T0DISMINI : BOOL;	//T0D - MINI THRESHOLD INFORMATION / INFORMATION SEUIL MINI
  T0DISMAXI : BOOL;	//T0D - MAXI THRESHOLD INFORMATION / INFORMATION SEUIL MAXI
  T0DX1COABB8 : BOOL;	//T0D - STOPPER8 OPENING ORDER AUXILIARY / AUX COMMANDE OUVERTURE BUTEE8
  T0DX1COABB9 : BOOL;	//T0D - STOPPER9 OPENING ORDER AUXILIARY / AUX COMMANDE OUVERTURE BUTEE9
  T0DB9ISA : BOOL;	//T0D - STOPPER 9 ABSENT SUPPORT INFORMATION / INFO SUPPORT ABSENT BUTEE 9
  T0DB8ISA : BOOL;	//T0D - STOPPER 8 ABSENT SUPPORT INFORMATION / INFO SUPPORT ABSENT BUTEE 8
  T0DB9ISP : BOOL;	//T0D - STOPPER 9 PRESENT SUPPORT INFORMATION / INFO SUPPORT PRESENT BUTEE 9
  T0DB8ISP : BOOL;	//T0D - STOPPER 8 PRESENT SUPPORT INFORMATION / INFO SUPPORT PRESENT BUTEE 8
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:28116_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:28116_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:28116_216*
//

NETWORK
TITLE =MONITORING SUPPORT NUMBER
//NUMERO DE SUPPORT POUR LE SUIVI SMPLOC
//*ODIL_ID:28116_337*
//
U(;
U "PERSO";
U "IIS".T0D_9.MSLRFID;
SPBNB _501;
L "IDENT".T0D.ID.DVEH.NSUP;
T "IIT".T0D.NSUP;
SET;
SAVE;
CLR;
_501: U BIE;
);
SPBNB _502;
L "IIT".T0D.NSUP;
T #S1T0DSUP;
SET;
SAVE;
CLR;
_502: U BIE;
NETWORK
TITLE =RACK WAITING PART (AIM)
//ATTENTE PIECE MEUBLE (AIM)
//*ODIL_ID:28116_1001*
//
UN "IIT".T0D.MP.MPP;
UN "T0DDSPB8";
= L 0.0;
BLD 103;
CALL #T0DTCAMAP (
IN := L 0.0,
PT := T#10S,
Q := #S1T0DAIM);
NOP 0;
NETWORK
TITLE =LOAD RACK STOP (AIA)
//ARRET MEUBLE AU CHARGEMENT (AIA)
//*ODIL_ID:28116_1002*
//
U "PERSO";
= #S1T0DSSC;
NETWORK
TITLE =UNLOAD RACK STOP (APE)
//ARRET INDUIT AU DECHARGEMENT MEUBLE (APE)
//*ODIL_ID:28116_1003*
//
U "PERSO";
= #S1T0DSSD;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:28116_18*
//

NETWORK
TITLE =SET PRESENT PART MEMORY
//CREATION MEMOIRE PIECE PRESENTE
//*ODIL_ID:28116_1005*
//
U(;
UN "Z1G".MDV;
U "IIS".T0D_9.MSP;
U "IIS".T0D_9.MSLRFID;
UN "IIS".T0D_9.MSVIDE;
U "T0DDSPB9";
O;
U "Z1G".MDV;
U #T0DB9ISA;
U "Z1G".T0D.IPA;
UN "IIT".T0D.MP.MPT;
);
S "IIT".T0D.MP.MPP;
NETWORK
TITLE =EMPTY SUPPORT MEMORY
//MEMOIRE SUPPORT VIDE
//*ODIL_ID:28116_1006*
//
U(;
O "IIS".T0D_9.MSP;
O "Z1G".T0D.MDV;
);
U(;
U "IIT".T0D.MP.MPP;
U "PERSO";
O "IIS".T0D_9.MSAE;
);
S "IIS".T0D_9.MSVIDE;
NETWORK
TITLE =RESET SUPPORT WORD
//RAZ MOT SUPPORT
//*ODIL_ID:28116_1007*
//
UN "IIS".T0D_9.MSP;
UN "IIS".T0D_9.MSE;
SPBNB _503;
CALL "FILL" (
BVAL := "IG".VALEUR0,
RET_VAL := #T0DRETVAL,
BLK := "IIS".T0D_9);
_503: NOP 0;
NETWORK
TITLE =RESET PART TABLE
//RAZ TABLE PIECE
//*ODIL_ID:28116_1008*
//
U(;
UN "IIS".T0D_9.MSP;
UN "Z1G".T0D.IDVM;
O;
U "IIT".T0D.MP.MPP;
U "IIT".T0D.MP.MPAE;
U "Z1G".T0D.IAP;
);
SPBNB _504;
CALL "FILL" (
BVAL := "IG".VALEUR0,
RET_VAL := #T0DRETVAL,
BLK := "IIT".T0D.MP);
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:28116_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:28116_82*
//
U "PERSO";
= "Z1G".T0D.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:28116_83*
//
U "PERSO";
= "Z1G".T0D.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:28116_84*
//
U "Z1G".T0D.IAP;
UN "IIT".T0D.MS.MSP;
UN "IIT".T0D.MP.MPP;
= "Z1G".T0D.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:28116_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".T0D.IPP;
UN "Z1G".T0D.IPA;
= L 4.0;
BLD 103;
CALL #T0DTDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:28116_86*
//
U #T0DTDFPC.Q;
S #S1T0DDPIEC;
U(;
O "Z1G".T0D.IPP;
O "Z1G".T0D.IPA;
);
R #S1T0DDPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                   PLOT LECTURE RFID / READING RFID LABEL                  **
//*******************************************************************************
//*ODIL_ID:28116_2000*
//

NETWORK
TITLE =READING AUTHORIZATION OF RFID LABEL
//AUTORISATION DE LA LECTURE ETIQUETTE RFID
//*ODIL_ID:28116_2001*
//
U "PERSO";
U "IIS".T0D_9.MSP;
UN "IIT".T0D.MP.MPP;
UN "Z1G".T0D.IDVM;
UN "IIS".T0D_9.MSLRFID;
UN #S1T0DDLRFID;
UN "Z1G".MDV;
= #T0D_LECRF300.Val;
NETWORK
TITLE =RF300 READING
//LECTURE RF300
//*ODIL_ID:28116_2002*
//
U "IADF";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _505;
CALL #T0D_LECRF300 (
ASMAddr := 1907,
ASMChannel := 1,
Module := 0,
Reset := L 0.1,
Mode := 1,
Address := 3,
Len := 97,
DBNR := 93,
Offset := 6,
Def := #S1T0DDLRFID,
Lock := #T0DIDENTLOCK);
_505: NOP 0;
NETWORK
TITLE =SUPPORT MEMORY READING RFID LABEL OK
//MEMOIRE SUPPORT LECTURE RFID OK
//*ODIL_ID:28116_2003*
//
U #T0D_LECRF300.Ok;
S "IIS".T0D_9.MSLRFID;
NETWORK
TITLE =TABLE TRANSFER
//TABLE TRANSFERT
//*ODIL_ID:28116_2005*
//
U "IIS".T0D_9.MSLRFID;
U "IIS".T0D_9.MSP;
U "IIT".T0D.MP.MPP;
UN "Z1G".T0D.IDVM;
= L 0.0;
U L 0.0;
UN #T0DTR;
= T0DAUXTR;
U L 0.0;
BLD 102;
= #T0DTR;
NETWORK
TITLE =RFID DATAS TRANSFER THROUGH PART TABLE
//TRANSFERT DONNEES RFID VERS TABLE PIECE
//*ODIL_ID:28116_2006*
//
U T0DAUXTR;
= L 0.0;
U L 0.0;
SPBNB _506;
L "IDENT".T0D.ID.DVEH.FILM;
T "IIT".T0D.NFILM;
_506: NOP 0;
U L 0.0;
SPBNB _507;
CALL "BLKMOV" (
SRCBLK := "IDENT".T0D.ID.DVEH.NORDRE,
RET_VAL := #T0DRETVAL,
DSTBLK := "IIT".T0D.NORDRE);
_507: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        WRITING RFID / ECRITURE RFID                       **
//*******************************************************************************
//*ODIL_ID:28116_2007*
//

NETWORK
TITLE =RESET RFID DATAS TABLE
//REMISE A ZERO TABLE RFID AVANT RAZ DE L'ETIQUETTE
//*ODIL_ID:28116_2008*
//
U(;
U "IIS".T0D_9.MSP;
U "IIS".T0D_9.MSLRFID;
U "IIS".T0D_9.MSVIDE;
O;
U "IIT".T0D.MP.MPP;
U "IIT".T0D.MP.MPAE;
U "Z1G".T0D.IPA;
);
SPBNB _508;
CALL "FILL" (
BVAL := "IG".VALEUR0,
RET_VAL := #T0DRETVAL,
BLK := "IDENT".T0D);
_508: NOP 0;
NETWORK
TITLE =RFID WRITING REQUEST
//AUTORISATION D'ECRITURE RFID
//*ODIL_ID:28116_2009*
//
U "PERSO";
U "IIS".T0D_9.MSP;
U "IIS".T0D_9.MSLRFID;
U "IIS".T0D_9.MSVIDE;
UN "IIT".T0D.MP.MPP;
UN "IIS".T0D_9.MSERFID;
UN #S1T0DDERFID;
UN "Z1G".T0D.IDVM;
= #T0D_ECRRF300.Val;
NETWORK
TITLE =WRITING RFID RF300
//ECRITURE ETIQUETTE RFID
//*ODIL_ID:28116_2010*
//
U "IADF";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _509;
CALL #T0D_ECRRF300 (
ASMAddr := 1907,
ASMChannel := 1,
Module := 0,
Reset := L 0.1,
Mode := 2,
Address := 3,
Len := 97,
DBNR := 93,
Offset := 6,
Def := #S1T0DDERFID,
Lock := #T0DIDENTLOCK);
_509: NOP 0;
NETWORK
TITLE =RFID WRITING SUPPORT MEMORY OK
//MEMOIRE SUPPORT ECRITURE RFID OK
//*ODIL_ID:28116_2011*
//
U #T0D_ECRRF300.Ok;
S "IIS".T0D_9.MSERFID;
NETWORK
TITLE =
//******************************************************************************
//**                               EXCHANGES ROBOT U0                      **
//******************************************************************************
//*ODIL_ID:22436_190_U0*
//

NETWORK
TITLE =WORK AUTHORIZATION 1
//AUTORISATION DE TRAVAIL 1
//*ODIL_ID:22436_19U0*
//
U "IIT".T0D.MP.MPP;
U "IIT".T0D.MP.MPAT;
U "Z1G".T0D.IPP;
UN "IIT".T0D_TT.MFT.MFT1;
UN "Z1G".U0.ECHG_T0D.FT1;
= "Z1G".T0D.ECHG_U0.AT1;
NETWORK
TITLE =WORK MOVE AWAY AUTHORIZATION 1
//AUTORISATION RECUL TRAVAIL 1
//*ODIL_ID:22436_20U0*
//
U "IIT".T0D.MP.MPP;
U "IIT".T0D.MP.MPAT;
U "Z1G".T0D.IPP;
U "IIT".T0D_TT.MFT.MFT1;
UN "Z1G".U0.ECHG_T0D.SA;
= "Z1G".T0D.ECHG_U0.ART1;
NETWORK
TITLE =
//*******************************************************************************
//**                            CHAIN 1 / CHAINE 1                             **
//*******************************************************************************
//*ODIL_ID:28116_1014*
//

NETWORK
TITLE =SAFETY SWITCH SELECTOR
//SELECTEUR DE SECURITE
//*ODIL_ID:28116_1015*
//
U "PERSO";
= L 0.0;
U L 0.0;
BLD 102;
= #T0DCHAINE.MS.Ssm;
U L 0.0;
NOT;
= #S1T0DDEF;
NETWORK
TITLE =TORQUE LIMITER INFORMATION
//INFORMATION DU LIMITEUR D'EFFORT
//*ODIL_ID:28116_1016*
//
U "T0DLIMEF";
= #T0DCHAINE.MS.Climef;
NETWORK
TITLE =MOTOR CIRCUIT BREAKER INFORMATION
//INFORMATION DU DISJONCTEUR MOTEUR
//*ODIL_ID:28116_1017*
//
U "PERSO";
= #T0DCHAINE.MS.Cdjm;
NETWORK
TITLE =UNLOADING SHAPE INFORMATION
//INFORMATION DE LA SILHOUETTE AU DECHARGEMENT
//*ODIL_ID:28116_1018*
//
U "T0DDSIL";
= L 0.0;
U L 0.0;
BLD 102;
= #T0DCHAINE.MS.Csil;
U L 0.0;
NOT;
= #S1T0DDSIL;
NETWORK
TITLE =SHUTTLE TURN TRANSIT CHECK
//CONTROLE TRANSIT DE LA NAVETTE DANS LE VIRAGE AU POSTE DE DECHARGEMENT
//*ODIL_ID:28116_1019*
//
U "IIS".T0D_9.MSE;
U "T0DDOB9";
= #T0DCHAINE.MS.Cvirdch;
NETWORK
TITLE =LOADING STAGE CORRECT WORKING
//CONTROLE DE BON FONCTIONNEMENT DU MEUBLE AU POSTE DE CHARGEMENT
//*ODIL_ID:28116_1020*
//
U "PERSO";
= #T0DCHAINE.MS.Ch_ok;
NETWORK
TITLE =RACK MOTOR OUTSIDE STOP CONDITION
//CONDITIONS EXTERIEURES D'ARRET MOTEUR DU MEUBLE
//Si  #xx_CHAINE1.MS.Cexam à 1, alors arrêt moteur.
//*ODIL_ID:28116_1021*
//
U "PERSO";
= #T0DCHAINE.MS.Cexam;
NETWORK
TITLE =END OF WATCH STARTING CONDITION
//CONDITION D'ARRET FIN DE QUART
//*ODIL_ID:28116_1023*
//
UN "T0DEOB8";
UN "T0DEFB8";
UN "T0DEOB9";
UN "T0DEFB9";
UN "PERSO";
= #T0DCHAINE.Finquart;
NETWORK
TITLE =RACK CHAIN MANAGEMENT
//GESTION DE LA CHAINE DU MEUBLE
//*ODIL_ID:28116_1024*
//
U "PERSO";
= L 0.0;
BLD 103;
U "T0DDSMAX";
= L 0.2;
BLD 103;
U "T0DDSMIN";
= L 0.3;
BLD 103;
U(;
O "Z1IR";
O "PERSO";
);
= L 0.4;
BLD 103;
U "Z1IADF";
= L 0.5;
BLD 103;
CALL #T0DCHAINE (
Au := L 0.0,
Dsmax := L 0.2,
Dsmin := L 0.3,
Z_ir := L 0.4,
Iadf := L 0.5,
Tp_fquar := T#30M,
Tp_smin := T#10S,
Tp_smax := T#10S,
Tp_vir := T#10S,
Ismaxi := #T0DISMAXI,
Ismini := #T0DISMINI,
def := #S1T0DALR_M);
NOP 0;
NETWORK
TITLE =T0D RACK MOTOR CONTACTOR CONTROL
//COMMANDE CONTACTEUR CHAINE MEUBLE T0D
//*ODIL_ID:28116_1025*
//
U #T0DCHAINE.Rme;
= "T0DDM1_CDM";
= "T0DDM1_FRE";
NETWORK
TITLE =
//*******************************************************************************
//**                            STOPPER 8 / BUTEE 8                            **
//*******************************************************************************
//*ODIL_ID:28116_1026*
//

NETWORK
TITLE =STOPPER OPENING ORDER AUXILIARY 1
//AUXILIAIRE 1 COMMANDE D'OUVERTURE BUTEE
//*ODIL_ID:28116_1027*
//
U "T0DDM1_CDM";
UN "Z1G".MDV;
U(;
ON "Z1G".LIEN_PUP.Z_mvid;
O "IIT".T0D.MS.MSP;
);
= #T0DX1COABB8;
NETWORK
TITLE =STOPPER  MANAGEMENT
//GESTION DE LA BUTEE
//*ODIL_ID:28116_1028*
//
U "PERSO";
= L 0.0;
BLD 103;
U #T0DX1COABB8;
= L 0.1;
BLD 103;
U "T0DDSPB8";
= L 0.2;
BLD 103;
U "T0DDFB8";
= L 0.3;
BLD 103;
U "T0DDOB8";
= L 0.4;
BLD 103;
U "BA1";
= L 0.5;
BLD 103;
U "IIS".T0D_9.MSP;
= L 0.6;
BLD 103;
U #T0D_9_BVP;
= L 0.7;
BLD 103;
CALL #T0D_BUTEE8 (
Com := L 0.0,
Caob := L 0.1,
Dsp := L 0.2,
Dfb := L 0.3,
Dob := L 0.4,
Msea := L 0.5,
Cev := L 0.6,
Bvvp := L 0.7,
MSP := "IIS".T0D_8,
POS_MSE := 2,
Eob := "T0DEOB8",
efb := "T0DEFB8",
Isp := #T0DB8ISP,
Isa := #T0DB8ISA);
NOP 0;
NETWORK
TITLE =MONITORING : DEGRADED MODE
//SUIVI : MARCHE DEGRADEE
//*ODIL_ID:28116_1029*
//
U #T0D_BUTEE8.Def;
UN #S1T0DDB8;
= #S1T0DB8MDG;
NETWORK
TITLE =MONITORING : STOPPER FAULT
//SUIVI : DEFAUT BUTEE
//*ODIL_ID:28116_1030*
//
U #T0D_BUTEE8.Def;
U #S1T0DAIM;
= #S1T0DDB8;
NETWORK
TITLE =
//*******************************************************************************
//**                            STOPPER 9 / BUTEE 9                            **
//*******************************************************************************
//

NETWORK
TITLE =STOPPER OPENING ORDER AUXILIARY 1
//AUXILIAIRE 1 COMMANDE D'OUVERTURE BUTEE
//*ODIL_ID:28116_1031*
//
U "Z1G".T0D.IPA;
U "IIS".T0D_9.MSP;
U "IIS".T0D_9.MSVIDE;
U "IIS".T0D_9.MSERFID;
O;
U "PERSO";
U "Z1G".T0D.IAP;
= #T0DX1COABB9;
NETWORK
TITLE =STOPPER  MANAGEMENT
//GESTION DE LA BUTEE
//*ODIL_ID:28116_1032*
//
U "PERSO";
= L 0.0;
BLD 103;
U #T0DX1COABB9;
= L 0.1;
BLD 103;
U "T0DDSPB9";
= L 0.2;
BLD 103;
U "T0DDFB9";
= L 0.3;
BLD 103;
U "T0DDOB9";
= L 0.4;
BLD 103;
U "IIS".T0D_8.MSE;
= L 0.5;
BLD 103;
U "T0DDDZB9";
= L 0.6;
BLD 103;
U "BA1";
= L 0.7;
BLD 103;
CALL #T0D_BUTEE9 (
Com := L 0.0,
Caob := L 0.1,
Dsp := L 0.2,
Dfb := L 0.3,
Dob := L 0.4,
Msea := L 0.5,
Cev := L 0.6,
Bvvp := L 0.7,
MSP := "IIS".T0D_9.MSP,
POS_MSE := 2,
Eob := "T0DEOB9",
efb := "T0DEFB9",
Isp := #T0DB9ISP,
Isa := #T0DB9ISA);
NOP 0;
NETWORK
TITLE =STOPPER 9 : EMPTY AND READY
//BUTEE 9 : VIDE ET PRETE
//*ODIL_ID:28116_1033*
//
U #T0D_BUTEE9.Bvp;
= #T0D_9_BVP;
NETWORK
TITLE =MONITORING : DEGRADED MODE
//SUIVI : MARCHE DEGRADEE
//*ODIL_ID:28116_1034*
//
U #T0D_BUTEE9.Def;
UN #S1T0DDB9;
= #S1T0DB9MDG;
NETWORK
TITLE =MONITORING : STOPPER 9 FAULT
//SUIVI : DEFAUT BUTEE 9
//*ODIL_ID:28116_1035*
//
U #T0D_BUTEE9.Def;
U #S1T0DAIM;
= #S1T0DDB9;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:28116_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1T0D"
VERSION : 0.1
"1_T0D_DCHGT_MEUBL"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_T1_OP_BPVAL"
TITLE =OPERATOR
VERSION : 0.1
VAR
  T1CSOP : BF_IHMCR1;	//T1OPB:  DEF. COMUM SEGURANCA SOP (SOP)
  S1T1OPBDF24VR : BOOL;	//T1OPB: DEF. ALIMENTACÃO REDE 24V
  S1T1OPBDF24VZ : BOOL;	//T1OPB: DEF. ALIMENTACÃO 24V ZONA
  S1T1OPBDCSOP : BOOL;	//T1OPB: DEF. COMUM SEGURANCA SOP (SOP)
  S1T1OPBDCSEC : BOOL;	//T1OPB: DEF. CARTA DE SEGURANCA
  T1TATOP : TON;	//T1_OP: OPERATOR WAITING TIMER / TEMPO ATTENTE OPERATEUR
  T1FTOPDV : TON;	//T1_OP: END OF WORK TEMPORISED FOR DRY RUN MODE / TEMPS ATTENTE DEVERMINAGE
  T1TDRBV : TON;	//T1_OP: DESACTIVATION VALIDATION PUSH BUTTON TIMER / TEMPO RELACHE BP VALIDAT
  T1TATOP_PT : TIME;	//T1_OP: OPERATOR WORK THRESHOLD WAITING TIME / SEUIL TEMPS ATTENTE OPERATEUR
  TAO : INT;	//T1_OP: OPERATOR WORK THRESHOLD WAITING TIME / SEUIL TEMPS ATTENTE OPERATEUR
  S1T1AIO : BOOL;	//T1_OP: OPERATOR INDUCED STOPPAGE / ARRET INDUIT OPERATEUR
  S1T1DBVOP : BOOL;	//T1_OP: FAULT DESACTIVATION VALIDATION PUSH BUTTON / DEF RETOMBEE BP VALIDATI
  T1MTOP : BOOL;	//T1_OP: MEMORY THROUGH OPERATOR / MEMOIRE TRAVERSEE OPERATEUR
  T1MRBV : BOOL;	//T1_OP: VALIDATION BUTTON RELEASE MEMORY / MEMOIRE RETOMBE BOUTON OPERATEUR
  T1MBVOP : BOOL;	//T1_OP: OPERATOR VALIDATION BUTTON MEMORY / MEMOIRE VALIDATION OPERATEUR
  T1SECU : BOOL;	//T1 - OPERATOR ASSOCIATE LASER SCAN / SCRUTATEUR LASER ASSOCIE A L OPERATEUR
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:29448_309*
//

NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:29509_310*
//
U(;
ON "T1CCB24R";
O;
U #S1T1OPBDF24VR;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1T1OPBDF24VR;
NETWORK
TITLE =CIRCUIT BREAKER DIAGNOSIS
//DIAGNOSTIQUE ETAT DISJONCTEUR
//*ODIL_ID:29511_310*
//
U(;
ON "T1CCB24Z";
O;
U #S1T1OPBDF24VZ;
UN "Z1IADF";
);
UN "IG".DEF_MAJ;
= #S1T1OPBDF24VZ;
NETWORK
TITLE =PANEL T1OPB SAFETY CARD FAULT
//T1OPB: DEF. CARTA DE SEGURANCA
//*ODIL_ID:29540_311*
//
U "PERSO";
UN "IG".DEF_MAJ;
= #S1T1OPBDCSEC;
NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:29448_312*
//

NETWORK
TITLE =SAFETY LOOP HMI / DIAGNOSTIQUE BOUCLE DE SECURITE
//T1OPB:  DEF. COMUM SEGURANCA SOP (SOP)
//*ODIL_ID:29513_314*
//
U "Z1DEF_MAJ";
= L 0.0;
BLD 103;
U "T1CCSOP";
= L 0.1;
BLD 103;
U "PERSO";
SPBNB _501;
CALL #T1CSOP(
Typ := 1,
Def_Maj := L 0.0,
CSecu := L 0.1,
Def := #S1T1OPBDCSOP);
_501: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                               SAFETY CONDITIONS                           **
//*******************************************************************************
//*ODIL_ID:29448_1027*
//

NETWORK
TITLE =OPERATOR ASSOCIATE LASER SCANNER
//SCRUTATEUR LASER ASSOCIE A L OPERATEUR
//*ODIL_ID:29448_1028*
//
U "PERSO";
= #T1SECU;
NETWORK
TITLE =
//*******************************************************************************
//**                           MONITORING / SUIVI                              **
//*******************************************************************************
//*ODIL_ID:29448_1029*
//

NETWORK
TITLE =LOADING OPERATOR THRESHOLD WAITING TIME VALUE
//VALEUR SEUIL TEMPS D ATTENTE OPERATEUR : CONVERSION DE FORMAT "INT" VERS FORMAT
//"TIME"
//*ODIL_ID:29448_1030*
//
L #TAO;
L 100;
*I;
T #T1TATOP_PT;
NOP 0;
NETWORK
TITLE =OPERATOR WAITING TIME CONTROL
//CONTROLE TEMPS D ATTENTE OPERATEUR
//*ODIL_ID:29448_1031*
//
U "T0C_AT_T1";
U "Z1G".ITR;
= L 3.0;
BLD 103;
CALL #T1TATOP (
IN := L 3.0,
PT := #T1TATOP_PT);
NOP 0;
NETWORK
TITLE =OPERATOR INDUCED STOPPAGE
//ARRET INDUIT OPERATEUR
//*ODIL_ID:29448_1032*
//
UN "T0C_AT_T1";
UN "T1CRST0C";
O #T1TATOP.Q;
= #S1T1AIO;
NETWORK
TITLE =FAULT DESACTIVATION VALIDATION PUSH BUTTON TIMER
//TEMPORISATION RETOMBE BOUTON DE VALIDATION
//*ODIL_ID:29448_1047*
//
U "Z1G".LIEN_PUP.Z_mauto;
U "T1VAL1";
UN #T1MRBV;
U "T0C_AT_T1";
= L 0.0;
BLD 103;
CALL #T1TDRBV (
IN := L 0.0,
PT := T#30S);
NOP 0;
NETWORK
TITLE =FAULT DESACTIVATION VALIDATION PUSH BUTTON
//DEFAUT RETOMBEE BOUTON DE VALIDATION OPERATEUR
//*ODIL_ID:29448_1033*
//
U #T1TDRBV.Q;
S #S1T1DBVOP;
UN "T1VAL1";
R #S1T1DBVOP;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                            DRY RUN / DEVERMINAGE                          **
//*******************************************************************************
//*ODIL_ID:29448_1034*
//

NETWORK
TITLE =OPERATEUR END OF WORK TEMPORISED
//FIN DE TRAVAIL OPERATEUR TEMPORISE POUR LE MODE DEVERMINAGE
//*ODIL_ID:29448_1035*
//
U(;
O "Z1G".MDV;
O "Z1G".T0C.MDV;
);
U "T0C_AT_T1";
= L 3.0;
BLD 103;
CALL #T1FTOPDV (
IN := L 3.0,
PT := T#10S);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                            OPERATOR MEMORIES                              **
//*******************************************************************************
//*ODIL_ID:29448_1036*
//

NETWORK
TITLE =MEMORY THROUGH OPERATOR
//MEMOIRE TRAVERSEE OPERATEUR
//*ODIL_ID:29448_1037*
//
UN #T1SECU;
U "T0C_AT_T1";
S #T1MTOP;
U "T0C_ET_T1";
R #T1MTOP;
NOP 0;
NETWORK
TITLE =MEMORY RELEASE OF VALIDATION BUTTON
//MEMOIRE RETOMBEE DU BOUTON DE VALIDATION
//*ODIL_ID:29448_1038*
//
U "T0C_AT_T1";
UN "T1VAL1";
S #T1MRBV;
U "T0C_ET_T1";
R #T1MRBV;
NOP 0;
NETWORK
TITLE =OPERATOR VALIDATION PUSH BUTTON MEMORY
//MEMOIRE BOUTON DE VALIDATION OPERATEUR
//*ODIL_ID:29448_1039*
//
U(;
O "T1VAL1";
O #T1MBVOP;
);
U #T1MTOP;
U #T1SECU;
= #T1MBVOP;
NETWORK
TITLE =
//*******************************************************************************
//**                       OPERATOR EXCHANGES WITH STAGE                       **
//*******************************************************************************
//*ODIL_ID:29448_1040*
//

NETWORK
TITLE =END OF WORK OPERATOR
//FIN DE TRAVAIL OPERATEUR
//*ODIL_ID:29448_1041*
//
U(;
UN "Z1G".MDV;
UN "Z1G".T0C.MDV;
U #T1MBVOP;
U #T1MTOP;
U #T1MRBV;
O;
U #T1FTOPDV.Q;
U "T0C_AT_T1";
);
UN "T0C_ET_T1";
= "Z1G".T1.ECHG_T0C.FT1;
NETWORK
TITLE =OPERATOR BACKWARD SAFETY (EXCHANGES WITH STAGE)
//SECURITE ARRIERE OPERATEUR
//*ODIL_ID:29448_1042*
//
U #T1SECU;
U "T1CRST0C";
UN #T1MTOP;
UN #T1MRBV;
= "Z1G".T1.ECHG_T0C.SA;
NETWORK
TITLE =CONDITION SAFETY RESET (MEMENTO FOR SAFETY PROGRAM USE)
//CONDITION DE REARMEMENT SECURITE
//*ODIL_ID:29448_1043*
//
U #T1SECU;
U(;
O #T1MBVOP;
O;
UN "T0C_AT_T1";
U(;
O "T1VAL1";
O "T1CRST0C";
);
);
= "T1CRST0C";
NETWORK
TITLE =
//*******************************************************************************
//**                          TOWER LAMP MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:29448_1044*
//

NETWORK
TITLE =OPERATOR TOWER LAMP: WORK PROHIBITION (RED)
//VERRINE INTERDICTION DE TRAVAIL OPERATEUR
//*ODIL_ID:29448_1045*
//
U "Z1G".T1.ECHG_T0C.SA;
UN "T0C_AT_T1";
O "IG".LIEN_ILOT.ITLG;
= "T1VIT";
NETWORK
TITLE =OPERATOR TOWER LAMP: WORK AUTHORIZATION (GREEN)
//VERRINE AUTORISATION DE TRAVAIL OPERATEUR
//*ODIL_ID:29448_1046*
//
UN "Z1G".T1.ECHG_T0C.SA;
U "T0C_AT_T1";
O;
UN "Z1G".T1.ECHG_T0C.SA;
U "IG".LIEN_ILOT.ICL;
O "IG".LIEN_ILOT.ITLG;
= "T1VAT";
END_FUNCTION_BLOCK

DATA_BLOCK "Z1T1"
VERSION : 0.1
"1_T1_OP_BPVAL"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_U0_ROBOT"
TITLE =ROBOT U0 MANAGEMENT
//GESTION DU ROBOT U0
VERSION : 0.1
VAR
  U0ROBOT : BF_ROBOT;	//U0: ROBOT MANAGEMENT FONCTION BLOC / FB DE GESTION DU ROBOT
  U0SUIVI : BF_TCY_SUIV;	//U0: CYCLE TIME MONITORING / SUIVI DU TEMPS DE CYCLE ROBOT
  U0CODE : WORD;	//U0: ROBOT CYCLE CODE / CODE CYCLE DU ROBOT
  ST1 : INT;	//U0: T1 THRESHOLD (1/10S) / SEUIL DE T1 (BASE 1/10S)
  ST2 : INT;	//U0: T2 THRESHOLD (1/10S) / SEUIL DE T2 (BASE 1/10S)
  S1U0DIV : INT;	//U0: ROBOT DIVERSITY IN PROGRESS / DIVERSITE EN COURS DE TRAVAIL
  S1U0TCP : INT;	//U0: OWN CYCLE TIME (1/10S) / TEMPS DE CYCLE PROPRE (BASE 1/10S)
  S1U0TCT : INT;	//U0: TOTAL CYCLE TIME (1/10S) / TEMP DE CYCLE TOTAL (BASE 1/10S)
  S1U0NCY : INT;	//U0: ROBOT CYCLE NUMBER / NUMERO DE CYCLE ROBOT
  S1U0NDR : WORD;	//U0: ROBOT FAULT NUMBER / NUMERO DE DEFAUT ROBOT
  S1U0APP : BOOL;	//U0: ROBOT GENERAL FAULT / DEFAUT GENERAL ROBOT
  S1U0APE : BOOL;	//U0: EXPLOITATION OWN STOPPAGE / ARRET PROPRE EXPLOITATION
  S1U0APF : BOOL;	//U0: FUNCTIONNAL OWN STOPPAGE / ARRET PROPRE FONCTIONNEL
  S1U0ALR : BOOL;	//U0: OPERATOR CALL / APPEL OPERATEUR
  S1U0AR : BOOL;	//U0: STOP ROBOT / ARRET ROBOT
  S1U0ATT : BOOL;	//U0: ROBOT WAITING / ROBOT EN ATTENTE
  S1U0TOPCY : BOOL;	//U0: ROBOT TOP CYCLE / TOP CYCLE ROBOT
  S1U0AIA : BOOL;	//U0: WAIT FOR EVENT / ATTENTE CODE EVENEMENT
  S1U0HPR : BOOL;	//U0: NOT IN SERVICE / HORS PRODUCTION
  S1U0DER : BOOL;	//U0: ROBOT DERIVE / DERIVE ROBOT
  S1U0DTC : BOOL;	//U0: CYCLE TIME OVERRUN / DEPASSEMENT TEMPS T1
  S1U0DT2 : BOOL;	//U0: CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  U0XCODE : BOOL;	//U0: ROBOT CYCLE CODE AUXILLIARY / AUXILLIAIRE CODE CYCLE ROBOT
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:21406_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:21406_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                         MONITORING / SUIVI                                **
//*******************************************************************************
//*ODIL_ID:21406_1001*
//

NETWORK
TITLE =MONITORING: DIVERSITY VALUE
//INFORMATION DIVERSITE EN COURS
//*ODIL_ID:21406_1025*
//
U "PERSO";
U #S1U0TOPCY;
SPBNB _501;
L 1;
T #S1U0DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING: ROBOT CYCLE TIME CHECK
//SUIVI: CONTROLE DU TEMPS DE CYCLE ROBOT
//*ODIL_ID:21406_1026*
//
U #S1U0AR;
= L 1.0;
BLD 103;
U #S1U0ATT;
= L 1.1;
BLD 103;
U #S1U0TOPCY;
= L 1.2;
BLD 103;
CALL #U0SUIVI (
E_appape := L 1.0,
E_aiapf := L 1.1,
E_topcyc := L 1.2,
E_numcyc := #S1U0DIV,
E_seu_t1 := #ST1,
E_seu_t2 := #ST2,
S_tcp := #S1U0TCP,
S_tct := #S1U0TCT,
S_numcyc := #S1U0NCY,
S_dtc := #S1U0DTC,
S_fint2 := #S1U0DT2);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE G0                                  **
//*******************************************************************************
//*ODIL_ID:16115_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:16115_1005*
//
U "U0OR1";
U "PERSO";
= "Z1G".U0.ECHG_G0.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE G0
//*ODIL_ID:16115_1006*
//
U(;
O "U0OR16";
O "U0REPLI";
);
U "PERSO";
= "Z1G".U0.ECHG_G0.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                       EXCHANGES STAGE T0D                                  **
//*******************************************************************************
//*ODIL_ID:28664_1004*
//

NETWORK
TITLE =END OF WORK
//FIN DE TRAVAIL
//*ODIL_ID:28664_1005*
//
U "U0OR1";
U "PERSO";
= "Z1G".U0.ECHG_T0D.FT1;
NETWORK
TITLE =ROBOT NOT IN ZONE
//SECURITE ARRIERE DU ROBOT / SOUS ENSEMBLE T0D
//*ODIL_ID:28664_1006*
//
U(;
O "U0OR16";
O "U0REPLI";
);
U "PERSO";
= "Z1G".U0.ECHG_T0D.SA;
NETWORK
TITLE =
//*******************************************************************************
//**                              CYCLES ROBOT                                 **
//*******************************************************************************
//*ODIL_ID:21406_1008*
//

NETWORK
TITLE =CYCLE CODE RESET
//INITIALISATION DU NUMERO DE CODE CYCLE
//*ODIL_ID:21406_1009*
//
L 0;
T #U0CODE;
NOP 0;
NETWORK
TITLE =MAIN CYCLE AUXILLIARY
//AUX. CYCLE PRINCIPAL
//*ODIL_ID:21406_1010*
//
U "Z1G".MCYRB;
UN "IG".LIEN_ILOT.MAFJ;
UN "Z1G".LIEN_PUP.Z_macy;
= #U0XCODE;
NETWORK
TITLE =CYCLE NUMBER 1
//CYCLE ROBOT NUMERO 1
//*ODIL_ID:16115_1011_1*
//
U #U0XCODE;
U "Z1G".G0.IPP;
UN "IIT".G0.MP.MPT;
SPBNB _502;
L 1;
T #U0CODE;
_502: NOP 0;
NETWORK
TITLE =CYCLE NUMBER 2
//CYCLE ROBOT NUMERO 2
//*ODIL_ID:28664_1011_2*
//
U #U0XCODE;
U "Z1G".T0D.IPP;
UN "IIT".T0D.MP.MPT;
SPBNB _503;
L 2;
T #U0CODE;
_503: NOP 0;
NETWORK
TITLE =
//---------------------------- MAINTENANCE CYCLE  -------------------------------
//*ODIL_ID:21406_1014*
//

NETWORK
TITLE =REQUEST FOR MAIN FALLBACK POSITION
//DEMANDE DE REPLI DISTANT
//*ODIL_ID:21406_1017*
//
U "Z1G".DRRB;
SPBNB _504;
L 255;
T #U0CODE;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                              ROBOT STANDARD BF                            **
//*******************************************************************************
//*ODIL_ID:21406_1018*
//

NETWORK
TITLE =DRY RUN MODE IN PROGRESS
//MARCHE DEVERMINAGE AU FILM OU LOCAL
//*ODIL_ID:21406_1019*
//
O "Z1G".MDV;
O "Z1G".G0.MDV;
O "Z1G".T0D.MDV;
= #U0ROBOT.Dever;
NETWORK
TITLE =ROBOT U0
//ROBOT U0
//*ODIL_ID:21406_1020*
//
U "Z1IR";
= L 1.0;
BLD 103;
U "PERSO";
= L 1.1;
BLD 103;
U "PERSO";
= L 1.2;
BLD 103;
U "BA1LIEN";
= L 1.3;
BLD 103;
U "BA1";
= L 1.4;
BLD 103;
U "BA1LIEN";
= L 1.6;
BLD 103;
UN "Z1G".PMAZ;
UN "Z1G".PMCY;
= L 1.7;
BLD 103;
CALL #U0ROBOT (
Rearm := L 1.0,
Z_es := L 1.1,
Z_fz := L 1.2,
Aevr := L 1.3,
Stop := L 1.4,
Enpro := L 1.6,
S_prodok := L 1.7,
Cod := #U0CODE,
S_cod_mx := W#16#250,
Iw_rbe1 := "U0RBMS1",
Iw_rbe2 := "U0RBMS2",
Iw_rbe3 := "U0RBMS3",
Iw_rbe4 := "U0RBMS4",
Iw_rbe5 := "U0RBMS5",
Iw_rbe6 := "U0RBMS6",
Def_rb := #S1U0APP,
Appel_op := #S1U0ALR,
S_ar_rb := #S1U0AR,
S_att_rb := #S1U0ATT,
S_top_cy := #S1U0TOPCY,
S_hpr := #S1U0HPR,
S_de := #S1U0DER,
S_ai := #S1U0AIA,
S_ape := #S1U0APE,
S_apf := #S1U0APF,
S_com := #S1U0NDR,
Qw_rbs1 := "U0RBME1",
Qw_rbs2 := "U0RBME2",
Qw_rbs3 := "U0RBME3",
Qw_rbs4 := "U0RBME4",
Qw_rbs5 := "U0RBME5",
Qw_rbs6 := "U0RBME6");
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                 ROBOT EVENTS                              **
//*******************************************************************************
//*ODIL_ID:21406_1021*
//

NETWORK
TITLE =RESET ROBOTS EVENTS
//INITIALISATION EVENEMENTS ROBOTS
//*ODIL_ID:21406_1022*
//
L 0;
T "U0RBME2";
NOP 0;
NETWORK
TITLE =ROBOT EVENTS
//EVENEMENTS ROBOT
//*ODIL_ID:21406_1023*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".LIEN_PUP.Z_macy;
O "U0MANU";
= L 1.0;
U L 1.0;
U "Z1G".G0.ECHG_U0.AT1;
= "U0EV1";
U L 1.0;
U "Z1G".G0.ECHG_U0.ART1;
= "U0EV2";
U L 1.0;
U "Z1G".T0D.ECHG_U0.AT1;
= "U0EV3";
U L 1.0;
U "Z1G".T0D.ECHG_U0.ART1;
= "U0EV4";
U L 1.0;
U "Z1G".U0R.ECHG_U0.AT1;
= "U0EV5";
U L 1.0;
U "Z1G".U0R.ECHG_U0.ART1;
= "U0EV6";
END_FUNCTION_BLOCK

DATA_BLOCK "Z1U0"
VERSION : 0.1
"1_U0_ROBOT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_U9_MONTAGE"
TITLE =MONTAGE
VERSION : 0.1
VAR
  S1U9DIV : INT;	//U9 - DIVERSITY / DIVERSITE
  U01_TF_TP_U9 : BF_TF_TP;	//U9 - TRANSFER PART WORD: U01 -> U9 / TRANSFERT TABLE PIECE U01 -> U9
  U02_TF_TP_U9 : BF_TF_TP;	//U9 - TRANSFER PART WORD: U02 -> U9 / TRANSFERT TABLE PIECE U02 -> U9
  U9RETVAL : INT;	//U9 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  U9TDFPC : TON;	//U9 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1U9DPIEC : BOOL;	//U9 - PART FAULT / DEFAUT PIECE
  NUM_MVT : INT;	//U9 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:83417_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:83417_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:83417_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:83417_217*
//
UN "IIT".U9.MS.MSP;
SPBNB _501;
L 0;
T #S1U9DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:83417_218*
//
U "IIT".U9.MS.MSP;
SPBNB _502;
L 1;
T #S1U9DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:83417_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: U01 -> U9
//TRANSFERT DE LA TABLE PIECE U01 VERS U9
//*ODIL_ID:56827_20*
//
U "IIT".U01.MS.MSP;
UN "IIT".U9.MS.MSP;
U "IIT".U9.MP.MPT;
= L 4.0;
BLD 103;
CALL #U01_TF_TP_U9 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".U01,
Dest := "IIT".U9);
NOP 0;
NETWORK
TITLE =TRANSFER PART TABLE: U02 -> U9
//TRANSFERT DE LA TABLE PIECE U02 VERS U9
//*ODIL_ID:84879_20*
//
U "IIT".U02.MS.MSP;
UN "IIT".U9.MS.MSP;
U "IIT".U9.MP.MPT;
= L 4.0;
BLD 103;
CALL #U02_TF_TP_U9 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".U02,
Dest := "IIT".U9);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:83417_55*
//

NETWORK
TITLE =PART PRESENCE MEMORY
//MEMOIRE PIECE PRESENTE
//*ODIL_ID:83417_58*
//
U "PERSO";
UN "Z1G".U9.IAP;
= "IIT".U9.MP.MPP;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:83417_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:83417_82*
//
U "PERSO";
= "Z1G".U9.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:83417_83*
//
U "PERSO";
= "Z1G".U9.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:83417_84*
//
U "Z1G".U9.IAP;
UN "IIT".U9.MS.MSP;
UN "IIT".U9.MP.MPP;
= "Z1G".U9.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:83417_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".U9.IPP;
UN "Z1G".U9.IPA;
= L 4.0;
BLD 103;
CALL #U9TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:83417_86*
//
U #U9TDFPC.Q;
S #S1U9DPIEC;
U(;
O "Z1G".U9.IPP;
O "Z1G".U9.IPA;
);
R #S1U9DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:83417_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:83417_177*
//
U "IIT".U9_TT.MFT.MFT1;
U "IIT".U9_TT.MFT.MFT2;
U "PERSO";
S "IIT".U9.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:83417_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1U9"
VERSION : 0.1
"1_U9_MONTAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_A01_MONTAGE"
TITLE =MONTAGE
VERSION : 0.1
VAR
  S1A01DIV : INT;	//A01 - DIVERSITY / DIVERSITE
  A01TDFPC : TON;	//A01 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1A01DPIEC : BOOL;	//A01 - PART FAULT / DEFAUT PIECE
  A01RETVAL : INT;	//A01 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  A01PLA : BF_MOUV2P1;	//TYPE_ELEMENT PLA
  S1A01DPLA : BOOL;	//PLA MOVEMENT FAULT / DEFAUT MOUVEMENT PLA
  A01PLB : BF_MOUV2P1;	//TYPE_ELEMENT PLB
  S1A01DPLB : BOOL;	//PLB MOVEMENT FAULT / DEFAUT MOUVEMENT PLB
  A01PLC : BF_MOUV2P1;	//TYPE_ELEMENT PLC
  S1A01DPLC : BOOL;	//PLC MOVEMENT FAULT / DEFAUT MOUVEMENT PLC
  A01SRD : BF_MOUV2P1;	//TYPE_ELEMENT SRD
  S1A01DSRD : BOOL;	//SRD MOVEMENT FAULT / DEFAUT MOUVEMENT SRD
  A01SRE : BF_MOUV2P1;	//TYPE_ELEMENT SRE
  S1A01DSRE : BOOL;	//SRE MOVEMENT FAULT / DEFAUT MOUVEMENT SRE
  NUM_MVT : INT;	//A01 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:70386_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:70386_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:70386_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:70386_217*
//
UN "IIT".A01.MS.MSP;
SPBNB _501;
L 0;
T #S1A01DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:70386_218*
//
U "IIT".A01.MS.MSP;
SPBNB _502;
L 1;
T #S1A01DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:70386_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:70386_82*
//
U "PERSO";
= "Z1G".A01.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:70386_83*
//
UN "A01DPP1";
UN "A01DPP2";
UN "A01DPP3";
UN "A01DPP4";
UN "A01DPP5";
UN "A01DPP6";
UN "A01DPP7";
UN "A01DPP8";
UN "A01DPP9";
UN "A01DPP10";
UN "A01DPP11";
UN "A01DPP12";
UN "A01DPP13";
UN "A01DPP14";
UN "A01DPP15";
UN "A01DPP16";
UN "A01DPP17";
UN "A01DPP18";
UN "A01DPP19";
UN "A01DPP20";
UN "A01DPP21";
UN "A01DPP22";
= "Z1G".A01.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:70386_84*
//
U "Z1G".A01.IAP;
UN "IIT".A01.MS.MSP;
UN "IIT".A01.MP.MPP;
= "Z1G".A01.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:70386_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".A01.IPP;
UN "Z1G".A01.IPA;
= L 4.0;
BLD 103;
CALL #A01TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:70386_86*
//
U #A01TDFPC.Q;
S #S1A01DPIEC;
U(;
O "Z1G".A01.IPP;
O "Z1G".A01.IPA;
);
R #S1A01DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:70386_18*
//

NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:70386_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:70386_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
L "Z1G".NUM_PAGE;
L 136;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         Piloto A                                   **
//*******************************************************************************
//*ODIL_ID:70416_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:70416_1*
//
U "PERSO";
= #A01PLA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:70416_2*
//
U "Z1G".A01.IPP;
UN "IIT".A01.MP.MPT;
U "PERSO";
= #A01PLA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:70416_3*
//
U "A01DAPLA1";
U "A01DAPLA2";
U "A01DAPLA3";
U "A01DAPLA4";
UN "A01DRPLA1";
UN "A01DRPLA2";
UN "A01DRPLA3";
UN "A01DRPLA4";
= #A01PLA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:70416_4*
//
U "PERSO";
= #A01PLA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:70416_5*
//
U(;
U "Z1G".A01.IPP;
U "IIT".A01.MP.MPT;
O "Z1G".A01.IPA;
);
U "PERSO";
= #A01PLA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:70416_6*
//
UN "A01DAPLA1";
UN "A01DAPLA2";
UN "A01DAPLA3";
UN "A01DAPLA4";
U "A01DRPLA1";
U "A01DRPLA2";
U "A01DRPLA3";
U "A01DRPLA4";
= #A01PLA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:70416_7*
//
L #NUM_MVT;
L 1;
==I;
= #A01PLA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:70416_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A01PLA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A01EAPLA",
Ormv := "A01ERPLA",
Def := S1A01DPLA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A01.PLA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         Piloto B                                   **
//*******************************************************************************
//*ODIL_ID:70589_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:70589_1*
//
U "PERSO";
= #A01PLB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:70589_2*
//
U "Z1G".A01.IPP;
UN "IIT".A01.MP.MPT;
U "PERSO";
= #A01PLB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:70589_3*
//
U "A01DAPLB1";
U "A01DAPLB2";
UN "A01DRPLB1";
UN "A01DRPLB2";
= #A01PLB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:70589_4*
//
U "PERSO";
= #A01PLB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:70589_5*
//
U(;
U "Z1G".A01.IPP;
U "IIT".A01.MP.MPT;
O "Z1G".A01.IPA;
);
U "PERSO";
= #A01PLB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:70589_6*
//
UN "A01DAPLB1";
UN "A01DAPLB2";
U "A01DRPLB1";
U "A01DRPLB2";
= #A01PLB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:70589_7*
//
L #NUM_MVT;
L 2;
==I;
= #A01PLB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:70589_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A01PLB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A01EAPLB",
Ormv := "A01ERPLB",
Def := S1A01DPLB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A01.PLB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         Piloto C                                   **
//*******************************************************************************
//*ODIL_ID:70758_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:70758_1*
//
U "PERSO";
= #A01PLC.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:70758_2*
//
U "Z1G".A01.IPP;
UN "IIT".A01.MP.MPT;
U "PERSO";
= #A01PLC.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:70758_3*
//
U "A01DAPLC1";
U "A01DAPLC2";
UN "A01DRPLC1";
UN "A01DRPLC2";
= #A01PLC.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:70758_4*
//
U "PERSO";
= #A01PLC.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:70758_5*
//
U(;
U "Z1G".A01.IPP;
U "IIT".A01.MP.MPT;
O "Z1G".A01.IPA;
);
U "PERSO";
= #A01PLC.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:70758_6*
//
UN "A01DAPLC1";
UN "A01DAPLC2";
U "A01DRPLC1";
U "A01DRPLC2";
= #A01PLC.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:70758_7*
//
L #NUM_MVT;
L 3;
==I;
= #A01PLC.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:70758_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A01PLC (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A01EAPLC",
Ormv := "A01ERPLC",
Def := S1A01DPLC,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A01.PLC_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         Serrage D                                   **
//*******************************************************************************
//*ODIL_ID:70927_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:70927_1*
//
U "PERSO";
= #A01SRD.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:70927_2*
//
U "Z1G".A01.IPP;
UN "IIT".A01.MP.MPT;
U "PERSO";
= #A01SRD.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:70927_3*
//
U "A01DASRD1";
U "A01DASRD2";
U "A01DASRD3";
U "A01DASRD4";
U "A01DASRD5";
U "A01DASRD6";
UN "A01DRSRD1";
UN "A01DRSRD2";
UN "A01DRSRD3";
UN "A01DRSRD4";
UN "A01DRSRD5";
UN "A01DRSRD6";
= #A01SRD.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:70927_4*
//
U "PERSO";
= #A01SRD.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:70927_5*
//
U(;
U "Z1G".A01.IPP;
U "IIT".A01.MP.MPT;
O "Z1G".A01.IPA;
);
U "PERSO";
= #A01SRD.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:70927_6*
//
UN "A01DASRD1";
UN "A01DASRD2";
UN "A01DASRD3";
UN "A01DASRD4";
UN "A01DASRD5";
UN "A01DASRD6";
U "A01DRSRD1";
U "A01DRSRD2";
U "A01DRSRD3";
U "A01DRSRD4";
U "A01DRSRD5";
U "A01DRSRD6";
= #A01SRD.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:70927_7*
//
L #NUM_MVT;
L 4;
==I;
= #A01SRD.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:70927_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A01SRD (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A01EASRD",
Ormv := "A01ERSRD",
Def := S1A01DSRD,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A01.SRD_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         Serrage E                                    **
//*******************************************************************************
//*ODIL_ID:71104_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:71104_1*
//
U "PERSO";
= #A01SRE.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:71104_2*
//
U "Z1G".A01.IPP;
UN "IIT".A01.MP.MPT;
U "PERSO";
= #A01SRE.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:71104_3*
//
U "A01DASRE1";
U "A01DASRE2";
UN "A01DRSRE1";
UN "A01DRSRE2";
= #A01SRE.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:71104_4*
//
U "PERSO";
= #A01SRE.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:71104_5*
//
U(;
U "Z1G".A01.IPP;
U "IIT".A01.MP.MPT;
O "Z1G".A01.IPA;
);
U "PERSO";
= #A01SRE.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:71104_6*
//
UN "A01DASRE1";
UN "A01DASRE2";
U "A01DRSRE1";
U "A01DRSRE2";
= #A01SRE.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:71104_7*
//
L #NUM_MVT;
L 5;
==I;
= #A01SRE.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:71104_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A01SRE (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A01EASRE",
Ormv := "A01ERSRE",
Def := S1A01DSRE,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A01.SRE_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:70386_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:70386_181*
//
U #A01PLA.MF.IA;
U #A01PLB.MF.IA;
U #A01PLC.MF.IA;
U #A01SRD.MF.IA;
U #A01SRE.MF.IA;
U "PERSO";
= "Z1G".A01.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:70386_182*
//
U #A01PLA.MF.IR;
U #A01PLB.MF.IR;
U #A01PLC.MF.IR;
U #A01SRD.MF.IR;
U #A01SRE.MF.IR;
U "PERSO";
= "Z1G".A01.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1A01"
VERSION : 0.1
"1_A01_MONTAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_A02_MONTAGE"
TITLE =MONTAGE
VERSION : 0.1
VAR
  S1A02DIV : INT;	//A02 - DIVERSITY / DIVERSITE
  A02TDFPC : TON;	//A02 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1A02DPIEC : BOOL;	//A02 - PART FAULT / DEFAUT PIECE
  A02RETVAL : INT;	//A02 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  A02PLA : BF_MOUV2P1;	//TYPE_ELEMENT PLA
  S1A02DPLA : BOOL;	//PLA MOVEMENT FAULT / DEFAUT MOUVEMENT PLA
  A02PLB : BF_MOUV2P1;	//TYPE_ELEMENT PLB
  S1A02DPLB : BOOL;	//PLB MOVEMENT FAULT / DEFAUT MOUVEMENT PLB
  A02PLC : BF_MOUV2P1;	//TYPE_ELEMENT PLC
  S1A02DPLC : BOOL;	//PLC MOVEMENT FAULT / DEFAUT MOUVEMENT PLC
  A02SRD : BF_MOUV2P1;	//TYPE_ELEMENT SRD
  S1A02DSRD : BOOL;	//SRD MOVEMENT FAULT / DEFAUT MOUVEMENT SRD
  A02SRE : BF_MOUV2P1;	//TYPE_ELEMENT SRE
  S1A02DSRE : BOOL;	//SRE MOVEMENT FAULT / DEFAUT MOUVEMENT SRE
  NUM_MVT : INT;	//A02 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:74623_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:74623_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:74623_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:74623_217*
//
UN "IIT".A02.MS.MSP;
SPBNB _501;
L 0;
T #S1A02DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:74623_218*
//
U "IIT".A02.MS.MSP;
SPBNB _502;
L 1;
T #S1A02DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:74623_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:74623_82*
//
U "PERSO";
= "Z1G".A02.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:74623_83*
//
U "PERSO";
= "Z1G".A02.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:74623_84*
//
U "Z1G".A02.IAP;
UN "IIT".A02.MS.MSP;
UN "IIT".A02.MP.MPP;
= "Z1G".A02.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:74623_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".A02.IPP;
UN "Z1G".A02.IPA;
= L 4.0;
BLD 103;
CALL #A02TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:74623_86*
//
U #A02TDFPC.Q;
S #S1A02DPIEC;
U(;
O "Z1G".A02.IPP;
O "Z1G".A02.IPA;
);
R #S1A02DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:74623_18*
//

NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:74623_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:74623_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
L "Z1G".NUM_PAGE;
L 137;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLA                                   **
//*******************************************************************************
//*ODIL_ID:74653_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:74653_1*
//
U "PERSO";
= #A02PLA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:74653_2*
//
U "Z1G".A02.IPP;
UN "IIT".A02.MP.MPT;
U "PERSO";
= #A02PLA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:74653_3*
//
U "A02DAPLA1";
U "A02DAPLA2";
U "A02DAPLA3";
U "A02DAPLA4";
UN "A02DRPLA1";
UN "A02DRPLA2";
UN "A02DRPLA3";
UN "A02DRPLA4";
= #A02PLA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:74653_4*
//
U "PERSO";
= #A02PLA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:74653_5*
//
U(;
U "Z1G".A02.IPP;
U "IIT".A02.MP.MPT;
O "Z1G".A02.IPA;
);
U "PERSO";
= #A02PLA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:74653_6*
//
UN "A02DAPLA1";
UN "A02DAPLA2";
UN "A02DAPLA3";
UN "A02DAPLA4";
U "A02DRPLA1";
U "A02DRPLA2";
U "A02DRPLA3";
U "A02DRPLA4";
= #A02PLA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:74653_7*
//
L #NUM_MVT;
L 1;
==I;
= #A02PLA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:74653_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A02PLA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A02EAPLA",
Ormv := "A02ERPLA",
Def := S1A02DPLA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A02.PLA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLB                                   **
//*******************************************************************************
//*ODIL_ID:74826_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:74826_1*
//
U "PERSO";
= #A02PLB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:74826_2*
//
U "Z1G".A02.IPP;
UN "IIT".A02.MP.MPT;
U "PERSO";
= #A02PLB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:74826_3*
//
U "A02DAPLB1";
U "A02DAPLB2";
UN "A02DRPLB1";
UN "A02DRPLB2";
= #A02PLB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:74826_4*
//
U "PERSO";
= #A02PLB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:74826_5*
//
U(;
U "Z1G".A02.IPP;
U "IIT".A02.MP.MPT;
O "Z1G".A02.IPA;
);
U "PERSO";
= #A02PLB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:74826_6*
//
UN "A02DAPLB1";
UN "A02DAPLB2";
U "A02DRPLB1";
U "A02DRPLB2";
= #A02PLB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:74826_7*
//
L #NUM_MVT;
L 2;
==I;
= #A02PLB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:74826_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A02PLB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A02EAPLB",
Ormv := "A02ERPLB",
Def := S1A02DPLB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A02.PLB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLC                                   **
//*******************************************************************************
//*ODIL_ID:74995_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:74995_1*
//
U "PERSO";
= #A02PLC.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:74995_2*
//
U "Z1G".A02.IPP;
UN "IIT".A02.MP.MPT;
U "PERSO";
= #A02PLC.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:74995_3*
//
U "A02DAPLC1";
U "A02DAPLC2";
UN "A02DRPLC1";
UN "A02DRPLC2";
= #A02PLC.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:74995_4*
//
U "PERSO";
= #A02PLC.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:74995_5*
//
U(;
U "Z1G".A02.IPP;
U "IIT".A02.MP.MPT;
O "Z1G".A02.IPA;
);
U "PERSO";
= #A02PLC.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:74995_6*
//
UN "A02DAPLC1";
UN "A02DAPLC2";
U "A02DRPLC1";
U "A02DRPLC2";
= #A02PLC.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:74995_7*
//
L #NUM_MVT;
L 3;
==I;
= #A02PLC.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:74995_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A02PLC (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A02EAPLC",
Ormv := "A02ERPLC",
Def := S1A02DPLC,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A02.PLC_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRD                                   **
//*******************************************************************************
//*ODIL_ID:75164_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:75164_1*
//
U "PERSO";
= #A02SRD.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:75164_2*
//
U "Z1G".A02.IPP;
UN "IIT".A02.MP.MPT;
U "PERSO";
= #A02SRD.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:75164_3*
//
U "A02DASRD1";
U "A02DASRD2";
U "A02DASRD3";
U "A02DASRD4";
U "A02DASRD5";
U "A02DASRD6";
UN "A02DRSRD1";
UN "A02DRSRD2";
UN "A02DRSRD3";
UN "A02DRSRD4";
UN "A02DRSRD5";
UN "A02DRSRD6";
= #A02SRD.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:75164_4*
//
U "PERSO";
= #A02SRD.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:75164_5*
//
U(;
U "Z1G".A02.IPP;
U "IIT".A02.MP.MPT;
O "Z1G".A02.IPA;
);
U "PERSO";
= #A02SRD.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:75164_6*
//
UN "A02DASRD1";
UN "A02DASRD2";
UN "A02DASRD3";
UN "A02DASRD4";
UN "A02DASRD5";
UN "A02DASRD6";
U "A02DRSRD1";
U "A02DRSRD2";
U "A02DRSRD3";
U "A02DRSRD4";
U "A02DRSRD5";
U "A02DRSRD6";
= #A02SRD.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:75164_7*
//
L #NUM_MVT;
L 4;
==I;
= #A02SRD.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:75164_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A02SRD (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A02EASRD",
Ormv := "A02ERSRD",
Def := S1A02DSRD,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A02.SRD_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRE                                   **
//*******************************************************************************
//*ODIL_ID:75341_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:75341_1*
//
U "PERSO";
= #A02SRE.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:75341_2*
//
U "Z1G".A02.IPP;
UN "IIT".A02.MP.MPT;
U "PERSO";
= #A02SRE.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:75341_3*
//
U "A02DASRE1";
U "A02DASRE2";
UN "A02DRSRE1";
UN "A02DRSRE2";
= #A02SRE.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:75341_4*
//
U "PERSO";
= #A02SRE.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:75341_5*
//
U(;
U "Z1G".A02.IPP;
U "IIT".A02.MP.MPT;
O "Z1G".A02.IPA;
);
U "PERSO";
= #A02SRE.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:75341_6*
//
UN "A02DASRE1";
UN "A02DASRE2";
U "A02DRSRE1";
U "A02DRSRE2";
= #A02SRE.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:75341_7*
//
L #NUM_MVT;
L 5;
==I;
= #A02SRE.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:75341_8*
//
U "PERSO";
= L 7.0;
BLD 103;
= L 7.1;
BLD 103;
= L 7.2;
BLD 103;
CALL #A02SRE (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "A02EASRE",
Ormv := "A02ERSRE",
Def := S1A02DSRE,
Mvec := "Z1G".MVEC,
Tref := "Z1T".A02.SRE_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:74623_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:74623_181*
//
U #A02PLA.MF.IA;
U #A02PLB.MF.IA;
U #A02PLC.MF.IA;
U #A02SRD.MF.IA;
U #A02SRE.MF.IA;
U "PERSO";
= "Z1G".A02.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:74623_182*
//
U #A02PLA.MF.IR;
U #A02PLB.MF.IR;
U #A02PLC.MF.IR;
U #A02SRD.MF.IR;
U #A02SRE.MF.IR;
U "PERSO";
= "Z1G".A02.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1A02"
VERSION : 0.1
"1_A02_MONTAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_B0R_Repouso"
TITLE =Repouso
VERSION : 0.1
VAR
  B0RRETVAL : INT;	//B0R - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  B0RTPA : BF_MOUV2P1;	//TYPE_ELEMENT TPA
  S1B0RDTPA : BOOL;	//TPA MOVEMENT FAULT / DEFAUT MOUVEMENT TPA
  B0RTPB : BF_MOUV2P1;	//TYPE_ELEMENT TPB
  S1B0RDTPB : BOOL;	//TPB MOVEMENT FAULT / DEFAUT MOUVEMENT TPB
  NUM_MVT : INT;	//B0R - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:75769_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:75769_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 121;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _501;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_501: NOP 0;
U L 5.0;
NOT;
SPBNB _502;
L -1;
T #NUM_MVT;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TPA                                   **
//*******************************************************************************
//*ODIL_ID:75847_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:75847_1*
//
U "PERSO";
= #B0RTPA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:75847_2*
//
U "PERSO";
= #B0RTPA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:75847_3*
//
U "B0RDATPA1";
UN "B0RDRTPA1";
= #B0RTPA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:75847_4*
//
U "PERSO";
= #B0RTPA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:75847_5*
//
U "PERSO";
= #B0RTPA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:75847_6*
//
UN "B0RDATPA1";
U "B0RDRTPA1";
= #B0RTPA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:75847_7*
//
L #NUM_MVT;
L 1;
==I;
= #B0RTPA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:75847_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #B0RTPA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "B0REATPA",
Ormv := "B0RERTPA",
Def := S1B0RDTPA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".B0R.TPA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TPB                                   **
//*******************************************************************************
//*ODIL_ID:76162_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:76162_1*
//
U "PERSO";
= #B0RTPB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:76162_2*
//
U "PERSO";
= #B0RTPB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:76162_3*
//
U "B0RDATPB1";
UN "B0RDRTPB1";
= #B0RTPB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:76162_4*
//
U "PERSO";
= #B0RTPB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:76162_5*
//
U "PERSO";
= #B0RTPB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:76162_6*
//
UN "B0RDATPB1";
U "B0RDRTPB1";
= #B0RTPB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:76162_7*
//
L #NUM_MVT;
L 2;
==I;
= #B0RTPB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:76162_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #B0RTPB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "B0REATPB",
Ormv := "B0RERTPB",
Def := S1B0RDTPB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".B0R.TPB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:75769_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:75769_181*
//
U #B0RTPA.MF.IA;
U #B0RTPB.MF.IA;
U "PERSO";
= "Z1G".B0R.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:75769_182*
//
U #B0RTPA.MF.IR;
U #B0RTPB.MF.IR;
U "PERSO";
= "Z1G".B0R.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1B0R"
VERSION : 0.1
"1_B0R_Repouso"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_B01_PREHENSEUR"
TITLE =PREHENSEUR
VERSION : 0.1
VAR
  S1B01DIV : INT;	//B01 - DIVERSITY / DIVERSITE
  B01SUIVI : BF_TCY_SUIV;	//Z1: B01 - MONITORING / FB GESTION DU SUIVI DU TEMP DE CYCLE B01
  ST1 : INT;	//Z1: MONITORING B01 - THRESHOLD T1 / SEUIL TEMP T1
  ST2 : INT;	//Z1: MONITORING B01 - THRESHOLD T2 / SEUIL TEMP T2
  S1B01TCP : INT;	//Z1: MONITORING B01 - OWN CYCLE TIME / TEMP DE CYCLE PROPRE
  S1B01TCT : INT;	//Z1: MONITORING B01 - TOTAL CYCLE TIME / TEMP DE CYCLE TOTAL
  S1B01NCY : INT;	//Z1: MONITORING B01 - CYCLE NUMBER / NUMERO DE CYCLE DE TRAVAIL
  B01SUCT : BOOL;	//Z1: MONITORING B01 - SUSPENSION COUNTING CYCLE TIME / SUSPENSION COMPTAGE TEMP
  B01NVCT : BOOL;	//Z1: MONITORING B01 - NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAG
  S1B01DT2 : BOOL;	//Z1: MONITORING B01 - CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  S1B01DTC : BOOL;	//Z1: MONITORING B01 - CYCLE TIME OVERRUN / DEPASSEMENT TEMPS DE CYCLE
  B01X1SUCT : BOOL;	//Z1: AUX1 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  B01X2SUCT : BOOL;	//Z1: AUX2 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  B01X3SUCT : BOOL;	//Z1: AUX3 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  B01X1NVCT : BOOL;	//Z1: AUX1 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  B01X2NVCT : BOOL;	//Z1: AUX2 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  B01X3NVCT : BOOL;	//Z1: AUX3 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  A01_TF_TP_B01 : BF_TF_TP;	//B01 - TRANSFER PART WORD: A01 -> B01 / TRANSFERT TABLE PIECE A01 -> B01
  A02_TF_TP_B01 : BF_TF_TP;	//B01 - TRANSFER PART WORD: A02 -> B01 / TRANSFERT TABLE PIECE A02 -> B01
  B01RETVAL : INT;	//B01 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  B01TDFPC : TON;	//B01 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1B01DPIEC : BOOL;	//B01 - PART FAULT / DEFAUT PIECE
  B01SRA : BF_MOUV2P1;	//TYPE_ELEMENT SRA
  S1B01DSRA : BOOL;	//SRA MOVEMENT FAULT / DEFAUT MOUVEMENT SRA
  B01SRB : BF_MOUV2P1;	//TYPE_ELEMENT SRB
  S1B01DSRB : BOOL;	//SRB MOVEMENT FAULT / DEFAUT MOUVEMENT SRB
  NUM_MVT : INT;	//B01 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:50891_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:50891_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:50891_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:50891_217*
//
UN "IIT".B01.MS.MSP;
SPBNB _501;
L 0;
T #S1B01DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:50891_218*
//
U "IIT".B01.MS.MSP;
SPBNB _502;
L 1;
T #S1B01DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:50891_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: A01 -> B01
//TRANSFERT DE LA TABLE PIECE A01 VERS B01
//*ODIL_ID:70386_20*
//
U "IIT".A01.MS.MSP;
UN "IIT".B01.MS.MSP;
U "IIT".B01.MP.MPT;
= L 4.0;
BLD 103;
CALL #A01_TF_TP_B01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".A01,
Dest := "IIT".B01);
NOP 0;
NETWORK
TITLE =TRANSFER PART TABLE: A02 -> B01
//TRANSFERT DE LA TABLE PIECE A02 VERS B01
//*ODIL_ID:74623_20*
//
U "IIT".A02.MS.MSP;
UN "IIT".B01.MS.MSP;
U "IIT".B01.MP.MPT;
= L 4.0;
BLD 103;
CALL #A02_TF_TP_B01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".A02,
Dest := "IIT".B01);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:50891_55*
//

NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:50891_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:50891_82*
//
U "PERSO";
= "Z1G".B01.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:50891_83*
//
UN "B01DPP1";
UN "B01DPP2";
UN "B01DPP3";
UN "B01DPP4";
UN "B01DPP5";
UN "B01DPP6";
UN "B01DPP7";
= "Z1G".B01.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:50891_84*
//
U "Z1G".B01.IAP;
UN "IIT".B01.MS.MSP;
UN "IIT".B01.MP.MPP;
= "Z1G".B01.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:50891_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".B01.IPP;
UN "Z1G".B01.IPA;
= L 4.0;
BLD 103;
CALL #B01TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:50891_86*
//
U #B01TDFPC.Q;
S #S1B01DPIEC;
U(;
O "Z1G".B01.IPP;
O "Z1G".B01.IPA;
);
R #S1B01DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:50891_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:50891_177*
//
U "IIT".B01_TT.MFT.MFT1;
U "IIT".B01_TT.MFT.MFT2;
U "PERSO";
S "IIT".B01.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:50891_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:50891_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 129;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRA                                   **
//*******************************************************************************
//*ODIL_ID:54154_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:54154_1*
//
U "PERSO";
= #B01SRA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:54154_2*
//
U "Z1G".B01.IPP;
UN "IIT".B01.MP.MPT;
U "PERSO";
= #B01SRA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:54154_3*
//
U "B01DASRA1";
U "B01DASRA2";
U "B01DASRA3";
U "B01DASRA4";
U "B01DASRA5";
U "B01DASRA6";
UN "B01DRSRA1";
UN "B01DRSRA2";
UN "B01DRSRA3";
UN "B01DRSRA4";
UN "B01DRSRA5";
UN "B01DRSRA6";
= #B01SRA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:54154_4*
//
U "PERSO";
= #B01SRA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:54154_5*
//
U(;
U "Z1G".B01.IPP;
U "IIT".B01.MP.MPT;
O "Z1G".B01.IPA;
);
U "PERSO";
= #B01SRA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:54154_6*
//
UN "B01DASRA1";
UN "B01DASRA2";
UN "B01DASRA3";
UN "B01DASRA4";
UN "B01DASRA5";
UN "B01DASRA6";
U "B01DRSRA1";
U "B01DRSRA2";
U "B01DRSRA3";
U "B01DRSRA4";
U "B01DRSRA5";
U "B01DRSRA6";
= #B01SRA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:54154_7*
//
L #NUM_MVT;
L 1;
==I;
= #B01SRA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:54154_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #B01SRA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "B01EASRA",
Ormv := "B01ERSRA",
Def := S1B01DSRA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".B01.SRA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRB                                   **
//*******************************************************************************
//*ODIL_ID:54312_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:54312_1*
//
U "PERSO";
= #B01SRB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:54312_2*
//
U "Z1G".B01.IPP;
UN "IIT".B01.MP.MPT;
U "PERSO";
= #B01SRB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:54312_3*
//
U "B01DASRB1";
U "B01DASRB2";
U "B01DASRB3";
U "B01DASRB4";
U "B01DASRB5";
U "B01DASRB6";
UN "B01DRSRB1";
UN "B01DRSRB2";
UN "B01DRSRB3";
UN "B01DRSRB4";
UN "B01DRSRB5";
UN "B01DRSRB6";
= #B01SRB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:54312_4*
//
U "PERSO";
= #B01SRB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:54312_5*
//
U(;
U "Z1G".B01.IPP;
U "IIT".B01.MP.MPT;
O "Z1G".B01.IPA;
);
U "PERSO";
= #B01SRB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:54312_6*
//
UN "B01DASRB1";
UN "B01DASRB2";
UN "B01DASRB3";
UN "B01DASRB4";
UN "B01DASRB5";
UN "B01DASRB6";
U "B01DRSRB1";
U "B01DRSRB2";
U "B01DRSRB3";
U "B01DRSRB4";
U "B01DRSRB5";
U "B01DRSRB6";
= #B01SRB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:54312_7*
//
L #NUM_MVT;
L 2;
==I;
= #B01SRB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:54312_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #B01SRB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "B01EASRB",
Ormv := "B01ERSRB",
Def := S1B01DSRB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".B01.SRB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:50891_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:50891_181*
//
U #B01SRA.MF.IA;
U #B01SRB.MF.IA;
U "PERSO";
= "Z1G".B01.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:50891_182*
//
U #B01SRA.MF.IR;
U #B01SRB.MF.IR;
U "PERSO";
= "Z1G".B01.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1B01"
VERSION : 0.1
"1_B01_PREHENSEUR"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_B02_PREHENSEUR"
TITLE =PREHENSEUR
VERSION : 0.1
VAR
  S1B02DIV : INT;	//B02 - DIVERSITY / DIVERSITE
  B02SUIVI : BF_TCY_SUIV;	//Z1: B02 - MONITORING / FB GESTION DU SUIVI DU TEMP DE CYCLE B02
  ST1 : INT;	//Z1: MONITORING B02 - THRESHOLD T1 / SEUIL TEMP T1
  ST2 : INT;	//Z1: MONITORING B02 - THRESHOLD T2 / SEUIL TEMP T2
  S1B02TCP : INT;	//Z1: MONITORING B02 - OWN CYCLE TIME / TEMP DE CYCLE PROPRE
  S1B02TCT : INT;	//Z1: MONITORING B02 - TOTAL CYCLE TIME / TEMP DE CYCLE TOTAL
  S1B02NCY : INT;	//Z1: MONITORING B02 - CYCLE NUMBER / NUMERO DE CYCLE DE TRAVAIL
  B02SUCT : BOOL;	//Z1: MONITORING B02 - SUSPENSION COUNTING CYCLE TIME / SUSPENSION COMPTAGE TEMP
  B02NVCT : BOOL;	//Z1: MONITORING B02 - NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAG
  S1B02DT2 : BOOL;	//Z1: MONITORING B02 - CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  S1B02DTC : BOOL;	//Z1: MONITORING B02 - CYCLE TIME OVERRUN / DEPASSEMENT TEMPS DE CYCLE
  B02X1SUCT : BOOL;	//Z1: AUX1 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  B02X2SUCT : BOOL;	//Z1: AUX2 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  B02X3SUCT : BOOL;	//Z1: AUX3 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  B02X1NVCT : BOOL;	//Z1: AUX1 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  B02X2NVCT : BOOL;	//Z1: AUX2 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  B02X3NVCT : BOOL;	//Z1: AUX3 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  A01_TF_TP_B02 : BF_TF_TP;	//B02 - TRANSFER PART WORD: A01 -> B02 / TRANSFERT TABLE PIECE A01 -> B02
  A02_TF_TP_B02 : BF_TF_TP;	//B02 - TRANSFER PART WORD: A02 -> B02 / TRANSFERT TABLE PIECE A02 -> B02
  B02RETVAL : INT;	//B02 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  B02TDFPC : TON;	//B02 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1B02DPIEC : BOOL;	//B02 - PART FAULT / DEFAUT PIECE
  NUM_MVT : INT;	//B02 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:85000_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:85000_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:85000_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:85000_217*
//
UN "IIT".B02.MS.MSP;
SPBNB _501;
L 0;
T #S1B02DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:85000_218*
//
U "IIT".B02.MS.MSP;
SPBNB _502;
L 1;
T #S1B02DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:85000_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: A01 -> B02
//TRANSFERT DE LA TABLE PIECE A01 VERS B02
//*ODIL_ID:70386_20*
//
U "IIT".A01.MS.MSP;
UN "IIT".B02.MS.MSP;
U "IIT".B02.MP.MPT;
= L 4.0;
BLD 103;
CALL #A01_TF_TP_B02 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".A01,
Dest := "IIT".B02);
NOP 0;
NETWORK
TITLE =TRANSFER PART TABLE: A02 -> B02
//TRANSFERT DE LA TABLE PIECE A02 VERS B02
//*ODIL_ID:74623_20*
//
U "IIT".A02.MS.MSP;
UN "IIT".B02.MS.MSP;
U "IIT".B02.MP.MPT;
= L 4.0;
BLD 103;
CALL #A02_TF_TP_B02 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".A02,
Dest := "IIT".B02);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:85000_55*
//

NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:85000_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:85000_82*
//
U "PERSO";
= "Z1G".B02.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:85000_83*
//
U "PERSO";
= "Z1G".B02.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:85000_84*
//
U "Z1G".B02.IAP;
UN "IIT".B02.MS.MSP;
UN "IIT".B02.MP.MPP;
= "Z1G".B02.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:85000_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".B02.IPP;
UN "Z1G".B02.IPA;
= L 4.0;
BLD 103;
CALL #B02TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:85000_86*
//
U #B02TDFPC.Q;
S #S1B02DPIEC;
U(;
O "Z1G".B02.IPP;
O "Z1G".B02.IPA;
);
R #S1B02DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:85000_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:85000_177*
//
U "IIT".B02_TT.MFT.MFT1;
U "IIT".B02_TT.MFT.MFT2;
U "PERSO";
S "IIT".B02.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:85000_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1B02"
VERSION : 0.1
"1_B02_PREHENSEUR"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_C01_MONTAGEM"
TITLE =MONTAGEM
VERSION : 0.1
VAR
  S1C01DIV : INT;	//C01 - DIVERSITY / DIVERSITE
  C01TDFPC : TON;	//C01 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1C01DPIEC : BOOL;	//C01 - PART FAULT / DEFAUT PIECE
  B01_TF_TP_C01 : BF_TF_TP;	//C01 - TRANSFER PART WORD: B01 -> C01 / TRANSFERT TABLE PIECE B01 -> C01
  B02_TF_TP_C01 : BF_TF_TP;	//C01 - TRANSFER PART WORD: B02 -> C01 / TRANSFERT TABLE PIECE B02 -> C01
  C01RETVAL : INT;	//C01 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  C01PLA : BF_MOUV2P1;	//TYPE_ELEMENT PLA
  S1C01DPLA : BOOL;	//PLA MOVEMENT FAULT / DEFAUT MOUVEMENT PLA
  C01PLB : BF_MOUV2P1;	//TYPE_ELEMENT PLB
  S1C01DPLB : BOOL;	//PLB MOVEMENT FAULT / DEFAUT MOUVEMENT PLB
  C01PLF : BF_MOUV2P1;	//TYPE_ELEMENT PLF
  S1C01DPLF : BOOL;	//PLF MOVEMENT FAULT / DEFAUT MOUVEMENT PLF
  C01PLG : BF_MOUV2P1;	//TYPE_ELEMENT PLG
  S1C01DPLG : BOOL;	//PLG MOVEMENT FAULT / DEFAUT MOUVEMENT PLG
  C01SRC : BF_MOUV2P1;	//TYPE_ELEMENT SRC
  S1C01DSRC : BOOL;	//SRC MOVEMENT FAULT / DEFAUT MOUVEMENT SRC
  C01SRD : BF_MOUV2P1;	//TYPE_ELEMENT SRD
  S1C01DSRD : BOOL;	//SRD MOVEMENT FAULT / DEFAUT MOUVEMENT SRD
  C01SRE : BF_MOUV2P1;	//TYPE_ELEMENT SRE
  S1C01DSRE : BOOL;	//SRE MOVEMENT FAULT / DEFAUT MOUVEMENT SRE
  C01SRH : BF_MOUV2P1;	//TYPE_ELEMENT SRH
  S1C01DSRH : BOOL;	//SRH MOVEMENT FAULT / DEFAUT MOUVEMENT SRH
  NUM_MVT : INT;	//C01 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:64280_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:64280_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:64280_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:64280_217*
//
UN "IIT".C01.MS.MSP;
SPBNB _501;
L 0;
T #S1C01DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:64280_218*
//
U "IIT".C01.MS.MSP;
SPBNB _502;
L 1;
T #S1C01DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:64280_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:64280_82*
//
U "PERSO";
= "Z1G".C01.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:64280_83*
//
UN "C01DPP1";
UN "C01DPP2";
UN "C01DPP3";
UN "C01DPP4";
UN "C01DPP5";
UN "C01DPP6";
UN "C01DPP7";
UN "C01DPP8";
UN "C01DPP9";
UN "C01DPP10";
= "Z1G".C01.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:64280_84*
//
U "Z1G".C01.IAP;
UN "IIT".C01.MS.MSP;
UN "IIT".C01.MP.MPP;
= "Z1G".C01.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:64280_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".C01.IPP;
UN "Z1G".C01.IPA;
= L 4.0;
BLD 103;
CALL #C01TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:64280_86*
//
U #C01TDFPC.Q;
S #S1C01DPIEC;
U(;
O "Z1G".C01.IPP;
O "Z1G".C01.IPA;
);
R #S1C01DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:64280_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: B01 -> C01
//TRANSFERT DE LA TABLE PIECE B01 VERS C01
//*ODIL_ID:50891_20*
//
U "IIT".B01.MS.MSP;
UN "IIT".C01.MS.MSP;
U "IIT".C01.MP.MPT;
= L 4.0;
BLD 103;
CALL #B01_TF_TP_C01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".B01,
Dest := "IIT".C01);
NOP 0;
NETWORK
TITLE =TRANSFER PART TABLE: B02 -> C01
//TRANSFERT DE LA TABLE PIECE B02 VERS C01
//*ODIL_ID:85000_20*
//
U "IIT".B02.MS.MSP;
UN "IIT".C01.MS.MSP;
U "IIT".C01.MP.MPT;
= L 4.0;
BLD 103;
CALL #B02_TF_TP_C01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".B02,
Dest := "IIT".C01);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:64280_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:64280_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 126;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLA                                   **
//*******************************************************************************
//*ODIL_ID:60724_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:60724_1*
//
U "PERSO";
= #C01PLA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:60724_2*
//
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
U "PERSO";
= #C01PLA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:60724_3*
//
U "C01DAPLA1";
U "C01DAPLA2";
U "C01DAPLA3";
U "C01DAPLA4";
UN "C01DRPLA1";
UN "C01DRPLA2";
UN "C01DRPLA3";
UN "C01DRPLA4";
= #C01PLA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:60724_4*
//
U "PERSO";
= #C01PLA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:60724_5*
//
U(;
U "Z1G".C01.IPP;
U "IIT".C01.MP.MPT;
O "Z1G".C01.IPA;
);
U "PERSO";
= #C01PLA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:60724_6*
//
UN "C01DAPLA1";
UN "C01DAPLA2";
UN "C01DAPLA3";
UN "C01DAPLA4";
U "C01DRPLA1";
U "C01DRPLA2";
U "C01DRPLA3";
U "C01DRPLA4";
= #C01PLA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:60724_7*
//
L #NUM_MVT;
L 1;
==I;
= #C01PLA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:60724_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #C01PLA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "C01EAPLA",
Ormv := "C01ERPLA",
Def := S1C01DPLA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".C01.PLA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLB                                   **
//*******************************************************************************
//*ODIL_ID:60897_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:60897_1*
//
U "PERSO";
= #C01PLB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:60897_2*
//
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
U "PERSO";
= #C01PLB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:60897_3*
//
U "C01DAPLB1";
U "C01DAPLB2";
UN "C01DRPLB1";
UN "C01DRPLB2";
= #C01PLB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:60897_4*
//
U "PERSO";
= #C01PLB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:60897_5*
//
U(;
U "Z1G".C01.IPP;
U "IIT".C01.MP.MPT;
O "Z1G".C01.IPA;
);
U "PERSO";
= #C01PLB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:60897_6*
//
UN "C01DAPLB1";
UN "C01DAPLB2";
U "C01DRPLB1";
U "C01DRPLB2";
= #C01PLB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:60897_7*
//
L #NUM_MVT;
L 2;
==I;
= #C01PLB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:60897_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #C01PLB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "C01EAPLB",
Ormv := "C01ERPLB",
Def := S1C01DPLB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".C01.PLB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLF                                   **
//*******************************************************************************
//*ODIL_ID:61585_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:61585_1*
//
U "PERSO";
= #C01PLF.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:61585_2*
//
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
U "PERSO";
= #C01PLF.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:61585_3*
//
U "C01DAPLF1";
U "C01DAPLF2";
UN "C01DRPLF1";
UN "C01DRPLF2";
= #C01PLF.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:61585_4*
//
U "PERSO";
= #C01PLF.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:61585_5*
//
U(;
U "Z1G".C01.IPP;
U "IIT".C01.MP.MPT;
O "Z1G".C01.IPA;
);
U "PERSO";
= #C01PLF.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:61585_6*
//
UN "C01DAPLF1";
UN "C01DAPLF2";
U "C01DRPLF1";
U "C01DRPLF2";
= #C01PLF.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:61585_7*
//
L #NUM_MVT;
L 6;
==I;
= #C01PLF.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:61585_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #C01PLF (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "C01EAPLF",
Ormv := "C01ERPLF",
Def := S1C01DPLF,
Mvec := "Z1G".MVEC,
Tref := "Z1T".C01.PLF_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLG                                   **
//*******************************************************************************
//*ODIL_ID:61754_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:61754_1*
//
U "PERSO";
= #C01PLG.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:61754_2*
//
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
U "PERSO";
= #C01PLG.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:61754_3*
//
U "C01DAPLG1";
U "C01DAPLG2";
UN "C01DRPLG1";
UN "C01DRPLG2";
= #C01PLG.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:61754_4*
//
U "PERSO";
= #C01PLG.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:61754_5*
//
U(;
U "Z1G".C01.IPP;
U "IIT".C01.MP.MPT;
O "Z1G".C01.IPA;
);
U "PERSO";
= #C01PLG.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:61754_6*
//
UN "C01DAPLG1";
UN "C01DAPLG2";
U "C01DRPLG1";
U "C01DRPLG2";
= #C01PLG.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:61754_7*
//
L #NUM_MVT;
L 7;
==I;
= #C01PLG.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:61754_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #C01PLG (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "C01EAPLG",
Ormv := "C01ERPLG",
Def := S1C01DPLG,
Mvec := "Z1G".MVEC,
Tref := "Z1T".C01.PLG_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRC                                   **
//*******************************************************************************
//*ODIL_ID:61066_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:61066_1*
//
U "PERSO";
= #C01SRC.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:61066_2*
//
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
U "PERSO";
= #C01SRC.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:61066_3*
//
U "C01DASRC1";
U "C01DASRC2";
U "C01DASRC3";
U "C01DASRC4";
UN "C01DRSRC1";
UN "C01DRSRC2";
UN "C01DRSRC3";
UN "C01DRSRC4";
= #C01SRC.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:61066_4*
//
U "PERSO";
= #C01SRC.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:61066_5*
//
U(;
U "Z1G".C01.IPP;
U "IIT".C01.MP.MPT;
O "Z1G".C01.IPA;
);
U "PERSO";
= #C01SRC.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:61066_6*
//
UN "C01DASRC1";
UN "C01DASRC2";
UN "C01DASRC3";
UN "C01DASRC4";
U "C01DRSRC1";
U "C01DRSRC2";
U "C01DRSRC3";
U "C01DRSRC4";
= #C01SRC.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:61066_7*
//
L #NUM_MVT;
L 3;
==I;
= #C01SRC.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:61066_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #C01SRC (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "C01EASRC",
Ormv := "C01ERSRC",
Def := S1C01DSRC,
Mvec := "Z1G".MVEC,
Tref := "Z1T".C01.SRC_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRD                                   **
//*******************************************************************************
//*ODIL_ID:61241_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:61241_1*
//
U "PERSO";
= #C01SRD.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:61241_2*
//
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
U "PERSO";
= #C01SRD.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:61241_3*
//
U "C01DASRD1";
U "C01DASRD2";
U "C01DASRD3";
U "C01DASRD4";
UN "C01DRSRD1";
UN "C01DRSRD2";
UN "C01DRSRD3";
UN "C01DRSRD4";
= #C01SRD.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:61241_4*
//
U "PERSO";
= #C01SRD.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:61241_5*
//
U(;
U "Z1G".C01.IPP;
U "IIT".C01.MP.MPT;
O "Z1G".C01.IPA;
);
U "PERSO";
= #C01SRD.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:61241_6*
//
UN "C01DASRD1";
UN "C01DASRD2";
UN "C01DASRD3";
UN "C01DASRD4";
U "C01DRSRD1";
U "C01DRSRD2";
U "C01DRSRD3";
U "C01DRSRD4";
= #C01SRD.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:61241_7*
//
L #NUM_MVT;
L 4;
==I;
= #C01SRD.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:61241_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #C01SRD (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "C01EASRD",
Ormv := "C01ERSRD",
Def := S1C01DSRD,
Mvec := "Z1G".MVEC,
Tref := "Z1T".C01.SRD_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRE                                   **
//*******************************************************************************
//*ODIL_ID:61416_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:61416_1*
//
U "PERSO";
= #C01SRE.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:61416_2*
//
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
U "PERSO";
= #C01SRE.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:61416_3*
//
U "C01DASRE1";
U "C01DASRE2";
UN "C01DRSRE1";
UN "C01DRSRE2";
= #C01SRE.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:61416_4*
//
U "PERSO";
= #C01SRE.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:61416_5*
//
U(;
U "Z1G".C01.IPP;
U "IIT".C01.MP.MPT;
O "Z1G".C01.IPA;
);
U "PERSO";
= #C01SRE.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:61416_6*
//
UN "C01DASRE1";
UN "C01DASRE2";
U "C01DRSRE1";
U "C01DRSRE2";
= #C01SRE.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:61416_7*
//
L #NUM_MVT;
L 5;
==I;
= #C01SRE.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:61416_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #C01SRE (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "C01EASRE",
Ormv := "C01ERSRE",
Def := S1C01DSRE,
Mvec := "Z1G".MVEC,
Tref := "Z1T".C01.SRE_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRH                                   **
//*******************************************************************************
//*ODIL_ID:77145_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:77145_1*
//
U "PERSO";
= #C01SRH.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:77145_2*
//
U "Z1G".C01.IPP;
UN "IIT".C01.MP.MPT;
U "PERSO";
= #C01SRH.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:77145_3*
//
U "C01DASRH1";
U "C01DASRH2";
UN "C01DRSRH1";
UN "C01DRSRH2";
= #C01SRH.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:77145_4*
//
U "PERSO";
= #C01SRH.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:77145_5*
//
U(;
U "Z1G".C01.IPP;
U "IIT".C01.MP.MPT;
O "Z1G".C01.IPA;
);
U "PERSO";
= #C01SRH.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:77145_6*
//
UN "C01DASRH1";
UN "C01DASRH2";
U "C01DRSRH1";
U "C01DRSRH2";
= #C01SRH.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:77145_7*
//
L #NUM_MVT;
L 8;
==I;
= #C01SRH.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:77145_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #C01SRH (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "C01EASRH",
Ormv := "C01ERSRH",
Def := S1C01DSRH,
Mvec := "Z1G".MVEC,
Tref := "Z1T".C01.SRH_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:64280_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:64280_181*
//
U #C01PLA.MF.IA;
U #C01PLB.MF.IA;
U #C01PLF.MF.IA;
U #C01PLG.MF.IA;
U #C01SRC.MF.IA;
U #C01SRD.MF.IA;
U #C01SRE.MF.IA;
U #C01SRH.MF.IA;
U "PERSO";
= "Z1G".C01.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:64280_182*
//
U #C01PLA.MF.IR;
U #C01PLB.MF.IR;
U #C01PLF.MF.IR;
U #C01PLG.MF.IR;
U #C01SRC.MF.IR;
U #C01SRD.MF.IR;
U #C01SRE.MF.IR;
U #C01SRH.MF.IR;
U "PERSO";
= "Z1G".C01.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1C01"
VERSION : 0.1
"1_C01_MONTAGEM"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_C02_MONTAGEM"
TITLE =MONTAGEM
VERSION : 0.1
VAR
  S1C02DIV : INT;	//C02 - DIVERSITY / DIVERSITE
  C02TDFPC : TON;	//C02 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1C02DPIEC : BOOL;	//C02 - PART FAULT / DEFAUT PIECE
  B01_TF_TP_C02 : BF_TF_TP;	//C02 - TRANSFER PART WORD: B01 -> C02 / TRANSFERT TABLE PIECE B01 -> C02
  B02_TF_TP_C02 : BF_TF_TP;	//C02 - TRANSFER PART WORD: B02 -> C02 / TRANSFERT TABLE PIECE B02 -> C02
  C02RETVAL : INT;	//C02 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  NUM_MVT : INT;	//C02 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:84758_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:84758_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:84758_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:84758_217*
//
UN "IIT".C02.MS.MSP;
SPBNB _501;
L 0;
T #S1C02DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:84758_218*
//
U "IIT".C02.MS.MSP;
SPBNB _502;
L 1;
T #S1C02DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:84758_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:84758_82*
//
U "PERSO";
= "Z1G".C02.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:84758_83*
//
U "PERSO";
= "Z1G".C02.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:84758_84*
//
U "Z1G".C02.IAP;
UN "IIT".C02.MS.MSP;
UN "IIT".C02.MP.MPP;
= "Z1G".C02.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:84758_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".C02.IPP;
UN "Z1G".C02.IPA;
= L 4.0;
BLD 103;
CALL #C02TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:84758_86*
//
U #C02TDFPC.Q;
S #S1C02DPIEC;
U(;
O "Z1G".C02.IPP;
O "Z1G".C02.IPA;
);
R #S1C02DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:84758_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: B01 -> C02
//TRANSFERT DE LA TABLE PIECE B01 VERS C02
//*ODIL_ID:50891_20*
//
U "IIT".B01.MS.MSP;
UN "IIT".C02.MS.MSP;
U "IIT".C02.MP.MPT;
= L 4.0;
BLD 103;
CALL #B01_TF_TP_C02 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".B01,
Dest := "IIT".C02);
NOP 0;
NETWORK
TITLE =TRANSFER PART TABLE: B02 -> C02
//TRANSFERT DE LA TABLE PIECE B02 VERS C02
//*ODIL_ID:85000_20*
//
U "IIT".B02.MS.MSP;
UN "IIT".C02.MS.MSP;
U "IIT".C02.MP.MPT;
= L 4.0;
BLD 103;
CALL #B02_TF_TP_C02 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".B02,
Dest := "IIT".C02);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:84758_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1C02"
VERSION : 0.1
"1_C02_MONTAGEM"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_D01_PREHENSEUR"
TITLE =PREHENSEUR
VERSION : 0.1
VAR
  S1D01DIV : INT;	//D01 - DIVERSITY / DIVERSITE
  D01SUIVI : BF_TCY_SUIV;	//Z1: D01 - MONITORING / FB GESTION DU SUIVI DU TEMP DE CYCLE D01
  ST1 : INT;	//Z1: MONITORING D01 - THRESHOLD T1 / SEUIL TEMP T1
  ST2 : INT;	//Z1: MONITORING D01 - THRESHOLD T2 / SEUIL TEMP T2
  S1D01TCP : INT;	//Z1: MONITORING D01 - OWN CYCLE TIME / TEMP DE CYCLE PROPRE
  S1D01TCT : INT;	//Z1: MONITORING D01 - TOTAL CYCLE TIME / TEMP DE CYCLE TOTAL
  S1D01NCY : INT;	//Z1: MONITORING D01 - CYCLE NUMBER / NUMERO DE CYCLE DE TRAVAIL
  D01SUCT : BOOL;	//Z1: MONITORING D01 - SUSPENSION COUNTING CYCLE TIME / SUSPENSION COMPTAGE TEMP
  D01NVCT : BOOL;	//Z1: MONITORING D01 - NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAG
  S1D01DT2 : BOOL;	//Z1: MONITORING D01 - CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  S1D01DTC : BOOL;	//Z1: MONITORING D01 - CYCLE TIME OVERRUN / DEPASSEMENT TEMPS DE CYCLE
  D01X1SUCT : BOOL;	//Z1: AUX1 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  D01X2SUCT : BOOL;	//Z1: AUX2 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  D01X3SUCT : BOOL;	//Z1: AUX3 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  D01X1NVCT : BOOL;	//Z1: AUX1 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  D01X2NVCT : BOOL;	//Z1: AUX2 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  D01X3NVCT : BOOL;	//Z1: AUX3 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  C01_TF_TP_D01 : BF_TF_TP;	//D01 - TRANSFER PART WORD: C01 -> D01 / TRANSFERT TABLE PIECE C01 -> D01
  C02_TF_TP_D01 : BF_TF_TP;	//D01 - TRANSFER PART WORD: C02 -> D01 / TRANSFERT TABLE PIECE C02 -> D01
  D01RETVAL : INT;	//D01 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  D01TDFPC : TON;	//D01 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1D01DPIEC : BOOL;	//D01 - PART FAULT / DEFAUT PIECE
  D01SRA : BF_MOUV2P1;	//TYPE_ELEMENT SRA
  S1D01DSRA : BOOL;	//SRA MOVEMENT FAULT / DEFAUT MOUVEMENT SRA
  D01SRB : BF_MOUV2P1;	//TYPE_ELEMENT SRB
  S1D01DSRB : BOOL;	//SRB MOVEMENT FAULT / DEFAUT MOUVEMENT SRB
  D01SRC : BF_MOUV2P1;	//TYPE_ELEMENT SRC
  S1D01DSRC : BOOL;	//SRC MOVEMENT FAULT / DEFAUT MOUVEMENT SRC
  NUM_MVT : INT;	//D01 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:54867_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:54867_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:54867_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:54867_217*
//
UN "IIT".D01.MS.MSP;
SPBNB _501;
L 0;
T #S1D01DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:54867_218*
//
U "IIT".D01.MS.MSP;
SPBNB _502;
L 1;
T #S1D01DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:54867_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: C01 -> D01
//TRANSFERT DE LA TABLE PIECE C01 VERS D01
//*ODIL_ID:64280_20*
//
U "IIT".C01.MS.MSP;
UN "IIT".D01.MS.MSP;
U "IIT".D01.MP.MPT;
= L 4.0;
BLD 103;
CALL #C01_TF_TP_D01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".C01,
Dest := "IIT".D01);
NOP 0;
NETWORK
TITLE =TRANSFER PART TABLE: C02 -> D01
//TRANSFERT DE LA TABLE PIECE C02 VERS D01
//*ODIL_ID:84758_20*
//
U "IIT".C02.MS.MSP;
UN "IIT".D01.MS.MSP;
U "IIT".D01.MP.MPT;
= L 4.0;
BLD 103;
CALL #C02_TF_TP_D01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".C02,
Dest := "IIT".D01);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:54867_55*
//

NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:54867_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:54867_82*
//
U "PERSO";
= "Z1G".D01.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:54867_83*
//
UN "D01DPP1";
UN "D01DPP2";
= "Z1G".D01.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:54867_84*
//
U "Z1G".D01.IAP;
UN "IIT".D01.MS.MSP;
UN "IIT".D01.MP.MPP;
= "Z1G".D01.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:54867_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".D01.IPP;
UN "Z1G".D01.IPA;
= L 4.0;
BLD 103;
CALL #D01TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:54867_86*
//
U #D01TDFPC.Q;
S #S1D01DPIEC;
U(;
O "Z1G".D01.IPP;
O "Z1G".D01.IPA;
);
R #S1D01DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:54867_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:54867_177*
//
U "IIT".D01_TT.MFT.MFT1;
U "IIT".D01_TT.MFT.MFT2;
U "PERSO";
S "IIT".D01.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:54867_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:54867_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 130;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRA                                   **
//*******************************************************************************
//*ODIL_ID:63643_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:63643_1*
//
U "PERSO";
= #D01SRA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:63643_2*
//
U "Z1G".D01.IPP;
UN "IIT".D01.MP.MPT;
U "PERSO";
= #D01SRA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:63643_3*
//
U "D01DASRA1";
U "D01DASRA2";
UN "D01DRSRA1";
UN "D01DRSRA2";
= #D01SRA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:63643_4*
//
U "PERSO";
= #D01SRA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:63643_5*
//
U(;
U "Z1G".D01.IPP;
U "IIT".D01.MP.MPT;
O "Z1G".D01.IPA;
);
U "PERSO";
= #D01SRA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:63643_6*
//
UN "D01DASRA1";
UN "D01DASRA2";
U "D01DRSRA1";
U "D01DRSRA2";
= #D01SRA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:63643_7*
//
L #NUM_MVT;
L 1;
==I;
= #D01SRA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:63643_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #D01SRA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "D01EASRA",
Ormv := "D01ERSRA",
Def := S1D01DSRA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".D01.SRA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRB                                   **
//*******************************************************************************
//*ODIL_ID:63801_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:63801_1*
//
U "PERSO";
= #D01SRB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:63801_2*
//
U "Z1G".D01.IPP;
UN "IIT".D01.MP.MPT;
U "PERSO";
= #D01SRB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:63801_3*
//
U "D01DASRB1";
U "D01DASRB2";
UN "D01DRSRB1";
UN "D01DRSRB2";
= #D01SRB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:63801_4*
//
U "PERSO";
= #D01SRB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:63801_5*
//
U(;
U "Z1G".D01.IPP;
U "IIT".D01.MP.MPT;
O "Z1G".D01.IPA;
);
U "PERSO";
= #D01SRB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:63801_6*
//
UN "D01DASRB1";
UN "D01DASRB2";
U "D01DRSRB1";
U "D01DRSRB2";
= #D01SRB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:63801_7*
//
L #NUM_MVT;
L 2;
==I;
= #D01SRB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:63801_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #D01SRB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "D01EASRB",
Ormv := "D01ERSRB",
Def := S1D01DSRB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".D01.SRB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRC                                   **
//*******************************************************************************
//*ODIL_ID:63959_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:63959_1*
//
U "PERSO";
= #D01SRC.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:63959_2*
//
U "Z1G".D01.IPP;
UN "IIT".D01.MP.MPT;
U "PERSO";
= #D01SRC.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:63959_3*
//
U "D01DASRC1";
U "D01DASRC2";
UN "D01DRSRC1";
UN "D01DRSRC2";
= #D01SRC.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:63959_4*
//
U "PERSO";
= #D01SRC.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:63959_5*
//
U(;
U "Z1G".D01.IPP;
U "IIT".D01.MP.MPT;
O "Z1G".D01.IPA;
);
U "PERSO";
= #D01SRC.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:63959_6*
//
UN "D01DASRC1";
UN "D01DASRC2";
U "D01DRSRC1";
U "D01DRSRC2";
= #D01SRC.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:63959_7*
//
L #NUM_MVT;
L 3;
==I;
= #D01SRC.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:63959_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #D01SRC (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "D01EASRC",
Ormv := "D01ERSRC",
Def := S1D01DSRC,
Mvec := "Z1G".MVEC,
Tref := "Z1T".D01.SRC_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:54867_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:54867_181*
//
U #D01SRA.MF.IA;
U #D01SRB.MF.IA;
U #D01SRC.MF.IA;
U "PERSO";
= "Z1G".D01.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:54867_182*
//
U #D01SRA.MF.IR;
U #D01SRB.MF.IR;
U #D01SRC.MF.IR;
U "PERSO";
= "Z1G".D01.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1D01"
VERSION : 0.1
"1_D01_PREHENSEUR"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_F01_PREHENSEUR"
TITLE =PREHENSEUR
VERSION : 0.1
VAR
  S1F01DIV : INT;	//F01 - DIVERSITY / DIVERSITE
  F01SUIVI : BF_TCY_SUIV;	//Z1: F01 - MONITORING / FB GESTION DU SUIVI DU TEMP DE CYCLE F01
  ST1 : INT;	//Z1: MONITORING F01 - THRESHOLD T1 / SEUIL TEMP T1
  ST2 : INT;	//Z1: MONITORING F01 - THRESHOLD T2 / SEUIL TEMP T2
  S1F01TCP : INT;	//Z1: MONITORING F01 - OWN CYCLE TIME / TEMP DE CYCLE PROPRE
  S1F01TCT : INT;	//Z1: MONITORING F01 - TOTAL CYCLE TIME / TEMP DE CYCLE TOTAL
  S1F01NCY : INT;	//Z1: MONITORING F01 - CYCLE NUMBER / NUMERO DE CYCLE DE TRAVAIL
  F01SUCT : BOOL;	//Z1: MONITORING F01 - SUSPENSION COUNTING CYCLE TIME / SUSPENSION COMPTAGE TEMP
  F01NVCT : BOOL;	//Z1: MONITORING F01 - NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAG
  S1F01DT2 : BOOL;	//Z1: MONITORING F01 - CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  S1F01DTC : BOOL;	//Z1: MONITORING F01 - CYCLE TIME OVERRUN / DEPASSEMENT TEMPS DE CYCLE
  F01X1SUCT : BOOL;	//Z1: AUX1 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  F01X2SUCT : BOOL;	//Z1: AUX2 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  F01X3SUCT : BOOL;	//Z1: AUX3 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  F01X1NVCT : BOOL;	//Z1: AUX1 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  F01X2NVCT : BOOL;	//Z1: AUX2 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  F01X3NVCT : BOOL;	//Z1: AUX3 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  E0_TF_TP_F01 : BF_TF_TP;	//F01 - TRANSFER PART WORD: E0 -> F01 / TRANSFERT TABLE PIECE E0 -> F01
  F01RETVAL : INT;	//F01 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  F01TDFPC : TON;	//F01 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1F01DPIEC : BOOL;	//F01 - PART FAULT / DEFAUT PIECE
  F01SRA : BF_MOUV2P1;	//TYPE_ELEMENT SRA
  S1F01DSRA : BOOL;	//SRA MOVEMENT FAULT / DEFAUT MOUVEMENT SRA
  F01SRB : BF_MOUV2P1;	//TYPE_ELEMENT SRB
  S1F01DSRB : BOOL;	//SRB MOVEMENT FAULT / DEFAUT MOUVEMENT SRB
  F01SRC : BF_MOUV2P1;	//TYPE_ELEMENT SRC
  S1F01DSRC : BOOL;	//SRC MOVEMENT FAULT / DEFAUT MOUVEMENT SRC
  NUM_MVT : INT;	//F01 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:55464_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:55464_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:55464_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:55464_217*
//
UN "IIT".F01.MS.MSP;
SPBNB _501;
L 0;
T #S1F01DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:55464_218*
//
U "IIT".F01.MS.MSP;
SPBNB _502;
L 1;
T #S1F01DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:55464_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: E0 -> F01
//TRANSFERT DE LA TABLE PIECE E0 VERS F01
//*ODIL_ID:10386_20*
//
U "IIT".E0.MS.MSP;
UN "IIT".F01.MS.MSP;
U "IIT".F01.MP.MPT;
= L 4.0;
BLD 103;
CALL #E0_TF_TP_F01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".E0,
Dest := "IIT".F01);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:55464_55*
//

NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:55464_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:55464_82*
//
U "PERSO";
= "Z1G".F01.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:55464_83*
//
UN "F01DPP1";
UN "F01DPP2";
= "Z1G".F01.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:55464_84*
//
U "Z1G".F01.IAP;
UN "IIT".F01.MS.MSP;
UN "IIT".F01.MP.MPP;
= "Z1G".F01.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:55464_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".F01.IPP;
UN "Z1G".F01.IPA;
= L 4.0;
BLD 103;
CALL #F01TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:55464_86*
//
U #F01TDFPC.Q;
S #S1F01DPIEC;
U(;
O "Z1G".F01.IPP;
O "Z1G".F01.IPA;
);
R #S1F01DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:55464_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:55464_177*
//
U "IIT".F01_TT.MFT.MFT1;
U "IIT".F01_TT.MFT.MFT2;
U "PERSO";
S "IIT".F01.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:55464_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:55464_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 131;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRA                                   **
//*******************************************************************************
//*ODIL_ID:55543_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:55543_1*
//
U "PERSO";
= #F01SRA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:55543_2*
//
U "Z1G".F01.IPP;
UN "IIT".F01.MP.MPT;
U "PERSO";
= #F01SRA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:55543_3*
//
U "F01DASRA1";
U "F01DASRA2";
UN "F01DRSRA1";
UN "F01DRSRA2";
= #F01SRA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:55543_4*
//
U "PERSO";
= #F01SRA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:55543_5*
//
U(;
U "Z1G".F01.IPP;
U "IIT".F01.MP.MPT;
O "Z1G".F01.IPA;
);
U "PERSO";
= #F01SRA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:55543_6*
//
UN "F01DASRA1";
UN "F01DASRA2";
U "F01DRSRA1";
U "F01DRSRA2";
= #F01SRA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:55543_7*
//
L #NUM_MVT;
L 1;
==I;
= #F01SRA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:55543_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #F01SRA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "F01EASRA",
Ormv := "F01ERSRA",
Def := S1F01DSRA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".F01.SRA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRB                                   **
//*******************************************************************************
//*ODIL_ID:55712_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:55712_1*
//
U "PERSO";
= #F01SRB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:55712_2*
//
U "Z1G".F01.IPP;
UN "IIT".F01.MP.MPT;
U "PERSO";
= #F01SRB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:55712_3*
//
U "F01DASRB1";
U "F01DASRB2";
UN "F01DRSRB1";
UN "F01DRSRB2";
= #F01SRB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:55712_4*
//
U "PERSO";
= #F01SRB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:55712_5*
//
U(;
U "Z1G".F01.IPP;
U "IIT".F01.MP.MPT;
O "Z1G".F01.IPA;
);
U "PERSO";
= #F01SRB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:55712_6*
//
UN "F01DASRB1";
UN "F01DASRB2";
U "F01DRSRB1";
U "F01DRSRB2";
= #F01SRB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:55712_7*
//
L #NUM_MVT;
L 2;
==I;
= #F01SRB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:55712_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #F01SRB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "F01EASRB",
Ormv := "F01ERSRB",
Def := S1F01DSRB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".F01.SRB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRC                                   **
//*******************************************************************************
//*ODIL_ID:55881_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:55881_1*
//
U "PERSO";
= #F01SRC.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:55881_2*
//
U "Z1G".F01.IPP;
UN "IIT".F01.MP.MPT;
U "PERSO";
= #F01SRC.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:55881_3*
//
U "F01DASRC1";
U "F01DASRC2";
UN "F01DRSRC1";
UN "F01DRSRC2";
= #F01SRC.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:55881_4*
//
U "PERSO";
= #F01SRC.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:55881_5*
//
U(;
U "Z1G".F01.IPP;
U "IIT".F01.MP.MPT;
O "Z1G".F01.IPA;
);
U "PERSO";
= #F01SRC.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:55881_6*
//
UN "F01DASRC1";
UN "F01DASRC2";
U "F01DRSRC1";
U "F01DRSRC2";
= #F01SRC.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:55881_7*
//
L #NUM_MVT;
L 3;
==I;
= #F01SRC.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:55881_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #F01SRC (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "F01EASRC",
Ormv := "F01ERSRC",
Def := S1F01DSRC,
Mvec := "Z1G".MVEC,
Tref := "Z1T".F01.SRC_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:55464_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:55464_181*
//
U #F01SRA.MF.IA;
U #F01SRB.MF.IA;
U #F01SRC.MF.IA;
U "PERSO";
= "Z1G".F01.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:55464_182*
//
U #F01SRA.MF.IR;
U #F01SRB.MF.IR;
U #F01SRC.MF.IR;
U "PERSO";
= "Z1G".F01.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1F01"
VERSION : 0.1
"1_F01_PREHENSEUR"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_H01_PREHENSEUR"
TITLE =PREHENSEUR
VERSION : 0.1
VAR
  S1H01DIV : INT;	//H01 - DIVERSITY / DIVERSITE
  H01SUIVI : BF_TCY_SUIV;	//Z1: H01 - MONITORING / FB GESTION DU SUIVI DU TEMP DE CYCLE H01
  ST1 : INT;	//Z1: MONITORING H01 - THRESHOLD T1 / SEUIL TEMP T1
  ST2 : INT;	//Z1: MONITORING H01 - THRESHOLD T2 / SEUIL TEMP T2
  S1H01TCP : INT;	//Z1: MONITORING H01 - OWN CYCLE TIME / TEMP DE CYCLE PROPRE
  S1H01TCT : INT;	//Z1: MONITORING H01 - TOTAL CYCLE TIME / TEMP DE CYCLE TOTAL
  S1H01NCY : INT;	//Z1: MONITORING H01 - CYCLE NUMBER / NUMERO DE CYCLE DE TRAVAIL
  H01SUCT : BOOL;	//Z1: MONITORING H01 - SUSPENSION COUNTING CYCLE TIME / SUSPENSION COMPTAGE TEMP
  H01NVCT : BOOL;	//Z1: MONITORING H01 - NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAG
  S1H01DT2 : BOOL;	//Z1: MONITORING H01 - CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  S1H01DTC : BOOL;	//Z1: MONITORING H01 - CYCLE TIME OVERRUN / DEPASSEMENT TEMPS DE CYCLE
  H01X1SUCT : BOOL;	//Z1: AUX1 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  H01X2SUCT : BOOL;	//Z1: AUX2 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  H01X3SUCT : BOOL;	//Z1: AUX3 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  H01X1NVCT : BOOL;	//Z1: AUX1 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  H01X2NVCT : BOOL;	//Z1: AUX2 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  H01X3NVCT : BOOL;	//Z1: AUX3 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  Z1CPTPIECE : BF_CPT_PIECE;	//Z1 - ZONE PART COUNTER / COMPTEUR PIECES ZONE
  PRO : INT;	//Z1 - PART PRODUCTION COUNTER VALUE / VALEUR COMPTEUR PRODUCTION ZONE
  G0_TF_TP_H01 : BF_TF_TP;	//H01 - TRANSFER PART WORD: G0 -> H01 / TRANSFERT TABLE PIECE G0 -> H01
  H01RETVAL : INT;	//H01 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  H01TDFPC : TON;	//H01 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1H01DPIEC : BOOL;	//H01 - PART FAULT / DEFAUT PIECE
  H01PLB : BF_MOUV2P1;	//TYPE_ELEMENT PLB
  S1H01DPLB : BOOL;	//PLB MOVEMENT FAULT / DEFAUT MOUVEMENT PLB
  H01SRA : BF_MOUV2P1;	//TYPE_ELEMENT SRA
  S1H01DSRA : BOOL;	//SRA MOVEMENT FAULT / DEFAUT MOUVEMENT SRA
  NUM_MVT : INT;	//H01 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:56061_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:56061_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:56061_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:56061_217*
//
UN "IIT".H01.MS.MSP;
SPBNB _501;
L 0;
T #S1H01DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:56061_218*
//
U "IIT".H01.MS.MSP;
SPBNB _502;
L 1;
T #S1H01DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                           PRODUCTION COUNTER                              **
//*******************************************************************************
//*ODIL_ID:56061_227*
//

NETWORK
TITLE =ZONE PART COUNTER
//COMPTEUR PIECES ZONE
//*ODIL_ID:56061_228*
//
UN "Z1G".RAZ;
= L 4.0;
BLD 103;
U "Z1G".LIEN_PUP.Z_mauto;
= L 4.1;
BLD 103;
U "IIT".H01.MP.MPT;
= L 4.2;
BLD 103;
CALL #Z1CPTPIECE (
Raz_cpt := L 4.0,
Preselec := 32767,
Autcompt := L 4.1,
Comptage := L 4.2,
Val_cour := #PRO);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:56061_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: G0 -> H01
//TRANSFERT DE LA TABLE PIECE G0 VERS H01
//*ODIL_ID:14842_20*
//
U "IIT".G0.MS.MSP;
UN "IIT".H01.MS.MSP;
U "IIT".H01.MP.MPT;
= L 4.0;
BLD 103;
CALL #G0_TF_TP_H01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".G0,
Dest := "IIT".H01);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:56061_55*
//

NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:56061_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:56061_82*
//
U "PERSO";
= "Z1G".H01.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:56061_83*
//
UN "H01DPP1";
UN "H01DPP2";
= "Z1G".H01.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:56061_84*
//
U "Z1G".H01.IAP;
UN "IIT".H01.MS.MSP;
UN "IIT".H01.MP.MPP;
= "Z1G".H01.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:56061_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".H01.IPP;
UN "Z1G".H01.IPA;
= L 4.0;
BLD 103;
CALL #H01TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:56061_86*
//
U #H01TDFPC.Q;
S #S1H01DPIEC;
U(;
O "Z1G".H01.IPP;
O "Z1G".H01.IPA;
);
R #S1H01DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:56061_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:56061_177*
//
U "IIT".H01_TT.MFT.MFT1;
U "IIT".H01_TT.MFT.MFT2;
U "PERSO";
S "IIT".H01.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:56061_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:56061_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 132;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLB                                   **
//*******************************************************************************
//*ODIL_ID:56658_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:56658_1*
//
U "PERSO";
= #H01PLB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:56658_2*
//
U "Z1G".H01.IPP;
UN "IIT".H01.MP.MPT;
U "PERSO";
= #H01PLB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:56658_3*
//
U "H01DAPLB1";
U "H01DAPLB2";
UN "H01DRPB1";
UN "H01DRPB2";
= #H01PLB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:56658_4*
//
U "PERSO";
= #H01PLB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:56658_5*
//
U(;
U "Z1G".H01.IPP;
U "IIT".H01.MP.MPT;
O "Z1G".H01.IPA;
);
U "PERSO";
= #H01PLB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:56658_6*
//
UN "H01DAPLB1";
UN "H01DAPLB2";
U "H01DRPB1";
U "H01DRPB2";
= #H01PLB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:56658_7*
//
L #NUM_MVT;
L 1;
==I;
= #H01PLB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:56658_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #H01PLB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "H01EAPLB",
Ormv := "H01ERPLB",
Def := S1H01DPLB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".H01.PLB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRA                                   **
//*******************************************************************************
//*ODIL_ID:56315_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:56315_1*
//
U "PERSO";
= #H01SRA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:56315_2*
//
U "Z1G".H01.IPP;
UN "IIT".H01.MP.MPT;
U "PERSO";
= #H01SRA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:56315_3*
//
U "H01DASRA1";
U "H01DASRA2";
U "H01DASRA3";
U "H01DASRA4";
UN "H01DRSRA1";
UN "H01DRSRA2";
UN "H01DRSRA3";
UN "H01DRSRA4";
= #H01SRA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:56315_4*
//
U "PERSO";
= #H01SRA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:56315_5*
//
U(;
U "Z1G".H01.IPP;
U "IIT".H01.MP.MPT;
O "Z1G".H01.IPA;
);
U "PERSO";
= #H01SRA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:56315_6*
//
UN "H01DASRA1";
UN "H01DASRA2";
UN "H01DASRA3";
UN "H01DASRA4";
U "H01DRSRA1";
U "H01DRSRA2";
U "H01DRSRA3";
U "H01DRSRA4";
= #H01SRA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:56315_7*
//
L #NUM_MVT;
L 2;
==I;
= #H01SRA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:56315_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #H01SRA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "H01EASRA",
Ormv := "H01ERSRA",
Def := S1H01DSRA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".H01.SRA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:56061_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:56061_181*
//
U #H01PLB.MF.IA;
U #H01SRA.MF.IA;
U "PERSO";
= "Z1G".H01.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:56061_182*
//
U #H01PLB.MF.IR;
U #H01SRA.MF.IR;
U "PERSO";
= "Z1G".H01.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1H01"
VERSION : 0.1
"1_H01_PREHENSEUR"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_U0R_Repouso"
TITLE =Repouso
VERSION : 0.1
VAR
  U0RRETVAL : INT;	//U0R - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  U0RTPA : BF_MOUV2P1;	//TYPE_ELEMENT TPA
  S1U0RDTPA : BOOL;	//TPA MOVEMENT FAULT / DEFAUT MOUVEMENT TPA
  U0RTPB : BF_MOUV2P1;	//TYPE_ELEMENT TPB
  S1U0RDTPB : BOOL;	//TPB MOVEMENT FAULT / DEFAUT MOUVEMENT TPB
  NUM_MVT : INT;	//U0R - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:76371_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:76371_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 125;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _501;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_501: NOP 0;
U L 5.0;
NOT;
SPBNB _502;
L -1;
T #NUM_MVT;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TPA                                   **
//*******************************************************************************
//*ODIL_ID:76448_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:76448_1*
//
U "PERSO";
= #U0RTPA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:76448_2*
//
U "PERSO";
= #U0RTPA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:76448_3*
//
U "U0RDATPA1";
UN "U0RDRTPA1";
= #U0RTPA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:76448_4*
//
U "PERSO";
= #U0RTPA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:76448_5*
//
U "PERSO";
= #U0RTPA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:76448_6*
//
UN "U0RDATPA1";
U "U0RDRTPA1";
= #U0RTPA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:76448_7*
//
L #NUM_MVT;
L 1;
==I;
= #U0RTPA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:76448_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #U0RTPA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "U0REATPA",
Ormv := "U0RERTPA",
Def := S1U0RDTPA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".U0R.TPA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TPB                                   **
//*******************************************************************************
//*ODIL_ID:76615_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:76615_1*
//
U "PERSO";
= #U0RTPB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:76615_2*
//
U "PERSO";
= #U0RTPB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:76615_3*
//
U "U0RDATPB1";
UN "U0RDRTPB1";
= #U0RTPB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:76615_4*
//
U "PERSO";
= #U0RTPB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:76615_5*
//
U "PERSO";
= #U0RTPB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:76615_6*
//
UN "U0RDATPB1";
U "U0RDRTPB1";
= #U0RTPB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:76615_7*
//
L #NUM_MVT;
L 2;
==I;
= #U0RTPB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:76615_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #U0RTPB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "U0REATPB",
Ormv := "U0RERTPB",
Def := S1U0RDTPB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".U0R.TPB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:76371_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:76371_181*
//
U #U0RTPA.MF.IA;
U #U0RTPB.MF.IA;
U "PERSO";
= "Z1G".U0R.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:76371_182*
//
U #U0RTPA.MF.IR;
U #U0RTPB.MF.IR;
U "PERSO";
= "Z1G".U0R.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1U0R"
VERSION : 0.1
"1_U0R_Repouso"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_U01_PREHENSEUR"
TITLE =PREHENSEUR
VERSION : 0.1
VAR
  S1U01DIV : INT;	//U01 - DIVERSITY / DIVERSITE
  U01SUIVI : BF_TCY_SUIV;	//Z1: U01 - MONITORING / FB GESTION DU SUIVI DU TEMP DE CYCLE U01
  ST1 : INT;	//Z1: MONITORING U01 - THRESHOLD T1 / SEUIL TEMP T1
  ST2 : INT;	//Z1: MONITORING U01 - THRESHOLD T2 / SEUIL TEMP T2
  S1U01TCP : INT;	//Z1: MONITORING U01 - OWN CYCLE TIME / TEMP DE CYCLE PROPRE
  S1U01TCT : INT;	//Z1: MONITORING U01 - TOTAL CYCLE TIME / TEMP DE CYCLE TOTAL
  S1U01NCY : INT;	//Z1: MONITORING U01 - CYCLE NUMBER / NUMERO DE CYCLE DE TRAVAIL
  U01SUCT : BOOL;	//Z1: MONITORING U01 - SUSPENSION COUNTING CYCLE TIME / SUSPENSION COMPTAGE TEMP
  U01NVCT : BOOL;	//Z1: MONITORING U01 - NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAG
  S1U01DT2 : BOOL;	//Z1: MONITORING U01 - CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  S1U01DTC : BOOL;	//Z1: MONITORING U01 - CYCLE TIME OVERRUN / DEPASSEMENT TEMPS DE CYCLE
  U01X1SUCT : BOOL;	//Z1: AUX1 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  U01X2SUCT : BOOL;	//Z1: AUX2 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  U01X3SUCT : BOOL;	//Z1: AUX3 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  U01X1NVCT : BOOL;	//Z1: AUX1 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  U01X2NVCT : BOOL;	//Z1: AUX2 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  U01X3NVCT : BOOL;	//Z1: AUX3 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  T0D_TF_TP_U01 : BF_TF_TP;	//U01 - TRANSFER PART WORD: T0D -> U01 / TRANSFERT TABLE PIECE T0D -> U01
  U01RETVAL : INT;	//U01 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  U01TDFPC : TON;	//U01 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1U01DPIEC : BOOL;	//U01 - PART FAULT / DEFAUT PIECE
  U01PLA : BF_MOUV2P1;	//TYPE_ELEMENT PLA
  S1U01DPLA : BOOL;	//PLA MOVEMENT FAULT / DEFAUT MOUVEMENT PLA
  U01PLB : BF_MOUV2P1;	//TYPE_ELEMENT PLB
  S1U01DPLB : BOOL;	//PLB MOVEMENT FAULT / DEFAUT MOUVEMENT PLB
  U01PLC : BF_MOUV2P1;	//TYPE_ELEMENT PLC
  S1U01DPLC : BOOL;	//PLC MOVEMENT FAULT / DEFAUT MOUVEMENT PLC
  U01SRD : BF_MOUV2P1;	//TYPE_ELEMENT SRD
  S1U01DSRD : BOOL;	//SRD MOVEMENT FAULT / DEFAUT MOUVEMENT SRD
  U01SRE : BF_MOUV2P1;	//TYPE_ELEMENT SRE
  S1U01DSRE : BOOL;	//SRE MOVEMENT FAULT / DEFAUT MOUVEMENT SRE
  U01VEF : BF_MOUV2P1;	//TYPE_ELEMENT VEF
  S1U01DVEF : BOOL;	//VEF MOVEMENT FAULT / DEFAUT MOUVEMENT VEF
  NUM_MVT : INT;	//U01 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:56827_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:56827_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:56827_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:56827_217*
//
UN "IIT".U01.MS.MSP;
SPBNB _501;
L 0;
T #S1U01DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:56827_218*
//
U "IIT".U01.MS.MSP;
SPBNB _502;
L 1;
T #S1U01DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:56827_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: T0D -> U01
//TRANSFERT DE LA TABLE PIECE T0D VERS U01
//*ODIL_ID:28116_20*
//
U "IIT".T0D.MS.MSP;
UN "IIT".U01.MS.MSP;
U "IIT".U01.MP.MPT;
= L 4.0;
BLD 103;
CALL #T0D_TF_TP_U01 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".T0D,
Dest := "IIT".U01);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:56827_55*
//

NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:56827_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:56827_82*
//
U "PERSO";
= "Z1G".U01.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:56827_83*
//
UN "U01DPP1";
UN "U01DPP2";
UN "U01DPP3";
= "Z1G".U01.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:56827_84*
//
U "Z1G".U01.IAP;
UN "IIT".U01.MS.MSP;
UN "IIT".U01.MP.MPP;
= "Z1G".U01.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:56827_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".U01.IPP;
UN "Z1G".U01.IPA;
= L 4.0;
BLD 103;
CALL #U01TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:56827_86*
//
U #U01TDFPC.Q;
S #S1U01DPIEC;
U(;
O "Z1G".U01.IPP;
O "Z1G".U01.IPA;
);
R #S1U01DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:56827_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:56827_177*
//
U "IIT".U01_TT.MFT.MFT1;
U "IIT".U01_TT.MFT.MFT2;
U "PERSO";
S "IIT".U01.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                                MOVEMENTS                                  **
//*******************************************************************************
//*ODIL_ID:56827_178*
//

NETWORK
TITLE =MOVEMENT NUMBER
//NUMERO DE MOUVEMENT SELECTIONNE EN IHM
//*ODIL_ID:56827_179*
//
U "Z1G".LIEN_PUP.Z_manup;
U(;
U "Z1G".IHM1PM;
UN "Z1G".PUP1DC;
O;
;
;
U "Z1G".IHM2PM;
UN "Z1G".PUP2DC;
O;
;
;
U "Z1G".IHM3PM;
UN "Z1G".PUP3DC;
O;
;
;
U "Z1G".IHM4PM;
UN "Z1G".PUP4DC;
;
);
U(;
L "Z1G".NUM_PAGE;
L 133;
==I;
);
= L 5.0;
U L 5.0;
SPBNB _503;
L "Z1G".NUM_MVT;
T #NUM_MVT;
_503: NOP 0;
U L 5.0;
NOT;
SPBNB _504;
L -1;
T #NUM_MVT;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLA                                   **
//*******************************************************************************
//*ODIL_ID:56913_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:56913_1*
//
U "PERSO";
= #U01PLA.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:56913_2*
//
U "Z1G".U01.IPP;
UN "IIT".U01.MP.MPT;
U "PERSO";
= #U01PLA.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:56913_3*
//
U "U01EAPLA1";
U "U01EAPLA2";
UN "U01ERPLA1";
UN "U01ERPLA2";
= #U01PLA.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:56913_4*
//
U "PERSO";
= #U01PLA.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:56913_5*
//
U(;
U "Z1G".U01.IPP;
U "IIT".U01.MP.MPT;
O "Z1G".U01.IPA;
);
U "PERSO";
= #U01PLA.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:56913_6*
//
UN "U01EAPLA1";
UN "U01EAPLA2";
U "U01ERPLA1";
U "U01ERPLA2";
= #U01PLA.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:56913_7*
//
L #NUM_MVT;
L 1;
==I;
= #U01PLA.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:56913_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #U01PLA (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "U01EAPLA",
Ormv := "U01ERPLA",
Def := S1U01DPLA,
Mvec := "Z1G".MVEC,
Tref := "Z1T".U01.PLA_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLB                                   **
//*******************************************************************************
//*ODIL_ID:57071_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:57071_1*
//
U "PERSO";
= #U01PLB.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:57071_2*
//
U "Z1G".U01.IPP;
UN "IIT".U01.MP.MPT;
U "PERSO";
= #U01PLB.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:57071_3*
//
U "U01DAPLB1";
U "U01DAPLB2";
UN "U01DRPLB1";
UN "U01DRPLB2";
= #U01PLB.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:57071_4*
//
U "PERSO";
= #U01PLB.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:57071_5*
//
U(;
U "Z1G".U01.IPP;
U "IIT".U01.MP.MPT;
O "Z1G".U01.IPA;
);
U "PERSO";
= #U01PLB.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:57071_6*
//
UN "U01DAPLB1";
UN "U01DAPLB2";
U "U01DRPLB1";
U "U01DRPLB2";
= #U01PLB.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:57071_7*
//
L #NUM_MVT;
L 2;
==I;
= #U01PLB.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:57071_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #U01PLB (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "U01EAPLB",
Ormv := "U01ERPLB",
Def := S1U01DPLB,
Mvec := "Z1G".MVEC,
Tref := "Z1T".U01.PLB_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         PLC                                   **
//*******************************************************************************
//*ODIL_ID:57387_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:57387_1*
//
U "PERSO";
= #U01PLC.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:57387_2*
//
U "Z1G".U01.IPP;
UN "IIT".U01.MP.MPT;
U "PERSO";
= #U01PLC.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:57387_3*
//
U "U01DAPLC1";
U "U01DAPLC2";
UN "U01DRPLC1";
UN "U01DRPLC2";
= #U01PLC.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:57387_4*
//
U "PERSO";
= #U01PLC.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:57387_5*
//
U(;
U "Z1G".U01.IPP;
U "IIT".U01.MP.MPT;
O "Z1G".U01.IPA;
);
U "PERSO";
= #U01PLC.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:57387_6*
//
UN "U01DAPLC1";
UN "U01DAPLC2";
U "U01DRPLC1";
U "U01DRPLC2";
= #U01PLC.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:57387_7*
//
L #NUM_MVT;
L 4;
==I;
= #U01PLC.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:57387_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #U01PLC (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "U01EAPLC",
Ormv := "U01ERPLC",
Def := S1U01DPLC,
Mvec := "Z1G".MVEC,
Tref := "Z1T".U01.PLC_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRD                                   **
//*******************************************************************************
//*ODIL_ID:57545_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:57545_1*
//
U "PERSO";
= #U01SRD.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:57545_2*
//
U "Z1G".U01.IPP;
UN "IIT".U01.MP.MPT;
U "PERSO";
= #U01SRD.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:57545_3*
//
U "U01DASRD1";
U "U01DASRD2";
UN "U01DRSRD1";
UN "U01DRSRD2";
= #U01SRD.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:57545_4*
//
U "PERSO";
= #U01SRD.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:57545_5*
//
U(;
U "Z1G".U01.IPP;
U "IIT".U01.MP.MPT;
O "Z1G".U01.IPA;
);
U "PERSO";
= #U01SRD.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:57545_6*
//
UN "U01DASRD1";
UN "U01DASRD2";
U "U01DRSRD1";
U "U01DRSRD2";
= #U01SRD.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:57545_7*
//
L #NUM_MVT;
L 5;
==I;
= #U01SRD.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:57545_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #U01SRD (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "U01EASRD",
Ormv := "U01ERSRD",
Def := S1U01DSRD,
Mvec := "Z1G".MVEC,
Tref := "Z1T".U01.SRD_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         SRE                                   **
//*******************************************************************************
//*ODIL_ID:79895_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:79895_1*
//
U "PERSO";
= #U01SRE.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:79895_2*
//
U "Z1G".U01.IPP;
UN "IIT".U01.MP.MPT;
U "PERSO";
= #U01SRE.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:79895_3*
//
U "U01DASRE1";
U "U01DASRE2";
U "U01DASRE3";
U "U01DASRE4";
UN "U01DRSRE1";
UN "U01DRSRE2";
UN "U01DRSRE3";
UN "U01DRSRE4";
= #U01SRE.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:79895_4*
//
U "PERSO";
= #U01SRE.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:79895_5*
//
U(;
U "Z1G".U01.IPP;
U "IIT".U01.MP.MPT;
O "Z1G".U01.IPA;
);
U "PERSO";
= #U01SRE.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:79895_6*
//
UN "U01DASRE1";
UN "U01DASRE2";
UN "U01DASRE3";
UN "U01DASRE4";
U "U01DRSRE1";
U "U01DRSRE2";
U "U01DRSRE3";
U "U01DRSRE4";
= #U01SRE.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:79895_7*
//
L #NUM_MVT;
L 3;
==I;
= #U01SRE.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:79895_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #U01SRE (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "U01EASRE",
Ormv := "U01ERSRE",
Def := S1U01DSRE,
Mvec := "Z1G".MVEC,
Tref := "Z1T".U01.SRE_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         VEF                                   **
//*******************************************************************************
//*ODIL_ID:80068_0*
//

NETWORK
TITLE =ADVANCE MECHANICAL SAFETY
//SECURITE MECANIQUE AVANCE
//*ODIL_ID:80068_1*
//
U "PERSO";
= #U01VEF.MF.SA;
NETWORK
TITLE =ADVANCE AUTORIZATION
//AUTORISATION AVANCE
//*ODIL_ID:80068_2*
//
U "Z1G".U01.IPP;
UN "IIT".U01.MP.MPT;
U "PERSO";
= #U01VEF.MF.AA;
NETWORK
TITLE =ADVANCE INFORMATION
//INFORMATION AVANCE
//*ODIL_ID:80068_3*
//
U "U01DASVTF1";
U "U01DASVTF2";
U "U01DASVTF3";
U "U01DASVTF4";
= #U01VEF.MF.IA;
NETWORK
TITLE =RETURN MECHANICAL SAFETY
//SECURITE MECANIQUE RECUL
//*ODIL_ID:80068_4*
//
U "PERSO";
= #U01VEF.MF.SR;
NETWORK
TITLE =RETURN AUTORIZATION
//AUTORISATION RECUL
//*ODIL_ID:80068_5*
//
U(;
U "Z1G".U01.IPP;
U "IIT".U01.MP.MPT;
O "Z1G".U01.IPA;
);
U "PERSO";
= #U01VEF.MF.AR;
NETWORK
TITLE =RETURN INFORMATION
//INFORMATION RECUL
//*ODIL_ID:80068_6*
//
UN "U01DASVTF1";
UN "U01DASVTF2";
UN "U01DASVTF3";
UN "U01DASVTF4";
= #U01VEF.MF.IR;
NETWORK
TITLE =MANUAL MOVEMENT SELECTION
//SELECTION MOUVEMENT MANUEL
//*ODIL_ID:80068_7*
//
L #NUM_MVT;
L 6;
==I;
= #U01VEF.MF.SL;
NETWORK
TITLE =MOVEMENT CONTROL
//GESTION MOUVEMENT
//*ODIL_ID:80068_8*
//
U "PERSO";
= L 7.0;
BLD 103;
U(;
U "Z1BMA1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMA2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMA3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMA4";
U "Z1G".IHM4PM;
;
);
= L 7.1;
BLD 103;
U(;
U "Z1BMR1";
U "Z1G".IHM1PM;
O;
;
;
U "Z1BMR2";
U "Z1G".IHM2PM;
O;
;
;
U "Z1BMR3";
U "Z1G".IHM3PM;
O;
;
;
U "Z1BMR4";
U "Z1G".IHM4PM;
;
);
= L 7.2;
BLD 103;
CALL #U01VEF (
Com := L 7.0,
Bamv := L 7.1,
Brmv := L 7.2,
Lien_pup := "Z1G".LIEN_PUP,
Oamv := "U01EASVTF",
Ormv := "U01ESOVTF",
Def := S1U01DVEF,
Mvec := "Z1G".MVEC,
Tref := "Z1T".U01.VEF_TREF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:56827_180*
//

NETWORK
TITLE =MACHINE IN ADVANCE POSITION
//CONDITIONS MACHINE AVANCEE
//*ODIL_ID:56827_181*
//
U #U01PLA.MF.IA;
U #U01PLB.MF.IA;
U #U01PLC.MF.IA;
U #U01SRD.MF.IA;
U #U01SRE.MF.IA;
U #U01VEF.MF.IA;
U "PERSO";
= "Z1G".U01.CMA;
NETWORK
TITLE =MACHINE IN RETURN POSITION
//CONDITIONS MACHINE RECULEE
//*ODIL_ID:56827_182*
//
U #U01PLA.MF.IR;
U #U01PLB.MF.IR;
U #U01PLC.MF.IR;
U #U01SRD.MF.IR;
U #U01SRE.MF.IR;
U #U01VEF.MF.IR;
U "PERSO";
= "Z1G".U01.CMR;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1U01"
VERSION : 0.1
"1_U01_PREHENSEUR"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_U02_PREHENSEUR"
TITLE =PREHENSEUR
VERSION : 0.1
VAR
  S1U02DIV : INT;	//U02 - DIVERSITY / DIVERSITE
  U02SUIVI : BF_TCY_SUIV;	//Z1: U02 - MONITORING / FB GESTION DU SUIVI DU TEMP DE CYCLE U02
  ST1 : INT;	//Z1: MONITORING U02 - THRESHOLD T1 / SEUIL TEMP T1
  ST2 : INT;	//Z1: MONITORING U02 - THRESHOLD T2 / SEUIL TEMP T2
  S1U02TCP : INT;	//Z1: MONITORING U02 - OWN CYCLE TIME / TEMP DE CYCLE PROPRE
  S1U02TCT : INT;	//Z1: MONITORING U02 - TOTAL CYCLE TIME / TEMP DE CYCLE TOTAL
  S1U02NCY : INT;	//Z1: MONITORING U02 - CYCLE NUMBER / NUMERO DE CYCLE DE TRAVAIL
  U02SUCT : BOOL;	//Z1: MONITORING U02 - SUSPENSION COUNTING CYCLE TIME / SUSPENSION COMPTAGE TEMP
  U02NVCT : BOOL;	//Z1: MONITORING U02 - NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAG
  S1U02DT2 : BOOL;	//Z1: MONITORING U02 - CYCLE TIME OUT / DEPASSEMENT TEMPS T2
  S1U02DTC : BOOL;	//Z1: MONITORING U02 - CYCLE TIME OVERRUN / DEPASSEMENT TEMPS DE CYCLE
  U02X1SUCT : BOOL;	//Z1: AUX1 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  U02X2SUCT : BOOL;	//Z1: AUX2 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  U02X3SUCT : BOOL;	//Z1: AUX3 SUSPENSION COUNTING CYCLE TIME / CONDITION SUSPENSION COMPTAGE TEMP
  U02X1NVCT : BOOL;	//Z1: AUX1 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  U02X2NVCT : BOOL;	//Z1: AUX2 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  U02X3NVCT : BOOL;	//Z1: AUX3 NO VALIDATION COUNTING CYCLE TIME / NON VALIDATION COMPTAGE TEMP
  T0D_TF_TP_U02 : BF_TF_TP;	//U02 - TRANSFER PART WORD: T0D -> U02 / TRANSFERT TABLE PIECE T0D -> U02
  U02RETVAL : INT;	//U02 - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  U02TDFPC : TON;	//U02 - PART PRESENT FAULT TIMER / TEMPORISATION DEFAUT PIECE
  S1U02DPIEC : BOOL;	//U02 - PART FAULT / DEFAUT PIECE
  NUM_MVT : INT;	//U02 - MOVEMENT NUMBER / NUMERO DE MOUVEMENT SELECTIONNE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                              HARDWARE HMI                                 **
//*******************************************************************************
//*ODIL_ID:84879_309*
//

NETWORK
TITLE =
//*******************************************************************************
//**                           SAFETY PROGRAM HMI                              **
//*******************************************************************************
//*ODIL_ID:84879_312*
//

NETWORK
TITLE =
//*******************************************************************************
//**                              MONITORING / SUIVI                           **
//*******************************************************************************
//*ODIL_ID:84879_216*
//

NETWORK
TITLE =MONITORING RESET DIVERSITY
//RAZ MOT DIVERSITE POUR LE SUIVI SMPLOC
//*ODIL_ID:84879_217*
//
UN "IIT".U02.MS.MSP;
SPBNB _501;
L 0;
T #S1U02DIV;
_501: NOP 0;
NETWORK
TITLE =MONITORING DIVERSITY
//VALEUR MOT DIVERSITE POUR SMP
//*ODIL_ID:84879_218*
//
U "IIT".U02.MS.MSP;
SPBNB _502;
L 1;
T #S1U02DIV;
_502: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                          PART TABLE MANAGEMENT                            **
//*******************************************************************************
//*ODIL_ID:84879_18*
//

NETWORK
TITLE =TRANSFER PART TABLE: T0D -> U02
//TRANSFERT DE LA TABLE PIECE T0D VERS U02
//*ODIL_ID:28116_20*
//
U "IIT".T0D.MS.MSP;
UN "IIT".U02.MS.MSP;
U "IIT".U02.MP.MPT;
= L 4.0;
BLD 103;
CALL #T0D_TF_TP_U02 (
Val := L 4.0,
nBit1 := 1,
nBit2 := 1,
Orig := "IIT".T0D,
Dest := "IIT".U02);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                             PART MEMORY                                   **
//*******************************************************************************
//*ODIL_ID:84879_55*
//

NETWORK
TITLE =
//*******************************************************************************
//**                       IPP INFORMATION / IPP AU POSTE                      **
//*******************************************************************************
//*ODIL_ID:84879_81*
//

NETWORK
TITLE =PRESENT PART INFORMATION
//INFORMATION PIECE PRESENTE
//*ODIL_ID:84879_82*
//
U "PERSO";
= "Z1G".U02.IPP;
NETWORK
TITLE =PART ABSENCE INFORMATION (NO PART DETECT)
//INFORMATION ABSENCE PIECE (AUCUN DETECTEURS PIECE ACTIF)
//*ODIL_ID:84879_83*
//
U "PERSO";
= "Z1G".U02.IAP;
NETWORK
TITLE =ABSENT PART INFORMATION (NO PART DETECT + NO PART PRESENT MEMOR)
//INFORMATION PIECE ABSENTE (PAS DE DETECTEUR PIECE ACTIF + MEMOIRE PIECE
//PRESENTE A ZERO)
//*ODIL_ID:84879_84*
//
U "Z1G".U02.IAP;
UN "IIT".U02.MS.MSP;
UN "IIT".U02.MP.MPP;
= "Z1G".U02.IPA;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT TIMER
//SUIVI: TEMPORISATION DEFAUT PRESENCE PIECE
//*ODIL_ID:84879_85*
//
U "Z1G".LIEN_PUP.Z_mauto;
UN "Z1G".U02.IPP;
UN "Z1G".U02.IPA;
= L 4.0;
BLD 103;
CALL #U02TDFPC (
IN := L 4.0,
PT := T#2S);
NOP 0;
NETWORK
TITLE =MONITORING: PART PRESENT FAULT
//SUIVI: DEFAUT PRESENCE PIECE
//*ODIL_ID:84879_86*
//
U #U02TDFPC.Q;
S #S1U02DPIEC;
U(;
O "Z1G".U02.IPP;
O "Z1G".U02.IPA;
);
R #S1U02DPIEC;
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        STAGE END OF WORK MEMORY                           **
//*******************************************************************************
//*ODIL_ID:84879_170*
//

NETWORK
TITLE =PART COMPLETE MEMORY
//MEMOIRE PIECE TRAVAILLEE
//*ODIL_ID:84879_177*
//
U "IIT".U02_TT.MFT.MFT1;
U "IIT".U02_TT.MFT.MFT2;
U "PERSO";
S "IIT".U02.MP.MPT;
NETWORK
TITLE =
//*******************************************************************************
//**                         TOOL MECANICAL CONDITIONS                         **
//*******************************************************************************
//*ODIL_ID:84879_180*
//

END_FUNCTION_BLOCK

DATA_BLOCK "Z1U02"
VERSION : 0.1
"1_U02_PREHENSEUR"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_A0_LANCEMENT"
VERSION : 0.1
VAR
  A0_LANCEMENT : BF_LANCEMENT;	//A0 - SIPTOL DIALOGUE MANAGEMENT / GESTION POINT DE LANCEMENT SIPTOL
  A0LIPFD : ARRAY  [1 .. 64 ] OF //A0L - PART TO DO INFORMATION / INFO PIECE A FAIRE
BOOL;
  A0LIPSD : ARRAY  [1 .. 64 ] OF //A0L - NEXT PART INFORMATION / INFO PIECE SUIVANTE
BOOL;
  A0LDIVHS : STRUCT	//A0L - DIVERSITY CRITERIA LIST / LISTE DES CRITERES DIVERSITES
    CP : INT;	//WITHOUT SIPTOL PROCESS CODE / CODE PROCESS HORS SIPTOL
    CDIV : ARRAY  [1 .. 50 ] OF //WITHOUT SIPTOL DIVERSITYCRITERIA LIST / LISTE CRITERES DIVERSITES HORS SIPTOL
INT;
  END_STRUCT ;
  A0LTVEHPF : STRUCT	//A0L - PART TO DO VEHICLE INFO / INFO TYPE VEHICULE PIECE A FAIRE
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;	//FABRICATION SANS PIECE AU FILM
    B0 : BOOL;	//UNIT SPECIAL PIECE A FAIRE
    B1 : BOOL;
    B2 : BOOL;
    B3 : BOOL;
    B4 : BOOL;
    B5 : BOOL;
    B6 : BOOL;
    B7 : BOOL;
  END_STRUCT ;
  A0LTVEHPS : STRUCT	//A0L - NEXT PART VEHICLE INFO / INFO TYPE VEHICULE PIECE SUIVANTE
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;	//FABRICATION SANS PIECE AU FILM
    B0 : BOOL;	//UNIT SPECIAL PIECE SUIVANTE
    B1 : BOOL;
    B2 : BOOL;
    B3 : BOOL;
    B4 : BOOL;
    B5 : BOOL;
    B6 : BOOL;
    B7 : BOOL;
  END_STRUCT ;
  IHMSELCDIV : INT;	//HMI - DIVERSITY CODE SELECTION / SELECTION CODE DIVERSITE
  A0LRETVAL : INT;	//A0L - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  A0LNORDRE : INT;	//A0L - WITHOUT SIPTOL OF NUMBER / NUMERO OF HORS SITPOL
  S1A0LDLS : BOOL;	//A0L - SIPTOL LAUNCH FAULT / DEFAUT LANCEMENT SIPTOL
  S1A0LDRCAL : BOOL;	//A0L - SERVER ANSWER FAULT / DEFAUT REPONSE CALCULATEUR
  S1A0LATCAL : BOOL;	//A0L - WAITING FOR SIPTOL PART PROPOSAL /ATTENTE PROPOSITION CALCULATEUR
  A0LIPFSPE : BOOL;	//A0L - PART TO DO SPECIAL UNIT INFO / INFO PIECE A FAIRE UNIT SPECIAL
  A0LIPSSPE : BOOL;	//A0L - NEXT PART SPECIAL UNIT INFO / INFO PIECE SUIVANTE UNIT SPECIAL
  A0LMDEC : BOOL;	//A0L - DESICION MEMORY / MEMOIRE DE DECISION
  A0L_CARACT : BF_CARACT_SIEBERT;	//A0: PREPARE STRING TO DISPLAY / MISE EN FORME DE LA CHAINE A AFFICHER
  S1A0LDCARACT : BOOL;	//A0L - BF CARACT FAULT / DEFAUT BF CARACT
  A0LCPAF : INT;	//A0L: PART TO DO CODE / CODE PIECE A FAIRE
  A0LCPS : INT;	//A0L: NEXT PART CODE / CODE PIECE SUIVANTE
  A0LAFF1_AN : "BF_AFF SIEBERT (2*13) PN";	//A0L: SEND DATA TO SIEBERT DISPLAY / ENVOI DES DONNEES A L AFFICHEUR SIEBERT
  S1A0LDAFF1 : BOOL;	//A0L - SIEBERT DISPLAY FAULT / DEFAUT AFFICHEUR SIEBERT
  A0LMAJAFF : BOOL;	//A0L - SIEBERT DISPLAY UPDATE REQUEST / DEMANDE MISE A JOUR DONNEES AFFICHEUR
END_VAR
BEGIN
NETWORK
TITLE =
//******************************************************************************
//**                      GESTION POINT DE LANCEMENT 03.11                    **
//******************************************************************************
//*ODIL_ID:64523_1000*
//

NETWORK
TITLE =AUTHORIZATION LAUNCH COMPARISON PGF
//AUTORISATION COMPARAISON PGF LANCEMENT
//*ODIL_ID:64523_1001*
//
U "Z1G".A0.ECHG_A0L.AC;
U "IIT".A0.MS.MRCPF;
= #A0_LANCEMENT.AC;
NETWORK
TITLE =SIPTOL DIALOGUE MANAGEMENT (LAUNCHING)
//GESTION DIALOGUE SIPTOL
//*ODIL_ID:64523_1002*
//
U "Z1G".A0.ECHG_A0L.AR;
= L 39.1;
BLD 103;
U "Z1G".A0.IPA;
U(;
L "SIP1".A0L_ACQ.VALAPI;
L 2;
==I;
);
= L 39.2;
BLD 103;
CALL #A0_LANCEMENT (
TABTyp := 10,
LTyp := 1,
AR := L 39.1,
Cmap := L 39.2,
XIPP := "Z1G".A0.XIPP,
DAT := "SIP1".A0L_ACQ.DVEH.DAT,
VALTC := T#30S,
TAB_MAPEx := #A0LDIVHS.CDIV,
TAB_ECH := "SIP1".A0L_ECH,
TAB_ACQ := "SIP1".A0L_ACQ,
DRCAL := #S1A0LDRCAL,
ATCAL := #S1A0LATCAL,
IPOF := "Z1G".A0L.ECHG_A0.IPOF,
MAP := "Z1G".A0L.ECHG_A0.MAP,
FSP := "Z1G".A0L.ECHG_A0.FABSP,
PFB := "Z1G".A0L.ECHG_A0.PFB,
PFM := "Z1G".A0L.ECHG_A0.PFM,
IFC := "Z1G".A0L.ECHG_A0.IFC,
DEF := #S1A0LDLS,
MDEC := #A0LMDEC);
NOP 0;
NETWORK
TITLE =MISE EN FORME DES DONNEES SIPTOL
//MISE EN FORME DES DONNEES SIPTOL
//*ODIL_ID:64523_1014*
//
U "BA1LIEN";
= L 39.0;
U L 39.0;
SPBNB _501;
CALL "BLKMOV" (
SRCBLK := "SIP1".A0L_ACQ.IPAF.TVEH,
RET_VAL := #A0LRETVAL,
DSTBLK := #A0LTVEHPF);
_501: NOP 0;
U L 39.0;
SPBNB _502;
CALL "BLKMOV" (
SRCBLK := "SIP1".A0L_ACQ.IPS.TVEH,
RET_VAL := #A0LRETVAL,
DSTBLK := #A0LTVEHPS);
_502: NOP 0;
NETWORK
TITLE =INITIALISATION DES MOTS AFFICHEURS
//INITIALISATION DES MOTS AFFICHEURS
//*ODIL_ID:64523_1016*
//
U "BA1LIEN";
= L 39.0;
U L 39.0;
SPBNB _503;
L 0;
T #A0LCPAF;
_503: NOP 0;
U L 39.0;
SPBNB _504;
L 0;
T #A0LCPS;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                  PART TO DO                               **
//*******************************************************************************
//

NETWORK
TITLE =PIECE A FAIRE : DIVERSITE 1
//PIECE A FAIRE : DIVERSITE 1
//PERSO : NUMERO CODE PROCESS DIVERSITE 1
//*ODIL_ID:64523_1017*
//
U(;
O "Z1G".A0L.ECHG_A0.IPOF;
O "Z1G".A0L.ECHG_A0.MAP;
);
U "PERSO";
= L 39.0;
U L 39.0;
UN #A0LMDEC;
= #A0LIPFD[1];
U L 39.0;
SPBNB _505;
L 1;
T #A0LCPAF;
_505: NOP 0;
NETWORK
TITLE =PIECE A FAIRE : DIVERSITE 2
//PIECE A FAIRE : DIVERSITE 2
//PERSO : NUMERO CODE PROCESS DIVERSITE 2
//*ODIL_ID:64523_1018*
//
U(;
O "Z1G".A0L.ECHG_A0.IPOF;
O "Z1G".A0L.ECHG_A0.MAP;
);
U "PERSO";
= L 39.0;
U L 39.0;
UN #A0LMDEC;
= #A0LIPFD[2];
U L 39.0;
SPBNB _506;
L 2;
T #A0LCPAF;
_506: NOP 0;
NETWORK
TITLE =PIECE A FAIRE : UNIT SPECIAL
//PIECE A FAIRE : UNIT SPECIAL
//*ODIL_ID:64523_1019*
//
U "Z1G".A0L.ECHG_A0.IPOF;
U #A0LTVEHPF.B0;
= #A0LIPFSPE;
NETWORK
TITLE =
//******************************************************************************
//**                            NEXT PART TO DO                               **
//******************************************************************************
//*ODIL_ID:64523_1020*
//

NETWORK
TITLE =PIECE SUIVANTE : DIVERSITE 1
//PIECE SUIVANTE : DIVERSITE 1
//PERSO : NUMERO CODE PROCESS DIVERSITE 1
//*ODIL_ID:64523_1021*
//
U "Z1G".A0L.ECHG_A0.IPOF;
U "PERSO";
= L 39.0;
U L 39.0;
BLD 102;
= #A0LIPSD[1];
U L 39.0;
SPBNB _507;
L 1;
T #A0LCPS;
_507: NOP 0;
NETWORK
TITLE =PIECE SUIVANTE : DIVERSITE 2
//PIECE SUIVANTE : DIVERSITE 2
//PERSO : NUMERO CODE PROCESS DIVERSITE 2
//*ODIL_ID:64523_1022*
//
U "Z1G".A0L.ECHG_A0.IPOF;
U "PERSO";
= L 39.0;
U L 39.0;
BLD 102;
= #A0LIPSD[2];
U L 39.0;
SPBNB _508;
L 2;
T #A0LCPS;
_508: NOP 0;
NETWORK
TITLE =PIECE SUIVANTE : UNIT SPECIAL
//PIECE SUIVANTE : UNIT SPECIAL
//*ODIL_ID:64523_1023*
//
U "Z1G".A0L.ECHG_A0.IPOF;
U #A0LTVEHPS.B0;
= #A0LIPSSPE;
NETWORK
TITLE =
//*******************************************************************************
//**                SEARCH FOR STRING IN DB AFF AND SEND DATA                  **
//*******************************************************************************
//*ODIL_ID:64523_1024*
//

NETWORK
TITLE =SEARCH STRING TO DISPLAY IN DB AFF
//RECHERCHE DE LA CHAINE DE CARACTERE A AFFICHER DANS LE DB AFF
//*ODIL_ID:64523_1025*
//
CALL #A0L_CARACT (
MODE := 1,
PAF_OF := "SIP1".A0L_ACQ.DVEH.NORDRE,
PS_OF := "SIP1".A0L_ACQ.NORDRE_PS,
M1PAF_CD := #A0LCPAF,
M1PS_CD := #A0LCPS,
M1MsgX := "AFF".A0,
MsgLx := #A0LAFF1_AN.MsgLx,
MajAff := #A0LMAJAFF,
DEF := #S1A0LDCARACT);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        SEND DATA TO SIEBERT DISPLAY                       **
//*******************************************************************************
//*ODIL_ID:64523_1026*
//

NETWORK
TITLE =SIEBERT DISPLAY IP ADRESS
//ADRESSE IP DE L AFFICHEUR SIEBERT DU POSTE
//*ODIL_ID:64523_1028*
//
L B#(
172,25,212,30
);
T #A0LAFF1_AN.IP;
NETWORK
TITLE =SEND DATA TO SIEBERT DISPLAY
//ENVOI DES DONNEES A L AFFICHEUR SIEBERT
//*ODIL_ID:64523_1029*
//
U #A0LMAJAFF;
= L 39.0;
BLD 103;
U #A0LIPFSPE;
= L 39.1;
BLD 103;
U #A0LIPSSPE;
= L 39.2;
BLD 103;
U(;
O "Z1G".A0L.ECHG_A0.PFM;
O;
U "Z1G".A0L.ECHG_A0.FABSP;
U "IG".LIEN_ILOT.ICL;
);
= L 39.3;
BLD 103;
U "Z1G".LIEN_PUP.Itlp;
= L 39.4;
BLD 103;
CALL #A0LAFF1_AN (
ID := 1,
MajAff := L 39.0,
CL_L1 := L 39.1,
CL_L2 := L 39.2,
VDef := L 39.3,
ITL := L 39.4,
Def := #S1A0LDAFF1);
NOP 0;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1A0L"
VERSION : 0.1
"1_A0_LANCEMENT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_T0C_LANCEMENT"
VERSION : 0.1
VAR
  T0C_LANCEMENT : BF_LANCEMENT;	//T0C - SIPTOL DIALOGUE MANAGEMENT / GESTION POINT DE LANCEMENT SIPTOL
  T0CLIPFD : ARRAY  [1 .. 64 ] OF //T0CL - PART TO DO INFORMATION / INFO PIECE A FAIRE
BOOL;
  T0CLIPSD : ARRAY  [1 .. 64 ] OF //T0CL - NEXT PART INFORMATION / INFO PIECE SUIVANTE
BOOL;
  T0CLDIVHS : STRUCT	//T0CL - DIVERSITY CRITERIA LIST / LISTE DES CRITERES DIVERSITES
    CP : INT;	//WITHOUT SIPTOL PROCESS CODE / CODE PROCESS HORS SIPTOL
    CDIV : ARRAY  [1 .. 50 ] OF //WITHOUT SIPTOL DIVERSITYCRITERIA LIST / LISTE CRITERES DIVERSITES HORS SIPTOL
INT;
  END_STRUCT ;
  T0CLTVEHPF : STRUCT	//T0CL - PART TO DO VEHICLE INFO / INFO TYPE VEHICULE PIECE A FAIRE
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;	//FABRICATION SANS PIECE AU FILM
    B0 : BOOL;	//UNIT SPECIAL PIECE A FAIRE
    B1 : BOOL;
    B2 : BOOL;
    B3 : BOOL;
    B4 : BOOL;
    B5 : BOOL;
    B6 : BOOL;
    B7 : BOOL;
  END_STRUCT ;
  T0CLTVEHPS : STRUCT	//T0CL - NEXT PART VEHICLE INFO / INFO TYPE VEHICULE PIECE SUIVANTE
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;	//FABRICATION SANS PIECE AU FILM
    B0 : BOOL;	//UNIT SPECIAL PIECE SUIVANTE
    B1 : BOOL;
    B2 : BOOL;
    B3 : BOOL;
    B4 : BOOL;
    B5 : BOOL;
    B6 : BOOL;
    B7 : BOOL;
  END_STRUCT ;
  IHMSELCDIV : INT;	//HMI - DIVERSITY CODE SELECTION / SELECTION CODE DIVERSITE
  T0CLRETVAL : INT;	//T0CL - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  T0CLNORDRE : INT;	//T0CL - WITHOUT SIPTOL OF NUMBER / NUMERO OF HORS SITPOL
  S1T0CLDLS : BOOL;	//T0CL - SIPTOL LAUNCH FAULT / DEFAUT LANCEMENT SIPTOL
  S1T0CLDRCAL : BOOL;	//T0CL - SERVER ANSWER FAULT / DEFAUT REPONSE CALCULATEUR
  S1T0CLATCAL : BOOL;	//T0CL - WAITING FOR SIPTOL PART PROPOSAL /ATTENTE PROPOSITION CALCULATEUR
  T0CLIPFSPE : BOOL;	//T0CL - PART TO DO SPECIAL UNIT INFO / INFO PIECE A FAIRE UNIT SPECIAL
  T0CLIPSSPE : BOOL;	//T0CL - NEXT PART SPECIAL UNIT INFO / INFO PIECE SUIVANTE UNIT SPECIAL
  T0CLMDEC : BOOL;	//T0CL - DESICION MEMORY / MEMOIRE DE DECISION
  T0CL_CARACT : BF_CARACT_SIEBERT;	//T0C: PREPARE STRING TO DISPLAY / MISE EN FORME DE LA CHAINE A AFFICHER
  S1T0CLDCARACT : BOOL;	//T0CL - BF CARACT FAULT / DEFAUT BF CARACT
  T0CLCPAF : INT;	//T0CL: PART TO DO CODE / CODE PIECE A FAIRE
  T0CLCPS : INT;	//T0CL: NEXT PART CODE / CODE PIECE SUIVANTE
  T0CLAFF1_AN : "BF_AFF SIEBERT (2*13) PN";	//T0CL: SEND DATA TO SIEBERT DISPLAY / ENVOI DES DONNEES A L AFFICHEUR SIEBERT
  S1T0CLDAFF1 : BOOL;	//T0CL - SIEBERT DISPLAY FAULT / DEFAUT AFFICHEUR SIEBERT
  T0CLMAJAFF : BOOL;	//T0CL - SIEBERT DISPLAY UPDATE REQUEST / DEMANDE MISE A JOUR DONNEES AFFICHEUR
END_VAR
BEGIN
NETWORK
TITLE =
//******************************************************************************
//**                      GESTION POINT DE LANCEMENT 03.12                    **
//******************************************************************************
//*ODIL_ID:29062_1000*
//

NETWORK
TITLE =AUTHORIZATION LAUNCH COMPARISON PGF
//AUTORISATION COMPARAISON PGF LANCEMENT
//*ODIL_ID:29062_1001*
//
U "Z1G".T0C.ECHG_T0CL.AC;
U "IIT".T0C.MS.MRCPF;
= #T0C_LANCEMENT.AC;
NETWORK
TITLE =SIPTOL DIALOGUE MANAGEMENT (LAUNCHING)
//GESTION DIALOGUE SIPTOL
//*ODIL_ID:29062_1002*
//
U "Z1G".T0C.ECHG_T0CL.AR;
= L 39.1;
BLD 103;
U "Z1G".T0C.IPA;
U(;
L "SIP1".T0CL_ACQ.VALAPI;
L 2;
==I;
);
= L 39.2;
BLD 103;
CALL #T0C_LANCEMENT (
TABTyp := 10,
LTyp := 1,
AR := L 39.1,
Cmap := L 39.2,
XIPP := "Z1G".T0C.XIPP,
DAT := "SIP1".T0CL_ACQ.DVEH.DAT,
VALTC := T#30S,
TAB_MAPEx := #T0CLDIVHS.CDIV,
TAB_ECH := "SIP1".T0CL_ECH,
TAB_ACQ := "SIP1".T0CL_ACQ,
DRCAL := #S1T0CLDRCAL,
ATCAL := #S1T0CLATCAL,
IPOF := "Z1G".T0CL.ECHG_T0C.IPOF,
MAP := "Z1G".T0CL.ECHG_T0C.MAP,
FSP := "Z1G".T0CL.ECHG_T0C.FABSP,
PFB := "Z1G".T0CL.ECHG_T0C.PFB,
PFM := "Z1G".T0CL.ECHG_T0C.PFM,
IFC := "Z1G".T0CL.ECHG_T0C.IFC,
DEF := #S1T0CLDLS,
MDEC := #T0CLMDEC);
NOP 0;
NETWORK
TITLE =MISE EN FORME DES DONNEES SIPTOL
//MISE EN FORME DES DONNEES SIPTOL
//*ODIL_ID:29062_1014*
//
U "BA1LIEN";
= L 39.0;
U L 39.0;
SPBNB _501;
CALL "BLKMOV" (
SRCBLK := "SIP1".T0CL_ACQ.IPAF.TVEH,
RET_VAL := #T0CLRETVAL,
DSTBLK := #T0CLTVEHPF);
_501: NOP 0;
U L 39.0;
SPBNB _502;
CALL "BLKMOV" (
SRCBLK := "SIP1".T0CL_ACQ.IPS.TVEH,
RET_VAL := #T0CLRETVAL,
DSTBLK := #T0CLTVEHPS);
_502: NOP 0;
NETWORK
TITLE =INITIALISATION DES MOTS AFFICHEURS
//INITIALISATION DES MOTS AFFICHEURS
//*ODIL_ID:29062_1016*
//
U "BA1LIEN";
= L 39.0;
U L 39.0;
SPBNB _503;
L 0;
T #T0CLCPAF;
_503: NOP 0;
U L 39.0;
SPBNB _504;
L 0;
T #T0CLCPS;
_504: NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                                  PART TO DO                               **
//*******************************************************************************
//

NETWORK
TITLE =PIECE A FAIRE : DIVERSITE 1
//PIECE A FAIRE : DIVERSITE 1
//PERSO : NUMERO CODE PROCESS DIVERSITE 1
//*ODIL_ID:29062_1017*
//
U(;
O "Z1G".T0CL.ECHG_T0C.IPOF;
O "Z1G".T0CL.ECHG_T0C.MAP;
);
U "PERSO";
= L 39.0;
U L 39.0;
UN #T0CLMDEC;
= #T0CLIPFD[1];
U L 39.0;
SPBNB _505;
L 1;
T #T0CLCPAF;
_505: NOP 0;
NETWORK
TITLE =PIECE A FAIRE : DIVERSITE 2
//PIECE A FAIRE : DIVERSITE 2
//PERSO : NUMERO CODE PROCESS DIVERSITE 2
//*ODIL_ID:29062_1018*
//
U(;
O "Z1G".T0CL.ECHG_T0C.IPOF;
O "Z1G".T0CL.ECHG_T0C.MAP;
);
U "PERSO";
= L 39.0;
U L 39.0;
UN #T0CLMDEC;
= #T0CLIPFD[2];
U L 39.0;
SPBNB _506;
L 2;
T #T0CLCPAF;
_506: NOP 0;
NETWORK
TITLE =PIECE A FAIRE : UNIT SPECIAL
//PIECE A FAIRE : UNIT SPECIAL
//*ODIL_ID:29062_1019*
//
U "Z1G".T0CL.ECHG_T0C.IPOF;
U #T0CLTVEHPF.B0;
= #T0CLIPFSPE;
NETWORK
TITLE =
//******************************************************************************
//**                            NEXT PART TO DO                               **
//******************************************************************************
//*ODIL_ID:29062_1020*
//

NETWORK
TITLE =PIECE SUIVANTE : DIVERSITE 1
//PIECE SUIVANTE : DIVERSITE 1
//PERSO : NUMERO CODE PROCESS DIVERSITE 1
//*ODIL_ID:29062_1021*
//
U "Z1G".T0CL.ECHG_T0C.IPOF;
U "PERSO";
= L 39.0;
U L 39.0;
BLD 102;
= #T0CLIPSD[1];
U L 39.0;
SPBNB _507;
L 1;
T #T0CLCPS;
_507: NOP 0;
NETWORK
TITLE =PIECE SUIVANTE : DIVERSITE 2
//PIECE SUIVANTE : DIVERSITE 2
//PERSO : NUMERO CODE PROCESS DIVERSITE 2
//*ODIL_ID:29062_1022*
//
U "Z1G".T0CL.ECHG_T0C.IPOF;
U "PERSO";
= L 39.0;
U L 39.0;
BLD 102;
= #T0CLIPSD[2];
U L 39.0;
SPBNB _508;
L 2;
T #T0CLCPS;
_508: NOP 0;
NETWORK
TITLE =PIECE SUIVANTE : UNIT SPECIAL
//PIECE SUIVANTE : UNIT SPECIAL
//*ODIL_ID:29062_1023*
//
U "Z1G".T0CL.ECHG_T0C.IPOF;
U #T0CLTVEHPS.B0;
= #T0CLIPSSPE;
NETWORK
TITLE =
//*******************************************************************************
//**                SEARCH FOR STRING IN DB AFF AND SEND DATA                  **
//*******************************************************************************
//*ODIL_ID:29062_1024*
//

NETWORK
TITLE =SEARCH STRING TO DISPLAY IN DB AFF
//RECHERCHE DE LA CHAINE DE CARACTERE A AFFICHER DANS LE DB AFF
//*ODIL_ID:29062_1025*
//
CALL #T0CL_CARACT (
MODE := 1,
PAF_OF := "SIP1".T0CL_ACQ.DVEH.NORDRE,
PS_OF := "SIP1".T0CL_ACQ.NORDRE_PS,
M1PAF_CD := #T0CLCPAF,
M1PS_CD := #T0CLCPS,
M1MsgX := "AFF".T0C,
MsgLx := #T0CLAFF1_AN.MsgLx,
MajAff := #T0CLMAJAFF,
DEF := #S1T0CLDCARACT);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                        SEND DATA TO SIEBERT DISPLAY                       **
//*******************************************************************************
//*ODIL_ID:29062_1026*
//

NETWORK
TITLE =SIEBERT DISPLAY IP ADRESS
//ADRESSE IP DE L AFFICHEUR SIEBERT DU POSTE
//*ODIL_ID:29062_1028*
//
L B#(
172,25,212,32
);
T #T0CLAFF1_AN.IP;
NETWORK
TITLE =SEND DATA TO SIEBERT DISPLAY
//ENVOI DES DONNEES A L AFFICHEUR SIEBERT
//*ODIL_ID:29062_1029*
//
U #T0CLMAJAFF;
= L 39.0;
BLD 103;
U #T0CLIPFSPE;
= L 39.1;
BLD 103;
U #T0CLIPSSPE;
= L 39.2;
BLD 103;
U(;
O "Z1G".T0CL.ECHG_T0C.PFM;
O;
U "Z1G".T0CL.ECHG_T0C.FABSP;
U "IG".LIEN_ILOT.ICL;
);
= L 39.3;
BLD 103;
U "Z1G".LIEN_PUP.Itlp;
= L 39.4;
BLD 103;
CALL #T0CLAFF1_AN (
ID := 1,
MajAff := L 39.0,
CL_L1 := L 39.1,
CL_L2 := L 39.2,
VDef := L 39.3,
ITL := L 39.4,
Def := #S1T0CLDAFF1);
NOP 0;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1T0CL"
VERSION : 0.1
"1_T0C_LANCEMENT"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_G0_MARIAGE"
VERSION : 0.1
VAR
  MARIAGE_G0E0 : BF_MARIAGE_API;	//G0M - MATCHING MANAGEMENT / GESTION MARIAGE
  E0_TM : STRUCT	//G0M - MATCHNIG TABLE E0 / TABLE MARIAGE E0
    FILM : INT;	//NUEMRO DE FILM
    NORDRE : INT;	//NUMERO D'ORDRE
    DIV : INT;	//DIVERITE
  END_STRUCT ;
  DEC_MAR_G0E0 : STRUCT	//G0M - MATCHING DECISIONS / DECISIONS MARIAGE
    COMP_OK : BOOL;	//COMPARAISON OK
    COMP_NOK : BOOL;	//COMPARAISON NOK
    MAR_OK : BOOL;	//MARIAGE OK
    MAR_NOK : BOOL;	//DISCORDANCE MARIAGE
    SORT_G0 : BOOL;	//EVACUATION PIECE G0
    SORT_E0 : BOOL;	//EVACUATION PIECE E0
    DPMA : BOOL;	//DEFAUT PARAMETRES MARIAGE
  END_STRUCT ;
  MARIAGE_G0T0D : BF_MARIAGE_API;	//G0M - MATCHING MANAGEMENT / GESTION MARIAGE
  T0D_TM : STRUCT	//G0M - MATCHNIG TABLE T0D / TABLE MARIAGE T0D
    FILM : INT;	//NUEMRO DE FILM
    NORDRE : INT;	//NUMERO D'ORDRE
    DIV : INT;	//DIVERITE
  END_STRUCT ;
  DEC_MAR_G0T0D : STRUCT	//G0M - MATCHING DECISIONS / DECISIONS MARIAGE
    COMP_OK : BOOL;	//COMPARAISON OK
    COMP_NOK : BOOL;	//COMPARAISON NOK
    MAR_OK : BOOL;	//MARIAGE OK
    MAR_NOK : BOOL;	//DISCORDANCE MARIAGE
    SORT_G0 : BOOL;	//EVACUATION PIECE G0
    SORT_T0D : BOOL;	//EVACUATION PIECE T0D
    DPMA : BOOL;	//DEFAUT PARAMETRES MARIAGE
  END_STRUCT ;
  G0_TM : STRUCT	//G0M - MATCHNIG TABLE G0 / TABLE MARIAGE G0
    FILM : INT;	//NUEMRO DE FILM
    NORDRE : INT;	//NUMERO D'ORDRE
    DIV : INT;	//DIVERITE
  END_STRUCT ;
  G0_SVDTAB : STRUCT	//G0M - LAST PART TABLE / TABLE PIECE PASSEE
    FILM : INT;	//NUEMRO DE FILM
    NORDRE : INT;	//NUMERO D'ORDRE
    DIV : INT;	//DIVERITE
  END_STRUCT ;
  G0MRETVAL : INT;	//G0M - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  G0MHFILM : BOOL;	//G0M - MATCHING WITHOUT SFC / MARIAGE HORS FILM
  G0MAMG : BOOL;	//G0M - GENERAL MATCHING AUTHORIZATION / AUTORISATION DE MARIAGE GENERALE
  G0MANG : BOOL;	//G0M - GENERAL NETRALIZATION AUTHORIZATION / AUTOR NEUTRALISATION GENERAL
  G0MCSTFA : BOOL;	//G0M - CONDITIONS WITHOUT WORK FLOW A / CONDITIONS SANS TRAVAIL FLUX A
  G0MCSTFB : BOOL;	//G0M - CONDITIONS WITHOUT WORK FLOW B / CONDITIONS SANS TRAVAIL FLUX B
  G0MCSTFC : BOOL;	//G0M - CONDITIONS WITHOUT WORK FLOW C / CONDITIONS SANS TRAVAIL FLUX C
  S1G0DPMA : BOOL;	//G0M - MATCHING SETTING FAULT / DEFAUT PARAMETRES MARIAGE
  S1G0DMA : BOOL;	//G0M - MATCHING FAULT / DEFAUT MARIAGE
  IHMBDS_FA : BOOL;	//IHM - REQUEST FOR EJECTING FLOW A / DEMANDE DE SORTIE FLUX A
  IHMBDS_FB : BOOL;	//IHM - REQUEST FOR EJECTING FLOW B / DEMANDE DE SORTIE FLUX B
  IHMBDS_FC : BOOL;	//IHM - REQUEST FOR EJECTING FLOW C / DEMANDE DE SORTIE FLUX C
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                      GESTION POINT DE MARIAGE 03.61              **
//*******************************************************************************
//*ODIL_ID:14842_1000*
//

NETWORK
TITLE =INITIALIZATION OF IDENTIFICATION TABLE
//INITIALISATION DES TABLES D'IDENTIFICATION
//*ODIL_ID:14842_1001*
//
U "BA1LIEN";
= L 0.0;
U L 0.0;
SPBNB _501;
CALL "FILL" (
BVAL := "IG".VALEUR0,
RET_VAL := #G0MRETVAL,
BLK := #G0_TM);
_501: NOP 0;
U L 0.0;
SPBNB _502;
CALL "FILL" (
BVAL := "IG".VALEUR0,
RET_VAL := #G0MRETVAL,
BLK := #E0_TM);
_502: NOP 0;
U L 0.0;
SPBNB _503;
CALL "FILL" (
BVAL := "IG".VALEUR0,
RET_VAL := #G0MRETVAL,
BLK := #T0D_TM);
_503: NOP 0;
NETWORK
TITLE =IDENTIFICATION TABLE FLOW A
//TABLE D'IDENTIFICATION FLUX A
//*ODIL_ID:14842_1002*
//
U "IIT".G0.MS.MSP;
= L 0.0;
U L 0.0;
SPBNB _504;
L "IIT".G0.NFILM;
T #G0_TM.FILM;
_504: NOP 0;
U L 0.0;
SPBNB _505;
L "IIT".G0.NORDRE;
T #G0_TM.NORDRE;
_505: NOP 0;
NETWORK
TITLE =IDENTIFICATION TABLE FLOW X E0
//TABLE D'IDENTIFICATION FLUX X E0
//*ODIL_ID:11659_1003*
//
U "IIT".E0.MS.MSP;
= L 0.0;
U L 0.0;
SPBNB _506;
L "IIT".E0.NFILM;
T #E0_TM.FILM;
_506: NOP 0;
U L 0.0;
SPBNB _507;
L "IIT".E0.NORDRE;
T #E0_TM.NORDRE;
_507: NOP 0;
NETWORK
TITLE =IDENTIFICATION TABLE FLOW X T0D
//TABLE D'IDENTIFICATION FLUX X T0D
//*ODIL_ID:28664_1003*
//
U "IIT".T0D.MS.MSP;
= L 0.0;
U L 0.0;
SPBNB _508;
L "IIT".T0D.NFILM;
T #T0D_TM.FILM;
_508: NOP 0;
U L 0.0;
SPBNB _509;
L "IIT".T0D.NORDRE;
T #T0D_TM.NORDRE;
_509: NOP 0;
NETWORK
TITLE =MATCHING NETRALIZATION AUTORIZATION
//AUTORISATION DE NEUTRALISATION MARIAGE
//*ODIL_ID:14842_1005*
//
O "Z1G".G0.ECHG_G0M.AN;
O "Z1G".E0.ECHG_G0M.AN;
O "Z1G".T0D.ECHG_G0M.AN;
= #G0MANG;
NETWORK
TITLE =MATCHING AUTORIZATION
//AUTORISATION DE MARIAGE
//*ODIL_ID:14842_1006*
//
U "Z1G".G0.ECHG_G0M.AM;
U "Z1G".E0.ECHG_G0M.AM;
U "Z1G".T0D.ECHG_G0M.AM;
= #G0MAMG;
NETWORK
TITLE =MATCHING WITHOUT SFC
//MARIAGE HORS FILM
//*ODIL_ID:14842_1007*
//
U(;
L "IIT".G0.NFILM;
L 99;
==I;
);
U(;
L "IIT".E0.NFILM;
L 99;
==I;
);
U(;
L "IIT".T0D.NFILM;
L 99;
==I;
);
= #G0MHFILM;
NETWORK
TITLE =WITHOUT WORKS CONDITIONS
//CONDITIONS SANS TRAVAIL
//*ODIL_ID:14842_1008*
//
U "BA1LIEN";
= L 0.0;
U L 0.0;
U "PERSO";
= #G0MCSTFA;
U L 0.0;
U "PERSO";
= #G0MCSTFB;
U L 0.0;
U "PERSO";
= #G0MCSTFC;
NETWORK
TITLE =MATCHING 03.61: G0 - E0
//MARIAGE 03.61: G0 - E0
//*ODIL_ID:11659_1009*
//
U #G0MANG;
= L 0.0;
BLD 103;
U #G0MANG;
= L 0.1;
BLD 103;
U #G0MAMG;
= L 0.2;
BLD 103;
U #G0MAMG;
= L 0.3;
BLD 103;
U #G0MHFILM;
= L 0.4;
BLD 103;
U #IHMBDS_FA;
= L 0.5;
BLD 103;
U #IHMBDS_FB;
= L 0.6;
BLD 103;
U #G0MCSTFA;
= L 0.7;
BLD 103;
U #G0MCSTFB;
= L 1.0;
BLD 103;
CALL #MARIAGE_G0E0 (
An_fa := L 0.0,
An_fb := L 0.1,
Am_fa := L 0.2,
Am_fb := L 0.3,
Hfilm := L 0.4,
Bds_fa := L 0.5,
Bds_fb := L 0.6,
Sp_fa := L 0.7,
Sp_fb := L 1.0,
Table_fa := #G0_TM,
Sv_dtab := #G0_SVDTAB,
Comp_ok := #DEC_MAR_G0E0.COMP_OK,
Comp_nok := #DEC_MAR_G0E0.COMP_NOK,
Mar_ab := #DEC_MAR_G0E0.MAR_OK,
Sort_fa := #DEC_MAR_G0E0.SORT_G0,
Sort_fb := #DEC_MAR_G0E0.SORT_E0,
Dfma_ab := #DEC_MAR_G0E0.MAR_NOK,
Def := #DEC_MAR_G0E0.DPMA);
NOP 0;
NETWORK
TITLE =MATCHING 03.61: G0 - T0D
//MARIAGE 03.61: G0 - T0D
//*ODIL_ID:28664_1009*
//
U #G0MANG;
= L 0.0;
BLD 103;
U #G0MANG;
= L 0.1;
BLD 103;
U #G0MAMG;
= L 0.2;
BLD 103;
U #G0MAMG;
= L 0.3;
BLD 103;
U #G0MHFILM;
= L 0.4;
BLD 103;
U #IHMBDS_FA;
= L 0.5;
BLD 103;
U #IHMBDS_FB;
= L 0.6;
BLD 103;
U #G0MCSTFA;
= L 0.7;
BLD 103;
U #G0MCSTFB;
= L 1.0;
BLD 103;
CALL #MARIAGE_G0T0D (
An_fa := L 0.0,
An_fb := L 0.1,
Am_fa := L 0.2,
Am_fb := L 0.3,
Hfilm := L 0.4,
Bds_fa := L 0.5,
Bds_fb := L 0.6,
Sp_fa := L 0.7,
Sp_fb := L 1.0,
Table_fa := #G0_TM,
Sv_dtab := #G0_SVDTAB,
Comp_ok := #DEC_MAR_G0T0D.COMP_OK,
Comp_nok := #DEC_MAR_G0T0D.COMP_NOK,
Mar_ab := #DEC_MAR_G0T0D.MAR_OK,
Sort_fa := #DEC_MAR_G0T0D.SORT_G0,
Sort_fb := #DEC_MAR_G0T0D.SORT_T0D,
Dfma_ab := #DEC_MAR_G0T0D.MAR_NOK,
Def := #DEC_MAR_G0T0D.DPMA);
NOP 0;
NETWORK
TITLE =MATCHING SETTING FAULT
//DEFAUT PARAMETRES MARIAGE
//PERSO : UNIQUEMENT POUR MARIAGE 3 FLUX
//*ODIL_ID:14842_1011*
//
O #DEC_MAR_G0E0.DPMA;
O #DEC_MAR_G0T0D.DPMA;
= #S1G0DPMA;
NETWORK
TITLE =MATCHING FAULT
//DEFAUT MARIAGE
//PERSO : UNIQUEMENT POUR MARIAGE 3 FLUX
//*ODIL_ID:14842_1012*
//
O #DEC_MAR_G0E0.MAR_NOK;
O #DEC_MAR_G0T0D.MAR_NOK;
= "Z1G".G0M.DEC_MAR.MAR_NOK;
= #S1G0DMA;
NETWORK
TITLE =MATCHING OK
//MARIAGE OK
//PERSO : UNIQUEMENT POUR MARIAGE 3 FLUX
//*ODIL_ID:14842_1013*
//
U #DEC_MAR_G0E0.MAR_OK;
U #DEC_MAR_G0T0D.MAR_OK;
= "Z1G".G0M.DEC_MAR.MAR_OK;
NETWORK
TITLE =EJECT PARTS DECISIONS
//DECISIONS SORTIES PIECES
//PERSO : UNIQUEMENT POUR MARIAGE 3 FLUX
//*ODIL_ID:14842_1014*
//
U "BA1LIEN";
= L 0.0;
U L 0.0;
U(;
O #DEC_MAR_G0E0.SORT_G0;
O #DEC_MAR_G0T0D.SORT_G0;
);
= "Z1G".G0M.DEC_MAR.SORT_G0;
U L 0.0;
U #DEC_MAR_G0E0.SORT_E0;
= "Z1G".G0M.DEC_MAR.SORT_E0;
U L 0.0;
U #DEC_MAR_G0T0D.SORT_T0D;
= "Z1G".G0M.DEC_MAR.SORT_T0D;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1G0M"
VERSION : 0.1
"1_G0_MARIAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_G0_RECALAGE"
VERSION : 0.1
VAR
  G0_RECALAGE : BF_RECALAGE2;	//G0 - GESTION POINT DE RECALAGE SIPTOL
  TAB_FILM : STRUCT	//G0R - TABLE FILM RECALAGE
    FILM : INT;	//TABLE SIPTOL : NUMERO FILM
    NORDRE : INT;	//TABLE SIPTOL : NUMERO ORDRE
    DIV1 : INT;	//TABLE SIPTOL : DIVERSITE MOT 1
    DIV2 : INT;	//TABLE SIPTOL : DIVERSITE MOT 2
    DIV3 : INT;	//TABLE SIPTOL : DIVERSITE MOT 3
    DIV4 : INT;	//TABLE SIPTOL : DIVERSITE MOT 4
    FAMPH : INT;	//TABLE SIPTOL : FAMILLE / PHASE
    CSFI : INT;	//TABLE SIPTOL : CAUSE SORTIE FINALE
  END_STRUCT ;
  TAB_PIECE : STRUCT	//G0R - TABLE FLUX RECALAGE
    FILM : INT;	//TABLE PIECE : NUMERO FILM
    NORDRE : INT;	//TABLE PIECE : NUMERO ORDRE
    DIV1 : INT;	//TABLE PIECE : DIVERSITE MOT 1
    DIV2 : INT;	//TABLE PIECE : DIVERSITE MOT 2
    DIV3 : INT;	//TABLE PIECE : DIVERSITE MOT 3
    DIV4 : INT;	//TABLE PIECE : DIVERSITE MOT 4
    FAMPH : INT;	//TABLE PIECE : FAMILLE / PHASE
    CSFI : INT;	//TABLE PIECE : CAUSE SORTIE FINALE
  END_STRUCT ;
  G0RDINJ : STRUCT	//G0R - INFORMATION DEMANDE D'INJECTION SIPTOL
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;
    B0 : BOOL;	//DEMANDE D'INJECTION
    B1 : BOOL;
    B2 : BOOL;
    B3 : BOOL;
    B4 : BOOL;
    B5 : BOOL;
    B6 : BOOL;
    B7 : BOOL;
  END_STRUCT ;
  G0RDSORT : STRUCT	//G0R - INFORMATION DEMANDE DE SORTIE SIPTOL
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;
    B0 : BOOL;	//DEMANDE DE SORTIE
    B1 : BOOL;
    B2 : BOOL;
    B3 : BOOL;
    B4 : BOOL;
    B5 : BOOL;
    B6 : BOOL;
    B7 : BOOL;
  END_STRUCT ;
  G0RCSFI : STRUCT	//G0R - INFORMATION CAUSE DE SORTIE FINALE SIPTOL
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;
    B0 : BOOL;	//STOCK DE SUBSTITUTION
    B1 : BOOL;	//MPR
    B2 : BOOL;	//CONTROLE GEOMETRIQUE
    B3 : BOOL;	//UNIT SEUL
    B4 : BOOL;	//MAP
    B5 : BOOL;	//CKD
    B6 : BOOL;
    B7 : BOOL;
  END_STRUCT ;
  G0RMODELE : STRUCT	//G0R - INFORMATION MODELE SIPTOL
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;	//FABRICATION SANS PIECE AU FILM
    B0 : BOOL;
    B1 : BOOL;
    B2 : BOOL;
    B3 : BOOL;
    B4 : BOOL;
    B5 : BOOL;
    B6 : BOOL;
    B7 : BOOL;
  END_STRUCT ;
  G0RTVEHPF : STRUCT	//G0R - INFORMATION TYPE VEHICULE PIECE A FAIRE SIPTOL
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;	//FABRICATION SANS PIECE AU FILM
    B0 : BOOL;	//UNIT SPECIAL
    B1 : BOOL;
    B2 : BOOL;
    B3 : BOOL;
    B4 : BOOL;
    B5 : BOOL;
    B6 : BOOL;
    B7 : BOOL;
    G0RRETVAL : INT;	//G0R - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  END_STRUCT ;
  XNCSP : STRUCT	//G0R - AUXILLIAIRE NUMERO MESSAGE CAUSE SORTIE PIECE
    B8 : BOOL;
    B9 : BOOL;
    B10 : BOOL;
    B11 : BOOL;
    B12 : BOOL;
    B13 : BOOL;
    B14 : BOOL;
    B15 : BOOL;
    B0 : BOOL;	//STOCK SUBSTITUTION
    B1 : BOOL;	//MPR
    B2 : BOOL;	//CONTROLE GEOMETRIQUE
    B3 : BOOL;	//UNIT SEUL
    B4 : BOOL;	//MAP
    B5 : BOOL;	//CKD
    B6 : BOOL;	//CONTROLE DESTRUCTIF
    B7 : BOOL;
  END_STRUCT ;
  G0RRETVAL : INT;	//G0R - RETURN VALUE FOR SFC20 / MOT POUBELLE POUR LA FONCTION SFC20
  G0RNUMDF : INT;	//G0R - NUMERO DE DEFAUT RECALAGE
  IHMNCSP : INT;	//IHMP: NUMERO DE MESSAGE CAUSE SORTIE PIECE
  G0RRMDEC : BOOL;	//G0R - RAZ MEMOIRE DECISION RECALAGE
  S1G0RDRCAL : BOOL;	//G0R - DEFAUT REPONSE CALCULATEUR
  S1G0RATCAL : BOOL;	//G0R - ATTENTE PROPOSITION CALCULATEUR
  S1G0RDINJ : BOOL;	//G0R - WAIT OPERATOR PART TO INSERT OR EJECT / ATTENTE OP PIECE INJECTER/SORTIR
  S1G0RDI : BOOL;	//G0R - WAIT OPERATOR PART MISMATCH / ATTENTE OP DISCORDANCE
  S1G0RDSORT : BOOL;	//G0R - WAIT OPERATOR PART MISMATCH / ATTENTE OP DISCORDANCE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                      GESTION POINT DE RECALAGE 03.13                      **
//*******************************************************************************
//*ODIL_ID:14842_1000*
//

NETWORK
TITLE =MONITORING: RECYCLING POINT OPERATOR CALL INFORMATIONS
//SMP: INFORMATIONS APPELS OPERATEURS SUR RECALAGE
//*ODIL_ID:14842_1050*
//
U "BA1LIEN";
= L 0.0;
U L 0.0;
U "Z1G".G0R.IDOPINJ;
UN "Z1G".G0R.IDOPDI;
= #S1G0RDINJ;
U L 0.0;
U "Z1G".G0R.IDOPSORT;
UN "Z1G".G0R.IDOPDI;
= #S1G0RDSORT;
U L 0.0;
U "Z1G".G0R.IDOPDI;
= #S1G0RDI;
NETWORK
TITLE =
//MISE EN FORME DES DONNEES DU BLOC D'ECHANGE SIPTOL
//*ODIL_ID:14842_1001*
//
U "BA1LIEN";
= L 1.0;
U L 1.0;
SPBNB _501;
CALL "BLKMOV" (
SRCBLK := "SIP1".G0R_ECH.DINJ,
RET_VAL := #G0RRETVAL,
DSTBLK := #G0RDINJ);
_501: NOP 0;
U L 1.0;
SPBNB _502;
CALL "BLKMOV" (
SRCBLK := "SIP1".G0R_ECH.DSORT,
RET_VAL := #G0RRETVAL,
DSTBLK := #G0RDSORT);
_502: NOP 0;
U L 1.0;
SPBNB _503;
CALL "BLKMOV" (
SRCBLK := "SIP1".G0R_ECH.DVEH.CSFI,
RET_VAL := #G0RRETVAL,
DSTBLK := #G0RCSFI);
_503: NOP 0;
U L 1.0;
SPBNB _504;
CALL "BLKMOV" (
SRCBLK := "SIP1".G0R_ECH.DVEH.MODELE,
RET_VAL := #G0RRETVAL,
DSTBLK := #G0RMODELE);
_504: NOP 0;
U L 1.0;
SPBNB _505;
CALL "BLKMOV" (
SRCBLK := "SIP1".G0R_ECH.IPAF.TVEH,
RET_VAL := #G0RRETVAL,
DSTBLK := #G0RTVEHPF);
_505: NOP 0;
NETWORK
TITLE =DEMANDE DE RECALAGE SIPTOL
//DEMANDE DE RECALAGE SIPTOL
//*ODIL_ID:14842_1002*
//
U "BA1LIEN";
= L 1.0;
U L 1.0;
U #G0RDINJ.B0;
= #G0_RECALAGE.Dem_sip.dinjsip;
U L 1.0;
U #G0RDSORT.B0;
= #G0_RECALAGE.Dem_sip.dsortsip;
U L 1.0;
U #G0RCSFI.B3;
= #G0_RECALAGE.Dem_sip.sunissip;
U L 1.0;
U(;
O #G0RMODELE.B15;
O #G0RTVEHPF.B15;
);
= #G0_RECALAGE.Dem_sip.fspfsip;
NETWORK
TITLE =
//CREATION TABLE FILM POUR BF RECALAGE
//*ODIL_ID:14842_1003*
//
U "BA1LIEN";
= L 1.0;
U L 1.0;
SPBNB _506;
L "SIP1".G0R_ECH.DVEH.FILM;
T #TAB_FILM.FILM;
_506: NOP 0;
U L 1.0;
SPBNB _507;
L "SIP1".G0R_ECH.DVEH.NORDRE;
T #TAB_FILM.NORDRE;
_507: NOP 0;
U L 1.0;
SPBNB _508;
L 0;
T #TAB_FILM.DIV1;
_508: NOP 0;
U L 1.0;
SPBNB _509;
L 0;
T #TAB_FILM.DIV2;
_509: NOP 0;
U L 1.0;
SPBNB _510;
L 0;
T #TAB_FILM.DIV3;
_510: NOP 0;
U L 1.0;
SPBNB _511;
L 0;
T #TAB_FILM.DIV4;
_511: NOP 0;
U L 1.0;
SPBNB _512;
L 0;
T #TAB_FILM.FAMPH;
_512: NOP 0;
U L 1.0;
SPBNB _513;
L "SIP1".G0R_ECH.DVEH.CSFI;
T #TAB_FILM.CSFI;
_513: NOP 0;
NETWORK
TITLE =
//CREATION TABLE PIECE POUR BF RECALAGE
//*ODIL_ID:14842_1004*
//
U "BA1LIEN";
= L 1.0;
U L 1.0;
SPBNB _514;
L "IIT".G0.NFILM;
T #TAB_PIECE.FILM;
_514: NOP 0;
U L 1.0;
SPBNB _515;
L "IIT".G0.NORDRE;
T #TAB_PIECE.NORDRE;
_515: NOP 0;
U L 1.0;
SPBNB _516;
L 0;
T #TAB_PIECE.DIV1;
_516: NOP 0;
U L 1.0;
SPBNB _517;
L 0;
T #TAB_PIECE.DIV2;
_517: NOP 0;
U L 1.0;
SPBNB _518;
L 0;
T #TAB_PIECE.DIV3;
_518: NOP 0;
U L 1.0;
SPBNB _519;
L 0;
T #TAB_PIECE.DIV4;
_519: NOP 0;
U L 1.0;
SPBNB _520;
L 0;
T #TAB_PIECE.FAMPH;
_520: NOP 0;
NETWORK
TITLE =CREATION MOT INTERMEDIAIRE ROUTAGE API
//CREATION MOT INTERMEDIAIRE ROUTAGE API
//*ODIL_ID:14842_1006*
//
U "BA1LIEN";
= L 1.0;
U L 1.0;
U "BA0";
= #G0_RECALAGE.Rout_api.Raretrb;
U L 1.0;
U "IIT".G0.CRAPI.RARET;
= #G0_RECALAGE.Rout_api.Raretam;
U L 1.0;
U "BA0";
= #G0_RECALAGE.Rout_api.Rarettr;
NETWORK
TITLE =
//GESTION RECALAGE SIPTOL
//*ODIL_ID:14842_1007*
//
U "BA1";
= L 0.0;
BLD 103;
U "Z1G".G0.ECHG_G0R.AC;
= L 0.1;
BLD 103;
U "Z1G".G0.ECHG_G0R.AC_TR;
= L 0.2;
BLD 103;
U "Z1G".G0.ECHG_G0R.AR;
= L 0.3;
BLD 103;
U "Z1G".G0.ECHG_G0R.AR_TR;
= L 0.4;
BLD 103;
U #G0RRMDEC;
= L 0.5;
BLD 103;
CALL #G0_RECALAGE (
NB_Div := 1,
Av_ok := L 0.0,
Comp_am := L 0.1,
Comp_tr := L 0.2,
Rep_av := L 0.3,
Rep_tr := L 0.4,
Tab_film := #TAB_FILM,
Tab_piec := #TAB_PIECE,
Raz_mdec := L 0.5,
Modcy := "Z1G".G0R.MODCY,
ValTC := T#30S,
Drcal := #S1G0RDRCAL,
Atcal := #S1G0RATCAL,
Apopinj := "Z1G".G0R.IDOPINJ,
Apopsort := "Z1G".G0R.IDOPSORT,
Apopdec := "Z1G".G0R.IDOPDI,
Etat_div := "Z1G".G0R.ETAT_DIV,
Dec_op := "Z1G".G0R.DEC_OP,
Inf_recal := "Z1G".G0R.INF_RECAL,
Memdec := "Z1G".G0R.MEMDEC,
Vdfce := "Z1G".G0R.VDFCE,
Vdpie := "Z1G".G0R.VDPIE,
Val_api := "SIP1".G0R_ECH.VALAPI,
Val_cal := "SIP1".G0R_ECH.VALCAL,
Etflux := "SIP1".G0R_ECH.ETFLUX);
NOP 0;
NETWORK
TITLE =MEMOIRE PIECE FLUX NORMAL
//*ODIL_ID:14842_1009*
//
U #G0_RECALAGE.Autmajmp;
= L 1.0;
U L 1.0;
U "Z1G".G0R.MEMDEC.MDFNOR;
S "IIT".G0.MGEST.MPFNOR;
U L 1.0;
U "Z1G".G0R.MEMDEC.MDSPDI;
S "IIT".G0.MGEST.MPSDI;
U L 1.0;
U "Z1G".G0R.MEMDEC.MDSOR;
S "IIT".G0.MGEST.MPSOR;
U L 1.0;
U "Z1G".G0R.MEMDEC.MDSL;
S "IIT".G0.MGEST.MPSL;
U L 1.0;
U "Z1G".G0R.MEMDEC.MDSORCV;
S "IIT".G0.MGEST.MPOCV;
U L 1.0;
U "Z1G".G0R.MEMDEC.MDSMA;
S "IIT".G0.MGEST.MPSF99;
NETWORK
TITLE =MEMOIRE GESTION RECALAGE : SORTIE TOUT CAS
//MEMOIRE GESTION RECALAGE : SORTIE TOUT CAS
//*ODIL_ID:14842_1012*
//
O "IIT".G0.MGEST.MPSDI;
O "IIT".G0.MGEST.MPSOR;
O "IIT".G0.MGEST.MPSL;
O "IIT".G0.MGEST.MPOCV;
O "IIT".G0.MGEST.MPSF99;
S "IIT".G0.MGEST.MPSTC;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1G0R"
VERSION : 0.1
"1_G0_RECALAGE"
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "1_G0_VISU"
VERSION : 0.1
VAR
  G0R_PILE_PAF : BF_FIFO;
  G0R_PILE_PP : BF_FIFO;
  PILE_PF : ARRAY  [1 .. 5 ] OF //G0R_VISU - DONNEE ENTREE PILE PIECE A FAIRE
INT;
  SPILE_PF : ARRAY  [1 .. 5 ] OF //G0R_VISU - DONNEE SORTIE PILE PIECE A FAIRE
INT;
  PILE_PP : ARRAY  [1 .. 5 ] OF //G0R_VISU - DONNEE ENTREE PILE PIECE PASSEE
INT;
  SPILE_PP : ARRAY  [1 .. 5 ] OF //G0R_VISU - DONNEE SORTIE PILE PIECE PASSEE
INT;
  G0RMDATE : BOOL;	//G0R_VISU - MEMOIRE DEMANDE VISUALISATION TABLE ENCOURS
  IHMTRAFRAI : BOOL;	//IHM - TOUCHE RACHAICHISSEMENT TRAME SIPTOL
  VALCALOK : BOOL;	//G0R_VISU - VALCAL OK ( VALCAL = 1 et VALAPI = 0)
  VALAPIOK : BOOL;	//G0R_VISU - VALAPI OK ( VALAPI = 1 et VALCAL = 0)
  ATPPF : BOOL;	//G0R_VISU - AUTORISATION TRAVAIL PILE PIECE A FAIRE
  ATPPP : BOOL;	//G0R_VISU - AUTORISATION TRAVAIL PILE PIECE PASSEE
  XF_ATPPF : BOOL;	//G0R_VISU - AUXILIAIRE AUTORISATION TRAVAILL PILE PIECE A FAIRE
  XF_ATPPP : BOOL;	//G0R_VISU - AUXILIAIRE AUTORISATION TRAVAILL PILE PIECE PASSEE
  MDEPILE : BOOL;	//G0R_VISU - MEMOIRE DEPILAGE
END_VAR
BEGIN
NETWORK
TITLE =
//*******************************************************************************
//**                      VISU POINT DE RECALAGE 03.13                    **
//*******************************************************************************
//*ODIL_ID:14842_1000*
//

NETWORK
TITLE =VALIDATION CALCULATEUR OK
//VALIDATION CALCULATEUR OK
//*ODIL_ID:14842_1001*
//
U(;
L "SIP1".G0R_VISU.VALAPI;
L 0;
==I;
);
U(;
L "SIP1".G0R_VISU.VALCAL;
L 1;
==I;
);
= #VALCALOK;
NETWORK
TITLE =VALIDATION API OK
//VALIDATION API OK
//*ODIL_ID:14842_1002*
//
U(;
L "SIP1".G0R_VISU.VALAPI;
L 1;
==I;
);
U(;
L "SIP1".G0R_VISU.VALCAL;
L 0;
==I;
);
= #VALAPIOK;
NETWORK
TITLE =DEMANDE DE VISUALISATION TABLE D'ENCOURS PIECE A FAIRE
//DEMANDE DE VISUALISATION TABLE D'ENCOURS PIECE A FAIRE
//*ODIL_ID:14842_1003*
//
U #VALCALOK;
U(;
O "Z1G".G0R.ETAT_DIV.PFMAM;
O "Z1G".G0R.ETAT_DIV.PFMTR;
);
UN #G0RMDATE;
O #IHMTRAFRAI;
= L 1.0;
U L 1.0;
SPBNB _501;
L 0;
T "SIP1".G0R_VISU.VALCAL;
_501: NOP 0;
U L 1.0;
SPBNB _502;
L 1;
T "SIP1".G0R_VISU.VALAPI;
_502: NOP 0;
U L 1.0;
BLD 102;
S #G0RMDATE;
NETWORK
TITLE =RESET MEMOIRE DEMANDE VISUALISATION TABLE D'ENCOURS PIECE A FAIR
//RESET MEMOIRE DEMANDE VISUALISATION TABLE D'ENCOURS PIECE A FAIRE
//*ODIL_ID:14842_1004*
//
U(;
O "Z1G".G0R.ETAT_DIV.PFBAM;
O "Z1G".G0R.ETAT_DIV.PFBTR;
);
U #G0RMDATE;
R #G0RMDATE;
NETWORK
TITLE =
//*******************************************************************************
//**                            VISU : PIECE A FAIRE                           **
//*******************************************************************************
//*ODIL_ID:14842_1005*
//

NETWORK
TITLE =AUTORISATION TRAVAIL PILE PIECE A FAIRE
//AUTORISATION TRAVAIL PILE PIECE A FAIRE
//PERSO : AJOUTER LA MPP DU QUATRIEME POSTE EN AMONT
//*ODIL_ID:14842_1006*
//
U "PERSO";
BLD 100;
FP #XF_ATPPF;
= #ATPPF;
NETWORK
TITLE =CHARGEMENT DE LA PILE PIECE A FAIRE
//CHARGEMENT DE LA PILE PIECE A FAIRE
//PERSO : REMPLACER G0TALO PAR TALO DU QUATRIEME POSTE EN AMONT
//*ODIL_ID:14842_1007*
//
U "PERSO";
U #ATPPF;
= L 1.0;
U L 1.0;
SPBNB _503;
L "IIT".G0.NFILM;
T #PILE_PF[1];
_503: NOP 0;
U L 1.0;
SPBNB _504;
L "IIT".G0.NORDRE;
T #PILE_PF[2];
_504: NOP 0;
NETWORK
TITLE =EMPILAGE PILE PIECE A FAIRE
//EMPILAGE PILE PIECE A FAIRE
//*ODIL_ID:14842_1008*
//
U #ATPPF;
UN #G0R_PILE_PAF.P_Pleine;
= #G0R_PILE_PAF.Empile;
NETWORK
TITLE =DEPILAGE PILE PIECE A FAIRE
//DEPILAGE PILE PIECE A FAIRE
//PERSO : MPP DU POSTE SUIVANT LE PGF RECALAGE
//*ODIL_ID:14842_1009*
//
UN "IIT".G0.MS.MSP;
U "Z1G".G0R.MEMDEC.MDEC;
= #G0R_PILE_PAF.Depile;
NETWORK
TITLE =INITIALISATION PILE FIFO
//INITIALISATION PILE FIFO
//*ODIL_ID:14842_1010*
//
U(;
L "PILE".G0R_PLUS.N.FILM;
L 0;
==D;
);
U(;
L "PILE".G0R_PLUS.N1.FILM;
L 0;
==D;
);
U(;
L "PILE".G0R_PLUS.N2.FILM;
L 0;
==D;
);
U(;
L "PILE".G0R_PLUS.N3.FILM;
L 0;
==D;
);
= #G0R_PILE_PAF.InitPile;
NETWORK
TITLE =PILE PIECE A FAIRE
//PILE PIECE A FAIRE
//*ODIL_ID:14842_1011*
//
CALL #G0R_PILE_PAF (
NbEleMax := 5,
Entree := #PILE_PF,
Sortie := #SPILE_PF,
Pile := "PILE".G0R_PLUS,
ValInit := W#16#FFFF);
NOP 0;
NETWORK
TITLE =
//*******************************************************************************
//**                            VISU : PIECE PASSEE                            **
//*******************************************************************************
//*ODIL_ID:14842_1012*
//

NETWORK
TITLE =AUTORISATION TRAVAIL PILE PIECE PASSEE
//AUTORISATION TRAVAIL PILE PIECE PASSEE
U "IIT".G0.MS.MSP;
BLD 100;
FP #XF_ATPPP;
= #ATPPP;
NETWORK
TITLE =CHARGEMENT DE LA PILE PIECE PASSEE
//CHARGEMENT DE LA PILE PIECE PASSEE
//*ODIL_ID:14842_1013*
//
U #ATPPP;
= L 1.0;
U L 1.0;
SPBNB _505;
L "IIT".G0.NFILM;
T #PILE_PP[1];
_505: NOP 0;
U L 1.0;
SPBNB _506;
L "IIT".G0.NORDRE;
T #PILE_PP[2];
_506: NOP 0;
NETWORK
TITLE =EMPILAGE PILE PIECE PASSEE
//EMPILAGE PILE PIECE PASSEE
//PERSO : MPP DU POSTE SUIVANT LE PGF RECALAGE
//*ODIL_ID:14842_1014*
//
UN "IIT".G0.MS.MSP;
U "Z1G".G0R.MEMDEC.MDEC;
U #MDEPILE;
= #G0R_PILE_PP.Empile;
R #MDEPILE;
NETWORK
TITLE =DEPILAGE PILE PIECE PASSEE
//DEPILAGE PILE PIECE PASSEE
//*ODIL_ID:14842_1015*
//
UN "IIT".G0.MS.MSP;
UN "Z1G".G0R.MEMDEC.MDEC;
= L 0.0;
U L 0.0;
U #G0R_PILE_PP.P_Pleine;
= #G0R_PILE_PP.Depile;
U L 0.0;
BLD 102;
S #MDEPILE;
NETWORK
TITLE =INITIALISATION PILE FIFO
//INITIALISATION PILE FIFO
//*ODIL_ID:14842_1016*
//
U(;
L "PILE".G0R_MOINS.N1.FILM;
L 0;
==D;
);
U(;
L "PILE".G0R_MOINS.N2.FILM;
L 0;
==D;
);
= #G0R_PILE_PP.InitPile;
NETWORK
TITLE =PILE PIECE PASSEE M1
//*ODIL_ID:14842_1017*
//
CALL #G0R_PILE_PP (
NbEleMax := 2,
Entree := #PILE_PP,
Sortie := #SPILE_PP,
Pile := "PILE".G0R_MOINS,
ValInit := W#16#FFFF);
NOP 0;
END_FUNCTION_BLOCK

DATA_BLOCK "Z1G0V"
VERSION : 0.1
"1_G0_VISU"
BEGIN
END_DATA_BLOCK

FUNCTION "0_00_CYCLE_ILOT" : VOID
TITLE =FACILITY: CYCLIC DEFINITION
//0_00_CYCLE_ILOT
//*ODIL_ID:2_1000*
//
VERSION : 0.1
BEGIN
NETWORK
TITLE =CALL ILOT FB
//0_01_ILOT
//*ODIL_ID:2_1001*
//
CALL "0_01_ILOT" , "I01";
NOP 0;
NETWORK
TITLE =CALL MMC FB
//0_02_MMC
//*ODIL_ID:2_1002*
//
CALL "0_02_MMC" , "I02";
NOP 0;
NETWORK
TITLE =CALL XOP FB
//0_03_XOP
//*ODIL_ID:2_1003*
//
CALL "0_03_XOP" , "I03";
NOP 0;
NETWORK
TITLE =CALL COM FB
//0_04_COM
//*ODIL_ID:2_1004*
//
CALL "0_04_COM" , "I04";
NOP 0;
END_FUNCTION

FUNCTION "1_00_CYCLE_Z1" : VOID
TITLE =Définition cyclique Zona 1
//1_00_CYCLE_Z1
//*ODIL_ID:76_0*
//
VERSION : 0.1
BEGIN
NETWORK
TITLE =CALL ZONE Zona 1 FB
//Z1_00_ZONE_Z1
//*ODIL_ID:76_1*
//
CALL "1_00_ZONE1" , "Z1";
NOP 0;
NETWORK
TITLE =CALL Dispositivo A0
//Z1_A0_Dispositivo
//*ODIL_ID:64523_A0_2*
//
CALL "1_A0_MONTAGE" , "Z1A0";
NOP 0;
NETWORK
TITLE =CALL MONTAGE A01
//Z1_A01_MONTAGE
//*ODIL_ID:70386_A01_5*
//
CALL "1_A01_MONTAGE" , "Z1A01";
NOP 0;
NETWORK
TITLE =CALL MONTAGE A02
//Z1_A02_MONTAGE
//*ODIL_ID:74623_A02_5*
//
CALL "1_A02_MONTAGE" , "Z1A02";
NOP 0;
NETWORK
TITLE =CALL LANCEMENT A0
//Z1_A0_LANCEMENT
//*ODIL_ID:65742_A0_5*
//
CALL "1_A0_LANCEMENT" , "Z1A0L";
NOP 0;
NETWORK
TITLE =CALL Operador protegido A1
//Z1_A1_Operador protegido
//*ODIL_ID:4169_A1_2*
//
CALL "1_A1_OP_BPVAL" , "Z1A1";
NOP 0;
NETWORK
TITLE =CALL Operador protegido A2
//Z1_A2_Operador protegido
//*ODIL_ID:4523_A2_2*
//
CALL "1_A2_OP_BPVAL" , "Z1A2";
NOP 0;
NETWORK
TITLE =CALL Robô Renault B0
//Z1_B0_Robô Renault
//*ODIL_ID:4876_B0_2*
//
CALL "1_B0_ROBOT" , "Z1B0";
NOP 0;
NETWORK
TITLE =CALL Repouso B0R
//Z1_B0R_Repouso
//*ODIL_ID:75769_B0R_5*
//
CALL "1_B0R_Repouso" , "Z1B0R";
NOP 0;
NETWORK
TITLE =CALL PREHENSEUR B01
//Z1_B01_PREHENSEUR
//*ODIL_ID:50891_B01_5*
//
CALL "1_B01_PREHENSEUR" , "Z1B01";
NOP 0;
NETWORK
TITLE =CALL PREHENSEUR B02
//Z1_B02_PREHENSEUR
//*ODIL_ID:85000_B02_5*
//
CALL "1_B02_PREHENSEUR" , "Z1B02";
NOP 0;
NETWORK
TITLE =CALL Sob-conjunto C0
//Z1_C0_Sob-conjunto
//*ODIL_ID:5930_C0_2*
//
CALL "1_C0_FERRAMENTA" , "Z1C0";
NOP 0;
NETWORK
TITLE =CALL MONTAGEM C01
//Z1_C01_MONTAGEM
//*ODIL_ID:64280_C01_5*
//
CALL "1_C01_MONTAGEM" , "Z1C01";
NOP 0;
NETWORK
TITLE =CALL MONTAGEM C02
//Z1_C02_MONTAGEM
//*ODIL_ID:84758_C02_5*
//
CALL "1_C02_MONTAGEM" , "Z1C02";
NOP 0;
NETWORK
TITLE =CALL Robô Renault C1
//Z1_C1_Robô Renault
//*ODIL_ID:7224_C1_2*
//
CALL "1_C1_ROBOT" , "Z1C1";
NOP 0;
NETWORK
TITLE =CALL Robô Renault C3
//Z1_C3_Robô Renault
//*ODIL_ID:8278_C3_2*
//
CALL "1_C3_ROBOT" , "Z1C3";
NOP 0;
NETWORK
TITLE =CALL Robô Renault D0
//Z1_D0_Robô Renault
//*ODIL_ID:9332_D0_2*
//
CALL "1_D0_ROBOT" , "Z1D0";
NOP 0;
NETWORK
TITLE =CALL PREHENSEUR D01
//Z1_D01_PREHENSEUR
//*ODIL_ID:54867_D01_5*
//
CALL "1_D01_PREHENSEUR" , "Z1D01";
NOP 0;
NETWORK
TITLE =CALL Dispositivo E0
//Z1_E0_Dispositivo
//*ODIL_ID:10386_E0_2*
//
CALL "1_E0_MONTAGE" , "Z1E0";
NOP 0;
NETWORK
TITLE =CALL Robô Renault E1
//Z1_E1_Robô Renault
//*ODIL_ID:11680_E1_2*
//
CALL "1_E1_ROBOT" , "Z1E1";
NOP 0;
NETWORK
TITLE =CALL Robô Renault E2
//Z1_E2_Robô Renault
//*ODIL_ID:12734_E2_2*
//
CALL "1_E2_ROBOT" , "Z1E2";
NOP 0;
NETWORK
TITLE =CALL Robô Renault F0
//Z1_F0_Robô Renault
//*ODIL_ID:13788_F0_2*
//
CALL "1_F0_ROBOT" , "Z1F0";
NOP 0;
NETWORK
TITLE =CALL PREHENSEUR F01
//Z1_F01_PREHENSEUR
//*ODIL_ID:55464_F01_5*
//
CALL "1_F01_PREHENSEUR" , "Z1F01";
NOP 0;
NETWORK
TITLE =CALL Dispositivo F9
//Z1_F9_Dispositivo
//*ODIL_ID:82078_F9_2*
//
CALL "1_F9_MONTAGE" , "Z1F9";
NOP 0;
NETWORK
TITLE =CALL Dispositivo G0
//Z1_G0_Dispositivo
//*ODIL_ID:14842_G0_2*
//
CALL "1_G0_MONTAGE" , "Z1G0";
NOP 0;
NETWORK
TITLE =CALL MARIAGE G0
//Z1_G0_MARIAGE
//*ODIL_ID:16098_G0_5*
//
CALL "1_G0_MARIAGE" , "Z1G0M";
NOP 0;
NETWORK
TITLE =CALL VISU G0
//Z1_G0_VISU
//*ODIL_ID:16078_G0_5*
//
CALL "1_G0_VISU" , "Z1G0V";
NOP 0;
NETWORK
TITLE =CALL RECALAGE G0
//Z1_G0_RECALAGE
//*ODIL_ID:16070_G0_5*
//
CALL "1_G0_RECALAGE" , "Z1G0R";
NOP 0;
NETWORK
TITLE =CALL Robô Renault G1
//Z1_G1_Robô Renault
//*ODIL_ID:16136_G1_2*
//
CALL "1_G1_ROBOT" , "Z1G1";
NOP 0;
NETWORK
TITLE =CALL Robô Renault G2
//Z1_G2_Robô Renault
//*ODIL_ID:18244_G2_2*
//
CALL "1_G2_ROBOT" , "Z1G2";
NOP 0;
NETWORK
TITLE =CALL Robô Renault G3
//Z1_G3_Robô Renault
//*ODIL_ID:17190_G3_2*
//
CALL "1_G3_ROBOT" , "Z1G3";
NOP 0;
NETWORK
TITLE =CALL Robô Renault G4
//Z1_G4_Robô Renault
//*ODIL_ID:19298_G4_2*
//
CALL "1_G4_ROBOT" , "Z1G4";
NOP 0;
NETWORK
TITLE =CALL Robô Renault H0
//Z1_H0_Robô Renault
//*ODIL_ID:20352_H0_2*
//
CALL "1_H0_ROBOT" , "Z1H0";
NOP 0;
NETWORK
TITLE =CALL PREHENSEUR H01
//Z1_H01_PREHENSEUR
//*ODIL_ID:56061_H01_5*
//
CALL "1_H01_PREHENSEUR" , "Z1H01";
NOP 0;
NETWORK
TITLE =CALL Posto carretamento do rack T0C
//Z1_T0C_Posto carretamento do rack
//*ODIL_ID:29062_T0C_2*
//
CALL "1_T0C_CHGT_MEUBLE" , "Z1T0C";
NOP 0;
NETWORK
TITLE =CALL LANCEMENT T0C
//Z1_T0C_LANCEMENT
//*ODIL_ID:29374_T0C_5*
//
CALL "1_T0C_LANCEMENT" , "Z1T0CL";
NOP 0;
NETWORK
TITLE =CALL Posto para descarregar rack T0D
//Z1_T0D_Posto para descarregar rack
//*ODIL_ID:28116_T0D_2*
//
CALL "1_T0D_DCHGT_MEUBL" , "Z1T0D";
NOP 0;
NETWORK
TITLE =CALL Operador protegido T1
//Z1_T1_Operador protegido
//*ODIL_ID:29448_T1_2*
//
CALL "1_T1_OP_BPVAL" , "Z1T1";
NOP 0;
NETWORK
TITLE =CALL Robô Renault U0
//Z1_U0_Robô Renault
//*ODIL_ID:21406_U0_2*
//
CALL "1_U0_ROBOT" , "Z1U0";
NOP 0;
NETWORK
TITLE =CALL Repouso U0R
//Z1_U0R_Repouso
//*ODIL_ID:76371_U0R_5*
//
CALL "1_U0R_Repouso" , "Z1U0R";
NOP 0;
NETWORK
TITLE =CALL PREHENSEUR U01
//Z1_U01_PREHENSEUR
//*ODIL_ID:56827_U01_5*
//
CALL "1_U01_PREHENSEUR" , "Z1U01";
NOP 0;
NETWORK
TITLE =CALL PREHENSEUR U02
//Z1_U02_PREHENSEUR
//*ODIL_ID:84879_U02_5*
//
CALL "1_U02_PREHENSEUR" , "Z1U02";
NOP 0;
NETWORK
TITLE =CALL Dispositivo U9
//Z1_U9_Dispositivo
//*ODIL_ID:83417_U9_2*
//
CALL "1_U9_MONTAGE" , "Z1U9";
NOP 0;
END_FUNCTION

ORGANIZATION_BLOCK "CYCL_EXC"
TITLE ="MAIN PROGRAM SWEEP (CYCLE)"
VERSION : 0.1
VAR_TEMP
  OB1_EV_CLASS : BYTE;	//BITS 0-3 = 1 (COMING EVENT), BITS 4-7 = 1 (EVENT CLASS 1)
  OB1_SCAN_1 : BYTE;	//1 (COLD RESTART SCAN 1 OF OB1), 3 (SCAN 2-N OF OB1)
  OB1_PRIORITY : BYTE;	//PRIORITY OF OB EXECUTION
  OB1_OB_NUMBR : BYTE;	//1 (ORGANIZATION BLOCK 1, OB1)
  OB1_RESERVED_1 : BYTE;	//RESERVED FOR SYSTEM
  OB1_RESERVED_2 : BYTE;	//RESERVED FOR SYSTEM
  OB1_PREV_CYCLE : INT;	//CYCLE TIME OF PREVIOUS OB1 SCAN (MILLISECONDS)
  OB1_MIN_CYCLE : INT;	//MIMIMUM CYCLE TIME OF OB1 (MILLISECONDS)
  OB1_MAX_CYCLE : INT;	//MAXIMUM CYCLE TIME OF OB1 (MILLISECONDS)
  OB1_DATE_TIME : DATE_AND_TIME;	//DATA AND TIME OB1 STARTED
  RETVAL : INT;	//Return value for SFC20
END_VAR
BEGIN
NETWORK
TITLE =FIRST CYCLE
//PREMIER CYCLE
//*ODIL_ID:2_10000*
//
L #OB1_SCAN_1;
L 1;
==D;
= "SYSFROID";
NETWORK
TITLE =BIT ALWAYS ON, BIT ALWAYS OFF ...
//BIT TOUJOURS A 1, BIT TOUJOURS A 0 ...
//*ODIL_ID:2_10001*
//
O "BA1";
ON "BA1";
= L 22.0;
U L 22.0;
BLD 102;
= "BA1";
U L 22.0;
BLD 102;
= "BA1LIEN";
U L 22.0;
BLD 102;
= "SHUNT";
U L 22.0;
NOT;
= "BA0";
= "PERSO";
U L 22.0;
SPBNB _001;
L 0;
T "IG".Valeur0;
_001: NOP 0;
NETWORK
TITLE =CALL FC ILOT
//APPEL FC ILOT
//*ODIL_ID:2_10002*
//
CALL "0_00_CYCLE_ILOT";
NOP 0;
NETWORK
TITLE =CALL DIAGNOSYS BLOCK FOR ERROR SYSTEM INFORMATION
//APPEL BLOC DE DIAGNOSTIQUE POUR ERREURS SYSTEME
//*ODIL_ID:2_10004*
//
CALL "SFM_FB" , "SFM_DB";
NOP 0;
NETWORK
TITLE =CALL FC ZONE 1
//APPEL FC ZONE 1
//*ODIL_ID:76_10005*
//
CALL "1_00_CYCLE_Z1";
NOP 0;
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "CYC_INT4"
TITLE ="CYCLIC INTERRUPT"
//INTERRUPTION CYCLIQUE
VERSION : 0.1
VAR_TEMP
  OB34_EV_CLASS : BYTE;	//Bits 0-3 = 1 (Coming event), Bits 4-7 = 1 (Event class 1)
  OB34_STRT_INF : BYTE;	//16#35 (OB 34 has started)
  OB34_PRIORITY : BYTE;	//11 (Priority of 1 is lowest)
  OB34_OB_NUMBR : BYTE;	//34 (Organization block 34, OB34)
  OB34_RESERVED_1 : BYTE;	//Reserved for system
  OB34_RESERVED_2 : BYTE;	//Reserved for system
  OB34_PHASE_OFFSET : WORD;	//Phase offset (msec)
  OB34_RESERVED_3 : INT;	//Reserved for system
  OB34_EXC_FREQ : INT;	//Frequency of execution (msec)
  OB34_DATE_TIME : DATE_AND_TIME;	//Date and time OB34 started
  Time_Begin : TIME;
  Time_End : TIME;
END_VAR
BEGIN
NETWORK
TITLE =CALL SAFETY PROGRAM
//APPEL DU PROGRAMME DE SECURITE
//*ODIL_ID:2_1*
//
CALL "0_00_TSSAFETY";
NOP 0;
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "I/O_FLT1"
TITLE ="I/O POINT FAULT"
VERSION : 0.1
VAR_TEMP
  OB82_EV_CLASS : BYTE;	//16#39, Event class 3, Entering event state, Internal fault event
  OB82_FLT_ID : BYTE;	//16#XX, Fault identifcation code
  OB82_PRIORITY : BYTE;	//26/28 (Priority of 1 is lowest)
  OB82_OB_NUMBR : BYTE;	//82 (Organization block 82, OB82)
  OB82_RESERVED_1 : BYTE;	//Reserved for system
  OB82_IO_FLAG : BYTE;	//Input (01010100), Output (01010101)
  OB82_MDL_ADDR : WORD;	//Base address of module with fault
  OB82_MDL_DEFECT : BOOL;	//Module defective
  OB82_INT_FAULT : BOOL;	//Internal fault
  OB82_EXT_FAULT : BOOL;	//External fault
  OB82_PNT_INFO : BOOL;	//Point information
  OB82_EXT_VOLTAGE : BOOL;	//External voltage low
  OB82_FLD_CONNCTR : BOOL;	//Field wiring connector missing
  OB82_NO_CONFIG : BOOL;	//Module has no configuration data
  OB82_CONFIG_ERR : BOOL;	//Module has configuration error
  OB82_MDL_TYPE : BYTE;	//Type of module
  OB82_SUB_NDL_ERR : BOOL;	//Sub-Module is missing or has error
  OB82_COMM_FAULT : BOOL;	//Communication fault
  OB82_MDL_STOP : BOOL;	//Module is stopped
  OB82_WTCH_DOG_FLT : BOOL;	//Watch dog timer stopped module
  OB82_INT_PS_FLT : BOOL;	//Internal power supply fault
  OB82_PRIM_BATT_FLT : BOOL;	//Primary battery is in fault
  OB82_BCKUP_BATT_FLT : BOOL;	//Backup battery is in fault
  OB82_RESERVED_2 : BOOL;	//Reserved for system
  OB82_RACK_FLT : BOOL;	//Rack fault, only for bus interface module
  OB82_PROC_FLT : BOOL;	//Processor fault
  OB82_EPROM_FLT : BOOL;	//EPROM fault
  OB82_RAM_FLT : BOOL;	//RAM fault
  OB82_ADU_FLT : BOOL;	//ADU fault
  OB82_FUSE_FLT : BOOL;	//Fuse fault
  OB82_HW_INTR_FLT : BOOL;	//Hardware interupt input in fault
  OB82_RESERVED_3 : BOOL;	//Reserved for system
  OB82_DATE_TIME : DATE_AND_TIME;	//Date and time OB82 started
END_VAR
BEGIN
NETWORK
TITLE =Appel module de Signalisation d'erreurs système
//*ODIL_ID:2_1*
//
CALL "SFM_FB" , "SFM_DB";
NOP 0;
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "I/O_FLT2"
TITLE ="I/O Point Fault"
VERSION : 0.1
VAR_TEMP
  OB83_EV_CLASS : BYTE;	//16#38/39, Event class 3, module inserted/removed (8/9)
  OB83_FLT_ID : BYTE;	//16#XX, Fault identifcation code
  OB83_PRIORITY : BYTE;	//26/28 (Priority of 1 is lowest)
  OB83_OB_NUMBR : BYTE;	//83 (Organization block 83, OB83)
  OB83_RESERVED_1 : BYTE;	//Reserved for system
  OB83_MDL_ID : BYTE;	//Input module (01010100), Output module (01010101)
  OB83_MDL_ADDR : WORD;	//Base address of module with point fault
  OB83_RACK_NUM : WORD;	//Number of rack that has module with point fault
  OB83_MDL_TYPE : WORD;	//Module type with point fault
  OB83_DATE_TIME : DATE_AND_TIME;	//Date and time OB83 started
END_VAR
BEGIN
NETWORK
TITLE =Appel module de Signalisation d'erreurs système
//*ODIL_ID:2_1*
//
CALL "SFM_FB" , "SFM_DB";
NOP 0;
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "OBNL_FLT"
TITLE ="Organization Block (OB) Not Loaded Fault"
VERSION : 0.1
VAR_TEMP
  OB85_EV_CLASS : BYTE;	//16#35 Event class 3
  OB85_FLT_ID : BYTE;	//16#XX, Fault identification code
  OB85_PRIORITY : BYTE;	//26 (Priority of 1 is lowest)
  OB85_OB_NUMBR : BYTE;	//85 (Organization block 85, OB85)
  OB85_RESERVED_1 : BYTE;	//Reserved for system
  OB85_RESERVED_2 : BYTE;	//Reserved for system
  OB85_RESERVED_3 : INT;	//Reserved for system
  OB85_ERR_EV_CLASS : BYTE;	//Class of event causing error
  OB85_ERR_EV_NUM : BYTE;	//Number of event causing error
  OB85_OB_PRIOR : BYTE;	//Priority of OB causing error
  OB85_OB_NUM : BYTE;	//Number of OB causing error
  OB85_DATE_TIME : DATE_AND_TIME;	//Date and time OB85 started
END_VAR
BEGIN
NETWORK
TITLE =SFM: Traitement d'erreurs de Signalisation d'erreurs système
//Différencier le traitement selon l'occurrence de l'erreur
//*ODIL_ID:2_1*
//
L B#16#A1; // Occurrence d'une erreur en raison d'un OB non chargé
L #OB85_FLT_ID;
==I;
SPB K_OB;
L B#16#A2; // Occurrence d'une erreur en raison d'un OB non chargé
==I;
SPB K_OB;
L B#16#A3; // Erreur d'accès à des blocs non chargés
L #OB85_FLT_ID;
==I;
SPB K_B;
SPA F_PA;
NETWORK
TITLE =SFM: Traitement d'erreurs pour OB non chargé
//Un programme utilisateur peut être appelé à la place du passage de la CPU en STO
//P.
//*ODIL_ID:2_2*
//
K_OB: SPA STOP;
SPA ENDE;
NETWORK
TITLE =SFM: Traitement d'erreurs pour FB ou DB non chargé
//Un programme utilisateur peut être appelé à la place du passage de la CPU en
//STOP.
//*ODIL_ID:2_3*
//
K_B: SPA STOP;
SPA ENDE;
NETWORK
TITLE =SFM: Traitement pour erreurs lors de l'actualisation de la MI
//CPU ne passe pas en STOP, ce problème cause l'appel d'un OB83.
//*ODIL_ID:2_4*
//
F_PA: NOP 0;
SPA ENDE;
NETWORK
TITLE =SFM: Commuter la CPU en Stop
//La CPU va être définitivement arrêtée.
//*ODIL_ID:2_5*
//
STOP: CALL "STP";
NETWORK
TITLE =SFM: Quitter le bloc
//Quitter le bloc ou appeler programme utilisateur
//*ODIL_ID:2_6*
//
ENDE: NOP 0;
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "RACK_FLT"
TITLE ="LOSS OF RACK FAULT"
VERSION : 0.1
VAR_TEMP
  OB86_EV_CLASS : BYTE;	//16#38/39 Event class 3
  OB86_FLT_ID : BYTE;	//16#C1/C4/C5, Fault identification code
  OB86_PRIORITY : BYTE;	//26/28 (Priority of 1 is lowest)
  OB86_OB_NUMBR : BYTE;	//86 (Organization block 86, OB86)
  OB86_RESERVED_1 : BYTE;	//Reserved for system
  OB86_RESERVED_2 : BYTE;	//Reserved for system
  OB86_MDL_ADDR : WORD;	//Depending on fault identification code
  OB86_RACKS_FLTD : ARRAY  [0 .. 31 ] OF BOOL;	//Racks in fault
  OB86_DATE_TIME : DATE_AND_TIME;	//Date and time OB86 started
END_VAR
BEGIN
NETWORK
TITLE =CALL ERROR SYSTEM MANAGEMENT PROGRAM
//*ODIL_ID:2_1*
//
CALL "SFM_FB" , "SFM_DB";
NOP 0;
NETWORK
TITLE =CALL FB PROFINET NETWORK DIAGNOSTIC
//*ODIL_ID:2_2*
//
U "BA1LIEN";
= L 20.1;
BLD 103;
CALL "BF_DIAG_PROFINET" , "DB_PN" (
P_IHMP := L 20.1,
DB_SFM := "SFM_PN");
NOP 0;
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "COMPLETE RESTART"
TITLE ="COMPLETE RESTART"
//EXECUTION SUR REDEMARRAGE A CHAUD
VERSION : 0.1
VAR_TEMP
  OB100_EV_CLASS : BYTE;	//16#13, Event class 1, Entering event state, Event logged in diagnostic buffer
  OB100_STRTUP : BYTE;	//16#81/82/83/84 Method of startup
  OB100_PRIORITY : BYTE;	//27 (Priority of 1 is lowest)
  OB100_OB_NUMBR : BYTE;	//100 (Organization block 100, OB100)
  OB100_RESERVED_1 : BYTE;	//Reserved for system
  OB100_RESERVED_2 : BYTE;	//Reserved for system
  OB100_STOP : WORD;	//Event that caused CPU to stop (16#4xxx)
  OB100_STRT_INFO : DWORD;	//Information on how system started
  OB100_DATE_TIME : DATE_AND_TIME;	//Date and time OB100 started
  RETVAL : INT;	//RETURN RESULT VALUE FROM SFC21
END_VAR
BEGIN
NETWORK
TITLE =CALL FB PROFINET NETWORK DIAGNOSTIC
//APPEL DU FB DIAGNOSTIQUE RESEAU PROFINET
//*ODIL_ID:2_10100*
//
U "BA1LIEN";
= L 30.0;
BLD 103;
CALL "BF_DIAG_PROFINET" , "DB_PN" (
P_IHMP := L 30.0,
DB_SFM := "SFM_PN");
NOP 0;
NETWORK
TITLE =RESET FACILITY LINK IN FACILITY GLOBAL DB
//RAZ DU MOT LIEN ILOT
//*ODIL_ID:2_10101*
//
CALL "FILL" (
BVAL := "IG".VALEUR0,
RET_VAL := #RETVAL,
BLK := "IG".LIEN_ILOT);
NOP 0;
NETWORK
TITLE =RESET ZONE Z1 GLOBAL DB
//RAZ DU DB Z1 G (DB GLOBAL ZONE)
//*ODIL_ID:76_10102*
//
CALL "FILL" (
BVAL := "IG".VALEUR0,
RET_VAL := #RETVAL,
BLK := "Z1G");
NOP 0;
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "MOD_ERR"
TITLE ="Module Access Error"
VERSION : 0.1
VAR_TEMP
  OB122_EV_CLASS : BYTE;	//16#29, Event class 2, Entering event state, Internal fault event
  OB122_SW_FLT : BYTE;	//16#XX Software error code
  OB122_PRIORITY : BYTE;	//Priority of OB Execution
  OB122_OB_NUMBR : BYTE;	//122 (Organization block 122, OB122)
  OB122_BLK_TYPE : BYTE;	//16#88/8C/8E Type of block fault occured in
  OB122_MEM_AREA : BYTE;	//Memory area where access error occured
  OB122_MEM_ADDR : WORD;	//Memory address where access error occured
  OB122_BLK_NUM : WORD;	//Block number in which error occured
  OB122_PRG_ADDR : WORD;	//Program address where error occured
  OB122_DATE_TIME : DATE_AND_TIME;	//Date and time OB1 started
END_VAR
BEGIN
NETWORK
TITLE =

END_ORGANIZATION_BLOCK

